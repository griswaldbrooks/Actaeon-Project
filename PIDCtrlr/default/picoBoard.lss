
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  00001be6  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000006f0  00000000  00000000  00001cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000017a0  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000810  00000000  00000000  00003b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001391  00000000  00000000  00004366  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000500  00000000  00000000  000056f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000962  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e35  00000000  00000000  0000655a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_3>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_5>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_16>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__c.2150>:
      68:	09 2c 00                                            .,.

0000006b <__c.2148>:
      6b:	09 2c 00                                            .,.

0000006e <HexChars>:
      6e:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf ef       	ldi	r28, 0xFF	; 255
      86:	d4 e0       	ldi	r29, 0x04	; 4
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	e2 e7       	ldi	r30, 0x72	; 114
      94:	fb e1       	ldi	r31, 0x1B	; 27
      96:	02 c0       	rjmp	.+4      	; 0x9c <.do_copy_data_start>

00000098 <.do_copy_data_loop>:
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0

0000009c <.do_copy_data_start>:
      9c:	a0 30       	cpi	r26, 0x00	; 0
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <.do_copy_data_loop>

000000a2 <__do_clear_bss>:
      a2:	12 e0       	ldi	r17, 0x02	; 2
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a2 30       	cpi	r26, 0x02	; 2
      ae:	b1 07       	cpc	r27, r17
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
      b6:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_default>

000000be <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	7b 01       	movw	r14, r22
      c8:	8c 01       	movw	r16, r24
	u16 duty;
	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	52 e4       	ldi	r21, 0x42	; 66
      d2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
      d6:	18 16       	cp	r1, r24
      d8:	5c f4       	brge	.+22     	; 0xf0 <wheel_l+0x32>
      da:	0f 2e       	mov	r0, r31
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	ef 2e       	mov	r14, r31
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	ff 2e       	mov	r15, r31
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0f 2f       	mov	r16, r31
      e8:	f2 e4       	ldi	r31, 0x42	; 66
      ea:	1f 2f       	mov	r17, r31
      ec:	f0 2d       	mov	r31, r0
      ee:	14 c0       	rjmp	.+40     	; 0x118 <wheel_l+0x5a>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
      f0:	c8 01       	movw	r24, r16
      f2:	b7 01       	movw	r22, r14
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	52 ec       	ldi	r21, 0xC2	; 194
      fc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     100:	88 23       	and	r24, r24
     102:	54 f4       	brge	.+20     	; 0x118 <wheel_l+0x5a>
     104:	0f 2e       	mov	r0, r31
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	ef 2e       	mov	r14, r31
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	ff 2e       	mov	r15, r31
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	0f 2f       	mov	r16, r31
     112:	f2 ec       	ldi	r31, 0xC2	; 194
     114:	1f 2f       	mov	r17, r31
     116:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     118:	c8 01       	movw	r24, r16
     11a:	b7 01       	movw	r22, r14
     11c:	22 e4       	ldi	r18, 0x42	; 66
     11e:	3e e3       	ldi	r19, 0x3E	; 62
     120:	48 e7       	ldi	r20, 0x78	; 120
     122:	5f eb       	ldi	r21, 0xBF	; 191
     124:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     128:	2c e8       	ldi	r18, 0x8C	; 140
     12a:	32 ed       	ldi	r19, 0xD2	; 210
     12c:	48 eb       	ldi	r20, 0xB8	; 184
     12e:	53 e4       	ldi	r21, 0x43	; 67
     130:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     134:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixunssfsi>
     138:	dc 01       	movw	r26, r24
     13a:	cb 01       	movw	r24, r22
     13c:	0e 94 1e 04 	call	0x83c	; 0x83c <PWM_timer1_Set_Pin9>
}
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	ff 90       	pop	r15
     146:	ef 90       	pop	r14
     148:	08 95       	ret

0000014a <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	7b 01       	movw	r14, r22
     154:	8c 01       	movw	r16, r24
	u16 duty;
	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	52 e4       	ldi	r21, 0x42	; 66
     15e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     162:	18 16       	cp	r1, r24
     164:	5c f4       	brge	.+22     	; 0x17c <wheel_r+0x32>
     166:	0f 2e       	mov	r0, r31
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ef 2e       	mov	r14, r31
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	ff 2e       	mov	r15, r31
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	0f 2f       	mov	r16, r31
     174:	f2 e4       	ldi	r31, 0x42	; 66
     176:	1f 2f       	mov	r17, r31
     178:	f0 2d       	mov	r31, r0
     17a:	14 c0       	rjmp	.+40     	; 0x1a4 <wheel_r+0x5a>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     17c:	c8 01       	movw	r24, r16
     17e:	b7 01       	movw	r22, r14
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	52 ec       	ldi	r21, 0xC2	; 194
     188:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	54 f4       	brge	.+20     	; 0x1a4 <wheel_r+0x5a>
     190:	0f 2e       	mov	r0, r31
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	ef 2e       	mov	r14, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	ff 2e       	mov	r15, r31
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	0f 2f       	mov	r16, r31
     19e:	f2 ec       	ldi	r31, 0xC2	; 194
     1a0:	1f 2f       	mov	r17, r31
     1a2:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     1a4:	c8 01       	movw	r24, r16
     1a6:	b7 01       	movw	r22, r14
     1a8:	24 ef       	ldi	r18, 0xF4	; 244
     1aa:	3c e6       	ldi	r19, 0x6C	; 108
     1ac:	4e e8       	ldi	r20, 0x8E	; 142
     1ae:	5f e3       	ldi	r21, 0x3F	; 63
     1b0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     1b4:	27 e0       	ldi	r18, 0x07	; 7
     1b6:	3f e1       	ldi	r19, 0x1F	; 31
     1b8:	4b eb       	ldi	r20, 0xBB	; 187
     1ba:	53 e4       	ldi	r21, 0x43	; 67
     1bc:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     1c0:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixunssfsi>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	0e 94 23 04 	call	0x846	; 0x846 <PWM_timer1_Set_Pin10>
}
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	08 95       	ret

000001d6 <pwm_setup>:
#define LEFT_WHEEL_TIMEOUT		0.15	// sec
#define M_2PIR					31.4159	// Constant for convering from cycles per second to cm/sec

void pwm_setup(void){

	PWM_timer1_On_Pin9();
     1d6:	0e 94 08 04 	call	0x810	; 0x810 <PWM_timer1_On_Pin9>
	PWM_timer1_On_Pin10();
     1da:	0e 94 11 04 	call	0x822	; 0x822 <PWM_timer1_On_Pin10>

	// 20 ms period
	timer1PWMInitICR(5000);
     1de:	88 e8       	ldi	r24, 0x88	; 136
     1e0:	93 e1       	ldi	r25, 0x13	; 19
     1e2:	0e 94 ba 03 	call	0x774	; 0x774 <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     1e6:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     1e8:	22 9a       	sbi	0x04, 2	; 4
}
     1ea:	08 95       	ret

000001ec <setup_hardware>:

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     1ec:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     1ee:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     1f0:	0e 94 90 09 	call	0x1320	; 0x1320 <uartInit>
	uartSetBaudRate(0,115200);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	52 ec       	ldi	r21, 0xC2	; 194
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 6f 07 	call	0xede	; 0xede <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     202:	84 eb       	ldi	r24, 0xB4	; 180
     204:	97 e0       	ldi	r25, 0x07	; 7
     206:	0e 94 ac 04 	call	0x958	; 0x958 <rprintfInit>

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     20a:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     20c:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     20e:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     210:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     212:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     214:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     216:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     218:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	0e 94 3f 04 	call	0x87e	; 0x87e <init_timer0>
	init_timer1(TIMER_CLK_64);
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	0e 94 4d 04 	call	0x89a	; 0x89a <init_timer1>
	pwm_setup();
     226:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     22a:	e8 e6       	ldi	r30, 0x68	; 104
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	84 60       	ori	r24, 0x04	; 4
     232:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     234:	ad e6       	ldi	r26, 0x6D	; 109
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	8c 91       	ld	r24, X
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     23e:	80 81       	ld	r24, Z
     240:	81 60       	ori	r24, 0x01	; 1
     242:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     244:	eb e6       	ldi	r30, 0x6B	; 107
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	81 60       	ori	r24, 0x01	; 1
     24c:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     24e:	80 81       	ld	r24, Z
     250:	80 61       	ori	r24, 0x10	; 16
     252:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     254:	80 81       	ld	r24, Z
     256:	80 62       	ori	r24, 0x20	; 32
     258:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     25a:	78 94       	sei

}
     25c:	08 95       	ret

0000025e <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     25e:	2f 92       	push	r2
     260:	3f 92       	push	r3
     262:	4f 92       	push	r4
     264:	5f 92       	push	r5
     266:	6f 92       	push	r6
     268:	7f 92       	push	r7
     26a:	8f 92       	push	r8
     26c:	9f 92       	push	r9
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	e8 97       	sbiw	r28, 0x38	; 56
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
	float error_l;

	float v_l;
	float v_r;
	
	setup_hardware();
     292:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setup_hardware>
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	2d a3       	std	Y+37, r18	; 0x25
     2a0:	3e a3       	std	Y+38, r19	; 0x26
     2a2:	4f a3       	std	Y+39, r20	; 0x27
     2a4:	58 a7       	std	Y+40, r21	; 0x28
     2a6:	29 a3       	std	Y+33, r18	; 0x21
     2a8:	3a a3       	std	Y+34, r19	; 0x22
     2aa:	4b a3       	std	Y+35, r20	; 0x23
     2ac:	5c a3       	std	Y+36, r21	; 0x24
     2ae:	1d 8e       	std	Y+29, r1	; 0x1d
     2b0:	1e 8e       	std	Y+30, r1	; 0x1e
     2b2:	1f 8e       	std	Y+31, r1	; 0x1f
     2b4:	18 a2       	std	Y+32, r1	; 0x20
     2b6:	19 8e       	std	Y+25, r1	; 0x19
     2b8:	1a 8e       	std	Y+26, r1	; 0x1a
     2ba:	1b 8e       	std	Y+27, r1	; 0x1b
     2bc:	1c 8e       	std	Y+28, r1	; 0x1c
     2be:	2d 8b       	std	Y+21, r18	; 0x15
     2c0:	3e 8b       	std	Y+22, r19	; 0x16
     2c2:	4f 8b       	std	Y+23, r20	; 0x17
     2c4:	58 8f       	std	Y+24, r21	; 0x18
     2c6:	29 8b       	std	Y+17, r18	; 0x11
     2c8:	3a 8b       	std	Y+18, r19	; 0x12
     2ca:	4b 8b       	std	Y+19, r20	; 0x13
     2cc:	5c 8b       	std	Y+20, r21	; 0x14
     2ce:	2d 87       	std	Y+13, r18	; 0x0d
     2d0:	3e 87       	std	Y+14, r19	; 0x0e
     2d2:	4f 87       	std	Y+15, r20	; 0x0f
     2d4:	58 8b       	std	Y+16, r21	; 0x10
     2d6:	29 87       	std	Y+9, r18	; 0x09
     2d8:	3a 87       	std	Y+10, r19	; 0x0a
     2da:	4b 87       	std	Y+11, r20	; 0x0b
     2dc:	5c 87       	std	Y+12, r21	; 0x0c
     2de:	2d 83       	std	Y+5, r18	; 0x05
     2e0:	3e 83       	std	Y+6, r19	; 0x06
     2e2:	4f 83       	std	Y+7, r20	; 0x07
     2e4:	58 87       	std	Y+8, r21	; 0x08
     2e6:	29 83       	std	Y+1, r18	; 0x01
     2e8:	3a 83       	std	Y+2, r19	; 0x02
     2ea:	4b 83       	std	Y+3, r20	; 0x03
     2ec:	5c 83       	std	Y+4, r21	; 0x04
	//PWM_timer1_Set_Pin9(0);
	//PWM_timer1_Set_Pin10(0);
	
/**/
	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     2ee:	0e 94 5f 04 	call	0x8be	; 0x8be <get_timer0_overflow>
     2f2:	16 b5       	in	r17, 0x26	; 38
     2f4:	2f ef       	ldi	r18, 0xFF	; 255
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__mulsi3>
     300:	61 0f       	add	r22, r17
     302:	71 1d       	adc	r23, r1
     304:	81 1d       	adc	r24, r1
     306:	91 1d       	adc	r25, r1
     308:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
     30c:	2e e0       	ldi	r18, 0x0E	; 14
     30e:	3d e2       	ldi	r19, 0x2D	; 45
     310:	42 e3       	ldi	r20, 0x32	; 50
     312:	5d e3       	ldi	r21, 0x3D	; 61
     314:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e4       	ldi	r19, 0x40	; 64
     31c:	4c e1       	ldi	r20, 0x1C	; 28
     31e:	56 e4       	ldi	r21, 0x46	; 70
     320:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     324:	69 a7       	std	Y+41, r22	; 0x29
     326:	7a a7       	std	Y+42, r23	; 0x2a
     328:	8b a7       	std	Y+43, r24	; 0x2b
     32a:	9c a7       	std	Y+44, r25	; 0x2c
		
		l_count_current = get_left_count();
     32c:	0e 94 43 0a 	call	0x1486	; 0x1486 <get_left_count>
     330:	7b 01       	movw	r14, r22
     332:	8c 01       	movw	r16, r24
		r_count_current = get_right_count();
     334:	0e 94 4c 0a 	call	0x1498	; 0x1498 <get_right_count>
     338:	6d ab       	std	Y+53, r22	; 0x35
     33a:	7e ab       	std	Y+54, r23	; 0x36
     33c:	8f ab       	std	Y+55, r24	; 0x37
     33e:	98 af       	std	Y+56, r25	; 0x38

		
		

		if(l_count_current != l_count_previous){
     340:	8d 8d       	ldd	r24, Y+29	; 0x1d
     342:	9e 8d       	ldd	r25, Y+30	; 0x1e
     344:	af 8d       	ldd	r26, Y+31	; 0x1f
     346:	b8 a1       	ldd	r27, Y+32	; 0x20
     348:	e8 16       	cp	r14, r24
     34a:	f9 06       	cpc	r15, r25
     34c:	0a 07       	cpc	r16, r26
     34e:	1b 07       	cpc	r17, r27
     350:	09 f4       	brne	.+2      	; 0x354 <main+0xf6>
     352:	8f c0       	rjmp	.+286    	; 0x472 <main+0x214>
			l_count_current = get_left_count();
     354:	0e 94 43 0a 	call	0x1486	; 0x1486 <get_left_count>
     358:	7b 01       	movw	r14, r22
     35a:	8c 01       	movw	r16, r24
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     35c:	69 a5       	ldd	r22, Y+41	; 0x29
     35e:	7a a5       	ldd	r23, Y+42	; 0x2a
     360:	8b a5       	ldd	r24, Y+43	; 0x2b
     362:	9c a5       	ldd	r25, Y+44	; 0x2c
     364:	2d a1       	ldd	r18, Y+37	; 0x25
     366:	3e a1       	ldd	r19, Y+38	; 0x26
     368:	4f a1       	ldd	r20, Y+39	; 0x27
     36a:	58 a5       	ldd	r21, Y+40	; 0x28
     36c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     370:	5b 01       	movw	r10, r22
     372:	6c 01       	movw	r12, r24
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     374:	c8 01       	movw	r24, r16
     376:	b7 01       	movw	r22, r14
     378:	2d 8d       	ldd	r18, Y+29	; 0x1d
     37a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     37c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     37e:	58 a1       	ldd	r21, Y+32	; 0x20
     380:	62 1b       	sub	r22, r18
     382:	73 0b       	sbc	r23, r19
     384:	84 0b       	sbc	r24, r20
     386:	95 0b       	sbc	r25, r21
     388:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     38c:	a6 01       	movw	r20, r12
     38e:	95 01       	movw	r18, r10
     390:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	5c e3       	ldi	r21, 0x3C	; 60
     39c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     3a0:	6d a7       	std	Y+45, r22	; 0x2d
     3a2:	7e a7       	std	Y+46, r23	; 0x2e
     3a4:	8f a7       	std	Y+47, r24	; 0x2f
     3a6:	98 ab       	std	Y+48, r25	; 0x30
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     3a8:	c6 01       	movw	r24, r12
     3aa:	b5 01       	movw	r22, r10
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e2       	ldi	r20, 0x20	; 32
     3b2:	51 e4       	ldi	r21, 0x41	; 65
     3b4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     3b8:	5b 01       	movw	r10, r22
     3ba:	6c 01       	movw	r12, r24
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	50 e4       	ldi	r21, 0x40	; 64
     3c4:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     3c8:	1b 01       	movw	r2, r22
     3ca:	2c 01       	movw	r4, r24
     3cc:	c6 01       	movw	r24, r12
     3ce:	b5 01       	movw	r22, r10
     3d0:	a2 01       	movw	r20, r4
     3d2:	91 01       	movw	r18, r2
     3d4:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     3d8:	3b 01       	movw	r6, r22
     3da:	4c 01       	movw	r8, r24
     3dc:	6d a5       	ldd	r22, Y+45	; 0x2d
     3de:	7e a5       	ldd	r23, Y+46	; 0x2e
     3e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     3e2:	98 a9       	ldd	r25, Y+48	; 0x30
     3e4:	29 85       	ldd	r18, Y+9	; 0x09
     3e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     3e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     3ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     3ec:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c4 01       	movw	r24, r8
     3f6:	b3 01       	movw	r22, r6
     3f8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     3fc:	3b 01       	movw	r6, r22
     3fe:	4c 01       	movw	r8, r24
     400:	c6 01       	movw	r24, r12
     402:	b5 01       	movw	r22, r10
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e4       	ldi	r21, 0x40	; 64
     40c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     410:	a2 01       	movw	r20, r4
     412:	91 01       	movw	r18, r2
     414:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	4b 81       	ldd	r20, Y+3	; 0x03
     41e:	5c 81       	ldd	r21, Y+4	; 0x04
     420:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     424:	9b 01       	movw	r18, r22
     426:	ac 01       	movw	r20, r24
     428:	c4 01       	movw	r24, r8
     42a:	b3 01       	movw	r22, r6
     42c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     430:	6d 83       	std	Y+5, r22	; 0x05
     432:	7e 83       	std	Y+6, r23	; 0x06
     434:	8f 83       	std	Y+7, r24	; 0x07
     436:	98 87       	std	Y+8, r25	; 0x08
     438:	89 a5       	ldd	r24, Y+41	; 0x29
     43a:	9a a5       	ldd	r25, Y+42	; 0x2a
     43c:	ab a5       	ldd	r26, Y+43	; 0x2b
     43e:	bc a5       	ldd	r27, Y+44	; 0x2c
     440:	8d a3       	std	Y+37, r24	; 0x25
     442:	9e a3       	std	Y+38, r25	; 0x26
     444:	af a3       	std	Y+39, r26	; 0x27
     446:	b8 a7       	std	Y+40, r27	; 0x28
     448:	ed 8e       	std	Y+29, r14	; 0x1d
     44a:	fe 8e       	std	Y+30, r15	; 0x1e
     44c:	0f 8f       	std	Y+31, r16	; 0x1f
     44e:	18 a3       	std	Y+32, r17	; 0x20
     450:	2d a5       	ldd	r18, Y+45	; 0x2d
     452:	3e a5       	ldd	r19, Y+46	; 0x2e
     454:	4f a5       	ldd	r20, Y+47	; 0x2f
     456:	58 a9       	ldd	r21, Y+48	; 0x30
     458:	29 87       	std	Y+9, r18	; 0x09
     45a:	3a 87       	std	Y+10, r19	; 0x0a
     45c:	4b 87       	std	Y+11, r20	; 0x0b
     45e:	5c 87       	std	Y+12, r21	; 0x0c
     460:	8d 81       	ldd	r24, Y+5	; 0x05
     462:	9e 81       	ldd	r25, Y+6	; 0x06
     464:	af 81       	ldd	r26, Y+7	; 0x07
     466:	b8 85       	ldd	r27, Y+8	; 0x08
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	9a 83       	std	Y+2, r25	; 0x02
     46c:	ab 83       	std	Y+3, r26	; 0x03
     46e:	bc 83       	std	Y+4, r27	; 0x04
     470:	1a c0       	rjmp	.+52     	; 0x4a6 <main+0x248>
			
			l_count_previous = l_count_current;
			
			elapsed_time_l_previous = elapsed_time_l;
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     472:	69 a5       	ldd	r22, Y+41	; 0x29
     474:	7a a5       	ldd	r23, Y+42	; 0x2a
     476:	8b a5       	ldd	r24, Y+43	; 0x2b
     478:	9c a5       	ldd	r25, Y+44	; 0x2c
     47a:	2d a1       	ldd	r18, Y+37	; 0x25
     47c:	3e a1       	ldd	r19, Y+38	; 0x26
     47e:	4f a1       	ldd	r20, Y+39	; 0x27
     480:	58 a5       	ldd	r21, Y+40	; 0x28
     482:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     486:	2a e9       	ldi	r18, 0x9A	; 154
     488:	39 e9       	ldi	r19, 0x99	; 153
     48a:	49 e1       	ldi	r20, 0x19	; 25
     48c:	5e e3       	ldi	r21, 0x3E	; 62
     48e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     492:	18 16       	cp	r1, r24
     494:	44 f4       	brge	.+16     	; 0x4a6 <main+0x248>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	2d 83       	std	Y+5, r18	; 0x05
     4a0:	3e 83       	std	Y+6, r19	; 0x06
     4a2:	4f 83       	std	Y+7, r20	; 0x07
     4a4:	58 87       	std	Y+8, r21	; 0x08
			rps_lf = 0;
		}
		
		if(r_count_current != r_count_previous){
     4a6:	8d a9       	ldd	r24, Y+53	; 0x35
     4a8:	9e a9       	ldd	r25, Y+54	; 0x36
     4aa:	af a9       	ldd	r26, Y+55	; 0x37
     4ac:	b8 ad       	ldd	r27, Y+56	; 0x38
     4ae:	29 8d       	ldd	r18, Y+25	; 0x19
     4b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     4b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     4b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     4b6:	82 17       	cp	r24, r18
     4b8:	93 07       	cpc	r25, r19
     4ba:	a4 07       	cpc	r26, r20
     4bc:	b5 07       	cpc	r27, r21
     4be:	09 f4       	brne	.+2      	; 0x4c2 <main+0x264>
     4c0:	8f c0       	rjmp	.+286    	; 0x5e0 <__stack+0xe1>
			r_count_current = get_right_count();
     4c2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <get_right_count>
     4c6:	7b 01       	movw	r14, r22
     4c8:	8c 01       	movw	r16, r24
			dt_r = (elapsed_time_r - elapsed_time_r_previous);
     4ca:	69 a5       	ldd	r22, Y+41	; 0x29
     4cc:	7a a5       	ldd	r23, Y+42	; 0x2a
     4ce:	8b a5       	ldd	r24, Y+43	; 0x2b
     4d0:	9c a5       	ldd	r25, Y+44	; 0x2c
     4d2:	29 a1       	ldd	r18, Y+33	; 0x21
     4d4:	3a a1       	ldd	r19, Y+34	; 0x22
     4d6:	4b a1       	ldd	r20, Y+35	; 0x23
     4d8:	5c a1       	ldd	r21, Y+36	; 0x24
     4da:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     4de:	5b 01       	movw	r10, r22
     4e0:	6c 01       	movw	r12, r24
			ticks_per_sec_r = (r_count_current - r_count_previous)/dt_r;
			
			rps_r = ticks_per_sec_r/(TICKS_PER_ROTATION);
     4e2:	c8 01       	movw	r24, r16
     4e4:	b7 01       	movw	r22, r14
     4e6:	29 8d       	ldd	r18, Y+25	; 0x19
     4e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     4ea:	4b 8d       	ldd	r20, Y+27	; 0x1b
     4ec:	5c 8d       	ldd	r21, Y+28	; 0x1c
     4ee:	62 1b       	sub	r22, r18
     4f0:	73 0b       	sbc	r23, r19
     4f2:	84 0b       	sbc	r24, r20
     4f4:	95 0b       	sbc	r25, r21
     4f6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     4fa:	a6 01       	movw	r20, r12
     4fc:	95 01       	movw	r18, r10
     4fe:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	5c e3       	ldi	r21, 0x3C	; 60
     50a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     50e:	69 ab       	std	Y+49, r22	; 0x31
     510:	7a ab       	std	Y+50, r23	; 0x32
     512:	8b ab       	std	Y+51, r24	; 0x33
     514:	9c ab       	std	Y+52, r25	; 0x34
			rps_rf = ((Kr*dt_r)/(Kr*dt_r + 2))*(rps_r + rps_r_prev) - ((Kr*dt_r - 2)/(Kr*dt_r + 2))*rps_rf_prev;
     516:	c6 01       	movw	r24, r12
     518:	b5 01       	movw	r22, r10
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	48 ec       	ldi	r20, 0xC8	; 200
     520:	51 e4       	ldi	r21, 0x41	; 65
     522:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     526:	5b 01       	movw	r10, r22
     528:	6c 01       	movw	r12, r24
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e4       	ldi	r21, 0x40	; 64
     532:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     536:	1b 01       	movw	r2, r22
     538:	2c 01       	movw	r4, r24
     53a:	c6 01       	movw	r24, r12
     53c:	b5 01       	movw	r22, r10
     53e:	a2 01       	movw	r20, r4
     540:	91 01       	movw	r18, r2
     542:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     546:	3b 01       	movw	r6, r22
     548:	4c 01       	movw	r8, r24
     54a:	69 a9       	ldd	r22, Y+49	; 0x31
     54c:	7a a9       	ldd	r23, Y+50	; 0x32
     54e:	8b a9       	ldd	r24, Y+51	; 0x33
     550:	9c a9       	ldd	r25, Y+52	; 0x34
     552:	2d 89       	ldd	r18, Y+21	; 0x15
     554:	3e 89       	ldd	r19, Y+22	; 0x16
     556:	4f 89       	ldd	r20, Y+23	; 0x17
     558:	58 8d       	ldd	r21, Y+24	; 0x18
     55a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__addsf3>
     55e:	9b 01       	movw	r18, r22
     560:	ac 01       	movw	r20, r24
     562:	c4 01       	movw	r24, r8
     564:	b3 01       	movw	r22, r6
     566:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     56a:	3b 01       	movw	r6, r22
     56c:	4c 01       	movw	r8, r24
     56e:	c6 01       	movw	r24, r12
     570:	b5 01       	movw	r22, r10
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	50 e4       	ldi	r21, 0x40	; 64
     57a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     57e:	a2 01       	movw	r20, r4
     580:	91 01       	movw	r18, r2
     582:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     586:	2d 85       	ldd	r18, Y+13	; 0x0d
     588:	3e 85       	ldd	r19, Y+14	; 0x0e
     58a:	4f 85       	ldd	r20, Y+15	; 0x0f
     58c:	58 89       	ldd	r21, Y+16	; 0x10
     58e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
     596:	c4 01       	movw	r24, r8
     598:	b3 01       	movw	r22, r6
     59a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     59e:	69 8b       	std	Y+17, r22	; 0x11
     5a0:	7a 8b       	std	Y+18, r23	; 0x12
     5a2:	8b 8b       	std	Y+19, r24	; 0x13
     5a4:	9c 8b       	std	Y+20, r25	; 0x14
     5a6:	89 a5       	ldd	r24, Y+41	; 0x29
     5a8:	9a a5       	ldd	r25, Y+42	; 0x2a
     5aa:	ab a5       	ldd	r26, Y+43	; 0x2b
     5ac:	bc a5       	ldd	r27, Y+44	; 0x2c
     5ae:	89 a3       	std	Y+33, r24	; 0x21
     5b0:	9a a3       	std	Y+34, r25	; 0x22
     5b2:	ab a3       	std	Y+35, r26	; 0x23
     5b4:	bc a3       	std	Y+36, r27	; 0x24
     5b6:	e9 8e       	std	Y+25, r14	; 0x19
     5b8:	fa 8e       	std	Y+26, r15	; 0x1a
     5ba:	0b 8f       	std	Y+27, r16	; 0x1b
     5bc:	1c 8f       	std	Y+28, r17	; 0x1c
     5be:	29 a9       	ldd	r18, Y+49	; 0x31
     5c0:	3a a9       	ldd	r19, Y+50	; 0x32
     5c2:	4b a9       	ldd	r20, Y+51	; 0x33
     5c4:	5c a9       	ldd	r21, Y+52	; 0x34
     5c6:	2d 8b       	std	Y+21, r18	; 0x15
     5c8:	3e 8b       	std	Y+22, r19	; 0x16
     5ca:	4f 8b       	std	Y+23, r20	; 0x17
     5cc:	58 8f       	std	Y+24, r21	; 0x18
     5ce:	89 89       	ldd	r24, Y+17	; 0x11
     5d0:	9a 89       	ldd	r25, Y+18	; 0x12
     5d2:	ab 89       	ldd	r26, Y+19	; 0x13
     5d4:	bc 89       	ldd	r27, Y+20	; 0x14
     5d6:	8d 87       	std	Y+13, r24	; 0x0d
     5d8:	9e 87       	std	Y+14, r25	; 0x0e
     5da:	af 87       	std	Y+15, r26	; 0x0f
     5dc:	b8 8b       	std	Y+16, r27	; 0x10
     5de:	1a c0       	rjmp	.+52     	; 0x614 <__stack+0x115>
			
			r_count_previous = r_count_current;
			
			elapsed_time_r_previous = elapsed_time_r;
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
     5e0:	69 a5       	ldd	r22, Y+41	; 0x29
     5e2:	7a a5       	ldd	r23, Y+42	; 0x2a
     5e4:	8b a5       	ldd	r24, Y+43	; 0x2b
     5e6:	9c a5       	ldd	r25, Y+44	; 0x2c
     5e8:	29 a1       	ldd	r18, Y+33	; 0x21
     5ea:	3a a1       	ldd	r19, Y+34	; 0x22
     5ec:	4b a1       	ldd	r20, Y+35	; 0x23
     5ee:	5c a1       	ldd	r21, Y+36	; 0x24
     5f0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     5f4:	2a e9       	ldi	r18, 0x9A	; 154
     5f6:	39 e9       	ldi	r19, 0x99	; 153
     5f8:	49 e1       	ldi	r20, 0x19	; 25
     5fa:	5e e3       	ldi	r21, 0x3E	; 62
     5fc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     600:	18 16       	cp	r1, r24
     602:	44 f4       	brge	.+16     	; 0x614 <__stack+0x115>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	29 8b       	std	Y+17, r18	; 0x11
     60e:	3a 8b       	std	Y+18, r19	; 0x12
     610:	4b 8b       	std	Y+19, r20	; 0x13
     612:	5c 8b       	std	Y+20, r21	; 0x14
		}
		
		v_l = M_2PIR*rps_lf;		
		v_r = M_2PIR*rps_rf;

		wheel_l(12);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e4       	ldi	r24, 0x40	; 64
     61a:	91 e4       	ldi	r25, 0x41	; 65
     61c:	0e 94 5f 00 	call	0xbe	; 0xbe <wheel_l>

		wheel_r(12);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	91 e4       	ldi	r25, 0x41	; 65
     628:	0e 94 a5 00 	call	0x14a	; 0x14a <wheel_r>

		//rprintf("Left: ");
		rprintfFloat(5,v_l);
     62c:	6d 81       	ldd	r22, Y+5	; 0x05
     62e:	7e 81       	ldd	r23, Y+6	; 0x06
     630:	8f 81       	ldd	r24, Y+7	; 0x07
     632:	98 85       	ldd	r25, Y+8	; 0x08
     634:	23 ec       	ldi	r18, 0xC3	; 195
     636:	33 e5       	ldi	r19, 0x53	; 83
     638:	4b ef       	ldi	r20, 0xFB	; 251
     63a:	51 e4       	ldi	r21, 0x41	; 65
     63c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     640:	ab 01       	movw	r20, r22
     642:	bc 01       	movw	r22, r24
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	0e 94 07 06 	call	0xc0e	; 0xc0e <rprintfFloat>
		//rprintf("Right: ");
		rprintf("\t,");
     64a:	00 d0       	rcall	.+0      	; 0x64c <__stack+0x14d>
     64c:	0f 92       	push	r0
     64e:	e1 e0       	ldi	r30, 0x01	; 1
     650:	ad b7       	in	r26, 0x3d	; 61
     652:	be b7       	in	r27, 0x3e	; 62
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	ec 93       	st	X, r30
     658:	11 97       	sbiw	r26, 0x01	; 1
     65a:	2b e6       	ldi	r18, 0x6B	; 107
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	13 96       	adiw	r26, 0x03	; 3
     660:	3c 93       	st	X, r19
     662:	2e 93       	st	-X, r18
     664:	12 97       	sbiw	r26, 0x02	; 2
     666:	0e 94 d0 06 	call	0xda0	; 0xda0 <rprintf1RamRom>
		rprintfFloat(5,v_r);
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	69 89       	ldd	r22, Y+17	; 0x11
     672:	7a 89       	ldd	r23, Y+18	; 0x12
     674:	8b 89       	ldd	r24, Y+19	; 0x13
     676:	9c 89       	ldd	r25, Y+20	; 0x14
     678:	23 ec       	ldi	r18, 0xC3	; 195
     67a:	33 e5       	ldi	r19, 0x53	; 83
     67c:	4b ef       	ldi	r20, 0xFB	; 251
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     684:	ab 01       	movw	r20, r22
     686:	bc 01       	movw	r22, r24
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	0e 94 07 06 	call	0xc0e	; 0xc0e <rprintfFloat>
		rprintf("\t,");
     68e:	00 d0       	rcall	.+0      	; 0x690 <__stack+0x191>
     690:	0f 92       	push	r0
     692:	e1 e0       	ldi	r30, 0x01	; 1
     694:	ad b7       	in	r26, 0x3d	; 61
     696:	be b7       	in	r27, 0x3e	; 62
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	ec 93       	st	X, r30
     69c:	11 97       	sbiw	r26, 0x01	; 1
     69e:	28 e6       	ldi	r18, 0x68	; 104
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	13 96       	adiw	r26, 0x03	; 3
     6a4:	3c 93       	st	X, r19
     6a6:	2e 93       	st	-X, r18
     6a8:	12 97       	sbiw	r26, 0x02	; 2
     6aa:	0e 94 d0 06 	call	0xda0	; 0xda0 <rprintf1RamRom>
		rprintfFloat(5,elapsed_time_l);
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	85 e0       	ldi	r24, 0x05	; 5
     6b6:	49 a5       	ldd	r20, Y+41	; 0x29
     6b8:	5a a5       	ldd	r21, Y+42	; 0x2a
     6ba:	6b a5       	ldd	r22, Y+43	; 0x2b
     6bc:	7c a5       	ldd	r23, Y+44	; 0x2c
     6be:	0e 94 07 06 	call	0xc0e	; 0xc0e <rprintfFloat>
		rprintfCRLF();
     6c2:	0e 94 10 05 	call	0xa20	; 0xa20 <rprintfCRLF>
     6c6:	13 ce       	rjmp	.-986    	; 0x2ee <main+0x90>

000006c8 <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
     6c8:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
     6ca:	80 91 81 00 	lds	r24, 0x0081
     6ce:	88 60       	ori	r24, 0x08	; 8
     6d0:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     6d4:	80 91 81 00 	lds	r24, 0x0081
     6d8:	8f 7e       	andi	r24, 0xEF	; 239
     6da:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     6de:	99 30       	cpi	r25, 0x09	; 9
     6e0:	49 f4       	brne	.+18     	; 0x6f4 <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     6e2:	80 91 80 00 	lds	r24, 0x0080
     6e6:	82 60       	ori	r24, 0x02	; 2
     6e8:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     6ec:	80 91 80 00 	lds	r24, 0x0080
     6f0:	8e 7f       	andi	r24, 0xFE	; 254
     6f2:	0e c0       	rjmp	.+28     	; 0x710 <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
     6f4:	9a 30       	cpi	r25, 0x0A	; 10
     6f6:	21 f4       	brne	.+8      	; 0x700 <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     6f8:	80 91 80 00 	lds	r24, 0x0080
     6fc:	82 60       	ori	r24, 0x02	; 2
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     700:	80 91 80 00 	lds	r24, 0x0080
     704:	8d 7f       	andi	r24, 0xFD	; 253
     706:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     70a:	80 91 80 00 	lds	r24, 0x0080
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
     714:	10 92 89 00 	sts	0x0089, r1
     718:	10 92 88 00 	sts	0x0088, r1
}
     71c:	08 95       	ret

0000071e <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
     71e:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
     720:	80 91 81 00 	lds	r24, 0x0081
     724:	87 7f       	andi	r24, 0xF7	; 247
     726:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     72a:	80 91 81 00 	lds	r24, 0x0081
     72e:	8f 7e       	andi	r24, 0xEF	; 239
     730:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     734:	99 30       	cpi	r25, 0x09	; 9
     736:	49 f4       	brne	.+18     	; 0x74a <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     738:	80 91 80 00 	lds	r24, 0x0080
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     742:	80 91 80 00 	lds	r24, 0x0080
     746:	8e 7f       	andi	r24, 0xFE	; 254
     748:	0e c0       	rjmp	.+28     	; 0x766 <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
     74a:	9a 30       	cpi	r25, 0x0A	; 10
     74c:	21 f4       	brne	.+8      	; 0x756 <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     74e:	80 91 80 00 	lds	r24, 0x0080
     752:	82 60       	ori	r24, 0x02	; 2
     754:	03 c0       	rjmp	.+6      	; 0x75c <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     756:	80 91 80 00 	lds	r24, 0x0080
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     760:	80 91 80 00 	lds	r24, 0x0080
     764:	81 60       	ori	r24, 0x01	; 1
     766:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     76a:	10 92 8b 00 	sts	0x008B, r1
     76e:	10 92 8a 00 	sts	0x008A, r1
}
     772:	08 95       	ret

00000774 <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     774:	e0 e8       	ldi	r30, 0x80	; 128
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     77e:	20 81       	ld	r18, Z
     780:	22 60       	ori	r18, 0x02	; 2
     782:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     784:	e1 e8       	ldi	r30, 0x81	; 129
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	20 81       	ld	r18, Z
     78a:	28 60       	ori	r18, 0x08	; 8
     78c:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     78e:	20 81       	ld	r18, Z
     790:	20 61       	ori	r18, 0x10	; 16
     792:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     794:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     796:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
     798:	90 93 87 00 	sts	0x0087, r25
     79c:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
     7a0:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
     7a2:	10 92 89 00 	sts	0x0089, r1
     7a6:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     7aa:	10 92 8b 00 	sts	0x008B, r1
     7ae:	10 92 8a 00 	sts	0x008A, r1
}
     7b2:	08 95       	ret

000007b4 <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
     7b4:	84 b5       	in	r24, 0x24	; 36
     7b6:	8f 7d       	andi	r24, 0xDF	; 223
     7b8:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     7ba:	84 b5       	in	r24, 0x24	; 36
     7bc:	8f 7e       	andi	r24, 0xEF	; 239
     7be:	84 bd       	out	0x24, r24	; 36
}
     7c0:	08 95       	ret

000007c2 <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
     7c2:	84 b5       	in	r24, 0x24	; 36
     7c4:	8f 77       	andi	r24, 0x7F	; 127
     7c6:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     7c8:	84 b5       	in	r24, 0x24	; 36
     7ca:	8f 7b       	andi	r24, 0xBF	; 191
     7cc:	84 bd       	out	0x24, r24	; 36
}
     7ce:	08 95       	ret

000007d0 <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
     7d0:	e0 e8       	ldi	r30, 0x80	; 128
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	8f 7d       	andi	r24, 0xDF	; 223
     7d8:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     7da:	80 81       	ld	r24, Z
     7dc:	8f 7e       	andi	r24, 0xEF	; 239
     7de:	80 83       	st	Z, r24
}
     7e0:	08 95       	ret

000007e2 <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
     7e2:	e0 e8       	ldi	r30, 0x80	; 128
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	8f 77       	andi	r24, 0x7F	; 127
     7ea:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 7b       	andi	r24, 0xBF	; 191
     7f0:	80 83       	st	Z, r24
}
     7f2:	08 95       	ret

000007f4 <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
     7f4:	84 b5       	in	r24, 0x24	; 36
     7f6:	80 62       	ori	r24, 0x20	; 32
     7f8:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     7fa:	84 b5       	in	r24, 0x24	; 36
     7fc:	8f 7e       	andi	r24, 0xEF	; 239
     7fe:	84 bd       	out	0x24, r24	; 36
}
     800:	08 95       	ret

00000802 <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
     802:	84 b5       	in	r24, 0x24	; 36
     804:	80 68       	ori	r24, 0x80	; 128
     806:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     808:	84 b5       	in	r24, 0x24	; 36
     80a:	8f 7b       	andi	r24, 0xBF	; 191
     80c:	84 bd       	out	0x24, r24	; 36
}
     80e:	08 95       	ret

00000810 <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
     810:	e0 e8       	ldi	r30, 0x80	; 128
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	80 62       	ori	r24, 0x20	; 32
     818:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     81a:	80 81       	ld	r24, Z
     81c:	8f 7e       	andi	r24, 0xEF	; 239
     81e:	80 83       	st	Z, r24
}
     820:	08 95       	ret

00000822 <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
     822:	e0 e8       	ldi	r30, 0x80	; 128
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	80 68       	ori	r24, 0x80	; 128
     82a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     82c:	80 81       	ld	r24, Z
     82e:	8f 7b       	andi	r24, 0xBF	; 191
     830:	80 83       	st	Z, r24
}
     832:	08 95       	ret

00000834 <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
     834:	88 bd       	out	0x28, r24	; 40
}
     836:	08 95       	ret

00000838 <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
     838:	87 bd       	out	0x27, r24	; 39
}
     83a:	08 95       	ret

0000083c <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
     83c:	90 93 89 00 	sts	0x0089, r25
     840:	80 93 88 00 	sts	0x0088, r24
}
     844:	08 95       	ret

00000846 <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
     846:	90 93 8b 00 	sts	0x008B, r25
     84a:	80 93 8a 00 	sts	0x008A, r24
}
     84e:	08 95       	ret

00000850 <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     850:	10 92 ae 01 	sts	0x01AE, r1
     854:	10 92 af 01 	sts	0x01AF, r1
     858:	10 92 b0 01 	sts	0x01B0, r1
     85c:	10 92 b1 01 	sts	0x01B1, r1
     860:	16 bc       	out	0x26, r1	; 38
}
     862:	08 95       	ret

00000864 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     864:	10 92 aa 01 	sts	0x01AA, r1
     868:	10 92 ab 01 	sts	0x01AB, r1
     86c:	10 92 ac 01 	sts	0x01AC, r1
     870:	10 92 ad 01 	sts	0x01AD, r1
     874:	10 92 85 00 	sts	0x0085, r1
     878:	10 92 84 00 	sts	0x0084, r1
}
     87c:	08 95       	ret

0000087e <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
     87e:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     886:	10 92 ae 01 	sts	0x01AE, r1
     88a:	10 92 af 01 	sts	0x01AF, r1
     88e:	10 92 b0 01 	sts	0x01B0, r1
     892:	10 92 b1 01 	sts	0x01B1, r1
     896:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
     898:	08 95       	ret

0000089a <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
     89a:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     8a4:	10 92 aa 01 	sts	0x01AA, r1
     8a8:	10 92 ab 01 	sts	0x01AB, r1
     8ac:	10 92 ac 01 	sts	0x01AC, r1
     8b0:	10 92 ad 01 	sts	0x01AD, r1
     8b4:	10 92 85 00 	sts	0x0085, r1
     8b8:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
     8bc:	08 95       	ret

000008be <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
     8be:	20 91 ae 01 	lds	r18, 0x01AE
     8c2:	30 91 af 01 	lds	r19, 0x01AF
     8c6:	40 91 b0 01 	lds	r20, 0x01B0
     8ca:	50 91 b1 01 	lds	r21, 0x01B1
}
     8ce:	b9 01       	movw	r22, r18
     8d0:	ca 01       	movw	r24, r20
     8d2:	08 95       	ret

000008d4 <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
     8d4:	a0 e0       	ldi	r26, 0x00	; 0
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	24 e0       	ldi	r18, 0x04	; 4
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	aa 1f       	adc	r26, r26
     8e0:	bb 1f       	adc	r27, r27
     8e2:	2a 95       	dec	r18
     8e4:	d1 f7       	brne	.-12     	; 0x8da <delay_us+0x6>
     8e6:	03 96       	adiw	r24, 0x03	; 3
     8e8:	a1 1d       	adc	r26, r1
     8ea:	b1 1d       	adc	r27, r1
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	2a e0       	ldi	r18, 0x0A	; 10
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
     902:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	82 17       	cp	r24, r18
     908:	93 07       	cpc	r25, r19
     90a:	d8 f3       	brcs	.-10     	; 0x902 <delay_us+0x2e>
		asm("nop");
	};
}
     90c:	08 95       	ret

0000090e <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
     90e:	1f 92       	push	r1
     910:	0f 92       	push	r0
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	0f 92       	push	r0
     916:	11 24       	eor	r1, r1
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
     920:	80 91 ae 01 	lds	r24, 0x01AE
     924:	90 91 af 01 	lds	r25, 0x01AF
     928:	a0 91 b0 01 	lds	r26, 0x01B0
     92c:	b0 91 b1 01 	lds	r27, 0x01B1
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	a1 1d       	adc	r26, r1
     934:	b1 1d       	adc	r27, r1
     936:	80 93 ae 01 	sts	0x01AE, r24
     93a:	90 93 af 01 	sts	0x01AF, r25
     93e:	a0 93 b0 01 	sts	0x01B0, r26
     942:	b0 93 b1 01 	sts	0x01B1, r27
}
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     958:	90 93 01 01 	sts	0x0101, r25
     95c:	80 93 00 01 	sts	0x0100, r24
}
     960:	08 95       	ret

00000962 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     962:	1f 93       	push	r17
     964:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     966:	8a 30       	cpi	r24, 0x0A	; 10
     968:	31 f4       	brne	.+12     	; 0x976 <rprintfChar+0x14>
		rputchar('\r');
     96a:	e0 91 00 01 	lds	r30, 0x0100
     96e:	f0 91 01 01 	lds	r31, 0x0101
     972:	8d e0       	ldi	r24, 0x0D	; 13
     974:	09 95       	icall
	// send character
	rputchar(c);
     976:	e0 91 00 01 	lds	r30, 0x0100
     97a:	f0 91 01 01 	lds	r31, 0x0101
     97e:	81 2f       	mov	r24, r17
     980:	09 95       	icall
}
     982:	1f 91       	pop	r17
     984:	08 95       	ret

00000986 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	21 f4       	brne	.+8      	; 0x998 <rprintfStr+0x12>
     990:	06 c0       	rjmp	.+12     	; 0x99e <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     992:	21 96       	adiw	r28, 0x01	; 1
     994:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     998:	88 81       	ld	r24, Y
     99a:	88 23       	and	r24, r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <rprintfStr+0xc>
		rprintfChar(*str++);
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	8c 01       	movw	r16, r24
     9b2:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	e9 f0       	breq	.+58     	; 0x9f2 <rprintfStrLen+0x4e>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     9bc:	26 17       	cp	r18, r22
     9be:	37 07       	cpc	r19, r23
     9c0:	38 f4       	brcc	.+14     	; 0x9d0 <rprintfStrLen+0x2c>
     9c2:	f8 01       	movw	r30, r16
     9c4:	81 91       	ld	r24, Z+
     9c6:	8f 01       	movw	r16, r30
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	88 23       	and	r24, r24
     9ce:	b1 f7       	brne	.-20     	; 0x9bc <rprintfStrLen+0x18>
     9d0:	c0 e0       	ldi	r28, 0x00	; 0
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     9d6:	f8 01       	movw	r30, r16
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	19 f0       	breq	.+6      	; 0x9e4 <rprintfStrLen+0x40>
			rprintfChar(*str++);
     9de:	0f 5f       	subi	r16, 0xFF	; 255
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     9e4:	80 e2       	ldi	r24, 0x20	; 32
     9e6:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     9ea:	21 96       	adiw	r28, 0x01	; 1
     9ec:	ce 15       	cp	r28, r14
     9ee:	df 05       	cpc	r29, r15
     9f0:	90 f3       	brcs	.-28     	; 0x9d6 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	19 f4       	brne	.+6      	; 0xa10 <rprintfProgStr+0x10>
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     a0c:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     a10:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     a12:	21 96       	adiw	r28, 0x01	; 1
     a14:	84 91       	lpm	r24, Z+
     a16:	88 23       	and	r24, r24
     a18:	c9 f7       	brne	.-14     	; 0xa0c <rprintfProgStr+0xc>
		rprintfChar(c);
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
     a20:	8a e0       	ldi	r24, 0x0A	; 10
     a22:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
}
     a26:	08 95       	ret

00000a28 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     a28:	e8 2f       	mov	r30, r24
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ef 70       	andi	r30, 0x0F	; 15
     a2e:	f0 70       	andi	r31, 0x00	; 0
     a30:	e2 59       	subi	r30, 0x92	; 146
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	e4 91       	lpm	r30, Z+
     a36:	8e 2f       	mov	r24, r30
     a38:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
}
     a3c:	08 95       	ret

00000a3e <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     a3e:	1f 93       	push	r17
     a40:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     a42:	82 95       	swap	r24
     a44:	8f 70       	andi	r24, 0x0F	; 15
     a46:	0e 94 14 05 	call	0xa28	; 0xa28 <rprintfu04>
	rprintfu04(data);
     a4a:	81 2f       	mov	r24, r17
     a4c:	0e 94 14 05 	call	0xa28	; 0xa28 <rprintfu04>
}
     a50:	1f 91       	pop	r17
     a52:	08 95       	ret

00000a54 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     a54:	1f 93       	push	r17
     a56:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     a58:	89 2f       	mov	r24, r25
     a5a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <rprintfu08>
	rprintfu08(data);
     a5e:	81 2f       	mov	r24, r17
     a60:	0e 94 1f 05 	call	0xa3e	; 0xa3e <rprintfu08>
}
     a64:	1f 91       	pop	r17
     a66:	08 95       	ret

00000a68 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	7b 01       	movw	r14, r22
     a72:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     a74:	c8 01       	movw	r24, r16
     a76:	aa 27       	eor	r26, r26
     a78:	bb 27       	eor	r27, r27
     a7a:	0e 94 2a 05 	call	0xa54	; 0xa54 <rprintfu16>
	rprintfu16(data);
     a7e:	c7 01       	movw	r24, r14
     a80:	0e 94 2a 05 	call	0xa54	; 0xa54 <rprintfu16>
}
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	08 95       	ret

00000a8e <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     a8e:	2f 92       	push	r2
     a90:	3f 92       	push	r3
     a92:	4f 92       	push	r4
     a94:	5f 92       	push	r5
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	a3 97       	sbiw	r28, 0x23	; 35
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	6a a3       	std	Y+34, r22	; 0x22
     ac4:	24 2e       	mov	r2, r20
     ac6:	2b a3       	std	Y+35, r18	; 0x23
     ac8:	37 01       	movw	r6, r14
     aca:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     acc:	44 23       	and	r20, r20
     ace:	51 f0       	breq	.+20     	; 0xae4 <rprintfNum+0x56>
     ad0:	17 ff       	sbrs	r17, 7
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <rprintfNum+0x56>
	{
		x = -n;
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	e6 18       	sub	r14, r6
     adc:	f7 08       	sbc	r15, r7
     ade:	08 09       	sbc	r16, r8
     ae0:	19 09       	sbc	r17, r9
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     ae4:	84 01       	movw	r16, r8
     ae6:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     ae8:	2a a1       	ldd	r18, Y+34	; 0x22
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	21 10       	cpse	r2, r1
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	29 1b       	sub	r18, r25
     af4:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     af6:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     af8:	a8 2e       	mov	r10, r24
     afa:	bb 24       	eor	r11, r11
     afc:	cc 24       	eor	r12, r12
     afe:	dd 24       	eor	r13, r13
     b00:	c8 01       	movw	r24, r16
     b02:	b7 01       	movw	r22, r14
     b04:	a6 01       	movw	r20, r12
     b06:	95 01       	movw	r18, r10
     b08:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     b0c:	fb 01       	movw	r30, r22
     b0e:	ef 70       	andi	r30, 0x0F	; 15
     b10:	f0 70       	andi	r31, 0x00	; 0
     b12:	e2 59       	subi	r30, 0x92	; 146
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	64 91       	lpm	r22, Z+
     b18:	6f 8f       	std	Y+31, r22	; 0x1f
     b1a:	c8 01       	movw	r24, r16
     b1c:	b7 01       	movw	r22, r14
     b1e:	a6 01       	movw	r20, r12
     b20:	95 01       	movw	r18, r10
     b22:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     b26:	c9 01       	movw	r24, r18
     b28:	da 01       	movw	r26, r20
     b2a:	7c 01       	movw	r14, r24
     b2c:	8d 01       	movw	r16, r26
     b2e:	9e e1       	ldi	r25, 0x1E	; 30
     b30:	49 2e       	mov	r4, r25
     b32:	51 2c       	mov	r5, r1
     b34:	4c 0e       	add	r4, r28
     b36:	5d 1e       	adc	r5, r29
     b38:	39 a0       	ldd	r3, Y+33	; 0x21
     b3a:	25 c0       	rjmp	.+74     	; 0xb86 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	c9 f0       	breq	.+50     	; 0xb78 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     b46:	c8 01       	movw	r24, r16
     b48:	b7 01       	movw	r22, r14
     b4a:	a6 01       	movw	r20, r12
     b4c:	95 01       	movw	r18, r10
     b4e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     b52:	fb 01       	movw	r30, r22
     b54:	ef 70       	andi	r30, 0x0F	; 15
     b56:	f0 70       	andi	r31, 0x00	; 0
     b58:	e2 59       	subi	r30, 0x92	; 146
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	64 91       	lpm	r22, Z+
     b5e:	f2 01       	movw	r30, r4
     b60:	60 83       	st	Z, r22
     b62:	c8 01       	movw	r24, r16
     b64:	b7 01       	movw	r22, r14
     b66:	a6 01       	movw	r20, r12
     b68:	95 01       	movw	r18, r10
     b6a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     b6e:	c9 01       	movw	r24, r18
     b70:	da 01       	movw	r26, r20
     b72:	7c 01       	movw	r14, r24
     b74:	8d 01       	movw	r16, r26
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     b78:	2b a1       	ldd	r18, Y+35	; 0x23
     b7a:	f2 01       	movw	r30, r4
     b7c:	20 83       	st	Z, r18
     b7e:	3a 94       	dec	r3
     b80:	08 94       	sec
     b82:	41 08       	sbc	r4, r1
     b84:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     b86:	33 20       	and	r3, r3
     b88:	c9 f6       	brne	.-78     	; 0xb3c <rprintfNum+0xae>
     b8a:	ce 01       	movw	r24, r28
     b8c:	4f 96       	adiw	r24, 0x1f	; 31
     b8e:	8c 01       	movw	r16, r24
     b90:	e9 a1       	ldd	r30, Y+33	; 0x21
     b92:	0e 1b       	sub	r16, r30
     b94:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
     b96:	22 20       	and	r2, r2
     b98:	f1 f0       	breq	.+60     	; 0xbd6 <rprintfNum+0x148>
	{
		if(n < 0)
     b9a:	97 fe       	sbrs	r9, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <rprintfNum+0x11a>
		{
   			*--p = '-';
     b9e:	8d e2       	ldi	r24, 0x2D	; 45
     ba0:	f8 01       	movw	r30, r16
     ba2:	82 93       	st	-Z, r24
     ba4:	8f 01       	movw	r16, r30
     ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <rprintfNum+0x148>
     ba8:	c8 01       	movw	r24, r16
     baa:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
     bac:	61 14       	cp	r6, r1
     bae:	71 04       	cpc	r7, r1
     bb0:	81 04       	cpc	r8, r1
     bb2:	91 04       	cpc	r9, r1
     bb4:	19 f0       	breq	.+6      	; 0xbbc <rprintfNum+0x12e>
		{
	   		*--p = '+';
     bb6:	8c 01       	movw	r16, r24
     bb8:	8b e2       	ldi	r24, 0x2B	; 43
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
     bbc:	8c 01       	movw	r16, r24
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	f8 01       	movw	r30, r16
     bc2:	80 83       	st	Z, r24
     bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
     bc6:	f8 01       	movw	r30, r16
     bc8:	81 91       	ld	r24, Z+
     bca:	8f 01       	movw	r16, r30
     bcc:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     bd0:	fa a1       	ldd	r31, Y+34	; 0x22
     bd2:	f1 50       	subi	r31, 0x01	; 1
     bd4:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     bd6:	2a a1       	ldd	r18, Y+34	; 0x22
     bd8:	22 23       	and	r18, r18
     bda:	a9 f7       	brne	.-22     	; 0xbc6 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
     bdc:	a3 96       	adiw	r28, 0x23	; 35
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	9f 90       	pop	r9
     bfe:	8f 90       	pop	r8
     c00:	7f 90       	pop	r7
     c02:	6f 90       	pop	r6
     c04:	5f 90       	pop	r5
     c06:	4f 90       	pop	r4
     c08:	3f 90       	pop	r3
     c0a:	2f 90       	pop	r2
     c0c:	08 95       	ret

00000c0e <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
     c0e:	4f 92       	push	r4
     c10:	5f 92       	push	r5
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	48 2e       	mov	r4, r24
     c30:	5a 01       	movw	r10, r20
     c32:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
     c34:	cb 01       	movw	r24, r22
     c36:	ba 01       	movw	r22, r20
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	1c f4       	brge	.+6      	; 0xc4e <rprintfFloat+0x40>
     c48:	35 01       	movw	r6, r10
     c4a:	46 01       	movw	r8, r12
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <rprintfFloat+0x4c>
     c4e:	35 01       	movw	r6, r10
     c50:	46 01       	movw	r8, r12
     c52:	97 fa       	bst	r9, 7
     c54:	90 94       	com	r9
     c56:	97 f8       	bld	r9, 7
     c58:	90 94       	com	r9
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ef 2e       	mov	r14, r31
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	ff 2e       	mov	r15, r31
     c64:	f0 e8       	ldi	r31, 0x80	; 128
     c66:	0f 2f       	mov	r16, r31
     c68:	ff e3       	ldi	r31, 0x3F	; 63
     c6a:	1f 2f       	mov	r17, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
     c70:	c4 01       	movw	r24, r8
     c72:	b3 01       	movw	r22, r6
     c74:	a8 01       	movw	r20, r16
     c76:	97 01       	movw	r18, r14
     c78:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e2       	ldi	r20, 0x20	; 32
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     c88:	87 fd       	sbrc	r24, 7
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
     c8c:	c8 01       	movw	r24, r16
     c8e:	b7 01       	movw	r22, r14
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e2       	ldi	r20, 0x20	; 32
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     c9c:	7b 01       	movw	r14, r22
     c9e:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
     ca0:	53 94       	inc	r5
     ca2:	8f e0       	ldi	r24, 0x0F	; 15
     ca4:	58 16       	cp	r5, r24
     ca6:	21 f7       	brne	.-56     	; 0xc70 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
     ca8:	c6 01       	movw	r24, r12
     caa:	b5 01       	movw	r22, r10
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     cb8:	88 23       	and	r24, r24
     cba:	14 f4       	brge	.+4      	; 0xcc0 <rprintfFloat+0xb2>
		rprintfChar('-');
     cbc:	8d e2       	ldi	r24, 0x2D	; 45
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
     cc0:	8b e2       	ldi	r24, 0x2B	; 43
     cc2:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     cc6:	dd 24       	eor	r13, r13
     cc8:	aa 24       	eor	r10, r10
     cca:	56 c0       	rjmp	.+172    	; 0xd78 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
     ccc:	c4 01       	movw	r24, r8
     cce:	b3 01       	movw	r22, r6
     cd0:	a8 01       	movw	r20, r16
     cd2:	97 01       	movw	r18, r14
     cd4:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     cd8:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixunssfsi>
     cdc:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
     cde:	d6 2a       	or	r13, r22
     ce0:	cd 2d       	mov	r28, r13
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
     ce4:	cc 24       	eor	r12, r12
     ce6:	dd 24       	eor	r13, r13
     ce8:	c8 01       	movw	r24, r16
     cea:	b7 01       	movw	r22, r14
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	19 f4       	brne	.+6      	; 0xd02 <rprintfFloat+0xf4>
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	c2 2e       	mov	r12, r18
     d00:	d1 2c       	mov	r13, r1
     d02:	cc 29       	or	r28, r12
     d04:	dd 29       	or	r29, r13
     d06:	cd 2b       	or	r28, r29
     d08:	39 f0       	breq	.+14     	; 0xd18 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
     d0a:	8b 2d       	mov	r24, r11
     d0c:	80 5d       	subi	r24, 0xD0	; 208
     d0e:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     d12:	dd 24       	eor	r13, r13
     d14:	da 94       	dec	r13
     d16:	04 c0       	rjmp	.+8      	; 0xd20 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     d1e:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
     d20:	c8 01       	movw	r24, r16
     d22:	b7 01       	movw	r22, r14
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e8       	ldi	r20, 0x80	; 128
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     d30:	88 23       	and	r24, r24
     d32:	19 f4       	brne	.+6      	; 0xd3a <rprintfFloat+0x12c>
		{
			rprintfChar('.');
     d34:	8e e2       	ldi	r24, 0x2E	; 46
     d36:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
		}
		
		x -= (digit*place);
     d3a:	6b 2d       	mov	r22, r11
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	88 27       	eor	r24, r24
     d40:	77 fd       	sbrc	r23, 7
     d42:	80 95       	com	r24
     d44:	98 2f       	mov	r25, r24
     d46:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     d4a:	a8 01       	movw	r20, r16
     d4c:	97 01       	movw	r18, r14
     d4e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <__mulsf3>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	c4 01       	movw	r24, r8
     d58:	b3 01       	movw	r22, r6
     d5a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__subsf3>
     d5e:	3b 01       	movw	r6, r22
     d60:	4c 01       	movw	r8, r24
		place /= 10.0;
     d62:	c8 01       	movw	r24, r16
     d64:	b7 01       	movw	r22, r14
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3>
     d72:	7b 01       	movw	r14, r22
     d74:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
     d76:	a3 94       	inc	r10
     d78:	a4 14       	cp	r10, r4
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <rprintfFloat+0x170>
     d7c:	a7 cf       	rjmp	.-178    	; 0xccc <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	6f 90       	pop	r6
     d9a:	5f 90       	pop	r5
     d9c:	4f 90       	pop	r4
     d9e:	08 95       	ret

00000da0 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     da0:	7f 92       	push	r7
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	78 88       	ldd	r7, Y+16	; 0x10
     dc0:	c9 88       	ldd	r12, Y+17	; 0x11
     dc2:	da 88       	ldd	r13, Y+18	; 0x12
     dc4:	63 e1       	ldi	r22, 0x13	; 19
     dc6:	e6 2e       	mov	r14, r22
     dc8:	f1 2c       	mov	r15, r1
     dca:	ec 0e       	add	r14, r28
     dcc:	fd 1e       	adc	r15, r29
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
     dd0:	88 23       	and	r24, r24
     dd2:	81 f4       	brne	.+32     	; 0xdf4 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	7f 90       	pop	r7
     df2:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     df4:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     df8:	96 01       	movw	r18, r12
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     dfe:	77 20       	and	r7, r7
     e00:	21 f0       	breq	.+8      	; 0xe0a <rprintf1RamRom+0x6a>
     e02:	f6 01       	movw	r30, r12
     e04:	69 01       	movw	r12, r18
     e06:	84 91       	lpm	r24, Z+
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <rprintf1RamRom+0x70>
     e0a:	f6 01       	movw	r30, r12
     e0c:	80 81       	ld	r24, Z
     e0e:	69 01       	movw	r12, r18
     e10:	85 32       	cpi	r24, 0x25	; 37
     e12:	f1 f6       	brne	.-68     	; 0xdd0 <rprintf1RamRom+0x30>
     e14:	2f 5f       	subi	r18, 0xFF	; 255
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     e18:	77 20       	and	r7, r7
     e1a:	21 f0       	breq	.+8      	; 0xe24 <rprintf1RamRom+0x84>
     e1c:	f6 01       	movw	r30, r12
     e1e:	69 01       	movw	r12, r18
     e20:	84 91       	lpm	r24, Z+
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <rprintf1RamRom+0x8a>
     e24:	f6 01       	movw	r30, r12
     e26:	80 81       	ld	r24, Z
     e28:	69 01       	movw	r12, r18
     e2a:	84 36       	cpi	r24, 0x64	; 100
     e2c:	29 f0       	breq	.+10     	; 0xe38 <rprintf1RamRom+0x98>
     e2e:	88 37       	cpi	r24, 0x78	; 120
     e30:	81 f0       	breq	.+32     	; 0xe52 <rprintf1RamRom+0xb2>
     e32:	83 36       	cpi	r24, 0x63	; 99
     e34:	f9 f6       	brne	.-66     	; 0xdf4 <rprintf1RamRom+0x54>
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <rprintf1RamRom+0xa4>
     e38:	00 e1       	ldi	r16, 0x10	; 16
     e3a:	17 e2       	ldi	r17, 0x27	; 39
     e3c:	5a e0       	ldi	r21, 0x0A	; 10
     e3e:	a5 2e       	mov	r10, r21
     e40:	b1 2c       	mov	r11, r1
     e42:	0c c0       	rjmp	.+24     	; 0xe5c <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
     e44:	f7 01       	movw	r30, r14
     e46:	80 81       	ld	r24, Z
     e48:	22 e0       	ldi	r18, 0x02	; 2
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	e2 0e       	add	r14, r18
     e4e:	f3 1e       	adc	r15, r19
     e50:	d1 cf       	rjmp	.-94     	; 0xdf4 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	10 e1       	ldi	r17, 0x10	; 16
     e56:	40 e1       	ldi	r20, 0x10	; 16
     e58:	a4 2e       	mov	r10, r20
     e5a:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	83 2e       	mov	r8, r19
     e60:	91 2c       	mov	r9, r1
     e62:	8e 0c       	add	r8, r14
     e64:	9f 1c       	adc	r9, r15
     e66:	f7 01       	movw	r30, r14
     e68:	e0 80       	ld	r14, Z
     e6a:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
     e6c:	84 36       	cpi	r24, 0x64	; 100
     e6e:	b1 f4       	brne	.+44     	; 0xe9c <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
     e70:	f7 fe       	sbrs	r15, 7
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
     e74:	f0 94       	com	r15
     e76:	e1 94       	neg	r14
     e78:	f1 08       	sbc	r15, r1
     e7a:	f3 94       	inc	r15
					rprintfChar('-');
     e7c:	8d e2       	ldi	r24, 0x2D	; 45
     e7e:	0e 94 b1 04 	call	0x962	; 0x962 <rprintfChar>
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     e84:	c8 01       	movw	r24, r16
     e86:	6a e0       	ldi	r22, 0x0A	; 10
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
     e8e:	8b 01       	movw	r16, r22
     e90:	62 30       	cpi	r22, 0x02	; 2
     e92:	71 05       	cpc	r23, r1
     e94:	18 f0       	brcs	.+6      	; 0xe9c <rprintf1RamRom+0xfc>
     e96:	e0 16       	cp	r14, r16
     e98:	f1 06       	cpc	r15, r17
     e9a:	a0 f3       	brcs	.-24     	; 0xe84 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     e9c:	c7 01       	movw	r24, r14
     e9e:	b8 01       	movw	r22, r16
     ea0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
     ea4:	86 2f       	mov	r24, r22
     ea6:	0e 94 14 05 	call	0xa28	; 0xa28 <rprintfu04>
				u_val %= div_val;
     eaa:	c7 01       	movw	r24, r14
     eac:	b8 01       	movw	r22, r16
     eae:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
     eb2:	7c 01       	movw	r14, r24
				div_val /= base;
     eb4:	c8 01       	movw	r24, r16
     eb6:	b5 01       	movw	r22, r10
     eb8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
     ebc:	8b 01       	movw	r16, r22
			} while (div_val);
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	61 f7       	brne	.-40     	; 0xe9c <rprintf1RamRom+0xfc>
     ec4:	74 01       	movw	r14, r8
     ec6:	98 cf       	rjmp	.-208    	; 0xdf8 <rprintf1RamRom+0x58>

00000ec8 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	40 f4       	brcc	.+16     	; 0xedc <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     ecc:	e8 2f       	mov	r30, r24
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 56       	subi	r30, 0x6E	; 110
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	71 83       	std	Z+1, r23	; 0x01
     eda:	60 83       	st	Z, r22
     edc:	08 95       	ret

00000ede <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     ede:	9a 01       	movw	r18, r20
     ee0:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
     ee2:	88 23       	and	r24, r24
     ee4:	e1 f4       	brne	.+56     	; 0xf1e <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     ee6:	ca 01       	movw	r24, r20
     ee8:	b9 01       	movw	r22, r18
     eea:	60 58       	subi	r22, 0x80	; 128
     eec:	7b 47       	sbci	r23, 0x7B	; 123
     eee:	81 4e       	sbci	r24, 0xE1	; 225
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	f3 e0       	ldi	r31, 0x03	; 3
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fa 95       	dec	r31
     efe:	d1 f7       	brne	.-12     	; 0xef4 <uartSetBaudRate+0x16>
     f00:	e4 e0       	ldi	r30, 0x04	; 4
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	44 1f       	adc	r20, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	ea 95       	dec	r30
     f0c:	d1 f7       	brne	.-12     	; 0xf02 <uartSetBaudRate+0x24>
     f0e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__udivmodsi4>
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
     f16:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     f1a:	30 93 c5 00 	sts	0x00C5, r19
     f1e:	08 95       	ret

00000f20 <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	a3 e0       	ldi	r26, 0x03	; 3
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	aa 95       	dec	r26
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <uartGetRxBuffer+0x6>
     f2e:	2a 54       	subi	r18, 0x4A	; 74
     f30:	3e 4f       	sbci	r19, 0xFE	; 254
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
     f32:	c9 01       	movw	r24, r18
     f34:	08 95       	ret

00000f36 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b3 e0       	ldi	r27, 0x03	; 3
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	ba 95       	dec	r27
     f42:	e1 f7       	brne	.-8      	; 0xf3c <uartGetTxBuffer+0x6>
     f44:	26 52       	subi	r18, 0x26	; 38
     f46:	3e 4f       	sbci	r19, 0xFE	; 254
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
     f48:	c9 01       	movw	r24, r18
     f4a:	08 95       	ret

00000f4c <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     f4c:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     f4e:	88 23       	and	r24, r24
     f50:	31 f4       	brne	.+12     	; 0xf5e <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     f52:	80 91 c0 00 	lds	r24, 0x00C0
     f56:	85 ff       	sbrs	r24, 5
     f58:	fc cf       	rjmp	.-8      	; 0xf52 <uartSendByte+0x6>
		outb(UDR0, txData);
     f5a:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ee 54       	subi	r30, 0x4E	; 78
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	10 82       	st	Z, r1
}
     f66:	08 95       	ret

00000f68 <uart0SendByte>:

void uart0SendByte(u08 data)
{
     f68:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     f6a:	80 91 c0 00 	lds	r24, 0x00C0
     f6e:	85 ff       	sbrs	r24, 5
     f70:	fc cf       	rjmp	.-8      	; 0xf6a <uart0SendByte+0x2>
		outb(UDR0, txData);
     f72:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     f76:	10 92 b2 01 	sts	0x01B2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
     f7a:	08 95       	ret

00000f7c <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	e8 2f       	mov	r30, r24
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	8a 95       	dec	r24
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <uartReceiveBufferIsEmpty+0x8>
     f8c:	e6 54       	subi	r30, 0x46	; 70
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	89 2b       	or	r24, r25
     f96:	09 f4       	brne	.+2      	; 0xf9a <uartReceiveBufferIsEmpty+0x1e>
     f98:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
     f9a:	82 2f       	mov	r24, r18
     f9c:	08 95       	ret

00000f9e <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
     fa2:	88 23       	and	r24, r24
     fa4:	11 f4       	brne	.+4      	; 0xfaa <uartReceiveService+0xc>
		c = inb(UDR0);
     fa6:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	e9 01       	movw	r28, r18
     fb0:	cc 0f       	add	r28, r28
     fb2:	dd 1f       	adc	r29, r29
     fb4:	fe 01       	movw	r30, r28
     fb6:	ee 56       	subi	r30, 0x6E	; 110
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	89 2b       	or	r24, r25
     fc0:	31 f0       	breq	.+12     	; 0xfce <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	86 2f       	mov	r24, r22
     fca:	09 95       	icall
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	9a 95       	dec	r25
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <uartReceiveService+0x32>
     fd8:	c9 01       	movw	r24, r18
     fda:	8a 54       	subi	r24, 0x4A	; 74
     fdc:	9e 4f       	sbci	r25, 0xFE	; 254
     fde:	0e 94 09 0a 	call	0x1412	; 0x1412 <bufferAddToEnd>
     fe2:	88 23       	and	r24, r24
     fe4:	41 f4       	brne	.+16     	; 0xff6 <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
     fe6:	fe 01       	movw	r30, r28
     fe8:	e6 50       	subi	r30, 0x06	; 6
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
		}
	}
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
	uartReceiveService(0);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 cf 07 	call	0xf9e	; 0xf9e <uartReceiveService>
}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	88 2e       	mov	r8, r24
    1060:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    1062:	e8 2e       	mov	r14, r24
    1064:	ff 24       	eor	r15, r15
    1066:	f7 01       	movw	r30, r14
    1068:	13 e0       	ldi	r17, 0x03	; 3
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	1a 95       	dec	r17
    1070:	e1 f7       	brne	.-8      	; 0x106a <uartSendBuffer+0x24>
    1072:	e2 52       	subi	r30, 0x22	; 34
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	20 81       	ld	r18, Z
    1078:	31 81       	ldd	r19, Z+1	; 0x01
    107a:	24 0f       	add	r18, r20
    107c:	35 1f       	adc	r19, r21
    107e:	f7 01       	movw	r30, r14
    1080:	73 e0       	ldi	r23, 0x03	; 3
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	7a 95       	dec	r23
    1088:	e1 f7       	brne	.-8      	; 0x1082 <uartSendBuffer+0x3c>
    108a:	e4 52       	subi	r30, 0x24	; 36
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	b0 f5       	brcc	.+108    	; 0x1104 <uartSendBuffer+0xbe>
    1098:	41 15       	cp	r20, r1
    109a:	51 05       	cpc	r21, r1
    109c:	99 f1       	breq	.+102    	; 0x1104 <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    109e:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    10a0:	67 01       	movw	r12, r14
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	cc 0c       	add	r12, r12
    10a6:	dd 1c       	adc	r13, r13
    10a8:	6a 95       	dec	r22
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <uartSendBuffer+0x5e>
    10ac:	8a ed       	ldi	r24, 0xDA	; 218
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	c8 0e       	add	r12, r24
    10b2:	d9 1e       	adc	r13, r25
    10b4:	8d 01       	movw	r16, r26
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    10ba:	5a 01       	movw	r10, r20
    10bc:	08 94       	sec
    10be:	a1 08       	sbc	r10, r1
    10c0:	b1 08       	sbc	r11, r1
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <uartSendBuffer+0x8a>
    10c4:	c6 01       	movw	r24, r12
    10c6:	f8 01       	movw	r30, r16
    10c8:	60 81       	ld	r22, Z
    10ca:	0e 94 09 0a 	call	0x1412	; 0x1412 <bufferAddToEnd>
    10ce:	21 96       	adiw	r28, 0x01	; 1
    10d0:	0f 5f       	subi	r16, 0xFF	; 255
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	ca 15       	cp	r28, r10
    10d6:	db 05       	cpc	r29, r11
    10d8:	a8 f3       	brcs	.-22     	; 0x10c4 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    10da:	f7 01       	movw	r30, r14
    10dc:	ea 52       	subi	r30, 0x2A	; 42
    10de:	fe 4f       	sbci	r31, 0xFE	; 254
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    10e4:	88 20       	and	r8, r8
    10e6:	31 f4       	brne	.+12     	; 0x10f4 <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    10e8:	80 91 c0 00 	lds	r24, 0x00C0
    10ec:	85 ff       	sbrs	r24, 5
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    10f0:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    10f4:	82 eb       	ldi	r24, 0xB2	; 178
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	e8 0e       	add	r14, r24
    10fa:	f9 1e       	adc	r15, r25
    10fc:	f7 01       	movw	r30, r14
    10fe:	10 82       	st	Z, r1
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    1104:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	08 95       	ret

00001120 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	23 e0       	ldi	r18, 0x03	; 3
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	2a 95       	dec	r18
    112a:	e1 f7       	brne	.-8      	; 0x1124 <uartAddToTxBuffer+0x4>
    112c:	86 52       	subi	r24, 0x26	; 38
    112e:	9e 4f       	sbci	r25, 0xFE	; 254
    1130:	0e 94 09 0a 	call	0x1412	; 0x1412 <bufferAddToEnd>
}
    1134:	08 95       	ret

00001136 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    1136:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1138:	8a ed       	ldi	r24, 0xDA	; 218
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 09 0a 	call	0x1412	; 0x1412 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    1140:	08 95       	ret

00001142 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    1148:	a8 2f       	mov	r26, r24
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ed 01       	movw	r28, r26
    114e:	ca 52       	subi	r28, 0x2A	; 42
    1150:	de 4f       	sbci	r29, 0xFE	; 254
    1152:	88 81       	ld	r24, Y
    1154:	88 23       	and	r24, r24
    1156:	b1 f0       	breq	.+44     	; 0x1184 <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    1158:	fd 01       	movw	r30, r26
    115a:	33 e0       	ldi	r19, 0x03	; 3
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	3a 95       	dec	r19
    1162:	e1 f7       	brne	.-8      	; 0x115c <uartTransmitService+0x1a>
    1164:	e2 52       	subi	r30, 0x22	; 34
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	89 2b       	or	r24, r25
    116e:	49 f0       	breq	.+18     	; 0x1182 <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    1170:	23 30       	cpi	r18, 0x03	; 3
    1172:	61 f4       	brne	.+24     	; 0x118c <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1174:	8a ed       	ldi	r24, 0xDA	; 218
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 a0 09 	call	0x1340	; 0x1340 <bufferGetFromFront>
    117c:	80 93 c6 00 	sts	0x00C6, r24
    1180:	05 c0       	rjmp	.+10     	; 0x118c <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    1182:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    1184:	ae 54       	subi	r26, 0x4E	; 78
    1186:	be 4f       	sbci	r27, 0xFE	; 254
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	8c 93       	st	X, r24
	}
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
	uartTransmitService(0);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 a1 08 	call	0x1142	; 0x1142 <uartTransmitService>
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    11e4:	c8 2f       	mov	r28, r24
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	fe 01       	movw	r30, r28
    11ea:	ea 52       	subi	r30, 0x2A	; 42
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    11f2:	ce 01       	movw	r24, r28
    11f4:	43 e0       	ldi	r20, 0x03	; 3
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	4a 95       	dec	r20
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <uartSendTxBuffer+0x1a>
    11fe:	86 52       	subi	r24, 0x26	; 38
    1200:	9e 4f       	sbci	r25, 0xFE	; 254
    1202:	0e 94 a0 09 	call	0x1340	; 0x1340 <bufferGetFromFront>
    1206:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1208:	11 23       	and	r17, r17
    120a:	31 f4       	brne	.+12     	; 0x1218 <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    120c:	80 91 c0 00 	lds	r24, 0x00C0
    1210:	85 ff       	sbrs	r24, 5
    1212:	fc cf       	rjmp	.-8      	; 0x120c <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    1214:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1218:	ce 54       	subi	r28, 0x4E	; 78
    121a:	de 4f       	sbci	r29, 0xFE	; 254
    121c:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	08 95       	ret

00001226 <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	73 e0       	ldi	r23, 0x03	; 3
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	7a 95       	dec	r23
    123a:	e1 f7       	brne	.-8      	; 0x1234 <uartReceiveByte+0xe>
    123c:	e8 54       	subi	r30, 0x48	; 72
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	89 2b       	or	r24, r25
    1246:	c9 f0       	breq	.+50     	; 0x127a <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    1248:	f9 01       	movw	r30, r18
    124a:	63 e0       	ldi	r22, 0x03	; 3
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	6a 95       	dec	r22
    1252:	e1 f7       	brne	.-8      	; 0x124c <uartReceiveByte+0x26>
    1254:	e6 54       	subi	r30, 0x46	; 70
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	89 2b       	or	r24, r25
    125e:	69 f0       	breq	.+26     	; 0x127a <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    1260:	53 e0       	ldi	r21, 0x03	; 3
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	5a 95       	dec	r21
    1268:	e1 f7       	brne	.-8      	; 0x1262 <uartReceiveByte+0x3c>
    126a:	c9 01       	movw	r24, r18
    126c:	8a 54       	subi	r24, 0x4A	; 74
    126e:	9e 4f       	sbci	r25, 0xFE	; 254
    1270:	0e 94 a0 09 	call	0x1340	; 0x1340 <bufferGetFromFront>
    1274:	88 83       	st	Y, r24
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	01 c0       	rjmp	.+2      	; 0x127c <uartReceiveByte+0x56>
			return TRUE;
    127a:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	0f 92       	push	r0
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	be 01       	movw	r22, r28
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	0e 94 13 09 	call	0x1226	; 0x1226 <uartReceiveByte>
    1298:	88 23       	and	r24, r24
    129a:	19 f4       	brne	.+6      	; 0x12a2 <uart0GetByte+0x20>
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <uart0GetByte+0x26>
		return c;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    12a8:	c9 01       	movw	r24, r18
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	e3 e0       	ldi	r30, 0x03	; 3
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	ea 95       	dec	r30
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <uartFlushReceiveBuffer+0x4>
    12be:	8a 54       	subi	r24, 0x4A	; 74
    12c0:	9e 4f       	sbci	r25, 0xFE	; 254
    12c2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <bufferFlush>
}
    12c6:	08 95       	ret

000012c8 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    12c8:	86 eb       	ldi	r24, 0xB6	; 182
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	62 e0       	ldi	r22, 0x02	; 2
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	0e 94 93 09 	call	0x1326	; 0x1326 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    12d8:	8a ed       	ldi	r24, 0xDA	; 218
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	62 e8       	ldi	r22, 0x82	; 130
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	40 e1       	ldi	r20, 0x10	; 16
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 93 09 	call	0x1326	; 0x1326 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    12e8:	08 95       	ret

000012ea <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    12ea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    12ee:	10 92 93 01 	sts	0x0193, r1
    12f2:	10 92 92 01 	sts	0x0192, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    12f6:	88 ed       	ldi	r24, 0xD8	; 216
    12f8:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	55 e2       	ldi	r21, 0x25	; 37
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 6f 07 	call	0xede	; 0xede <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	80 93 b2 01 	sts	0x01B2, r24
	uartBufferedTx[0] = FALSE;
    1310:	10 92 d6 01 	sts	0x01D6, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1314:	10 92 fb 01 	sts	0x01FB, r1
    1318:	10 92 fa 01 	sts	0x01FA, r1
	// enable interrupts
	sei();
    131c:	78 94       	sei
}
    131e:	08 95       	ret

00001320 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    1320:	0e 94 75 09 	call	0x12ea	; 0x12ea <uart0Init>
}
    1324:	08 95       	ret

00001326 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    1326:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1328:	8f b7       	in	r24, 0x3f	; 63
    132a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    132c:	71 83       	std	Z+1, r23	; 0x01
    132e:	60 83       	st	Z, r22
	buffer->size = size;
    1330:	53 83       	std	Z+3, r21	; 0x03
    1332:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    1334:	17 82       	std	Z+7, r1	; 0x07
    1336:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    1338:	15 82       	std	Z+5, r1	; 0x05
    133a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    133c:	8f bf       	out	0x3f, r24	; 63
}
    133e:	08 95       	ret

00001340 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    1340:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    1342:	4f b7       	in	r20, 0x3f	; 63
    1344:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    1346:	14 96       	adiw	r26, 0x04	; 4
    1348:	8d 91       	ld	r24, X+
    134a:	9c 91       	ld	r25, X
    134c:	15 97       	sbiw	r26, 0x05	; 5
    134e:	89 2b       	or	r24, r25
    1350:	11 f4       	brne	.+4      	; 0x1356 <bufferGetFromFront+0x16>
    1352:	e0 e0       	ldi	r30, 0x00	; 0
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    1356:	16 96       	adiw	r26, 0x06	; 6
    1358:	8d 91       	ld	r24, X+
    135a:	9c 91       	ld	r25, X
    135c:	17 97       	sbiw	r26, 0x07	; 7
    135e:	ed 91       	ld	r30, X+
    1360:	fc 91       	ld	r31, X
    1362:	11 97       	sbiw	r26, 0x01	; 1
    1364:	e8 0f       	add	r30, r24
    1366:	f9 1f       	adc	r31, r25
    1368:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	17 96       	adiw	r26, 0x07	; 7
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
    1372:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	2d 91       	ld	r18, X+
    1378:	3c 91       	ld	r19, X
    137a:	13 97       	sbiw	r26, 0x03	; 3
    137c:	82 17       	cp	r24, r18
    137e:	93 07       	cpc	r25, r19
    1380:	30 f0       	brcs	.+12     	; 0x138e <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    1382:	82 1b       	sub	r24, r18
    1384:	93 0b       	sbc	r25, r19
    1386:	17 96       	adiw	r26, 0x07	; 7
    1388:	9c 93       	st	X, r25
    138a:	8e 93       	st	-X, r24
    138c:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    138e:	14 96       	adiw	r26, 0x04	; 4
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	15 97       	sbiw	r26, 0x05	; 5
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    13a0:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    13a2:	8e 2f       	mov	r24, r30
    13a4:	08 95       	ret

000013a6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    13a6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    13a8:	4f b7       	in	r20, 0x3f	; 63
    13aa:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    13ac:	84 81       	ldd	r24, Z+4	; 0x04
    13ae:	95 81       	ldd	r25, Z+5	; 0x05
    13b0:	68 17       	cp	r22, r24
    13b2:	79 07       	cpc	r23, r25
    13b4:	b0 f4       	brcc	.+44     	; 0x13e2 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    13b6:	86 81       	ldd	r24, Z+6	; 0x06
    13b8:	97 81       	ldd	r25, Z+7	; 0x07
    13ba:	86 0f       	add	r24, r22
    13bc:	97 1f       	adc	r25, r23
    13be:	97 83       	std	Z+7, r25	; 0x07
    13c0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    13c2:	22 81       	ldd	r18, Z+2	; 0x02
    13c4:	33 81       	ldd	r19, Z+3	; 0x03
    13c6:	82 17       	cp	r24, r18
    13c8:	93 07       	cpc	r25, r19
    13ca:	20 f0       	brcs	.+8      	; 0x13d4 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    13cc:	82 1b       	sub	r24, r18
    13ce:	93 0b       	sbc	r25, r19
    13d0:	97 83       	std	Z+7, r25	; 0x07
    13d2:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	95 81       	ldd	r25, Z+5	; 0x05
    13d8:	86 1b       	sub	r24, r22
    13da:	97 0b       	sbc	r25, r23
    13dc:	95 83       	std	Z+5, r25	; 0x05
    13de:	84 83       	std	Z+4, r24	; 0x04
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    13e2:	15 82       	std	Z+5, r1	; 0x05
    13e4:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    13e6:	4f bf       	out	0x3f, r20	; 63
}
    13e8:	08 95       	ret

000013ea <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    13ea:	fc 01       	movw	r30, r24
    13ec:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    13ee:	2f b7       	in	r18, 0x3f	; 63
    13f0:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    13f2:	2f bf       	out	0x3f, r18	; 63
    13f4:	26 81       	ldd	r18, Z+6	; 0x06
    13f6:	37 81       	ldd	r19, Z+7	; 0x07
    13f8:	62 81       	ldd	r22, Z+2	; 0x02
    13fa:	73 81       	ldd	r23, Z+3	; 0x03
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
    1404:	01 90       	ld	r0, Z+
    1406:	f0 81       	ld	r31, Z
    1408:	e0 2d       	mov	r30, r0
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
	return data;
}
    140e:	80 81       	ld	r24, Z
    1410:	08 95       	ret

00001412 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    141c:	4f b7       	in	r20, 0x3f	; 63
    141e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	6a 81       	ldd	r22, Y+2	; 0x02
    1426:	7b 81       	ldd	r23, Y+3	; 0x03
    1428:	26 17       	cp	r18, r22
    142a:	37 07       	cpc	r19, r23
    142c:	98 f4       	brcc	.+38     	; 0x1454 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	9f 81       	ldd	r25, Y+7	; 0x07
    1432:	82 0f       	add	r24, r18
    1434:	93 1f       	adc	r25, r19
    1436:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodhi4>
    143a:	e8 81       	ld	r30, Y
    143c:	f9 81       	ldd	r31, Y+1	; 0x01
    143e:	e8 0f       	add	r30, r24
    1440:	f9 1f       	adc	r31, r25
    1442:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	9d 83       	std	Y+5, r25	; 0x05
    144c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    144e:	4f bf       	out	0x3f, r20	; 63
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    1454:	4f bf       	out	0x3f, r20	; 63
    1456:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	08 95       	ret

00001460 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    1460:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1462:	8f b7       	in	r24, 0x3f	; 63
    1464:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    1466:	8f bf       	out	0x3f, r24	; 63
    1468:	22 81       	ldd	r18, Z+2	; 0x02
    146a:	33 81       	ldd	r19, Z+3	; 0x03
    146c:	84 81       	ldd	r24, Z+4	; 0x04
    146e:	95 81       	ldd	r25, Z+5	; 0x05
    1470:	28 1b       	sub	r18, r24
    1472:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    1474:	c9 01       	movw	r24, r18
    1476:	08 95       	ret

00001478 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    1478:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    147a:	8f b7       	in	r24, 0x3f	; 63
    147c:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    147e:	15 82       	std	Z+5, r1	; 0x05
    1480:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1482:	8f bf       	out	0x3f, r24	; 63
}
    1484:	08 95       	ret

00001486 <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    1486:	60 91 9a 01 	lds	r22, 0x019A
    148a:	70 91 9b 01 	lds	r23, 0x019B
	return wheel_left_tick_counter;
}
    148e:	80 91 9c 01 	lds	r24, 0x019C
    1492:	90 91 9d 01 	lds	r25, 0x019D
    1496:	08 95       	ret

00001498 <get_right_count>:

u32 get_right_count(void){
    1498:	60 91 9e 01 	lds	r22, 0x019E
    149c:	70 91 9f 01 	lds	r23, 0x019F
	return wheel_right_tick_counter;
}
    14a0:	80 91 a0 01 	lds	r24, 0x01A0
    14a4:	90 91 a1 01 	lds	r25, 0x01A1
    14a8:	08 95       	ret

000014aa <__vector_5>:

SIGNAL(PCINT2_vect){
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    14be:	29 b1       	in	r18, 0x09	; 9
    14c0:	20 78       	andi	r18, 0x80	; 128
    14c2:	20 93 a8 01 	sts	0x01A8, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    14c6:	80 91 a9 01 	lds	r24, 0x01A9
    14ca:	82 17       	cp	r24, r18
    14cc:	58 f4       	brcc	.+22     	; 0x14e4 <__vector_5+0x3a>
    14ce:	80 91 9a 01 	lds	r24, 0x019A
    14d2:	90 91 9b 01 	lds	r25, 0x019B
    14d6:	a0 91 9c 01 	lds	r26, 0x019C
    14da:	b0 91 9d 01 	lds	r27, 0x019D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    14de:	18 9b       	sbis	0x03, 0	; 3
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <__vector_5+0x4e>
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <__vector_5+0x56>
    14e4:	80 91 9a 01 	lds	r24, 0x019A
    14e8:	90 91 9b 01 	lds	r25, 0x019B
    14ec:	a0 91 9c 01 	lds	r26, 0x019C
    14f0:	b0 91 9d 01 	lds	r27, 0x019D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    14f4:	18 9b       	sbis	0x03, 0	; 3
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	b1 1d       	adc	r27, r1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	80 93 9a 01 	sts	0x019A, r24
    150a:	90 93 9b 01 	sts	0x019B, r25
    150e:	a0 93 9c 01 	sts	0x019C, r26
    1512:	b0 93 9d 01 	sts	0x019D, r27
		}
	}
	pin_level_past = pin_level_current;
    1516:	20 93 a9 01 	sts	0x01A9, r18
	
}
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_3>:
SIGNAL(PCINT0_vect){
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    1546:	33 b1       	in	r19, 0x03	; 3
    1548:	31 70       	andi	r19, 0x01	; 1
    154a:	30 93 a6 01 	sts	0x01A6, r19
	PINB4_current = bit_is_set(PINB,4);
    154e:	23 b1       	in	r18, 0x03	; 3
    1550:	20 71       	andi	r18, 0x10	; 16
    1552:	20 93 a4 01 	sts	0x01A4, r18
	PINB5_current = bit_is_set(PINB,5);
    1556:	43 b1       	in	r20, 0x03	; 3
    1558:	40 72       	andi	r20, 0x20	; 32
    155a:	40 93 a2 01 	sts	0x01A2, r20

	if(PINB0_current != PINB0_past){
    155e:	80 91 a7 01 	lds	r24, 0x01A7
    1562:	38 17       	cp	r19, r24
    1564:	49 f1       	breq	.+82     	; 0x15b8 <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    1566:	83 17       	cp	r24, r19
    1568:	58 f4       	brcc	.+22     	; 0x1580 <__vector_3+0x52>
    156a:	80 91 9a 01 	lds	r24, 0x019A
    156e:	90 91 9b 01 	lds	r25, 0x019B
    1572:	a0 91 9c 01 	lds	r26, 0x019C
    1576:	b0 91 9d 01 	lds	r27, 0x019D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    157a:	4f 9b       	sbis	0x09, 7	; 9
    157c:	0b c0       	rjmp	.+22     	; 0x1594 <__vector_3+0x66>
    157e:	0e c0       	rjmp	.+28     	; 0x159c <__vector_3+0x6e>
    1580:	80 91 9a 01 	lds	r24, 0x019A
    1584:	90 91 9b 01 	lds	r25, 0x019B
    1588:	a0 91 9c 01 	lds	r26, 0x019C
    158c:	b0 91 9d 01 	lds	r27, 0x019D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    1590:	4f 9b       	sbis	0x09, 7	; 9
    1592:	04 c0       	rjmp	.+8      	; 0x159c <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	a1 09       	sbc	r26, r1
    1598:	b1 09       	sbc	r27, r1
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	a1 1d       	adc	r26, r1
    15a0:	b1 1d       	adc	r27, r1
    15a2:	80 93 9a 01 	sts	0x019A, r24
    15a6:	90 93 9b 01 	sts	0x019B, r25
    15aa:	a0 93 9c 01 	sts	0x019C, r26
    15ae:	b0 93 9d 01 	sts	0x019D, r27
			}
		}
		PINB0_past = PINB0_current;
    15b2:	30 93 a7 01 	sts	0x01A7, r19
    15b6:	57 c0       	rjmp	.+174    	; 0x1666 <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    15b8:	80 91 a5 01 	lds	r24, 0x01A5
    15bc:	28 17       	cp	r18, r24
    15be:	49 f1       	breq	.+82     	; 0x1612 <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    15c0:	82 17       	cp	r24, r18
    15c2:	58 f4       	brcc	.+22     	; 0x15da <__vector_3+0xac>
    15c4:	80 91 9e 01 	lds	r24, 0x019E
    15c8:	90 91 9f 01 	lds	r25, 0x019F
    15cc:	a0 91 a0 01 	lds	r26, 0x01A0
    15d0:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    15d4:	1d 9b       	sbis	0x03, 5	; 3
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <__vector_3+0xc0>
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <__vector_3+0xc8>
    15da:	80 91 9e 01 	lds	r24, 0x019E
    15de:	90 91 9f 01 	lds	r25, 0x019F
    15e2:	a0 91 a0 01 	lds	r26, 0x01A0
    15e6:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    15ea:	1d 9b       	sbis	0x03, 5	; 3
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	a1 09       	sbc	r26, r1
    15f2:	b1 09       	sbc	r27, r1
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	a1 1d       	adc	r26, r1
    15fa:	b1 1d       	adc	r27, r1
    15fc:	80 93 9e 01 	sts	0x019E, r24
    1600:	90 93 9f 01 	sts	0x019F, r25
    1604:	a0 93 a0 01 	sts	0x01A0, r26
    1608:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB4_past = PINB4_current;
    160c:	20 93 a5 01 	sts	0x01A5, r18
    1610:	2a c0       	rjmp	.+84     	; 0x1666 <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    1612:	80 91 a3 01 	lds	r24, 0x01A3
    1616:	84 17       	cp	r24, r20
    1618:	58 f4       	brcc	.+22     	; 0x1630 <__vector_3+0x102>
    161a:	80 91 9e 01 	lds	r24, 0x019E
    161e:	90 91 9f 01 	lds	r25, 0x019F
    1622:	a0 91 a0 01 	lds	r26, 0x01A0
    1626:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    162a:	1c 9b       	sbis	0x03, 4	; 3
    162c:	0b c0       	rjmp	.+22     	; 0x1644 <__vector_3+0x116>
    162e:	0e c0       	rjmp	.+28     	; 0x164c <__vector_3+0x11e>
    1630:	80 91 9e 01 	lds	r24, 0x019E
    1634:	90 91 9f 01 	lds	r25, 0x019F
    1638:	a0 91 a0 01 	lds	r26, 0x01A0
    163c:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    1640:	1c 9b       	sbis	0x03, 4	; 3
    1642:	04 c0       	rjmp	.+8      	; 0x164c <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	a1 1d       	adc	r26, r1
    1648:	b1 1d       	adc	r27, r1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	a1 09       	sbc	r26, r1
    1650:	b1 09       	sbc	r27, r1
    1652:	80 93 9e 01 	sts	0x019E, r24
    1656:	90 93 9f 01 	sts	0x019F, r25
    165a:	a0 93 a0 01 	sts	0x01A0, r26
    165e:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB5_past = PINB5_current;
    1662:	40 93 a3 01 	sts	0x01A3, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	0f 90       	pop	r0
    167a:	1f 90       	pop	r1
    167c:	18 95       	reti

0000167e <__vector_default>:


ISR(BADISR_vect){
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
	
}
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <exit>:
    1692:	f8 94       	cli
    1694:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <_exit>

00001698 <__subsf3>:
    1698:	50 58       	subi	r21, 0x80	; 128

0000169a <__addsf3>:
    169a:	bb 27       	eor	r27, r27
    169c:	aa 27       	eor	r26, r26
    169e:	0e d0       	rcall	.+28     	; 0x16bc <__addsf3x>
    16a0:	70 c1       	rjmp	.+736    	; 0x1982 <__fp_round>
    16a2:	61 d1       	rcall	.+706    	; 0x1966 <__fp_pscA>
    16a4:	30 f0       	brcs	.+12     	; 0x16b2 <__addsf3+0x18>
    16a6:	66 d1       	rcall	.+716    	; 0x1974 <__fp_pscB>
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <__addsf3+0x18>
    16aa:	31 f4       	brne	.+12     	; 0x16b8 <__addsf3+0x1e>
    16ac:	9f 3f       	cpi	r25, 0xFF	; 255
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <__addsf3+0x1a>
    16b0:	1e f4       	brtc	.+6      	; 0x16b8 <__addsf3+0x1e>
    16b2:	56 c1       	rjmp	.+684    	; 0x1960 <__fp_nan>
    16b4:	0e f4       	brtc	.+2      	; 0x16b8 <__addsf3+0x1e>
    16b6:	e0 95       	com	r30
    16b8:	e7 fb       	bst	r30, 7
    16ba:	4c c1       	rjmp	.+664    	; 0x1954 <__fp_inf>

000016bc <__addsf3x>:
    16bc:	e9 2f       	mov	r30, r25
    16be:	72 d1       	rcall	.+740    	; 0x19a4 <__fp_split3>
    16c0:	80 f3       	brcs	.-32     	; 0x16a2 <__addsf3+0x8>
    16c2:	ba 17       	cp	r27, r26
    16c4:	62 07       	cpc	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	84 07       	cpc	r24, r20
    16ca:	95 07       	cpc	r25, r21
    16cc:	18 f0       	brcs	.+6      	; 0x16d4 <__addsf3x+0x18>
    16ce:	71 f4       	brne	.+28     	; 0x16ec <__addsf3x+0x30>
    16d0:	9e f5       	brtc	.+102    	; 0x1738 <__addsf3x+0x7c>
    16d2:	8a c1       	rjmp	.+788    	; 0x19e8 <__fp_zero>
    16d4:	0e f4       	brtc	.+2      	; 0x16d8 <__addsf3x+0x1c>
    16d6:	e0 95       	com	r30
    16d8:	0b 2e       	mov	r0, r27
    16da:	ba 2f       	mov	r27, r26
    16dc:	a0 2d       	mov	r26, r0
    16de:	0b 01       	movw	r0, r22
    16e0:	b9 01       	movw	r22, r18
    16e2:	90 01       	movw	r18, r0
    16e4:	0c 01       	movw	r0, r24
    16e6:	ca 01       	movw	r24, r20
    16e8:	a0 01       	movw	r20, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	ff 27       	eor	r31, r31
    16ee:	59 1b       	sub	r21, r25
    16f0:	99 f0       	breq	.+38     	; 0x1718 <__addsf3x+0x5c>
    16f2:	59 3f       	cpi	r21, 0xF9	; 249
    16f4:	50 f4       	brcc	.+20     	; 0x170a <__addsf3x+0x4e>
    16f6:	50 3e       	cpi	r21, 0xE0	; 224
    16f8:	68 f1       	brcs	.+90     	; 0x1754 <__addsf3x+0x98>
    16fa:	1a 16       	cp	r1, r26
    16fc:	f0 40       	sbci	r31, 0x00	; 0
    16fe:	a2 2f       	mov	r26, r18
    1700:	23 2f       	mov	r18, r19
    1702:	34 2f       	mov	r19, r20
    1704:	44 27       	eor	r20, r20
    1706:	58 5f       	subi	r21, 0xF8	; 248
    1708:	f3 cf       	rjmp	.-26     	; 0x16f0 <__addsf3x+0x34>
    170a:	46 95       	lsr	r20
    170c:	37 95       	ror	r19
    170e:	27 95       	ror	r18
    1710:	a7 95       	ror	r26
    1712:	f0 40       	sbci	r31, 0x00	; 0
    1714:	53 95       	inc	r21
    1716:	c9 f7       	brne	.-14     	; 0x170a <__addsf3x+0x4e>
    1718:	7e f4       	brtc	.+30     	; 0x1738 <__addsf3x+0x7c>
    171a:	1f 16       	cp	r1, r31
    171c:	ba 0b       	sbc	r27, r26
    171e:	62 0b       	sbc	r22, r18
    1720:	73 0b       	sbc	r23, r19
    1722:	84 0b       	sbc	r24, r20
    1724:	ba f0       	brmi	.+46     	; 0x1754 <__addsf3x+0x98>
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	a1 f0       	breq	.+40     	; 0x1752 <__addsf3x+0x96>
    172a:	ff 0f       	add	r31, r31
    172c:	bb 1f       	adc	r27, r27
    172e:	66 1f       	adc	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	88 1f       	adc	r24, r24
    1734:	c2 f7       	brpl	.-16     	; 0x1726 <__addsf3x+0x6a>
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <__addsf3x+0x98>
    1738:	ba 0f       	add	r27, r26
    173a:	62 1f       	adc	r22, r18
    173c:	73 1f       	adc	r23, r19
    173e:	84 1f       	adc	r24, r20
    1740:	48 f4       	brcc	.+18     	; 0x1754 <__addsf3x+0x98>
    1742:	87 95       	ror	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b7 95       	ror	r27
    174a:	f7 95       	ror	r31
    174c:	9e 3f       	cpi	r25, 0xFE	; 254
    174e:	08 f0       	brcs	.+2      	; 0x1752 <__addsf3x+0x96>
    1750:	b3 cf       	rjmp	.-154    	; 0x16b8 <__addsf3+0x1e>
    1752:	93 95       	inc	r25
    1754:	88 0f       	add	r24, r24
    1756:	08 f0       	brcs	.+2      	; 0x175a <__addsf3x+0x9e>
    1758:	99 27       	eor	r25, r25
    175a:	ee 0f       	add	r30, r30
    175c:	97 95       	ror	r25
    175e:	87 95       	ror	r24
    1760:	08 95       	ret

00001762 <__cmpsf2>:
    1762:	d4 d0       	rcall	.+424    	; 0x190c <__fp_cmp>
    1764:	08 f4       	brcc	.+2      	; 0x1768 <__cmpsf2+0x6>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	08 95       	ret

0000176a <__divsf3>:
    176a:	0c d0       	rcall	.+24     	; 0x1784 <__divsf3x>
    176c:	0a c1       	rjmp	.+532    	; 0x1982 <__fp_round>
    176e:	02 d1       	rcall	.+516    	; 0x1974 <__fp_pscB>
    1770:	40 f0       	brcs	.+16     	; 0x1782 <__divsf3+0x18>
    1772:	f9 d0       	rcall	.+498    	; 0x1966 <__fp_pscA>
    1774:	30 f0       	brcs	.+12     	; 0x1782 <__divsf3+0x18>
    1776:	21 f4       	brne	.+8      	; 0x1780 <__divsf3+0x16>
    1778:	5f 3f       	cpi	r21, 0xFF	; 255
    177a:	19 f0       	breq	.+6      	; 0x1782 <__divsf3+0x18>
    177c:	eb c0       	rjmp	.+470    	; 0x1954 <__fp_inf>
    177e:	51 11       	cpse	r21, r1
    1780:	34 c1       	rjmp	.+616    	; 0x19ea <__fp_szero>
    1782:	ee c0       	rjmp	.+476    	; 0x1960 <__fp_nan>

00001784 <__divsf3x>:
    1784:	0f d1       	rcall	.+542    	; 0x19a4 <__fp_split3>
    1786:	98 f3       	brcs	.-26     	; 0x176e <__divsf3+0x4>

00001788 <__divsf3_pse>:
    1788:	99 23       	and	r25, r25
    178a:	c9 f3       	breq	.-14     	; 0x177e <__divsf3+0x14>
    178c:	55 23       	and	r21, r21
    178e:	b1 f3       	breq	.-20     	; 0x177c <__divsf3+0x12>
    1790:	95 1b       	sub	r25, r21
    1792:	55 0b       	sbc	r21, r21
    1794:	bb 27       	eor	r27, r27
    1796:	aa 27       	eor	r26, r26
    1798:	62 17       	cp	r22, r18
    179a:	73 07       	cpc	r23, r19
    179c:	84 07       	cpc	r24, r20
    179e:	38 f0       	brcs	.+14     	; 0x17ae <__divsf3_pse+0x26>
    17a0:	9f 5f       	subi	r25, 0xFF	; 255
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	44 1f       	adc	r20, r20
    17aa:	aa 1f       	adc	r26, r26
    17ac:	a9 f3       	breq	.-22     	; 0x1798 <__divsf3_pse+0x10>
    17ae:	33 d0       	rcall	.+102    	; 0x1816 <__divsf3_pse+0x8e>
    17b0:	0e 2e       	mov	r0, r30
    17b2:	3a f0       	brmi	.+14     	; 0x17c2 <__divsf3_pse+0x3a>
    17b4:	e0 e8       	ldi	r30, 0x80	; 128
    17b6:	30 d0       	rcall	.+96     	; 0x1818 <__divsf3_pse+0x90>
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	50 40       	sbci	r21, 0x00	; 0
    17bc:	e6 95       	lsr	r30
    17be:	00 1c       	adc	r0, r0
    17c0:	ca f7       	brpl	.-14     	; 0x17b4 <__divsf3_pse+0x2c>
    17c2:	29 d0       	rcall	.+82     	; 0x1816 <__divsf3_pse+0x8e>
    17c4:	fe 2f       	mov	r31, r30
    17c6:	27 d0       	rcall	.+78     	; 0x1816 <__divsf3_pse+0x8e>
    17c8:	66 0f       	add	r22, r22
    17ca:	77 1f       	adc	r23, r23
    17cc:	88 1f       	adc	r24, r24
    17ce:	bb 1f       	adc	r27, r27
    17d0:	26 17       	cp	r18, r22
    17d2:	37 07       	cpc	r19, r23
    17d4:	48 07       	cpc	r20, r24
    17d6:	ab 07       	cpc	r26, r27
    17d8:	b0 e8       	ldi	r27, 0x80	; 128
    17da:	09 f0       	breq	.+2      	; 0x17de <__divsf3_pse+0x56>
    17dc:	bb 0b       	sbc	r27, r27
    17de:	80 2d       	mov	r24, r0
    17e0:	bf 01       	movw	r22, r30
    17e2:	ff 27       	eor	r31, r31
    17e4:	93 58       	subi	r25, 0x83	; 131
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	2a f0       	brmi	.+10     	; 0x17f4 <__divsf3_pse+0x6c>
    17ea:	9e 3f       	cpi	r25, 0xFE	; 254
    17ec:	51 05       	cpc	r21, r1
    17ee:	68 f0       	brcs	.+26     	; 0x180a <__divsf3_pse+0x82>
    17f0:	b1 c0       	rjmp	.+354    	; 0x1954 <__fp_inf>
    17f2:	fb c0       	rjmp	.+502    	; 0x19ea <__fp_szero>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	ec f3       	brlt	.-6      	; 0x17f2 <__divsf3_pse+0x6a>
    17f8:	98 3e       	cpi	r25, 0xE8	; 232
    17fa:	dc f3       	brlt	.-10     	; 0x17f2 <__divsf3_pse+0x6a>
    17fc:	86 95       	lsr	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	f7 95       	ror	r31
    1806:	9f 5f       	subi	r25, 0xFF	; 255
    1808:	c9 f7       	brne	.-14     	; 0x17fc <__divsf3_pse+0x74>
    180a:	88 0f       	add	r24, r24
    180c:	91 1d       	adc	r25, r1
    180e:	96 95       	lsr	r25
    1810:	87 95       	ror	r24
    1812:	97 f9       	bld	r25, 7
    1814:	08 95       	ret
    1816:	e1 e0       	ldi	r30, 0x01	; 1
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	bb 1f       	adc	r27, r27
    1820:	62 17       	cp	r22, r18
    1822:	73 07       	cpc	r23, r19
    1824:	84 07       	cpc	r24, r20
    1826:	ba 07       	cpc	r27, r26
    1828:	20 f0       	brcs	.+8      	; 0x1832 <__divsf3_pse+0xaa>
    182a:	62 1b       	sub	r22, r18
    182c:	73 0b       	sbc	r23, r19
    182e:	84 0b       	sbc	r24, r20
    1830:	ba 0b       	sbc	r27, r26
    1832:	ee 1f       	adc	r30, r30
    1834:	88 f7       	brcc	.-30     	; 0x1818 <__divsf3_pse+0x90>
    1836:	e0 95       	com	r30
    1838:	08 95       	ret

0000183a <__fixunssfsi>:
    183a:	bc d0       	rcall	.+376    	; 0x19b4 <__fp_splitA>
    183c:	88 f0       	brcs	.+34     	; 0x1860 <__fixunssfsi+0x26>
    183e:	9f 57       	subi	r25, 0x7F	; 127
    1840:	90 f0       	brcs	.+36     	; 0x1866 <__fixunssfsi+0x2c>
    1842:	b9 2f       	mov	r27, r25
    1844:	99 27       	eor	r25, r25
    1846:	b7 51       	subi	r27, 0x17	; 23
    1848:	a0 f0       	brcs	.+40     	; 0x1872 <__fixunssfsi+0x38>
    184a:	d1 f0       	breq	.+52     	; 0x1880 <__fixunssfsi+0x46>
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	1a f0       	brmi	.+6      	; 0x185c <__fixunssfsi+0x22>
    1856:	ba 95       	dec	r27
    1858:	c9 f7       	brne	.-14     	; 0x184c <__fixunssfsi+0x12>
    185a:	12 c0       	rjmp	.+36     	; 0x1880 <__fixunssfsi+0x46>
    185c:	b1 30       	cpi	r27, 0x01	; 1
    185e:	81 f0       	breq	.+32     	; 0x1880 <__fixunssfsi+0x46>
    1860:	c3 d0       	rcall	.+390    	; 0x19e8 <__fp_zero>
    1862:	b1 e0       	ldi	r27, 0x01	; 1
    1864:	08 95       	ret
    1866:	c0 c0       	rjmp	.+384    	; 0x19e8 <__fp_zero>
    1868:	67 2f       	mov	r22, r23
    186a:	78 2f       	mov	r23, r24
    186c:	88 27       	eor	r24, r24
    186e:	b8 5f       	subi	r27, 0xF8	; 248
    1870:	39 f0       	breq	.+14     	; 0x1880 <__fixunssfsi+0x46>
    1872:	b9 3f       	cpi	r27, 0xF9	; 249
    1874:	cc f3       	brlt	.-14     	; 0x1868 <__fixunssfsi+0x2e>
    1876:	86 95       	lsr	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b3 95       	inc	r27
    187e:	d9 f7       	brne	.-10     	; 0x1876 <__fixunssfsi+0x3c>
    1880:	3e f4       	brtc	.+14     	; 0x1890 <__fixunssfsi+0x56>
    1882:	90 95       	com	r25
    1884:	80 95       	com	r24
    1886:	70 95       	com	r23
    1888:	61 95       	neg	r22
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	08 95       	ret

00001892 <__floatunsisf>:
    1892:	e8 94       	clt
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <__floatsisf+0x12>

00001896 <__floatsisf>:
    1896:	97 fb       	bst	r25, 7
    1898:	3e f4       	brtc	.+14     	; 0x18a8 <__floatsisf+0x12>
    189a:	90 95       	com	r25
    189c:	80 95       	com	r24
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	99 23       	and	r25, r25
    18aa:	a9 f0       	breq	.+42     	; 0x18d6 <__floatsisf+0x40>
    18ac:	f9 2f       	mov	r31, r25
    18ae:	96 e9       	ldi	r25, 0x96	; 150
    18b0:	bb 27       	eor	r27, r27
    18b2:	93 95       	inc	r25
    18b4:	f6 95       	lsr	r31
    18b6:	87 95       	ror	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	b7 95       	ror	r27
    18be:	f1 11       	cpse	r31, r1
    18c0:	f8 cf       	rjmp	.-16     	; 0x18b2 <__floatsisf+0x1c>
    18c2:	fa f4       	brpl	.+62     	; 0x1902 <__floatsisf+0x6c>
    18c4:	bb 0f       	add	r27, r27
    18c6:	11 f4       	brne	.+4      	; 0x18cc <__floatsisf+0x36>
    18c8:	60 ff       	sbrs	r22, 0
    18ca:	1b c0       	rjmp	.+54     	; 0x1902 <__floatsisf+0x6c>
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	16 c0       	rjmp	.+44     	; 0x1902 <__floatsisf+0x6c>
    18d6:	88 23       	and	r24, r24
    18d8:	11 f0       	breq	.+4      	; 0x18de <__floatsisf+0x48>
    18da:	96 e9       	ldi	r25, 0x96	; 150
    18dc:	11 c0       	rjmp	.+34     	; 0x1900 <__floatsisf+0x6a>
    18de:	77 23       	and	r23, r23
    18e0:	21 f0       	breq	.+8      	; 0x18ea <__floatsisf+0x54>
    18e2:	9e e8       	ldi	r25, 0x8E	; 142
    18e4:	87 2f       	mov	r24, r23
    18e6:	76 2f       	mov	r23, r22
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <__floatsisf+0x5e>
    18ea:	66 23       	and	r22, r22
    18ec:	71 f0       	breq	.+28     	; 0x190a <__floatsisf+0x74>
    18ee:	96 e8       	ldi	r25, 0x86	; 134
    18f0:	86 2f       	mov	r24, r22
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	2a f0       	brmi	.+10     	; 0x1902 <__floatsisf+0x6c>
    18f8:	9a 95       	dec	r25
    18fa:	66 0f       	add	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	da f7       	brpl	.-10     	; 0x18f8 <__floatsisf+0x62>
    1902:	88 0f       	add	r24, r24
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <__fp_cmp>:
    190c:	99 0f       	add	r25, r25
    190e:	00 08       	sbc	r0, r0
    1910:	55 0f       	add	r21, r21
    1912:	aa 0b       	sbc	r26, r26
    1914:	e0 e8       	ldi	r30, 0x80	; 128
    1916:	fe ef       	ldi	r31, 0xFE	; 254
    1918:	16 16       	cp	r1, r22
    191a:	17 06       	cpc	r1, r23
    191c:	e8 07       	cpc	r30, r24
    191e:	f9 07       	cpc	r31, r25
    1920:	c0 f0       	brcs	.+48     	; 0x1952 <__fp_cmp+0x46>
    1922:	12 16       	cp	r1, r18
    1924:	13 06       	cpc	r1, r19
    1926:	e4 07       	cpc	r30, r20
    1928:	f5 07       	cpc	r31, r21
    192a:	98 f0       	brcs	.+38     	; 0x1952 <__fp_cmp+0x46>
    192c:	62 1b       	sub	r22, r18
    192e:	73 0b       	sbc	r23, r19
    1930:	84 0b       	sbc	r24, r20
    1932:	95 0b       	sbc	r25, r21
    1934:	39 f4       	brne	.+14     	; 0x1944 <__fp_cmp+0x38>
    1936:	0a 26       	eor	r0, r26
    1938:	61 f0       	breq	.+24     	; 0x1952 <__fp_cmp+0x46>
    193a:	23 2b       	or	r18, r19
    193c:	24 2b       	or	r18, r20
    193e:	25 2b       	or	r18, r21
    1940:	21 f4       	brne	.+8      	; 0x194a <__fp_cmp+0x3e>
    1942:	08 95       	ret
    1944:	0a 26       	eor	r0, r26
    1946:	09 f4       	brne	.+2      	; 0x194a <__fp_cmp+0x3e>
    1948:	a1 40       	sbci	r26, 0x01	; 1
    194a:	a6 95       	lsr	r26
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	81 1d       	adc	r24, r1
    1950:	81 1d       	adc	r24, r1
    1952:	08 95       	ret

00001954 <__fp_inf>:
    1954:	97 f9       	bld	r25, 7
    1956:	9f 67       	ori	r25, 0x7F	; 127
    1958:	80 e8       	ldi	r24, 0x80	; 128
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	08 95       	ret

00001960 <__fp_nan>:
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	08 95       	ret

00001966 <__fp_pscA>:
    1966:	00 24       	eor	r0, r0
    1968:	0a 94       	dec	r0
    196a:	16 16       	cp	r1, r22
    196c:	17 06       	cpc	r1, r23
    196e:	18 06       	cpc	r1, r24
    1970:	09 06       	cpc	r0, r25
    1972:	08 95       	ret

00001974 <__fp_pscB>:
    1974:	00 24       	eor	r0, r0
    1976:	0a 94       	dec	r0
    1978:	12 16       	cp	r1, r18
    197a:	13 06       	cpc	r1, r19
    197c:	14 06       	cpc	r1, r20
    197e:	05 06       	cpc	r0, r21
    1980:	08 95       	ret

00001982 <__fp_round>:
    1982:	09 2e       	mov	r0, r25
    1984:	03 94       	inc	r0
    1986:	00 0c       	add	r0, r0
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0xc>
    198a:	88 23       	and	r24, r24
    198c:	52 f0       	brmi	.+20     	; 0x19a2 <__fp_round+0x20>
    198e:	bb 0f       	add	r27, r27
    1990:	40 f4       	brcc	.+16     	; 0x19a2 <__fp_round+0x20>
    1992:	bf 2b       	or	r27, r31
    1994:	11 f4       	brne	.+4      	; 0x199a <__fp_round+0x18>
    1996:	60 ff       	sbrs	r22, 0
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__fp_round+0x20>
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__fp_split3>:
    19a4:	57 fd       	sbrc	r21, 7
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <__fp_splitA+0x10>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__fp_splitA+0x1a>
    19b2:	47 95       	ror	r20

000019b4 <__fp_splitA>:
    19b4:	88 0f       	add	r24, r24
    19b6:	97 fb       	bst	r25, 7
    19b8:	99 1f       	adc	r25, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <__fp_splitA+0x20>
    19bc:	9f 3f       	cpi	r25, 0xFF	; 255
    19be:	79 f0       	breq	.+30     	; 0x19de <__fp_splitA+0x2a>
    19c0:	87 95       	ror	r24
    19c2:	08 95       	ret
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__fp_split3+0xe>
    19ce:	46 95       	lsr	r20
    19d0:	f1 df       	rcall	.-30     	; 0x19b4 <__fp_splitA>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <__fp_splitA+0x30>
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	18 06       	cpc	r1, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <__fp_splitA+0xc>
    19de:	86 95       	lsr	r24
    19e0:	71 05       	cpc	r23, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	08 94       	sec
    19e6:	08 95       	ret

000019e8 <__fp_zero>:
    19e8:	e8 94       	clt

000019ea <__fp_szero>:
    19ea:	bb 27       	eor	r27, r27
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	97 f9       	bld	r25, 7
    19f4:	08 95       	ret

000019f6 <__gesf2>:
    19f6:	8a df       	rcall	.-236    	; 0x190c <__fp_cmp>
    19f8:	08 f4       	brcc	.+2      	; 0x19fc <__gesf2+0x6>
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	08 95       	ret

000019fe <__mulsf3>:
    19fe:	0b d0       	rcall	.+22     	; 0x1a16 <__mulsf3x>
    1a00:	c0 cf       	rjmp	.-128    	; 0x1982 <__fp_round>
    1a02:	b1 df       	rcall	.-158    	; 0x1966 <__fp_pscA>
    1a04:	28 f0       	brcs	.+10     	; 0x1a10 <__mulsf3+0x12>
    1a06:	b6 df       	rcall	.-148    	; 0x1974 <__fp_pscB>
    1a08:	18 f0       	brcs	.+6      	; 0x1a10 <__mulsf3+0x12>
    1a0a:	95 23       	and	r25, r21
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <__mulsf3+0x12>
    1a0e:	a2 cf       	rjmp	.-188    	; 0x1954 <__fp_inf>
    1a10:	a7 cf       	rjmp	.-178    	; 0x1960 <__fp_nan>
    1a12:	11 24       	eor	r1, r1
    1a14:	ea cf       	rjmp	.-44     	; 0x19ea <__fp_szero>

00001a16 <__mulsf3x>:
    1a16:	c6 df       	rcall	.-116    	; 0x19a4 <__fp_split3>
    1a18:	a0 f3       	brcs	.-24     	; 0x1a02 <__mulsf3+0x4>

00001a1a <__mulsf3_pse>:
    1a1a:	95 9f       	mul	r25, r21
    1a1c:	d1 f3       	breq	.-12     	; 0x1a12 <__mulsf3+0x14>
    1a1e:	95 0f       	add	r25, r21
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	55 1f       	adc	r21, r21
    1a24:	62 9f       	mul	r22, r18
    1a26:	f0 01       	movw	r30, r0
    1a28:	72 9f       	mul	r23, r18
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	f0 0d       	add	r31, r0
    1a2e:	b1 1d       	adc	r27, r1
    1a30:	63 9f       	mul	r22, r19
    1a32:	aa 27       	eor	r26, r26
    1a34:	f0 0d       	add	r31, r0
    1a36:	b1 1d       	adc	r27, r1
    1a38:	aa 1f       	adc	r26, r26
    1a3a:	64 9f       	mul	r22, r20
    1a3c:	66 27       	eor	r22, r22
    1a3e:	b0 0d       	add	r27, r0
    1a40:	a1 1d       	adc	r26, r1
    1a42:	66 1f       	adc	r22, r22
    1a44:	82 9f       	mul	r24, r18
    1a46:	22 27       	eor	r18, r18
    1a48:	b0 0d       	add	r27, r0
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	62 1f       	adc	r22, r18
    1a4e:	73 9f       	mul	r23, r19
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	62 1f       	adc	r22, r18
    1a56:	83 9f       	mul	r24, r19
    1a58:	a0 0d       	add	r26, r0
    1a5a:	61 1d       	adc	r22, r1
    1a5c:	22 1f       	adc	r18, r18
    1a5e:	74 9f       	mul	r23, r20
    1a60:	33 27       	eor	r19, r19
    1a62:	a0 0d       	add	r26, r0
    1a64:	61 1d       	adc	r22, r1
    1a66:	23 1f       	adc	r18, r19
    1a68:	84 9f       	mul	r24, r20
    1a6a:	60 0d       	add	r22, r0
    1a6c:	21 1d       	adc	r18, r1
    1a6e:	82 2f       	mov	r24, r18
    1a70:	76 2f       	mov	r23, r22
    1a72:	6a 2f       	mov	r22, r26
    1a74:	11 24       	eor	r1, r1
    1a76:	9f 57       	subi	r25, 0x7F	; 127
    1a78:	50 40       	sbci	r21, 0x00	; 0
    1a7a:	8a f0       	brmi	.+34     	; 0x1a9e <__mulsf3_pse+0x84>
    1a7c:	e1 f0       	breq	.+56     	; 0x1ab6 <__mulsf3_pse+0x9c>
    1a7e:	88 23       	and	r24, r24
    1a80:	4a f0       	brmi	.+18     	; 0x1a94 <__mulsf3_pse+0x7a>
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	bb 1f       	adc	r27, r27
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	a9 f7       	brne	.-22     	; 0x1a7e <__mulsf3_pse+0x64>
    1a94:	9e 3f       	cpi	r25, 0xFE	; 254
    1a96:	51 05       	cpc	r21, r1
    1a98:	70 f0       	brcs	.+28     	; 0x1ab6 <__mulsf3_pse+0x9c>
    1a9a:	5c cf       	rjmp	.-328    	; 0x1954 <__fp_inf>
    1a9c:	a6 cf       	rjmp	.-180    	; 0x19ea <__fp_szero>
    1a9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa0:	ec f3       	brlt	.-6      	; 0x1a9c <__mulsf3_pse+0x82>
    1aa2:	98 3e       	cpi	r25, 0xE8	; 232
    1aa4:	dc f3       	brlt	.-10     	; 0x1a9c <__mulsf3_pse+0x82>
    1aa6:	86 95       	lsr	r24
    1aa8:	77 95       	ror	r23
    1aaa:	67 95       	ror	r22
    1aac:	b7 95       	ror	r27
    1aae:	f7 95       	ror	r31
    1ab0:	e7 95       	ror	r30
    1ab2:	9f 5f       	subi	r25, 0xFF	; 255
    1ab4:	c1 f7       	brne	.-16     	; 0x1aa6 <__mulsf3_pse+0x8c>
    1ab6:	fe 2b       	or	r31, r30
    1ab8:	88 0f       	add	r24, r24
    1aba:	91 1d       	adc	r25, r1
    1abc:	96 95       	lsr	r25
    1abe:	87 95       	ror	r24
    1ac0:	97 f9       	bld	r25, 7
    1ac2:	08 95       	ret

00001ac4 <__mulsi3>:
    1ac4:	62 9f       	mul	r22, r18
    1ac6:	d0 01       	movw	r26, r0
    1ac8:	73 9f       	mul	r23, r19
    1aca:	f0 01       	movw	r30, r0
    1acc:	82 9f       	mul	r24, r18
    1ace:	e0 0d       	add	r30, r0
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	64 9f       	mul	r22, r20
    1ad4:	e0 0d       	add	r30, r0
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	92 9f       	mul	r25, r18
    1ada:	f0 0d       	add	r31, r0
    1adc:	83 9f       	mul	r24, r19
    1ade:	f0 0d       	add	r31, r0
    1ae0:	74 9f       	mul	r23, r20
    1ae2:	f0 0d       	add	r31, r0
    1ae4:	65 9f       	mul	r22, r21
    1ae6:	f0 0d       	add	r31, r0
    1ae8:	99 27       	eor	r25, r25
    1aea:	72 9f       	mul	r23, r18
    1aec:	b0 0d       	add	r27, r0
    1aee:	e1 1d       	adc	r30, r1
    1af0:	f9 1f       	adc	r31, r25
    1af2:	63 9f       	mul	r22, r19
    1af4:	b0 0d       	add	r27, r0
    1af6:	e1 1d       	adc	r30, r1
    1af8:	f9 1f       	adc	r31, r25
    1afa:	bd 01       	movw	r22, r26
    1afc:	cf 01       	movw	r24, r30
    1afe:	11 24       	eor	r1, r1
    1b00:	08 95       	ret

00001b02 <__udivmodhi4>:
    1b02:	aa 1b       	sub	r26, r26
    1b04:	bb 1b       	sub	r27, r27
    1b06:	51 e1       	ldi	r21, 0x11	; 17
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <__udivmodhi4_ep>

00001b0a <__udivmodhi4_loop>:
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	a6 17       	cp	r26, r22
    1b10:	b7 07       	cpc	r27, r23
    1b12:	10 f0       	brcs	.+4      	; 0x1b18 <__udivmodhi4_ep>
    1b14:	a6 1b       	sub	r26, r22
    1b16:	b7 0b       	sbc	r27, r23

00001b18 <__udivmodhi4_ep>:
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	5a 95       	dec	r21
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__udivmodhi4_loop>
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	08 95       	ret

00001b2a <__udivmodsi4>:
    1b2a:	a1 e2       	ldi	r26, 0x21	; 33
    1b2c:	1a 2e       	mov	r1, r26
    1b2e:	aa 1b       	sub	r26, r26
    1b30:	bb 1b       	sub	r27, r27
    1b32:	fd 01       	movw	r30, r26
    1b34:	0d c0       	rjmp	.+26     	; 0x1b50 <__udivmodsi4_ep>

00001b36 <__udivmodsi4_loop>:
    1b36:	aa 1f       	adc	r26, r26
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	ee 1f       	adc	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	a2 17       	cp	r26, r18
    1b40:	b3 07       	cpc	r27, r19
    1b42:	e4 07       	cpc	r30, r20
    1b44:	f5 07       	cpc	r31, r21
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <__udivmodsi4_ep>
    1b48:	a2 1b       	sub	r26, r18
    1b4a:	b3 0b       	sbc	r27, r19
    1b4c:	e4 0b       	sbc	r30, r20
    1b4e:	f5 0b       	sbc	r31, r21

00001b50 <__udivmodsi4_ep>:
    1b50:	66 1f       	adc	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	1a 94       	dec	r1
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <__udivmodsi4_loop>
    1b5c:	60 95       	com	r22
    1b5e:	70 95       	com	r23
    1b60:	80 95       	com	r24
    1b62:	90 95       	com	r25
    1b64:	9b 01       	movw	r18, r22
    1b66:	ac 01       	movw	r20, r24
    1b68:	bd 01       	movw	r22, r26
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	08 95       	ret

00001b6e <_exit>:
    1b6e:	f8 94       	cli

00001b70 <__stop_program>:
    1b70:	ff cf       	rjmp	.-2      	; 0x1b70 <__stop_program>

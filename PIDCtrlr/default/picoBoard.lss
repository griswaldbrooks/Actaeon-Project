
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000275a  000027ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000275a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  0080010c  0080010c  000027fa  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000af2  00000000  00000000  000028da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c6d  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088f  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001674  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000530  00000000  00000000  00006f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000adb  00000000  00000000  0000746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de1  00000000  00000000  00007f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_3>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_5>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_16>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000068 <__c.2222>:
      68:	25 63 0a 00                                         %c..

0000006c <HexChars>:
      6c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d4 e0       	ldi	r29, 0x04	; 4
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ea e5       	ldi	r30, 0x5A	; 90
      92:	f7 e2       	ldi	r31, 0x27	; 39
      94:	02 c0       	rjmp	.+4      	; 0x9a <.do_copy_data_start>

00000096 <.do_copy_data_loop>:
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0

0000009a <.do_copy_data_start>:
      9a:	ac 30       	cpi	r26, 0x0C	; 12
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <.do_copy_data_loop>

000000a0 <__do_clear_bss>:
      a0:	15 e0       	ldi	r17, 0x05	; 5
      a2:	ac e0       	ldi	r26, 0x0C	; 12
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	ae 32       	cpi	r26, 0x2E	; 46
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 bc 01 	call	0x378	; 0x378 <main>
      b4:	0c 94 3d 11 	jmp	0x227a	; 0x227a <exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__vector_default>

000000bc <ubRcv>:
	sbi(DDRB,DDB1);		// Pin 9
	sbi(DDRB,DDB2);		// Pin 10
}

void ubRcv(unsigned char c){
	if(c != 0xff){
      bc:	8f 3f       	cpi	r24, 0xFF	; 255
      be:	b9 f0       	breq	.+46     	; 0xee <ubRcv+0x32>
		*ub_buffer_write_ndx = c;
      c0:	e0 91 0c 01 	lds	r30, 0x010C
      c4:	f0 91 0d 01 	lds	r31, 0x010D
      c8:	80 83       	st	Z, r24
		ub_buffer_write_ndx++;		
      ca:	80 91 0c 01 	lds	r24, 0x010C
      ce:	90 91 0d 01 	lds	r25, 0x010D
      d2:	01 96       	adiw	r24, 0x01	; 1
      d4:	90 93 0d 01 	sts	0x010D, r25
      d8:	80 93 0c 01 	sts	0x010C, r24
		if(ub_buffer_write_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
      dc:	8e 54       	subi	r24, 0x4E	; 78
      de:	94 40       	sbci	r25, 0x04	; 4
      e0:	30 f0       	brcs	.+12     	; 0xee <ubRcv+0x32>
			ub_buffer_write_ndx = ub_buffer;
      e2:	8e e4       	ldi	r24, 0x4E	; 78
      e4:	92 e0       	ldi	r25, 0x02	; 2
      e6:	90 93 0d 01 	sts	0x010D, r25
      ea:	80 93 0c 01 	sts	0x010C, r24
      ee:	08 95       	ret

000000f0 <init_ub_buffer>:
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
      f0:	8e e4       	ldi	r24, 0x4E	; 78
      f2:	92 e0       	ldi	r25, 0x02	; 2
      f4:	90 93 0f 01 	sts	0x010F, r25
      f8:	80 93 0e 01 	sts	0x010E, r24
      fc:	90 93 0d 01 	sts	0x010D, r25
     100:	80 93 0c 01 	sts	0x010C, r24
}
     104:	08 95       	ret

00000106 <read_ub>:
			ub_buffer_write_ndx = ub_buffer;
		}
	}	
}

uint8_t read_ub(){
     106:	04 c0       	rjmp	.+8      	; 0x110 <read_ub+0xa>
	while(ub_buffer_read_ndx == ub_buffer_write_ndx){ delay_us(10); };
     108:	8a e0       	ldi	r24, 0x0A	; 10
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <delay_us>
     110:	e0 91 0e 01 	lds	r30, 0x010E
     114:	f0 91 0f 01 	lds	r31, 0x010F
     118:	80 91 0c 01 	lds	r24, 0x010C
     11c:	90 91 0d 01 	lds	r25, 0x010D
     120:	e8 17       	cp	r30, r24
     122:	f9 07       	cpc	r31, r25
     124:	89 f3       	breq	.-30     	; 0x108 <read_ub+0x2>
	uint8_t data = *ub_buffer_read_ndx;
     126:	21 91       	ld	r18, Z+
	ub_buffer_read_ndx++;
     128:	f0 93 0f 01 	sts	0x010F, r31
     12c:	e0 93 0e 01 	sts	0x010E, r30
	if(ub_buffer_read_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
     130:	ee 54       	subi	r30, 0x4E	; 78
     132:	f4 40       	sbci	r31, 0x04	; 4
     134:	30 f0       	brcs	.+12     	; 0x142 <read_ub+0x3c>
		ub_buffer_read_ndx = ub_buffer;
     136:	8e e4       	ldi	r24, 0x4E	; 78
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	90 93 0f 01 	sts	0x010F, r25
     13e:	80 93 0e 01 	sts	0x010E, r24
	}
	return data;
}
     142:	82 2f       	mov	r24, r18
     144:	08 95       	ret

00000146 <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	7b 01       	movw	r14, r22
     150:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 7cm/sec > v_dead > -9cm/sec
	if((cmd_vel_l < 9) && (cmd_vel_l > -9))  cmd_vel_l =  0;
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	40 e1       	ldi	r20, 0x10	; 16
     158:	51 e4       	ldi	r21, 0x41	; 65
     15a:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
     15e:	88 23       	and	r24, r24
     160:	ac f4       	brge	.+42     	; 0x18c <wheel_l+0x46>
     162:	c8 01       	movw	r24, r16
     164:	b7 01       	movw	r22, r14
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e1       	ldi	r20, 0x10	; 16
     16c:	51 ec       	ldi	r21, 0xC1	; 193
     16e:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     172:	18 16       	cp	r1, r24
     174:	5c f4       	brge	.+22     	; 0x18c <wheel_l+0x46>
     176:	0f 2e       	mov	r0, r31
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ef 2e       	mov	r14, r31
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	ff 2e       	mov	r15, r31
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	0f 2f       	mov	r16, r31
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	1f 2f       	mov	r17, r31
     188:	f0 2d       	mov	r31, r0
     18a:	29 c0       	rjmp	.+82     	; 0x1de <wheel_l+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
     18c:	c8 01       	movw	r24, r16
     18e:	b7 01       	movw	r22, r14
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	52 e4       	ldi	r21, 0x42	; 66
     198:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     19c:	18 16       	cp	r1, r24
     19e:	5c f4       	brge	.+22     	; 0x1b6 <wheel_l+0x70>
     1a0:	0f 2e       	mov	r0, r31
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	ef 2e       	mov	r14, r31
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	ff 2e       	mov	r15, r31
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	0f 2f       	mov	r16, r31
     1ae:	f2 e4       	ldi	r31, 0x42	; 66
     1b0:	1f 2f       	mov	r17, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	14 c0       	rjmp	.+40     	; 0x1de <wheel_l+0x98>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
     1b6:	c8 01       	movw	r24, r16
     1b8:	b7 01       	movw	r22, r14
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	52 ec       	ldi	r21, 0xC2	; 194
     1c2:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
     1c6:	88 23       	and	r24, r24
     1c8:	54 f4       	brge	.+20     	; 0x1de <wheel_l+0x98>
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	0f 2f       	mov	r16, r31
     1d8:	f2 ec       	ldi	r31, 0xC2	; 194
     1da:	1f 2f       	mov	r17, r31
     1dc:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     1de:	c8 01       	movw	r24, r16
     1e0:	b7 01       	movw	r22, r14
     1e2:	22 e4       	ldi	r18, 0x42	; 66
     1e4:	3e e3       	ldi	r19, 0x3E	; 62
     1e6:	48 e7       	ldi	r20, 0x78	; 120
     1e8:	5f eb       	ldi	r21, 0xBF	; 191
     1ea:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     1ee:	2c e8       	ldi	r18, 0x8C	; 140
     1f0:	32 ed       	ldi	r19, 0xD2	; 210
     1f2:	48 eb       	ldi	r20, 0xB8	; 184
     1f4:	53 e4       	ldi	r21, 0x43	; 67
     1f6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     1fa:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	0e 94 12 0a 	call	0x1424	; 0x1424 <PWM_timer1_Set_Pin9>
}
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	08 95       	ret

00000210 <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	7b 01       	movw	r14, r22
     21a:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 8cm/sec > v_dead > -5cm/sec
	if((cmd_vel_r < 8) && (cmd_vel_r > -8))  cmd_vel_r = 0;
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	51 e4       	ldi	r21, 0x41	; 65
     224:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
     228:	88 23       	and	r24, r24
     22a:	ac f4       	brge	.+42     	; 0x256 <wheel_r+0x46>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	51 ec       	ldi	r21, 0xC1	; 193
     238:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	5c f4       	brge	.+22     	; 0x256 <wheel_r+0x46>
     240:	0f 2e       	mov	r0, r31
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ef 2e       	mov	r14, r31
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	ff 2e       	mov	r15, r31
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	0f 2f       	mov	r16, r31
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	1f 2f       	mov	r17, r31
     252:	f0 2d       	mov	r31, r0
     254:	29 c0       	rjmp	.+82     	; 0x2a8 <wheel_r+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     256:	c8 01       	movw	r24, r16
     258:	b7 01       	movw	r22, r14
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	52 e4       	ldi	r21, 0x42	; 66
     262:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     266:	18 16       	cp	r1, r24
     268:	5c f4       	brge	.+22     	; 0x280 <wheel_r+0x70>
     26a:	0f 2e       	mov	r0, r31
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	ef 2e       	mov	r14, r31
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	ff 2e       	mov	r15, r31
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	0f 2f       	mov	r16, r31
     278:	f2 e4       	ldi	r31, 0x42	; 66
     27a:	1f 2f       	mov	r17, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	14 c0       	rjmp	.+40     	; 0x2a8 <wheel_r+0x98>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     280:	c8 01       	movw	r24, r16
     282:	b7 01       	movw	r22, r14
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	52 ec       	ldi	r21, 0xC2	; 194
     28c:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
     290:	88 23       	and	r24, r24
     292:	54 f4       	brge	.+20     	; 0x2a8 <wheel_r+0x98>
     294:	0f 2e       	mov	r0, r31
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	ef 2e       	mov	r14, r31
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	0f 2f       	mov	r16, r31
     2a2:	f2 ec       	ldi	r31, 0xC2	; 194
     2a4:	1f 2f       	mov	r17, r31
     2a6:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     2a8:	c8 01       	movw	r24, r16
     2aa:	b7 01       	movw	r22, r14
     2ac:	24 ef       	ldi	r18, 0xF4	; 244
     2ae:	3c e6       	ldi	r19, 0x6C	; 108
     2b0:	4e e8       	ldi	r20, 0x8E	; 142
     2b2:	5f e3       	ldi	r21, 0x3F	; 63
     2b4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     2b8:	27 e0       	ldi	r18, 0x07	; 7
     2ba:	3f e1       	ldi	r19, 0x1F	; 31
     2bc:	4b eb       	ldi	r20, 0xBB	; 187
     2be:	53 e4       	ldi	r21, 0x43	; 67
     2c0:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     2c4:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	0e 94 17 0a 	call	0x142e	; 0x142e <PWM_timer1_Set_Pin10>
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	08 95       	ret

000002da <pwm_setup>:
////////////////////////////////////////

void pwm_setup(void){

	// 20 ms period
	timer1PWMInitICR(5000);
     2da:	88 e8       	ldi	r24, 0x88	; 136
     2dc:	93 e1       	ldi	r25, 0x13	; 19
     2de:	0e 94 ae 09 	call	0x135c	; 0x135c <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     2e2:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     2e4:	22 9a       	sbi	0x04, 2	; 4
}
     2e6:	08 95       	ret

000002e8 <setup_hardware>:
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
}

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     2e8:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     2ea:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     2ec:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <uartInit>
	uartSetBaudRate(0,115200);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	52 ec       	ldi	r21, 0xC2	; 194
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     2fe:	88 ea       	ldi	r24, 0xA8	; 168
     300:	9d e0       	ldi	r25, 0x0D	; 13
     302:	0e 94 a0 0a 	call	0x1540	; 0x1540 <rprintfInit>
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
     306:	8e e4       	ldi	r24, 0x4E	; 78
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	90 93 0f 01 	sts	0x010F, r25
     30e:	80 93 0e 01 	sts	0x010E, r24
     312:	90 93 0d 01 	sts	0x010D, r25
     316:	80 93 0c 01 	sts	0x010C, r24
	uartInit();
	uartSetBaudRate(0,115200);
	rprintfInit(uart0SendByte);
	//UART ISR *** UART ISR ***
	init_ub_buffer();
	uartSetRxHandler(0, &ubRcv);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	6e e5       	ldi	r22, 0x5E	; 94
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <uartSetRxHandler>
	//UART ISR *** UART ISR ***

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     324:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     326:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     328:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     32a:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     32c:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     32e:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     330:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     332:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	0e 94 33 0a 	call	0x1466	; 0x1466 <init_timer0>
	init_timer1(TIMER_CLK_64);
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	0e 94 41 0a 	call	0x1482	; 0x1482 <init_timer1>
	pwm_setup();
     340:	0e 94 6d 01 	call	0x2da	; 0x2da <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     344:	e8 e6       	ldi	r30, 0x68	; 104
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	84 60       	ori	r24, 0x04	; 4
     34c:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     34e:	ad e6       	ldi	r26, 0x6D	; 109
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	8c 91       	ld	r24, X
     354:	80 68       	ori	r24, 0x80	; 128
     356:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     358:	80 81       	ld	r24, Z
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     35e:	eb e6       	ldi	r30, 0x6B	; 107
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	81 60       	ori	r24, 0x01	; 1
     366:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     368:	80 81       	ld	r24, Z
     36a:	80 61       	ori	r24, 0x10	; 16
     36c:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     36e:	80 81       	ld	r24, Z
     370:	80 62       	ori	r24, 0x20	; 32
     372:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     374:	78 94       	sei

}
     376:	08 95       	ret

00000378 <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     378:	2f 92       	push	r2
     37a:	3f 92       	push	r3
     37c:	4f 92       	push	r4
     37e:	5f 92       	push	r5
     380:	6f 92       	push	r6
     382:	7f 92       	push	r7
     384:	8f 92       	push	r8
     386:	9f 92       	push	r9
     388:	af 92       	push	r10
     38a:	bf 92       	push	r11
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	ac 97       	sbiw	r28, 0x2c	; 44
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
	
	// Initialize variables ///////////////////////////////////////////////////////////
	error_l_n1 = error_l = u_l = 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 be 04 	sts	0x04BE, r24
     3b8:	90 93 bf 04 	sts	0x04BF, r25
     3bc:	a0 93 c0 04 	sts	0x04C0, r26
     3c0:	b0 93 c1 04 	sts	0x04C1, r27
     3c4:	80 93 42 02 	sts	0x0242, r24
     3c8:	90 93 43 02 	sts	0x0243, r25
     3cc:	a0 93 44 02 	sts	0x0244, r26
     3d0:	b0 93 45 02 	sts	0x0245, r27
     3d4:	80 93 b2 04 	sts	0x04B2, r24
     3d8:	90 93 b3 04 	sts	0x04B3, r25
     3dc:	a0 93 b4 04 	sts	0x04B4, r26
     3e0:	b0 93 b5 04 	sts	0x04B5, r27
	error_r_n1 = error_r = u_r = 0;
     3e4:	80 93 36 02 	sts	0x0236, r24
     3e8:	90 93 37 02 	sts	0x0237, r25
     3ec:	a0 93 38 02 	sts	0x0238, r26
     3f0:	b0 93 39 02 	sts	0x0239, r27
     3f4:	80 93 ce 04 	sts	0x04CE, r24
     3f8:	90 93 cf 04 	sts	0x04CF, r25
     3fc:	a0 93 d0 04 	sts	0x04D0, r26
     400:	b0 93 d1 04 	sts	0x04D1, r27
     404:	80 93 32 02 	sts	0x0232, r24
     408:	90 93 33 02 	sts	0x0233, r25
     40c:	a0 93 34 02 	sts	0x0234, r26
     410:	b0 93 35 02 	sts	0x0235, r27

	ud_l_n1 = udf_l = udf_l_n1 = 0;
     414:	80 93 da 04 	sts	0x04DA, r24
     418:	90 93 db 04 	sts	0x04DB, r25
     41c:	a0 93 dc 04 	sts	0x04DC, r26
     420:	b0 93 dd 04 	sts	0x04DD, r27
     424:	80 93 5e 04 	sts	0x045E, r24
     428:	90 93 5f 04 	sts	0x045F, r25
     42c:	a0 93 60 04 	sts	0x0460, r26
     430:	b0 93 61 04 	sts	0x0461, r27
     434:	80 93 9e 04 	sts	0x049E, r24
     438:	90 93 9f 04 	sts	0x049F, r25
     43c:	a0 93 a0 04 	sts	0x04A0, r26
     440:	b0 93 a1 04 	sts	0x04A1, r27
	ud_r_n1 = udf_r = udf_r_n1 = 0;
     444:	80 93 86 04 	sts	0x0486, r24
     448:	90 93 87 04 	sts	0x0487, r25
     44c:	a0 93 88 04 	sts	0x0488, r26
     450:	b0 93 89 04 	sts	0x0489, r27
     454:	80 93 96 04 	sts	0x0496, r24
     458:	90 93 97 04 	sts	0x0497, r25
     45c:	a0 93 98 04 	sts	0x0498, r26
     460:	b0 93 99 04 	sts	0x0499, r27
     464:	80 93 56 04 	sts	0x0456, r24
     468:	90 93 57 04 	sts	0x0457, r25
     46c:	a0 93 58 04 	sts	0x0458, r26
     470:	b0 93 59 04 	sts	0x0459, r27
	
	K_l = 0.0008;;
     474:	27 e1       	ldi	r18, 0x17	; 23
     476:	37 eb       	ldi	r19, 0xB7	; 183
     478:	41 e5       	ldi	r20, 0x51	; 81
     47a:	5a e3       	ldi	r21, 0x3A	; 58
     47c:	20 93 2a 02 	sts	0x022A, r18
     480:	30 93 2b 02 	sts	0x022B, r19
     484:	40 93 2c 02 	sts	0x022C, r20
     488:	50 93 2d 02 	sts	0x022D, r21
	K_r = 0.0006;
     48c:	0f 2e       	mov	r0, r31
     48e:	f2 e5       	ldi	r31, 0x52	; 82
     490:	ef 2e       	mov	r14, r31
     492:	f9 e4       	ldi	r31, 0x49	; 73
     494:	ff 2e       	mov	r15, r31
     496:	fd e1       	ldi	r31, 0x1D	; 29
     498:	0f 2f       	mov	r16, r31
     49a:	fa e3       	ldi	r31, 0x3A	; 58
     49c:	1f 2f       	mov	r17, r31
     49e:	f0 2d       	mov	r31, r0
     4a0:	e0 92 ba 04 	sts	0x04BA, r14
     4a4:	f0 92 bb 04 	sts	0x04BB, r15
     4a8:	00 93 bc 04 	sts	0x04BC, r16
     4ac:	10 93 bd 04 	sts	0x04BD, r17

	Ti_l = 1.1945;
     4b0:	80 e6       	ldi	r24, 0x60	; 96
     4b2:	95 ee       	ldi	r25, 0xE5	; 229
     4b4:	a8 e9       	ldi	r26, 0x98	; 152
     4b6:	bf e3       	ldi	r27, 0x3F	; 63
     4b8:	80 93 22 02 	sts	0x0222, r24
     4bc:	90 93 23 02 	sts	0x0223, r25
     4c0:	a0 93 24 02 	sts	0x0224, r26
     4c4:	b0 93 25 02 	sts	0x0225, r27
	Td_l = 0.2986;
     4c8:	89 e1       	ldi	r24, 0x19	; 25
     4ca:	92 ee       	ldi	r25, 0xE2	; 226
     4cc:	a8 e9       	ldi	r26, 0x98	; 152
     4ce:	be e3       	ldi	r27, 0x3E	; 62
     4d0:	80 93 7e 04 	sts	0x047E, r24
     4d4:	90 93 7f 04 	sts	0x047F, r25
     4d8:	a0 93 80 04 	sts	0x0480, r26
     4dc:	b0 93 81 04 	sts	0x0481, r27
	T_l = 2.3890;										// sec
     4e0:	80 e6       	ldi	r24, 0x60	; 96
     4e2:	95 ee       	ldi	r25, 0xE5	; 229
     4e4:	a8 e1       	ldi	r26, 0x18	; 24
     4e6:	b0 e4       	ldi	r27, 0x40	; 64
     4e8:	80 93 9a 04 	sts	0x049A, r24
     4ec:	90 93 9b 04 	sts	0x049B, r25
     4f0:	a0 93 9c 04 	sts	0x049C, r26
     4f4:	b0 93 9d 04 	sts	0x049D, r27

	Ti_r = 0.1100;
     4f8:	8e ea       	ldi	r24, 0xAE	; 174
     4fa:	97 e4       	ldi	r25, 0x47	; 71
     4fc:	a1 ee       	ldi	r26, 0xE1	; 225
     4fe:	bd e3       	ldi	r27, 0x3D	; 61
     500:	80 93 d2 04 	sts	0x04D2, r24
     504:	90 93 d3 04 	sts	0x04D3, r25
     508:	a0 93 d4 04 	sts	0x04D4, r26
     50c:	b0 93 d5 04 	sts	0x04D5, r27
	Td_r = 0.0275;
     510:	8e ea       	ldi	r24, 0xAE	; 174
     512:	97 e4       	ldi	r25, 0x47	; 71
     514:	a1 ee       	ldi	r26, 0xE1	; 225
     516:	bc e3       	ldi	r27, 0x3C	; 60
     518:	80 93 82 04 	sts	0x0482, r24
     51c:	90 93 83 04 	sts	0x0483, r25
     520:	a0 93 84 04 	sts	0x0484, r26
     524:	b0 93 85 04 	sts	0x0485, r27
	T_r = 0.2200;										// sec
     528:	8e ea       	ldi	r24, 0xAE	; 174
     52a:	97 e4       	ldi	r25, 0x47	; 71
     52c:	a1 e6       	ldi	r26, 0x61	; 97
     52e:	be e3       	ldi	r27, 0x3E	; 62
     530:	80 93 8a 04 	sts	0x048A, r24
     534:	90 93 8b 04 	sts	0x048B, r25
     538:	a0 93 8c 04 	sts	0x048C, r26
     53c:	b0 93 8d 04 	sts	0x048D, r27
		
	Kp_l = K_l;											// Proportional constant
     540:	20 93 1a 02 	sts	0x021A, r18
     544:	30 93 1b 02 	sts	0x021B, r19
     548:	40 93 1c 02 	sts	0x021C, r20
     54c:	50 93 1d 02 	sts	0x021D, r21
	Ki_l = (K_l*T_l)/(2*Ti_l);							// Integral constant
     550:	20 93 52 04 	sts	0x0452, r18
     554:	30 93 53 04 	sts	0x0453, r19
     558:	40 93 54 04 	sts	0x0454, r20
     55c:	50 93 55 04 	sts	0x0455, r21
	Kd_l = (2*K_l*Td_l)/T_l;							// Derivative constant
     560:	89 e9       	ldi	r24, 0x99	; 153
     562:	92 eb       	ldi	r25, 0xB2	; 178
     564:	a1 e5       	ldi	r26, 0x51	; 81
     566:	b9 e3       	ldi	r27, 0x39	; 57
     568:	80 93 62 04 	sts	0x0462, r24
     56c:	90 93 63 04 	sts	0x0463, r25
     570:	a0 93 64 04 	sts	0x0464, r26
     574:	b0 93 65 04 	sts	0x0465, r27

	Kp_r = 0.6*K_r;										// Proportional constant
     578:	83 e6       	ldi	r24, 0x63	; 99
     57a:	9e eb       	ldi	r25, 0xBE	; 190
     57c:	ac eb       	ldi	r26, 0xBC	; 188
     57e:	b9 e3       	ldi	r27, 0x39	; 57
     580:	80 93 66 04 	sts	0x0466, r24
     584:	90 93 67 04 	sts	0x0467, r25
     588:	a0 93 68 04 	sts	0x0468, r26
     58c:	b0 93 69 04 	sts	0x0469, r27
	Ki_r = (K_r*T_r)/(2*Ti_r);							// Integral constant
     590:	e0 92 ae 04 	sts	0x04AE, r14
     594:	f0 92 af 04 	sts	0x04AF, r15
     598:	00 93 b0 04 	sts	0x04B0, r16
     59c:	10 93 b1 04 	sts	0x04B1, r17
	Kd_r = (2*K_r*Td_r)/T_r;							// Derivative constant
     5a0:	82 e5       	ldi	r24, 0x52	; 82
     5a2:	99 e4       	ldi	r25, 0x49	; 73
     5a4:	ad e1       	ldi	r26, 0x1D	; 29
     5a6:	b9 e3       	ldi	r27, 0x39	; 57
     5a8:	80 93 aa 04 	sts	0x04AA, r24
     5ac:	90 93 ab 04 	sts	0x04AB, r25
     5b0:	a0 93 ac 04 	sts	0x04AC, r26
     5b4:	b0 93 ad 04 	sts	0x04AD, r27
	
	lpf1_l = (wb*T_l)/(2 + wb*T_l);
     5b8:	60 91 08 01 	lds	r22, 0x0108
     5bc:	70 91 09 01 	lds	r23, 0x0109
     5c0:	80 91 0a 01 	lds	r24, 0x010A
     5c4:	90 91 0b 01 	lds	r25, 0x010B
     5c8:	20 e6       	ldi	r18, 0x60	; 96
     5ca:	35 ee       	ldi	r19, 0xE5	; 229
     5cc:	48 e1       	ldi	r20, 0x18	; 24
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     5d4:	7b 01       	movw	r14, r22
     5d6:	8c 01       	movw	r16, r24
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e4       	ldi	r21, 0x40	; 64
     5e0:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     5e4:	5b 01       	movw	r10, r22
     5e6:	6c 01       	movw	r12, r24
     5e8:	c8 01       	movw	r24, r16
     5ea:	b7 01       	movw	r22, r14
     5ec:	a6 01       	movw	r20, r12
     5ee:	95 01       	movw	r18, r10
     5f0:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     5f4:	dc 01       	movw	r26, r24
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	20 93 ca 04 	sts	0x04CA, r18
     5fe:	30 93 cb 04 	sts	0x04CB, r19
     602:	40 93 cc 04 	sts	0x04CC, r20
     606:	50 93 cd 04 	sts	0x04CD, r21
	lpf2_l = lpf1_l;
     60a:	cb 01       	movw	r24, r22
     60c:	80 93 8e 04 	sts	0x048E, r24
     610:	90 93 8f 04 	sts	0x048F, r25
     614:	a0 93 90 04 	sts	0x0490, r26
     618:	b0 93 91 04 	sts	0x0491, r27
	lpf3_l = (wb*T_l - 2)/(wb*T_l + 2);
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	50 e4       	ldi	r21, 0x40	; 64
     628:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     62c:	a6 01       	movw	r20, r12
     62e:	95 01       	movw	r18, r10
     630:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     634:	60 93 a2 04 	sts	0x04A2, r22
     638:	70 93 a3 04 	sts	0x04A3, r23
     63c:	80 93 a4 04 	sts	0x04A4, r24
     640:	90 93 a5 04 	sts	0x04A5, r25

	lpf1_r = (wb*T_r)/(2 + wb*T_r);
     644:	60 91 08 01 	lds	r22, 0x0108
     648:	70 91 09 01 	lds	r23, 0x0109
     64c:	80 91 0a 01 	lds	r24, 0x010A
     650:	90 91 0b 01 	lds	r25, 0x010B
     654:	2e ea       	ldi	r18, 0xAE	; 174
     656:	37 e4       	ldi	r19, 0x47	; 71
     658:	41 e6       	ldi	r20, 0x61	; 97
     65a:	5e e3       	ldi	r21, 0x3E	; 62
     65c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     660:	7b 01       	movw	r14, r22
     662:	8c 01       	movw	r16, r24
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e4       	ldi	r21, 0x40	; 64
     66c:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     670:	5b 01       	movw	r10, r22
     672:	6c 01       	movw	r12, r24
     674:	c8 01       	movw	r24, r16
     676:	b7 01       	movw	r22, r14
     678:	a6 01       	movw	r20, r12
     67a:	95 01       	movw	r18, r10
     67c:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     680:	dc 01       	movw	r26, r24
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	20 93 d6 04 	sts	0x04D6, r18
     68a:	30 93 d7 04 	sts	0x04D7, r19
     68e:	40 93 d8 04 	sts	0x04D8, r20
     692:	50 93 d9 04 	sts	0x04D9, r21
	lpf2_r = lpf1_r;
     696:	cb 01       	movw	r24, r22
     698:	80 93 a6 04 	sts	0x04A6, r24
     69c:	90 93 a7 04 	sts	0x04A7, r25
     6a0:	a0 93 a8 04 	sts	0x04A8, r26
     6a4:	b0 93 a9 04 	sts	0x04A9, r27
	lpf3_r = (wb*T_r - 2)/(wb*T_r + 2);
     6a8:	c8 01       	movw	r24, r16
     6aa:	b7 01       	movw	r22, r14
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e4       	ldi	r21, 0x40	; 64
     6b4:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     6b8:	a6 01       	movw	r20, r12
     6ba:	95 01       	movw	r18, r10
     6bc:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     6c0:	60 93 92 04 	sts	0x0492, r22
     6c4:	70 93 93 04 	sts	0x0493, r23
     6c8:	80 93 94 04 	sts	0x0494, r24
     6cc:	90 93 95 04 	sts	0x0495, r25
	///////////////////////////////////////////////////////////////////////////////////////
	
	
	setup_hardware();
     6d0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setup_hardware>
	
	
/**/
	wheel_l(0);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 a3 00 	call	0x146	; 0x146 <wheel_l>
	wheel_r(0);
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 08 01 	call	0x210	; 0x210 <wheel_r>
	wheel_l_on();
     6ec:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <PWM_timer1_On_Pin9>
	wheel_r_on();
     6f0:	0e 94 05 0a 	call	0x140a	; 0x140a <PWM_timer1_On_Pin10>
     6f4:	00 e0       	ldi	r16, 0x00	; 0
     6f6:	10 e0       	ldi	r17, 0x00	; 0
	
	// Wait two seconds
	for(u16 ndx = 0; ndx < 10000; ndx++){
		delay_us(200);
     6f8:	88 ec       	ldi	r24, 0xC8	; 200
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <delay_us>
	wheel_r(0);
	wheel_l_on();
	wheel_r_on();
	
	// Wait two seconds
	for(u16 ndx = 0; ndx < 10000; ndx++){
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	27 e2       	ldi	r18, 0x27	; 39
     706:	00 31       	cpi	r16, 0x10	; 16
     708:	12 07       	cpc	r17, r18
     70a:	b1 f7       	brne	.-20     	; 0x6f8 <__stack+0x1f9>
	}

	while(1){
		
	// Velocity Encoding //////////////////////////////////////////////////////////////////////
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     70c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <get_timer0_overflow>
     710:	16 b5       	in	r17, 0x26	; 38
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsi3>
     71e:	61 0f       	add	r22, r17
     720:	71 1d       	adc	r23, r1
     722:	81 1d       	adc	r24, r1
     724:	91 1d       	adc	r25, r1
     726:	0e 94 3d 12 	call	0x247a	; 0x247a <__floatunsisf>
     72a:	2e e0       	ldi	r18, 0x0E	; 14
     72c:	3d e2       	ldi	r19, 0x2D	; 45
     72e:	42 e3       	ldi	r20, 0x32	; 50
     730:	5d e3       	ldi	r21, 0x3D	; 61
     732:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e4       	ldi	r19, 0x40	; 64
     73a:	4c e1       	ldi	r20, 0x1C	; 28
     73c:	56 e4       	ldi	r21, 0x46	; 70
     73e:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     742:	dc 01       	movw	r26, r24
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	20 93 14 01 	sts	0x0114, r18
     74c:	30 93 15 01 	sts	0x0115, r19
     750:	40 93 16 01 	sts	0x0116, r20
     754:	50 93 17 01 	sts	0x0117, r21
     758:	cb 01       	movw	r24, r22
     75a:	80 93 10 01 	sts	0x0110, r24
     75e:	90 93 11 01 	sts	0x0111, r25
     762:	a0 93 12 01 	sts	0x0112, r26
     766:	b0 93 13 01 	sts	0x0113, r27
		
		l_count_current = get_left_count();
     76a:	0e 94 37 10 	call	0x206e	; 0x206e <get_left_count>
     76e:	60 93 28 01 	sts	0x0128, r22
     772:	70 93 29 01 	sts	0x0129, r23
     776:	80 93 2a 01 	sts	0x012A, r24
     77a:	90 93 2b 01 	sts	0x012B, r25
		r_count_current = get_right_count();
     77e:	0e 94 40 10 	call	0x2080	; 0x2080 <get_right_count>
     782:	60 93 30 01 	sts	0x0130, r22
     786:	70 93 31 01 	sts	0x0131, r23
     78a:	80 93 32 01 	sts	0x0132, r24
     78e:	90 93 33 01 	sts	0x0133, r25

		if(l_count_current != l_count_previous){
     792:	20 91 28 01 	lds	r18, 0x0128
     796:	30 91 29 01 	lds	r19, 0x0129
     79a:	40 91 2a 01 	lds	r20, 0x012A
     79e:	50 91 2b 01 	lds	r21, 0x012B
     7a2:	80 91 2c 01 	lds	r24, 0x012C
     7a6:	90 91 2d 01 	lds	r25, 0x012D
     7aa:	a0 91 2e 01 	lds	r26, 0x012E
     7ae:	b0 91 2f 01 	lds	r27, 0x012F
     7b2:	28 17       	cp	r18, r24
     7b4:	39 07       	cpc	r19, r25
     7b6:	4a 07       	cpc	r20, r26
     7b8:	5b 07       	cpc	r21, r27
     7ba:	09 f4       	brne	.+2      	; 0x7be <__stack+0x2bf>
     7bc:	db c0       	rjmp	.+438    	; 0x974 <__stack+0x475>
			l_count_current = get_left_count();
     7be:	0e 94 37 10 	call	0x206e	; 0x206e <get_left_count>
     7c2:	7b 01       	movw	r14, r22
     7c4:	8c 01       	movw	r16, r24
     7c6:	e0 92 28 01 	sts	0x0128, r14
     7ca:	f0 92 29 01 	sts	0x0129, r15
     7ce:	00 93 2a 01 	sts	0x012A, r16
     7d2:	10 93 2b 01 	sts	0x012B, r17
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     7d6:	60 91 10 01 	lds	r22, 0x0110
     7da:	70 91 11 01 	lds	r23, 0x0111
     7de:	80 91 12 01 	lds	r24, 0x0112
     7e2:	90 91 13 01 	lds	r25, 0x0113
     7e6:	20 91 18 01 	lds	r18, 0x0118
     7ea:	30 91 19 01 	lds	r19, 0x0119
     7ee:	40 91 1a 01 	lds	r20, 0x011A
     7f2:	50 91 1b 01 	lds	r21, 0x011B
     7f6:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     7fa:	5b 01       	movw	r10, r22
     7fc:	6c 01       	movw	r12, r24
     7fe:	60 93 5c 01 	sts	0x015C, r22
     802:	70 93 5d 01 	sts	0x015D, r23
     806:	80 93 5e 01 	sts	0x015E, r24
     80a:	90 93 5f 01 	sts	0x015F, r25
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;
     80e:	80 91 2c 01 	lds	r24, 0x012C
     812:	90 91 2d 01 	lds	r25, 0x012D
     816:	a0 91 2e 01 	lds	r26, 0x012E
     81a:	b0 91 2f 01 	lds	r27, 0x012F
     81e:	a8 01       	movw	r20, r16
     820:	97 01       	movw	r18, r14
     822:	28 1b       	sub	r18, r24
     824:	39 0b       	sbc	r19, r25
     826:	4a 0b       	sbc	r20, r26
     828:	5b 0b       	sbc	r21, r27
     82a:	ca 01       	movw	r24, r20
     82c:	b9 01       	movw	r22, r18
     82e:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatsisf>
     832:	a6 01       	movw	r20, r12
     834:	95 01       	movw	r18, r10
     836:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     83a:	60 93 20 01 	sts	0x0120, r22
     83e:	70 93 21 01 	sts	0x0121, r23
     842:	80 93 22 01 	sts	0x0122, r24
     846:	90 93 23 01 	sts	0x0123, r25

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	5c e3       	ldi	r21, 0x3C	; 60
     852:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     856:	1b 01       	movw	r2, r22
     858:	2c 01       	movw	r4, r24
     85a:	60 93 4c 01 	sts	0x014C, r22
     85e:	70 93 4d 01 	sts	0x014D, r23
     862:	80 93 4e 01 	sts	0x014E, r24
     866:	90 93 4f 01 	sts	0x014F, r25
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     86a:	60 91 04 01 	lds	r22, 0x0104
     86e:	70 91 05 01 	lds	r23, 0x0105
     872:	80 91 06 01 	lds	r24, 0x0106
     876:	90 91 07 01 	lds	r25, 0x0107
     87a:	a6 01       	movw	r20, r12
     87c:	95 01       	movw	r18, r10
     87e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     882:	5b 01       	movw	r10, r22
     884:	6c 01       	movw	r12, r24
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     892:	6d 8b       	std	Y+21, r22	; 0x15
     894:	7e 8b       	std	Y+22, r23	; 0x16
     896:	8f 8b       	std	Y+23, r24	; 0x17
     898:	98 8f       	std	Y+24, r25	; 0x18
     89a:	c6 01       	movw	r24, r12
     89c:	b5 01       	movw	r22, r10
     89e:	2d 89       	ldd	r18, Y+21	; 0x15
     8a0:	3e 89       	ldd	r19, Y+22	; 0x16
     8a2:	4f 89       	ldd	r20, Y+23	; 0x17
     8a4:	58 8d       	ldd	r21, Y+24	; 0x18
     8a6:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     8aa:	3b 01       	movw	r6, r22
     8ac:	4c 01       	movw	r8, r24
     8ae:	c2 01       	movw	r24, r4
     8b0:	b1 01       	movw	r22, r2
     8b2:	20 91 50 01 	lds	r18, 0x0150
     8b6:	30 91 51 01 	lds	r19, 0x0151
     8ba:	40 91 52 01 	lds	r20, 0x0152
     8be:	50 91 53 01 	lds	r21, 0x0153
     8c2:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c4 01       	movw	r24, r8
     8cc:	b3 01       	movw	r22, r6
     8ce:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     8d2:	3b 01       	movw	r6, r22
     8d4:	4c 01       	movw	r8, r24
     8d6:	c6 01       	movw	r24, r12
     8d8:	b5 01       	movw	r22, r10
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e4       	ldi	r21, 0x40	; 64
     8e2:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     8e6:	2d 89       	ldd	r18, Y+21	; 0x15
     8e8:	3e 89       	ldd	r19, Y+22	; 0x16
     8ea:	4f 89       	ldd	r20, Y+23	; 0x17
     8ec:	58 8d       	ldd	r21, Y+24	; 0x18
     8ee:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     8f2:	20 91 58 01 	lds	r18, 0x0158
     8f6:	30 91 59 01 	lds	r19, 0x0159
     8fa:	40 91 5a 01 	lds	r20, 0x015A
     8fe:	50 91 5b 01 	lds	r21, 0x015B
     902:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	c4 01       	movw	r24, r8
     90c:	b3 01       	movw	r22, r6
     90e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     912:	60 93 54 01 	sts	0x0154, r22
     916:	70 93 55 01 	sts	0x0155, r23
     91a:	80 93 56 01 	sts	0x0156, r24
     91e:	90 93 57 01 	sts	0x0157, r25

			rps_l_prev = rps_l;
     922:	20 92 50 01 	sts	0x0150, r2
     926:	30 92 51 01 	sts	0x0151, r3
     92a:	40 92 52 01 	sts	0x0152, r4
     92e:	50 92 53 01 	sts	0x0153, r5
			rps_lf_prev = rps_lf;
     932:	60 93 58 01 	sts	0x0158, r22
     936:	70 93 59 01 	sts	0x0159, r23
     93a:	80 93 5a 01 	sts	0x015A, r24
     93e:	90 93 5b 01 	sts	0x015B, r25
			//rprintfFloat(5,rps_lf);
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_l);
			//rprintfCRLF();
			
			l_count_previous = l_count_current;
     942:	e0 92 2c 01 	sts	0x012C, r14
     946:	f0 92 2d 01 	sts	0x012D, r15
     94a:	00 93 2e 01 	sts	0x012E, r16
     94e:	10 93 2f 01 	sts	0x012F, r17
			
			elapsed_time_l_previous = elapsed_time_l;
     952:	80 91 10 01 	lds	r24, 0x0110
     956:	90 91 11 01 	lds	r25, 0x0111
     95a:	a0 91 12 01 	lds	r26, 0x0112
     95e:	b0 91 13 01 	lds	r27, 0x0113
     962:	80 93 18 01 	sts	0x0118, r24
     966:	90 93 19 01 	sts	0x0119, r25
     96a:	a0 93 1a 01 	sts	0x011A, r26
     96e:	b0 93 1b 01 	sts	0x011B, r27
     972:	26 c0       	rjmp	.+76     	; 0x9c0 <__stack+0x4c1>
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     974:	60 91 10 01 	lds	r22, 0x0110
     978:	70 91 11 01 	lds	r23, 0x0111
     97c:	80 91 12 01 	lds	r24, 0x0112
     980:	90 91 13 01 	lds	r25, 0x0113
     984:	20 91 18 01 	lds	r18, 0x0118
     988:	30 91 19 01 	lds	r19, 0x0119
     98c:	40 91 1a 01 	lds	r20, 0x011A
     990:	50 91 1b 01 	lds	r21, 0x011B
     994:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     998:	2a e9       	ldi	r18, 0x9A	; 154
     99a:	39 e9       	ldi	r19, 0x99	; 153
     99c:	49 e1       	ldi	r20, 0x19	; 25
     99e:	5e e3       	ldi	r21, 0x3E	; 62
     9a0:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	64 f4       	brge	.+24     	; 0x9c0 <__stack+0x4c1>
			rps_lf = 0;
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	80 93 54 01 	sts	0x0154, r24
     9b4:	90 93 55 01 	sts	0x0155, r25
     9b8:	a0 93 56 01 	sts	0x0156, r26
     9bc:	b0 93 57 01 	sts	0x0157, r27
		}
		
		if(r_count_current != r_count_previous){
     9c0:	20 91 30 01 	lds	r18, 0x0130
     9c4:	30 91 31 01 	lds	r19, 0x0131
     9c8:	40 91 32 01 	lds	r20, 0x0132
     9cc:	50 91 33 01 	lds	r21, 0x0133
     9d0:	80 91 34 01 	lds	r24, 0x0134
     9d4:	90 91 35 01 	lds	r25, 0x0135
     9d8:	a0 91 36 01 	lds	r26, 0x0136
     9dc:	b0 91 37 01 	lds	r27, 0x0137
     9e0:	28 17       	cp	r18, r24
     9e2:	39 07       	cpc	r19, r25
     9e4:	4a 07       	cpc	r20, r26
     9e6:	5b 07       	cpc	r21, r27
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0x4ed>
     9ea:	dd c0       	rjmp	.+442    	; 0xba6 <__stack+0x6a7>
			r_count_current = get_right_count();
     9ec:	0e 94 40 10 	call	0x2080	; 0x2080 <get_right_count>
     9f0:	7b 01       	movw	r14, r22
     9f2:	8c 01       	movw	r16, r24
     9f4:	e0 92 30 01 	sts	0x0130, r14
     9f8:	f0 92 31 01 	sts	0x0131, r15
     9fc:	00 93 32 01 	sts	0x0132, r16
     a00:	10 93 33 01 	sts	0x0133, r17
			dt_r = (elapsed_time_r - elapsed_time_r_previous);
     a04:	20 91 14 01 	lds	r18, 0x0114
     a08:	30 91 15 01 	lds	r19, 0x0115
     a0c:	40 91 16 01 	lds	r20, 0x0116
     a10:	50 91 17 01 	lds	r21, 0x0117
     a14:	29 8b       	std	Y+17, r18	; 0x11
     a16:	3a 8b       	std	Y+18, r19	; 0x12
     a18:	4b 8b       	std	Y+19, r20	; 0x13
     a1a:	5c 8b       	std	Y+20, r21	; 0x14
     a1c:	ca 01       	movw	r24, r20
     a1e:	b9 01       	movw	r22, r18
     a20:	20 91 1c 01 	lds	r18, 0x011C
     a24:	30 91 1d 01 	lds	r19, 0x011D
     a28:	40 91 1e 01 	lds	r20, 0x011E
     a2c:	50 91 1f 01 	lds	r21, 0x011F
     a30:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     a34:	5b 01       	movw	r10, r22
     a36:	6c 01       	movw	r12, r24
     a38:	60 93 48 01 	sts	0x0148, r22
     a3c:	70 93 49 01 	sts	0x0149, r23
     a40:	80 93 4a 01 	sts	0x014A, r24
     a44:	90 93 4b 01 	sts	0x014B, r25
			ticks_per_sec_r = (r_count_current - r_count_previous)/dt_r;
     a48:	80 91 34 01 	lds	r24, 0x0134
     a4c:	90 91 35 01 	lds	r25, 0x0135
     a50:	a0 91 36 01 	lds	r26, 0x0136
     a54:	b0 91 37 01 	lds	r27, 0x0137
     a58:	a8 01       	movw	r20, r16
     a5a:	97 01       	movw	r18, r14
     a5c:	28 1b       	sub	r18, r24
     a5e:	39 0b       	sbc	r19, r25
     a60:	4a 0b       	sbc	r20, r26
     a62:	5b 0b       	sbc	r21, r27
     a64:	ca 01       	movw	r24, r20
     a66:	b9 01       	movw	r22, r18
     a68:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatsisf>
     a6c:	a6 01       	movw	r20, r12
     a6e:	95 01       	movw	r18, r10
     a70:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     a74:	60 93 24 01 	sts	0x0124, r22
     a78:	70 93 25 01 	sts	0x0125, r23
     a7c:	80 93 26 01 	sts	0x0126, r24
     a80:	90 93 27 01 	sts	0x0127, r25
			
			rps_r = ticks_per_sec_r/(TICKS_PER_ROTATION);
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	5c e3       	ldi	r21, 0x3C	; 60
     a8c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     a90:	1b 01       	movw	r2, r22
     a92:	2c 01       	movw	r4, r24
     a94:	60 93 38 01 	sts	0x0138, r22
     a98:	70 93 39 01 	sts	0x0139, r23
     a9c:	80 93 3a 01 	sts	0x013A, r24
     aa0:	90 93 3b 01 	sts	0x013B, r25
			rps_rf = ((Kr*dt_r)/(Kr*dt_r + 2))*(rps_r + rps_r_prev) - ((Kr*dt_r - 2)/(Kr*dt_r + 2))*rps_rf_prev;
     aa4:	60 91 00 01 	lds	r22, 0x0100
     aa8:	70 91 01 01 	lds	r23, 0x0101
     aac:	80 91 02 01 	lds	r24, 0x0102
     ab0:	90 91 03 01 	lds	r25, 0x0103
     ab4:	a6 01       	movw	r20, r12
     ab6:	95 01       	movw	r18, r10
     ab8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     abc:	5b 01       	movw	r10, r22
     abe:	6c 01       	movw	r12, r24
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e4       	ldi	r21, 0x40	; 64
     ac8:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     acc:	69 8f       	std	Y+25, r22	; 0x19
     ace:	7a 8f       	std	Y+26, r23	; 0x1a
     ad0:	8b 8f       	std	Y+27, r24	; 0x1b
     ad2:	9c 8f       	std	Y+28, r25	; 0x1c
     ad4:	c6 01       	movw	r24, r12
     ad6:	b5 01       	movw	r22, r10
     ad8:	29 8d       	ldd	r18, Y+25	; 0x19
     ada:	3a 8d       	ldd	r19, Y+26	; 0x1a
     adc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ade:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ae0:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     ae4:	3b 01       	movw	r6, r22
     ae6:	4c 01       	movw	r8, r24
     ae8:	c2 01       	movw	r24, r4
     aea:	b1 01       	movw	r22, r2
     aec:	20 91 3c 01 	lds	r18, 0x013C
     af0:	30 91 3d 01 	lds	r19, 0x013D
     af4:	40 91 3e 01 	lds	r20, 0x013E
     af8:	50 91 3f 01 	lds	r21, 0x013F
     afc:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c4 01       	movw	r24, r8
     b06:	b3 01       	movw	r22, r6
     b08:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     b0c:	3b 01       	movw	r6, r22
     b0e:	4c 01       	movw	r8, r24
     b10:	c6 01       	movw	r24, r12
     b12:	b5 01       	movw	r22, r10
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e4       	ldi	r21, 0x40	; 64
     b1c:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     b20:	29 8d       	ldd	r18, Y+25	; 0x19
     b22:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b24:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b26:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b28:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
     b2c:	20 91 44 01 	lds	r18, 0x0144
     b30:	30 91 45 01 	lds	r19, 0x0145
     b34:	40 91 46 01 	lds	r20, 0x0146
     b38:	50 91 47 01 	lds	r21, 0x0147
     b3c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     b4c:	60 93 40 01 	sts	0x0140, r22
     b50:	70 93 41 01 	sts	0x0141, r23
     b54:	80 93 42 01 	sts	0x0142, r24
     b58:	90 93 43 01 	sts	0x0143, r25

			rps_r_prev = rps_r;
     b5c:	20 92 3c 01 	sts	0x013C, r2
     b60:	30 92 3d 01 	sts	0x013D, r3
     b64:	40 92 3e 01 	sts	0x013E, r4
     b68:	50 92 3f 01 	sts	0x013F, r5
			rps_rf_prev = rps_rf;
     b6c:	60 93 44 01 	sts	0x0144, r22
     b70:	70 93 45 01 	sts	0x0145, r23
     b74:	80 93 46 01 	sts	0x0146, r24
     b78:	90 93 47 01 	sts	0x0147, r25
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_r);
			//rprintfCRLF();
			
			
			r_count_previous = r_count_current;
     b7c:	e0 92 34 01 	sts	0x0134, r14
     b80:	f0 92 35 01 	sts	0x0135, r15
     b84:	00 93 36 01 	sts	0x0136, r16
     b88:	10 93 37 01 	sts	0x0137, r17
			
			elapsed_time_r_previous = elapsed_time_r;
     b8c:	89 89       	ldd	r24, Y+17	; 0x11
     b8e:	9a 89       	ldd	r25, Y+18	; 0x12
     b90:	ab 89       	ldd	r26, Y+19	; 0x13
     b92:	bc 89       	ldd	r27, Y+20	; 0x14
     b94:	80 93 1c 01 	sts	0x011C, r24
     b98:	90 93 1d 01 	sts	0x011D, r25
     b9c:	a0 93 1e 01 	sts	0x011E, r26
     ba0:	b0 93 1f 01 	sts	0x011F, r27
     ba4:	26 c0       	rjmp	.+76     	; 0xbf2 <__stack+0x6f3>
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
     ba6:	60 91 14 01 	lds	r22, 0x0114
     baa:	70 91 15 01 	lds	r23, 0x0115
     bae:	80 91 16 01 	lds	r24, 0x0116
     bb2:	90 91 17 01 	lds	r25, 0x0117
     bb6:	20 91 1c 01 	lds	r18, 0x011C
     bba:	30 91 1d 01 	lds	r19, 0x011D
     bbe:	40 91 1e 01 	lds	r20, 0x011E
     bc2:	50 91 1f 01 	lds	r21, 0x011F
     bc6:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     bca:	2a e9       	ldi	r18, 0x9A	; 154
     bcc:	39 e9       	ldi	r19, 0x99	; 153
     bce:	49 e1       	ldi	r20, 0x19	; 25
     bd0:	5e e3       	ldi	r21, 0x3E	; 62
     bd2:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	64 f4       	brge	.+24     	; 0xbf2 <__stack+0x6f3>
			rps_rf = 0;
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	20 93 40 01 	sts	0x0140, r18
     be6:	30 93 41 01 	sts	0x0141, r19
     bea:	40 93 42 01 	sts	0x0142, r20
     bee:	50 93 43 01 	sts	0x0143, r21
		}
		
		// Convert from revolutions per second to cm/sec
		v_l = M_2PIR*rps_lf;		
     bf2:	60 91 54 01 	lds	r22, 0x0154
     bf6:	70 91 55 01 	lds	r23, 0x0155
     bfa:	80 91 56 01 	lds	r24, 0x0156
     bfe:	90 91 57 01 	lds	r25, 0x0157
     c02:	23 ec       	ldi	r18, 0xC3	; 195
     c04:	33 e5       	ldi	r19, 0x53	; 83
     c06:	4b ef       	ldi	r20, 0xFB	; 251
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     c0e:	3b 01       	movw	r6, r22
     c10:	4c 01       	movw	r8, r24
     c12:	60 93 1e 02 	sts	0x021E, r22
     c16:	70 93 1f 02 	sts	0x021F, r23
     c1a:	80 93 20 02 	sts	0x0220, r24
     c1e:	90 93 21 02 	sts	0x0221, r25
		v_r = M_2PIR*rps_rf;
     c22:	60 91 40 01 	lds	r22, 0x0140
     c26:	70 91 41 01 	lds	r23, 0x0141
     c2a:	80 91 42 01 	lds	r24, 0x0142
     c2e:	90 91 43 01 	lds	r25, 0x0143
     c32:	23 ec       	ldi	r18, 0xC3	; 195
     c34:	33 e5       	ldi	r19, 0x53	; 83
     c36:	4b ef       	ldi	r20, 0xFB	; 251
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     c3e:	1b 01       	movw	r2, r22
     c40:	2c 01       	movw	r4, r24
     c42:	60 93 7a 04 	sts	0x047A, r22
     c46:	70 93 7b 04 	sts	0x047B, r23
     c4a:	80 93 7c 04 	sts	0x047C, r24
     c4e:	90 93 7d 04 	sts	0x047D, r25
		cmd_ang_vel = -0.5*atan2(1*(heading_robot - cmd_heading) +0,1);
		////////////////////////////////////////////////////////////
		*/

		// Velocity Commands
		v_l_cmd = (cmd_lin_vel - cmd_ang_vel*ROBOT_RADIUS);
     c52:	60 91 5a 04 	lds	r22, 0x045A
     c56:	70 91 5b 04 	lds	r23, 0x045B
     c5a:	80 91 5c 04 	lds	r24, 0x045C
     c5e:	90 91 5d 04 	lds	r25, 0x045D
     c62:	26 e6       	ldi	r18, 0x66	; 102
     c64:	36 e6       	ldi	r19, 0x66	; 102
     c66:	46 e0       	ldi	r20, 0x06	; 6
     c68:	51 ec       	ldi	r21, 0xC1	; 193
     c6a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	60 91 6a 04 	lds	r22, 0x046A
     c76:	70 91 6b 04 	lds	r23, 0x046B
     c7a:	80 91 6c 04 	lds	r24, 0x046C
     c7e:	90 91 6d 04 	lds	r25, 0x046D
     c82:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     c86:	5b 01       	movw	r10, r22
     c88:	6c 01       	movw	r12, r24
     c8a:	60 93 c2 04 	sts	0x04C2, r22
     c8e:	70 93 c3 04 	sts	0x04C3, r23
     c92:	80 93 c4 04 	sts	0x04C4, r24
     c96:	90 93 c5 04 	sts	0x04C5, r25
		v_r_cmd = (cmd_lin_vel + cmd_ang_vel*ROBOT_RADIUS);
     c9a:	60 91 5a 04 	lds	r22, 0x045A
     c9e:	70 91 5b 04 	lds	r23, 0x045B
     ca2:	80 91 5c 04 	lds	r24, 0x045C
     ca6:	90 91 5d 04 	lds	r25, 0x045D
     caa:	26 e6       	ldi	r18, 0x66	; 102
     cac:	36 e6       	ldi	r19, 0x66	; 102
     cae:	46 e0       	ldi	r20, 0x06	; 6
     cb0:	51 e4       	ldi	r21, 0x41	; 65
     cb2:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     cb6:	20 91 6a 04 	lds	r18, 0x046A
     cba:	30 91 6b 04 	lds	r19, 0x046B
     cbe:	40 91 6c 04 	lds	r20, 0x046C
     cc2:	50 91 6d 04 	lds	r21, 0x046D
     cc6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     cca:	7b 01       	movw	r14, r22
     ccc:	8c 01       	movw	r16, r24
     cce:	60 93 6e 04 	sts	0x046E, r22
     cd2:	70 93 6f 04 	sts	0x046F, r23
     cd6:	80 93 70 04 	sts	0x0470, r24
     cda:	90 93 71 04 	sts	0x0471, r25
		////////////////////////////////////////
		
		// PID calculation	/////////////////////////////////////////
		error_l = v_l_cmd - v_l;									// Current Left Wheel error
     cde:	c6 01       	movw	r24, r12
     ce0:	b5 01       	movw	r22, r10
     ce2:	a4 01       	movw	r20, r8
     ce4:	93 01       	movw	r18, r6
     ce6:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     cea:	6d 87       	std	Y+13, r22	; 0x0d
     cec:	7e 87       	std	Y+14, r23	; 0x0e
     cee:	8f 87       	std	Y+15, r24	; 0x0f
     cf0:	98 8b       	std	Y+16, r25	; 0x10
     cf2:	60 93 42 02 	sts	0x0242, r22
     cf6:	70 93 43 02 	sts	0x0243, r23
     cfa:	80 93 44 02 	sts	0x0244, r24
     cfe:	90 93 45 02 	sts	0x0245, r25
		error_r = v_r_cmd - v_r;									// Current Right Wheel error
     d02:	c8 01       	movw	r24, r16
     d04:	b7 01       	movw	r22, r14
     d06:	a2 01       	movw	r20, r4
     d08:	91 01       	movw	r18, r2
     d0a:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     d0e:	69 87       	std	Y+9, r22	; 0x09
     d10:	7a 87       	std	Y+10, r23	; 0x0a
     d12:	8b 87       	std	Y+11, r24	; 0x0b
     d14:	9c 87       	std	Y+12, r25	; 0x0c
     d16:	60 93 ce 04 	sts	0x04CE, r22
     d1a:	70 93 cf 04 	sts	0x04CF, r23
     d1e:	80 93 d0 04 	sts	0x04D0, r24
     d22:	90 93 d1 04 	sts	0x04D1, r25
	
		// Calculate the proportion
		up_l = Kp_l*error_l;										// Left Wheel Proportion
     d26:	60 91 1a 02 	lds	r22, 0x021A
     d2a:	70 91 1b 02 	lds	r23, 0x021B
     d2e:	80 91 1c 02 	lds	r24, 0x021C
     d32:	90 91 1d 02 	lds	r25, 0x021D
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	4f 85       	ldd	r20, Y+15	; 0x0f
     d3c:	58 89       	ldd	r21, Y+16	; 0x10
     d3e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     d42:	6d 8f       	std	Y+29, r22	; 0x1d
     d44:	7e 8f       	std	Y+30, r23	; 0x1e
     d46:	8f 8f       	std	Y+31, r24	; 0x1f
     d48:	98 a3       	std	Y+32, r25	; 0x20
     d4a:	60 93 72 04 	sts	0x0472, r22
     d4e:	70 93 73 04 	sts	0x0473, r23
     d52:	80 93 74 04 	sts	0x0474, r24
     d56:	90 93 75 04 	sts	0x0475, r25
		up_r = Kp_r*error_r;										// Right Wheel Proportion
     d5a:	60 91 66 04 	lds	r22, 0x0466
     d5e:	70 91 67 04 	lds	r23, 0x0467
     d62:	80 91 68 04 	lds	r24, 0x0468
     d66:	90 91 69 04 	lds	r25, 0x0469
     d6a:	29 85       	ldd	r18, Y+9	; 0x09
     d6c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d6e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d70:	5c 85       	ldd	r21, Y+12	; 0x0c
     d72:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     d76:	69 a3       	std	Y+33, r22	; 0x21
     d78:	7a a3       	std	Y+34, r23	; 0x22
     d7a:	8b a3       	std	Y+35, r24	; 0x23
     d7c:	9c a3       	std	Y+36, r25	; 0x24
     d7e:	60 93 3e 02 	sts	0x023E, r22
     d82:	70 93 3f 02 	sts	0x023F, r23
     d86:	80 93 40 02 	sts	0x0240, r24
     d8a:	90 93 41 02 	sts	0x0241, r25
		
		// Calculate the integral
		ui_l = Ki_l*(error_l + error_l_n1) + ui_l_n1;				// Update Left Wheel integral
     d8e:	e0 90 b2 04 	lds	r14, 0x04B2
     d92:	f0 90 b3 04 	lds	r15, 0x04B3
     d96:	00 91 b4 04 	lds	r16, 0x04B4
     d9a:	10 91 b5 04 	lds	r17, 0x04B5
     d9e:	6d 85       	ldd	r22, Y+13	; 0x0d
     da0:	7e 85       	ldd	r23, Y+14	; 0x0e
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	98 89       	ldd	r25, Y+16	; 0x10
     da6:	a8 01       	movw	r20, r16
     da8:	97 01       	movw	r18, r14
     daa:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     dae:	20 91 52 04 	lds	r18, 0x0452
     db2:	30 91 53 04 	lds	r19, 0x0453
     db6:	40 91 54 04 	lds	r20, 0x0454
     dba:	50 91 55 04 	lds	r21, 0x0455
     dbe:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     dc2:	20 91 60 01 	lds	r18, 0x0160
     dc6:	30 91 61 01 	lds	r19, 0x0161
     dca:	40 91 62 01 	lds	r20, 0x0162
     dce:	50 91 63 01 	lds	r21, 0x0163
     dd2:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     dd6:	6d a3       	std	Y+37, r22	; 0x25
     dd8:	7e a3       	std	Y+38, r23	; 0x26
     dda:	8f a3       	std	Y+39, r24	; 0x27
     ddc:	98 a7       	std	Y+40, r25	; 0x28
     dde:	60 93 2e 02 	sts	0x022E, r22
     de2:	70 93 2f 02 	sts	0x022F, r23
     de6:	80 93 30 02 	sts	0x0230, r24
     dea:	90 93 31 02 	sts	0x0231, r25
		ui_r = Ki_r*(error_r + error_r_n1) + ui_r_n1;				// Update Right Wheel integral
     dee:	a0 90 32 02 	lds	r10, 0x0232
     df2:	b0 90 33 02 	lds	r11, 0x0233
     df6:	c0 90 34 02 	lds	r12, 0x0234
     dfa:	d0 90 35 02 	lds	r13, 0x0235
     dfe:	69 85       	ldd	r22, Y+9	; 0x09
     e00:	7a 85       	ldd	r23, Y+10	; 0x0a
     e02:	8b 85       	ldd	r24, Y+11	; 0x0b
     e04:	9c 85       	ldd	r25, Y+12	; 0x0c
     e06:	a6 01       	movw	r20, r12
     e08:	95 01       	movw	r18, r10
     e0a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     e0e:	20 91 ae 04 	lds	r18, 0x04AE
     e12:	30 91 af 04 	lds	r19, 0x04AF
     e16:	40 91 b0 04 	lds	r20, 0x04B0
     e1a:	50 91 b1 04 	lds	r21, 0x04B1
     e1e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     e22:	20 91 64 01 	lds	r18, 0x0164
     e26:	30 91 65 01 	lds	r19, 0x0165
     e2a:	40 91 66 01 	lds	r20, 0x0166
     e2e:	50 91 67 01 	lds	r21, 0x0167
     e32:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     e36:	69 a7       	std	Y+41, r22	; 0x29
     e38:	7a a7       	std	Y+42, r23	; 0x2a
     e3a:	8b a7       	std	Y+43, r24	; 0x2b
     e3c:	9c a7       	std	Y+44, r25	; 0x2c
     e3e:	60 93 16 02 	sts	0x0216, r22
     e42:	70 93 17 02 	sts	0x0217, r23
     e46:	80 93 18 02 	sts	0x0218, r24
     e4a:	90 93 19 02 	sts	0x0219, r25

		// Calculate the derivative		
		ud_l = Kd_l*(error_l - error_l_n1) - ud_l_n1;				// Update Left Wheel derivative
     e4e:	60 90 9e 04 	lds	r6, 0x049E
     e52:	70 90 9f 04 	lds	r7, 0x049F
     e56:	80 90 a0 04 	lds	r8, 0x04A0
     e5a:	90 90 a1 04 	lds	r9, 0x04A1
     e5e:	6d 85       	ldd	r22, Y+13	; 0x0d
     e60:	7e 85       	ldd	r23, Y+14	; 0x0e
     e62:	8f 85       	ldd	r24, Y+15	; 0x0f
     e64:	98 89       	ldd	r25, Y+16	; 0x10
     e66:	a8 01       	movw	r20, r16
     e68:	97 01       	movw	r18, r14
     e6a:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     e6e:	20 91 62 04 	lds	r18, 0x0462
     e72:	30 91 63 04 	lds	r19, 0x0463
     e76:	40 91 64 04 	lds	r20, 0x0464
     e7a:	50 91 65 04 	lds	r21, 0x0465
     e7e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     e82:	a4 01       	movw	r20, r8
     e84:	93 01       	movw	r18, r6
     e86:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     e8a:	7b 01       	movw	r14, r22
     e8c:	8c 01       	movw	r16, r24
     e8e:	60 93 c6 04 	sts	0x04C6, r22
     e92:	70 93 c7 04 	sts	0x04C7, r23
     e96:	80 93 c8 04 	sts	0x04C8, r24
     e9a:	90 93 c9 04 	sts	0x04C9, r25
		ud_r = Kd_r*(error_r - error_r_n1) - ud_r_n1;				// Update Right Wheel derivative
     e9e:	20 90 56 04 	lds	r2, 0x0456
     ea2:	30 90 57 04 	lds	r3, 0x0457
     ea6:	40 90 58 04 	lds	r4, 0x0458
     eaa:	50 90 59 04 	lds	r5, 0x0459
     eae:	69 85       	ldd	r22, Y+9	; 0x09
     eb0:	7a 85       	ldd	r23, Y+10	; 0x0a
     eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb6:	a6 01       	movw	r20, r12
     eb8:	95 01       	movw	r18, r10
     eba:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     ebe:	20 91 aa 04 	lds	r18, 0x04AA
     ec2:	30 91 ab 04 	lds	r19, 0x04AB
     ec6:	40 91 ac 04 	lds	r20, 0x04AC
     eca:	50 91 ad 04 	lds	r21, 0x04AD
     ece:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     ed2:	a2 01       	movw	r20, r4
     ed4:	91 01       	movw	r18, r2
     ed6:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     eda:	6d 83       	std	Y+5, r22	; 0x05
     edc:	7e 83       	std	Y+6, r23	; 0x06
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	60 93 76 04 	sts	0x0476, r22
     ee6:	70 93 77 04 	sts	0x0477, r23
     eea:	80 93 78 04 	sts	0x0478, r24
     eee:	90 93 79 04 	sts	0x0479, r25
		
		// Filter the derivative output
		udf_l = lpf1_l*ud_l + lpf2_l*ud_l_n1 - lpf3_l*udf_l_n1;		// Update filtered Left Wheel derivative
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 01       	movw	r22, r14
     ef6:	20 91 ca 04 	lds	r18, 0x04CA
     efa:	30 91 cb 04 	lds	r19, 0x04CB
     efe:	40 91 cc 04 	lds	r20, 0x04CC
     f02:	50 91 cd 04 	lds	r21, 0x04CD
     f06:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     f0a:	7b 01       	movw	r14, r22
     f0c:	8c 01       	movw	r16, r24
     f0e:	c4 01       	movw	r24, r8
     f10:	b3 01       	movw	r22, r6
     f12:	20 91 8e 04 	lds	r18, 0x048E
     f16:	30 91 8f 04 	lds	r19, 0x048F
     f1a:	40 91 90 04 	lds	r20, 0x0490
     f1e:	50 91 91 04 	lds	r21, 0x0491
     f22:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	c8 01       	movw	r24, r16
     f2c:	b7 01       	movw	r22, r14
     f2e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     f32:	7b 01       	movw	r14, r22
     f34:	8c 01       	movw	r16, r24
     f36:	60 91 a2 04 	lds	r22, 0x04A2
     f3a:	70 91 a3 04 	lds	r23, 0x04A3
     f3e:	80 91 a4 04 	lds	r24, 0x04A4
     f42:	90 91 a5 04 	lds	r25, 0x04A5
     f46:	20 91 da 04 	lds	r18, 0x04DA
     f4a:	30 91 db 04 	lds	r19, 0x04DB
     f4e:	40 91 dc 04 	lds	r20, 0x04DC
     f52:	50 91 dd 04 	lds	r21, 0x04DD
     f56:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     f5a:	9b 01       	movw	r18, r22
     f5c:	ac 01       	movw	r20, r24
     f5e:	c8 01       	movw	r24, r16
     f60:	b7 01       	movw	r22, r14
     f62:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     f66:	69 83       	std	Y+1, r22	; 0x01
     f68:	7a 83       	std	Y+2, r23	; 0x02
     f6a:	8b 83       	std	Y+3, r24	; 0x03
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	60 93 5e 04 	sts	0x045E, r22
     f72:	70 93 5f 04 	sts	0x045F, r23
     f76:	80 93 60 04 	sts	0x0460, r24
     f7a:	90 93 61 04 	sts	0x0461, r25
		udf_r = lpf1_r*ud_r + lpf2_r*ud_r_n1 - lpf3_r*udf_r_n1;		// Update filtered Right Wheel derivative
     f7e:	6d 81       	ldd	r22, Y+5	; 0x05
     f80:	7e 81       	ldd	r23, Y+6	; 0x06
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	20 91 d6 04 	lds	r18, 0x04D6
     f8a:	30 91 d7 04 	lds	r19, 0x04D7
     f8e:	40 91 d8 04 	lds	r20, 0x04D8
     f92:	50 91 d9 04 	lds	r21, 0x04D9
     f96:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     f9a:	7b 01       	movw	r14, r22
     f9c:	8c 01       	movw	r16, r24
     f9e:	c2 01       	movw	r24, r4
     fa0:	b1 01       	movw	r22, r2
     fa2:	20 91 a6 04 	lds	r18, 0x04A6
     fa6:	30 91 a7 04 	lds	r19, 0x04A7
     faa:	40 91 a8 04 	lds	r20, 0x04A8
     fae:	50 91 a9 04 	lds	r21, 0x04A9
     fb2:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	c8 01       	movw	r24, r16
     fbc:	b7 01       	movw	r22, r14
     fbe:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     fc2:	7b 01       	movw	r14, r22
     fc4:	8c 01       	movw	r16, r24
     fc6:	60 91 92 04 	lds	r22, 0x0492
     fca:	70 91 93 04 	lds	r23, 0x0493
     fce:	80 91 94 04 	lds	r24, 0x0494
     fd2:	90 91 95 04 	lds	r25, 0x0495
     fd6:	20 91 86 04 	lds	r18, 0x0486
     fda:	30 91 87 04 	lds	r19, 0x0487
     fde:	40 91 88 04 	lds	r20, 0x0488
     fe2:	50 91 89 04 	lds	r21, 0x0489
     fe6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
     fea:	9b 01       	movw	r18, r22
     fec:	ac 01       	movw	r20, r24
     fee:	c8 01       	movw	r24, r16
     ff0:	b7 01       	movw	r22, r14
     ff2:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     ff6:	3b 01       	movw	r6, r22
     ff8:	4c 01       	movw	r8, r24
     ffa:	60 93 96 04 	sts	0x0496, r22
     ffe:	70 93 97 04 	sts	0x0497, r23
    1002:	80 93 98 04 	sts	0x0498, r24
    1006:	90 93 99 04 	sts	0x0499, r25
		
		u_l = up_l + ui_l + udf_l;									// u_l(t) to be output to the Left Wheel 
    100a:	6d a1       	ldd	r22, Y+37	; 0x25
    100c:	7e a1       	ldd	r23, Y+38	; 0x26
    100e:	8f a1       	ldd	r24, Y+39	; 0x27
    1010:	98 a5       	ldd	r25, Y+40	; 0x28
    1012:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1014:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1016:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1018:	58 a1       	ldd	r21, Y+32	; 0x20
    101a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	4b 81       	ldd	r20, Y+3	; 0x03
    1024:	5c 81       	ldd	r21, Y+4	; 0x04
    1026:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    102a:	7b 01       	movw	r14, r22
    102c:	8c 01       	movw	r16, r24
    102e:	60 93 be 04 	sts	0x04BE, r22
    1032:	70 93 bf 04 	sts	0x04BF, r23
    1036:	80 93 c0 04 	sts	0x04C0, r24
    103a:	90 93 c1 04 	sts	0x04C1, r25
		u_r = up_r + ui_r + udf_r;									// u_r(t) to be output to the Right Wheel 
    103e:	69 a5       	ldd	r22, Y+41	; 0x29
    1040:	7a a5       	ldd	r23, Y+42	; 0x2a
    1042:	8b a5       	ldd	r24, Y+43	; 0x2b
    1044:	9c a5       	ldd	r25, Y+44	; 0x2c
    1046:	29 a1       	ldd	r18, Y+33	; 0x21
    1048:	3a a1       	ldd	r19, Y+34	; 0x22
    104a:	4b a1       	ldd	r20, Y+35	; 0x23
    104c:	5c a1       	ldd	r21, Y+36	; 0x24
    104e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1052:	a4 01       	movw	r20, r8
    1054:	93 01       	movw	r18, r6
    1056:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    105a:	5b 01       	movw	r10, r22
    105c:	6c 01       	movw	r12, r24
    105e:	60 93 36 02 	sts	0x0236, r22
    1062:	70 93 37 02 	sts	0x0237, r23
    1066:	80 93 38 02 	sts	0x0238, r24
    106a:	90 93 39 02 	sts	0x0239, r25

		// Anti-windup
		if(u_l > 30){
    106e:	c8 01       	movw	r24, r16
    1070:	b7 01       	movw	r22, r14
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 ef       	ldi	r20, 0xF0	; 240
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
    107e:	18 16       	cp	r1, r24
    1080:	ac f4       	brge	.+42     	; 0x10ac <__stack+0xbad>
			ui_l = ui_l_n1;
    1082:	80 91 60 01 	lds	r24, 0x0160
    1086:	90 91 61 01 	lds	r25, 0x0161
    108a:	a0 91 62 01 	lds	r26, 0x0162
    108e:	b0 91 63 01 	lds	r27, 0x0163
    1092:	80 93 2e 02 	sts	0x022E, r24
    1096:	90 93 2f 02 	sts	0x022F, r25
    109a:	a0 93 30 02 	sts	0x0230, r26
    109e:	b0 93 31 02 	sts	0x0231, r27
			u_l = 30;	
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a0 ef       	ldi	r26, 0xF0	; 240
    10a8:	b1 e4       	ldi	r27, 0x41	; 65
    10aa:	1e c0       	rjmp	.+60     	; 0x10e8 <__stack+0xbe9>
		}
		else if(u_l < -30){
    10ac:	c8 01       	movw	r24, r16
    10ae:	b7 01       	movw	r22, r14
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 ef       	ldi	r20, 0xF0	; 240
    10b6:	51 ec       	ldi	r21, 0xC1	; 193
    10b8:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	e4 f4       	brge	.+56     	; 0x10f8 <__stack+0xbf9>
			ui_l = ui_l_n1;
    10c0:	80 91 60 01 	lds	r24, 0x0160
    10c4:	90 91 61 01 	lds	r25, 0x0161
    10c8:	a0 91 62 01 	lds	r26, 0x0162
    10cc:	b0 91 63 01 	lds	r27, 0x0163
    10d0:	80 93 2e 02 	sts	0x022E, r24
    10d4:	90 93 2f 02 	sts	0x022F, r25
    10d8:	a0 93 30 02 	sts	0x0230, r26
    10dc:	b0 93 31 02 	sts	0x0231, r27
			u_l = -30;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a0 ef       	ldi	r26, 0xF0	; 240
    10e6:	b1 ec       	ldi	r27, 0xC1	; 193
    10e8:	80 93 be 04 	sts	0x04BE, r24
    10ec:	90 93 bf 04 	sts	0x04BF, r25
    10f0:	a0 93 c0 04 	sts	0x04C0, r26
    10f4:	b0 93 c1 04 	sts	0x04C1, r27
		}

		if(u_r > 30){
    10f8:	c6 01       	movw	r24, r12
    10fa:	b5 01       	movw	r22, r10
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 ef       	ldi	r20, 0xF0	; 240
    1102:	51 e4       	ldi	r21, 0x41	; 65
    1104:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
    1108:	18 16       	cp	r1, r24
    110a:	ac f4       	brge	.+42     	; 0x1136 <__stack+0xc37>
			ui_r = ui_r_n1;
    110c:	80 91 64 01 	lds	r24, 0x0164
    1110:	90 91 65 01 	lds	r25, 0x0165
    1114:	a0 91 66 01 	lds	r26, 0x0166
    1118:	b0 91 67 01 	lds	r27, 0x0167
    111c:	80 93 16 02 	sts	0x0216, r24
    1120:	90 93 17 02 	sts	0x0217, r25
    1124:	a0 93 18 02 	sts	0x0218, r26
    1128:	b0 93 19 02 	sts	0x0219, r27
			u_r = 30;	
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 ef       	ldi	r26, 0xF0	; 240
    1132:	b1 e4       	ldi	r27, 0x41	; 65
    1134:	1e c0       	rjmp	.+60     	; 0x1172 <__stack+0xc73>
		}
		else if(u_r < -30){
    1136:	c6 01       	movw	r24, r12
    1138:	b5 01       	movw	r22, r10
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 ef       	ldi	r20, 0xF0	; 240
    1140:	51 ec       	ldi	r21, 0xC1	; 193
    1142:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    1146:	88 23       	and	r24, r24
    1148:	e4 f4       	brge	.+56     	; 0x1182 <__stack+0xc83>
			ui_r = ui_r_n1;
    114a:	80 91 64 01 	lds	r24, 0x0164
    114e:	90 91 65 01 	lds	r25, 0x0165
    1152:	a0 91 66 01 	lds	r26, 0x0166
    1156:	b0 91 67 01 	lds	r27, 0x0167
    115a:	80 93 16 02 	sts	0x0216, r24
    115e:	90 93 17 02 	sts	0x0217, r25
    1162:	a0 93 18 02 	sts	0x0218, r26
    1166:	b0 93 19 02 	sts	0x0219, r27
			u_r = -30;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 ef       	ldi	r26, 0xF0	; 240
    1170:	b1 ec       	ldi	r27, 0xC1	; 193
    1172:	80 93 36 02 	sts	0x0236, r24
    1176:	90 93 37 02 	sts	0x0237, r25
    117a:	a0 93 38 02 	sts	0x0238, r26
    117e:	b0 93 39 02 	sts	0x0239, r27
		}

		error_l_n1 = error_l;						// Update previous Left Wheel proportional error
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	af 85       	ldd	r26, Y+15	; 0x0f
    1188:	b8 89       	ldd	r27, Y+16	; 0x10
    118a:	80 93 b2 04 	sts	0x04B2, r24
    118e:	90 93 b3 04 	sts	0x04B3, r25
    1192:	a0 93 b4 04 	sts	0x04B4, r26
    1196:	b0 93 b5 04 	sts	0x04B5, r27
		ui_l_n1 = ui_l;								// Update previous Left Wheel integral
    119a:	80 91 2e 02 	lds	r24, 0x022E
    119e:	90 91 2f 02 	lds	r25, 0x022F
    11a2:	a0 91 30 02 	lds	r26, 0x0230
    11a6:	b0 91 31 02 	lds	r27, 0x0231
    11aa:	80 93 60 01 	sts	0x0160, r24
    11ae:	90 93 61 01 	sts	0x0161, r25
    11b2:	a0 93 62 01 	sts	0x0162, r26
    11b6:	b0 93 63 01 	sts	0x0163, r27
		ud_l_n1 = ud_l;								// Update previous Left Wheel derivative
    11ba:	80 91 c6 04 	lds	r24, 0x04C6
    11be:	90 91 c7 04 	lds	r25, 0x04C7
    11c2:	a0 91 c8 04 	lds	r26, 0x04C8
    11c6:	b0 91 c9 04 	lds	r27, 0x04C9
    11ca:	80 93 9e 04 	sts	0x049E, r24
    11ce:	90 93 9f 04 	sts	0x049F, r25
    11d2:	a0 93 a0 04 	sts	0x04A0, r26
    11d6:	b0 93 a1 04 	sts	0x04A1, r27
		udf_l_n1 = udf_l;							// Update previous Left Wheel filtered derivative
    11da:	29 81       	ldd	r18, Y+1	; 0x01
    11dc:	3a 81       	ldd	r19, Y+2	; 0x02
    11de:	4b 81       	ldd	r20, Y+3	; 0x03
    11e0:	5c 81       	ldd	r21, Y+4	; 0x04
    11e2:	20 93 da 04 	sts	0x04DA, r18
    11e6:	30 93 db 04 	sts	0x04DB, r19
    11ea:	40 93 dc 04 	sts	0x04DC, r20
    11ee:	50 93 dd 04 	sts	0x04DD, r21

		error_r_n1 = error_r;						// Update previous Right Wheel proportional error
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    11f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    11fa:	80 93 32 02 	sts	0x0232, r24
    11fe:	90 93 33 02 	sts	0x0233, r25
    1202:	a0 93 34 02 	sts	0x0234, r26
    1206:	b0 93 35 02 	sts	0x0235, r27
		ui_r_n1 = ui_r;								// Update previous Right Wheel integral
    120a:	80 91 16 02 	lds	r24, 0x0216
    120e:	90 91 17 02 	lds	r25, 0x0217
    1212:	a0 91 18 02 	lds	r26, 0x0218
    1216:	b0 91 19 02 	lds	r27, 0x0219
    121a:	80 93 64 01 	sts	0x0164, r24
    121e:	90 93 65 01 	sts	0x0165, r25
    1222:	a0 93 66 01 	sts	0x0166, r26
    1226:	b0 93 67 01 	sts	0x0167, r27
		ud_r_n1 = ud_r;								// Update previous Right Wheel derivative
    122a:	2d 81       	ldd	r18, Y+5	; 0x05
    122c:	3e 81       	ldd	r19, Y+6	; 0x06
    122e:	4f 81       	ldd	r20, Y+7	; 0x07
    1230:	58 85       	ldd	r21, Y+8	; 0x08
    1232:	20 93 56 04 	sts	0x0456, r18
    1236:	30 93 57 04 	sts	0x0457, r19
    123a:	40 93 58 04 	sts	0x0458, r20
    123e:	50 93 59 04 	sts	0x0459, r21
		udf_r_n1 = udf_r;							// Update previous Right Wheel filtered derivative
    1242:	60 92 86 04 	sts	0x0486, r6
    1246:	70 92 87 04 	sts	0x0487, r7
    124a:	80 92 88 04 	sts	0x0488, r8
    124e:	90 92 89 04 	sts	0x0489, r9
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		
		
		wheel_l(u_l);
    1252:	60 91 be 04 	lds	r22, 0x04BE
    1256:	70 91 bf 04 	lds	r23, 0x04BF
    125a:	80 91 c0 04 	lds	r24, 0x04C0
    125e:	90 91 c1 04 	lds	r25, 0x04C1
    1262:	0e 94 a3 00 	call	0x146	; 0x146 <wheel_l>
		wheel_r(u_r);
    1266:	60 91 36 02 	lds	r22, 0x0236
    126a:	70 91 37 02 	lds	r23, 0x0237
    126e:	80 91 38 02 	lds	r24, 0x0238
    1272:	90 91 39 02 	lds	r25, 0x0239
    1276:	0e 94 08 01 	call	0x210	; 0x210 <wheel_r>
		//rprintfFloat(5,cmd_ang_vel);
		//rprintf("\t,");
		//rprintfFloat(5,(elapsed_time_l - elapsed_time_l_previous));
		//rprintfCRLF();
		u08 rxData;
		rxData = read_ub();
    127a:	0e 94 83 00 	call	0x106	; 0x106 <read_ub>
		rprintf("%c\n",rxData);
    127e:	00 d0       	rcall	.+0      	; 0x1280 <__stack+0xd81>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <__stack+0xd83>
    1282:	0f 92       	push	r0
    1284:	ed b7       	in	r30, 0x3d	; 61
    1286:	fe b7       	in	r31, 0x3e	; 62
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	ad b7       	in	r26, 0x3d	; 61
    128e:	be b7       	in	r27, 0x3e	; 62
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	2c 93       	st	X, r18
    1294:	48 e6       	ldi	r20, 0x68	; 104
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	52 83       	std	Z+2, r21	; 0x02
    129a:	41 83       	std	Z+1, r20	; 0x01
    129c:	83 83       	std	Z+3, r24	; 0x03
    129e:	14 82       	std	Z+4, r1	; 0x04
    12a0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <rprintf1RamRom>
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	2e ca       	rjmp	.-2980   	; 0x70c <__stack+0x20d>

000012b0 <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
    12b0:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
    12b2:	80 91 81 00 	lds	r24, 0x0081
    12b6:	88 60       	ori	r24, 0x08	; 8
    12b8:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    12bc:	80 91 81 00 	lds	r24, 0x0081
    12c0:	8f 7e       	andi	r24, 0xEF	; 239
    12c2:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    12c6:	99 30       	cpi	r25, 0x09	; 9
    12c8:	49 f4       	brne	.+18     	; 0x12dc <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    12ca:	80 91 80 00 	lds	r24, 0x0080
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    12d4:	80 91 80 00 	lds	r24, 0x0080
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
    12dc:	9a 30       	cpi	r25, 0x0A	; 10
    12de:	21 f4       	brne	.+8      	; 0x12e8 <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    12e0:	80 91 80 00 	lds	r24, 0x0080
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    12e8:	80 91 80 00 	lds	r24, 0x0080
    12ec:	8d 7f       	andi	r24, 0xFD	; 253
    12ee:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    12f2:	80 91 80 00 	lds	r24, 0x0080
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
    12fc:	10 92 89 00 	sts	0x0089, r1
    1300:	10 92 88 00 	sts	0x0088, r1
}
    1304:	08 95       	ret

00001306 <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
    1306:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
    1308:	80 91 81 00 	lds	r24, 0x0081
    130c:	87 7f       	andi	r24, 0xF7	; 247
    130e:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    1312:	80 91 81 00 	lds	r24, 0x0081
    1316:	8f 7e       	andi	r24, 0xEF	; 239
    1318:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    131c:	99 30       	cpi	r25, 0x09	; 9
    131e:	49 f4       	brne	.+18     	; 0x1332 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    1320:	80 91 80 00 	lds	r24, 0x0080
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    132a:	80 91 80 00 	lds	r24, 0x0080
    132e:	8e 7f       	andi	r24, 0xFE	; 254
    1330:	0e c0       	rjmp	.+28     	; 0x134e <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
    1332:	9a 30       	cpi	r25, 0x0A	; 10
    1334:	21 f4       	brne	.+8      	; 0x133e <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    1336:	80 91 80 00 	lds	r24, 0x0080
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    133e:	80 91 80 00 	lds	r24, 0x0080
    1342:	8d 7f       	andi	r24, 0xFD	; 253
    1344:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    1348:	80 91 80 00 	lds	r24, 0x0080
    134c:	81 60       	ori	r24, 0x01	; 1
    134e:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
    1352:	10 92 8b 00 	sts	0x008B, r1
    1356:	10 92 8a 00 	sts	0x008A, r1
}
    135a:	08 95       	ret

0000135c <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    135c:	e0 e8       	ldi	r30, 0x80	; 128
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	20 81       	ld	r18, Z
    1362:	2e 7f       	andi	r18, 0xFE	; 254
    1364:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
    1366:	20 81       	ld	r18, Z
    1368:	22 60       	ori	r18, 0x02	; 2
    136a:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
    136c:	e1 e8       	ldi	r30, 0x81	; 129
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	20 81       	ld	r18, Z
    1372:	28 60       	ori	r18, 0x08	; 8
    1374:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
    1376:	20 81       	ld	r18, Z
    1378:	20 61       	ori	r18, 0x10	; 16
    137a:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
    137c:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    137e:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
    1380:	90 93 87 00 	sts	0x0087, r25
    1384:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
    1388:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
    138a:	10 92 89 00 	sts	0x0089, r1
    138e:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
    1392:	10 92 8b 00 	sts	0x008B, r1
    1396:	10 92 8a 00 	sts	0x008A, r1
}
    139a:	08 95       	ret

0000139c <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
    139c:	84 b5       	in	r24, 0x24	; 36
    139e:	8f 7d       	andi	r24, 0xDF	; 223
    13a0:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    13a2:	84 b5       	in	r24, 0x24	; 36
    13a4:	8f 7e       	andi	r24, 0xEF	; 239
    13a6:	84 bd       	out	0x24, r24	; 36
}
    13a8:	08 95       	ret

000013aa <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
    13aa:	84 b5       	in	r24, 0x24	; 36
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    13b0:	84 b5       	in	r24, 0x24	; 36
    13b2:	8f 7b       	andi	r24, 0xBF	; 191
    13b4:	84 bd       	out	0x24, r24	; 36
}
    13b6:	08 95       	ret

000013b8 <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
    13b8:	e0 e8       	ldi	r30, 0x80	; 128
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7d       	andi	r24, 0xDF	; 223
    13c0:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7e       	andi	r24, 0xEF	; 239
    13c6:	80 83       	st	Z, r24
}
    13c8:	08 95       	ret

000013ca <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
    13ca:	e0 e8       	ldi	r30, 0x80	; 128
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 77       	andi	r24, 0x7F	; 127
    13d2:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 7b       	andi	r24, 0xBF	; 191
    13d8:	80 83       	st	Z, r24
}
    13da:	08 95       	ret

000013dc <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
    13dc:	84 b5       	in	r24, 0x24	; 36
    13de:	80 62       	ori	r24, 0x20	; 32
    13e0:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    13e2:	84 b5       	in	r24, 0x24	; 36
    13e4:	8f 7e       	andi	r24, 0xEF	; 239
    13e6:	84 bd       	out	0x24, r24	; 36
}
    13e8:	08 95       	ret

000013ea <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
    13ea:	84 b5       	in	r24, 0x24	; 36
    13ec:	80 68       	ori	r24, 0x80	; 128
    13ee:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    13f0:	84 b5       	in	r24, 0x24	; 36
    13f2:	8f 7b       	andi	r24, 0xBF	; 191
    13f4:	84 bd       	out	0x24, r24	; 36
}
    13f6:	08 95       	ret

000013f8 <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
    13f8:	e0 e8       	ldi	r30, 0x80	; 128
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    1402:	80 81       	ld	r24, Z
    1404:	8f 7e       	andi	r24, 0xEF	; 239
    1406:	80 83       	st	Z, r24
}
    1408:	08 95       	ret

0000140a <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
    140a:	e0 e8       	ldi	r30, 0x80	; 128
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    1414:	80 81       	ld	r24, Z
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	80 83       	st	Z, r24
}
    141a:	08 95       	ret

0000141c <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
    141c:	88 bd       	out	0x28, r24	; 40
}
    141e:	08 95       	ret

00001420 <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
    1420:	87 bd       	out	0x27, r24	; 39
}
    1422:	08 95       	ret

00001424 <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
    1424:	90 93 89 00 	sts	0x0089, r25
    1428:	80 93 88 00 	sts	0x0088, r24
}
    142c:	08 95       	ret

0000142e <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
    142e:	90 93 8b 00 	sts	0x008B, r25
    1432:	80 93 8a 00 	sts	0x008A, r24
}
    1436:	08 95       	ret

00001438 <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1438:	10 92 46 02 	sts	0x0246, r1
    143c:	10 92 47 02 	sts	0x0247, r1
    1440:	10 92 48 02 	sts	0x0248, r1
    1444:	10 92 49 02 	sts	0x0249, r1
    1448:	16 bc       	out	0x26, r1	; 38
}
    144a:	08 95       	ret

0000144c <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    144c:	10 92 3a 02 	sts	0x023A, r1
    1450:	10 92 3b 02 	sts	0x023B, r1
    1454:	10 92 3c 02 	sts	0x023C, r1
    1458:	10 92 3d 02 	sts	0x023D, r1
    145c:	10 92 85 00 	sts	0x0085, r1
    1460:	10 92 84 00 	sts	0x0084, r1
}
    1464:	08 95       	ret

00001466 <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
    1466:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    146e:	10 92 46 02 	sts	0x0246, r1
    1472:	10 92 47 02 	sts	0x0247, r1
    1476:	10 92 48 02 	sts	0x0248, r1
    147a:	10 92 49 02 	sts	0x0249, r1
    147e:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    1480:	08 95       	ret

00001482 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
    1482:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    148c:	10 92 3a 02 	sts	0x023A, r1
    1490:	10 92 3b 02 	sts	0x023B, r1
    1494:	10 92 3c 02 	sts	0x023C, r1
    1498:	10 92 3d 02 	sts	0x023D, r1
    149c:	10 92 85 00 	sts	0x0085, r1
    14a0:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    14a4:	08 95       	ret

000014a6 <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    14a6:	20 91 46 02 	lds	r18, 0x0246
    14aa:	30 91 47 02 	lds	r19, 0x0247
    14ae:	40 91 48 02 	lds	r20, 0x0248
    14b2:	50 91 49 02 	lds	r21, 0x0249
}
    14b6:	b9 01       	movw	r22, r18
    14b8:	ca 01       	movw	r24, r20
    14ba:	08 95       	ret

000014bc <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	24 e0       	ldi	r18, 0x04	; 4
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	aa 1f       	adc	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	2a 95       	dec	r18
    14cc:	d1 f7       	brne	.-12     	; 0x14c2 <delay_us+0x6>
    14ce:	03 96       	adiw	r24, 0x03	; 3
    14d0:	a1 1d       	adc	r26, r1
    14d2:	b1 1d       	adc	r27, r1
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	2a e0       	ldi	r18, 0x0A	; 10
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
    14ea:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	82 17       	cp	r24, r18
    14f0:	93 07       	cpc	r25, r19
    14f2:	d8 f3       	brcs	.-10     	; 0x14ea <delay_us+0x2e>
		asm("nop");
	};
}
    14f4:	08 95       	ret

000014f6 <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
    1508:	80 91 46 02 	lds	r24, 0x0246
    150c:	90 91 47 02 	lds	r25, 0x0247
    1510:	a0 91 48 02 	lds	r26, 0x0248
    1514:	b0 91 49 02 	lds	r27, 0x0249
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	a1 1d       	adc	r26, r1
    151c:	b1 1d       	adc	r27, r1
    151e:	80 93 46 02 	sts	0x0246, r24
    1522:	90 93 47 02 	sts	0x0247, r25
    1526:	a0 93 48 02 	sts	0x0248, r26
    152a:	b0 93 49 02 	sts	0x0249, r27
}
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    1540:	90 93 6d 01 	sts	0x016D, r25
    1544:	80 93 6c 01 	sts	0x016C, r24
}
    1548:	08 95       	ret

0000154a <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    154a:	1f 93       	push	r17
    154c:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    154e:	8a 30       	cpi	r24, 0x0A	; 10
    1550:	31 f4       	brne	.+12     	; 0x155e <rprintfChar+0x14>
		rputchar('\r');
    1552:	e0 91 6c 01 	lds	r30, 0x016C
    1556:	f0 91 6d 01 	lds	r31, 0x016D
    155a:	8d e0       	ldi	r24, 0x0D	; 13
    155c:	09 95       	icall
	// send character
	rputchar(c);
    155e:	e0 91 6c 01 	lds	r30, 0x016C
    1562:	f0 91 6d 01 	lds	r31, 0x016D
    1566:	81 2f       	mov	r24, r17
    1568:	09 95       	icall
}
    156a:	1f 91       	pop	r17
    156c:	08 95       	ret

0000156e <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	21 f4       	brne	.+8      	; 0x1580 <rprintfStr+0x12>
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    1580:	88 81       	ld	r24, Y
    1582:	88 23       	and	r24, r24
    1584:	d1 f7       	brne	.-12     	; 0x157a <rprintfStr+0xc>
		rprintfChar(*str++);
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	8c 01       	movw	r16, r24
    159a:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	e9 f0       	breq	.+58     	; 0x15da <rprintfStrLen+0x4e>
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    15a4:	26 17       	cp	r18, r22
    15a6:	37 07       	cpc	r19, r23
    15a8:	38 f4       	brcc	.+14     	; 0x15b8 <rprintfStrLen+0x2c>
    15aa:	f8 01       	movw	r30, r16
    15ac:	81 91       	ld	r24, Z+
    15ae:	8f 01       	movw	r16, r30
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	88 23       	and	r24, r24
    15b6:	b1 f7       	brne	.-20     	; 0x15a4 <rprintfStrLen+0x18>
    15b8:	c0 e0       	ldi	r28, 0x00	; 0
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
    15bc:	0b c0       	rjmp	.+22     	; 0x15d4 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    15be:	f8 01       	movw	r30, r16
    15c0:	80 81       	ld	r24, Z
    15c2:	88 23       	and	r24, r24
    15c4:	19 f0       	breq	.+6      	; 0x15cc <rprintfStrLen+0x40>
			rprintfChar(*str++);
    15c6:	0f 5f       	subi	r16, 0xFF	; 255
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    15d2:	21 96       	adiw	r28, 0x01	; 1
    15d4:	ce 15       	cp	r28, r14
    15d6:	df 05       	cpc	r29, r15
    15d8:	90 f3       	brcs	.-28     	; 0x15be <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <rprintfProgStr+0x10>
    15f2:	07 c0       	rjmp	.+14     	; 0x1602 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    15f4:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    15f8:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    15fa:	21 96       	adiw	r28, 0x01	; 1
    15fc:	84 91       	lpm	r24, Z+
    15fe:	88 23       	and	r24, r24
    1600:	c9 f7       	brne	.-14     	; 0x15f4 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    1608:	8a e0       	ldi	r24, 0x0A	; 10
    160a:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
}
    160e:	08 95       	ret

00001610 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    1610:	e8 2f       	mov	r30, r24
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ef 70       	andi	r30, 0x0F	; 15
    1616:	f0 70       	andi	r31, 0x00	; 0
    1618:	e4 59       	subi	r30, 0x94	; 148
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	e4 91       	lpm	r30, Z+
    161e:	8e 2f       	mov	r24, r30
    1620:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
}
    1624:	08 95       	ret

00001626 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    1626:	1f 93       	push	r17
    1628:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    162a:	82 95       	swap	r24
    162c:	8f 70       	andi	r24, 0x0F	; 15
    162e:	0e 94 08 0b 	call	0x1610	; 0x1610 <rprintfu04>
	rprintfu04(data);
    1632:	81 2f       	mov	r24, r17
    1634:	0e 94 08 0b 	call	0x1610	; 0x1610 <rprintfu04>
}
    1638:	1f 91       	pop	r17
    163a:	08 95       	ret

0000163c <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    163c:	1f 93       	push	r17
    163e:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    1640:	89 2f       	mov	r24, r25
    1642:	0e 94 13 0b 	call	0x1626	; 0x1626 <rprintfu08>
	rprintfu08(data);
    1646:	81 2f       	mov	r24, r17
    1648:	0e 94 13 0b 	call	0x1626	; 0x1626 <rprintfu08>
}
    164c:	1f 91       	pop	r17
    164e:	08 95       	ret

00001650 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	7b 01       	movw	r14, r22
    165a:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    165c:	c8 01       	movw	r24, r16
    165e:	aa 27       	eor	r26, r26
    1660:	bb 27       	eor	r27, r27
    1662:	0e 94 1e 0b 	call	0x163c	; 0x163c <rprintfu16>
	rprintfu16(data);
    1666:	c7 01       	movw	r24, r14
    1668:	0e 94 1e 0b 	call	0x163c	; 0x163c <rprintfu16>
}
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	08 95       	ret

00001676 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    1676:	2f 92       	push	r2
    1678:	3f 92       	push	r3
    167a:	4f 92       	push	r4
    167c:	5f 92       	push	r5
    167e:	6f 92       	push	r6
    1680:	7f 92       	push	r7
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	a3 97       	sbiw	r28, 0x23	; 35
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	6a a3       	std	Y+34, r22	; 0x22
    16ac:	24 2e       	mov	r2, r20
    16ae:	2b a3       	std	Y+35, r18	; 0x23
    16b0:	37 01       	movw	r6, r14
    16b2:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    16b4:	44 23       	and	r20, r20
    16b6:	51 f0       	breq	.+20     	; 0x16cc <rprintfNum+0x56>
    16b8:	17 ff       	sbrs	r17, 7
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <rprintfNum+0x56>
	{
		x = -n;
    16bc:	ee 24       	eor	r14, r14
    16be:	ff 24       	eor	r15, r15
    16c0:	87 01       	movw	r16, r14
    16c2:	e6 18       	sub	r14, r6
    16c4:	f7 08       	sbc	r15, r7
    16c6:	08 09       	sbc	r16, r8
    16c8:	19 09       	sbc	r17, r9
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    16cc:	84 01       	movw	r16, r8
    16ce:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    16d0:	2a a1       	ldd	r18, Y+34	; 0x22
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	21 10       	cpse	r2, r1
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	29 1b       	sub	r18, r25
    16dc:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    16de:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    16e0:	a8 2e       	mov	r10, r24
    16e2:	bb 24       	eor	r11, r11
    16e4:	cc 24       	eor	r12, r12
    16e6:	dd 24       	eor	r13, r13
    16e8:	c8 01       	movw	r24, r16
    16ea:	b7 01       	movw	r22, r14
    16ec:	a6 01       	movw	r20, r12
    16ee:	95 01       	movw	r18, r10
    16f0:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    16f4:	fb 01       	movw	r30, r22
    16f6:	ef 70       	andi	r30, 0x0F	; 15
    16f8:	f0 70       	andi	r31, 0x00	; 0
    16fa:	e4 59       	subi	r30, 0x94	; 148
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	64 91       	lpm	r22, Z+
    1700:	6f 8f       	std	Y+31, r22	; 0x1f
    1702:	c8 01       	movw	r24, r16
    1704:	b7 01       	movw	r22, r14
    1706:	a6 01       	movw	r20, r12
    1708:	95 01       	movw	r18, r10
    170a:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    170e:	c9 01       	movw	r24, r18
    1710:	da 01       	movw	r26, r20
    1712:	7c 01       	movw	r14, r24
    1714:	8d 01       	movw	r16, r26
    1716:	9e e1       	ldi	r25, 0x1E	; 30
    1718:	49 2e       	mov	r4, r25
    171a:	51 2c       	mov	r5, r1
    171c:	4c 0e       	add	r4, r28
    171e:	5d 1e       	adc	r5, r29
    1720:	39 a0       	ldd	r3, Y+33	; 0x21
    1722:	25 c0       	rjmp	.+74     	; 0x176e <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    1724:	e1 14       	cp	r14, r1
    1726:	f1 04       	cpc	r15, r1
    1728:	01 05       	cpc	r16, r1
    172a:	11 05       	cpc	r17, r1
    172c:	c9 f0       	breq	.+50     	; 0x1760 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    172e:	c8 01       	movw	r24, r16
    1730:	b7 01       	movw	r22, r14
    1732:	a6 01       	movw	r20, r12
    1734:	95 01       	movw	r18, r10
    1736:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    173a:	fb 01       	movw	r30, r22
    173c:	ef 70       	andi	r30, 0x0F	; 15
    173e:	f0 70       	andi	r31, 0x00	; 0
    1740:	e4 59       	subi	r30, 0x94	; 148
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	64 91       	lpm	r22, Z+
    1746:	f2 01       	movw	r30, r4
    1748:	60 83       	st	Z, r22
    174a:	c8 01       	movw	r24, r16
    174c:	b7 01       	movw	r22, r14
    174e:	a6 01       	movw	r20, r12
    1750:	95 01       	movw	r18, r10
    1752:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    1756:	c9 01       	movw	r24, r18
    1758:	da 01       	movw	r26, r20
    175a:	7c 01       	movw	r14, r24
    175c:	8d 01       	movw	r16, r26
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    1760:	2b a1       	ldd	r18, Y+35	; 0x23
    1762:	f2 01       	movw	r30, r4
    1764:	20 83       	st	Z, r18
    1766:	3a 94       	dec	r3
    1768:	08 94       	sec
    176a:	41 08       	sbc	r4, r1
    176c:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    176e:	33 20       	and	r3, r3
    1770:	c9 f6       	brne	.-78     	; 0x1724 <rprintfNum+0xae>
    1772:	ce 01       	movw	r24, r28
    1774:	4f 96       	adiw	r24, 0x1f	; 31
    1776:	8c 01       	movw	r16, r24
    1778:	e9 a1       	ldd	r30, Y+33	; 0x21
    177a:	0e 1b       	sub	r16, r30
    177c:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    177e:	22 20       	and	r2, r2
    1780:	f1 f0       	breq	.+60     	; 0x17be <rprintfNum+0x148>
	{
		if(n < 0)
    1782:	97 fe       	sbrs	r9, 7
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <rprintfNum+0x11a>
		{
   			*--p = '-';
    1786:	8d e2       	ldi	r24, 0x2D	; 45
    1788:	f8 01       	movw	r30, r16
    178a:	82 93       	st	-Z, r24
    178c:	8f 01       	movw	r16, r30
    178e:	17 c0       	rjmp	.+46     	; 0x17be <rprintfNum+0x148>
    1790:	c8 01       	movw	r24, r16
    1792:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    1794:	61 14       	cp	r6, r1
    1796:	71 04       	cpc	r7, r1
    1798:	81 04       	cpc	r8, r1
    179a:	91 04       	cpc	r9, r1
    179c:	19 f0       	breq	.+6      	; 0x17a4 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    179e:	8c 01       	movw	r16, r24
    17a0:	8b e2       	ldi	r24, 0x2B	; 43
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    17a4:	8c 01       	movw	r16, r24
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    17ae:	f8 01       	movw	r30, r16
    17b0:	81 91       	ld	r24, Z+
    17b2:	8f 01       	movw	r16, r30
    17b4:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    17b8:	fa a1       	ldd	r31, Y+34	; 0x22
    17ba:	f1 50       	subi	r31, 0x01	; 1
    17bc:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    17be:	2a a1       	ldd	r18, Y+34	; 0x22
    17c0:	22 23       	and	r18, r18
    17c2:	a9 f7       	brne	.-22     	; 0x17ae <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    17c4:	a3 96       	adiw	r28, 0x23	; 35
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	8f 90       	pop	r8
    17e8:	7f 90       	pop	r7
    17ea:	6f 90       	pop	r6
    17ec:	5f 90       	pop	r5
    17ee:	4f 90       	pop	r4
    17f0:	3f 90       	pop	r3
    17f2:	2f 90       	pop	r2
    17f4:	08 95       	ret

000017f6 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    17f6:	4f 92       	push	r4
    17f8:	5f 92       	push	r5
    17fa:	6f 92       	push	r6
    17fc:	7f 92       	push	r7
    17fe:	8f 92       	push	r8
    1800:	9f 92       	push	r9
    1802:	af 92       	push	r10
    1804:	bf 92       	push	r11
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	48 2e       	mov	r4, r24
    1818:	5a 01       	movw	r10, r20
    181a:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    181c:	cb 01       	movw	r24, r22
    181e:	ba 01       	movw	r22, r20
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	0e 94 ef 12 	call	0x25de	; 0x25de <__gesf2>
    182c:	18 16       	cp	r1, r24
    182e:	1c f4       	brge	.+6      	; 0x1836 <rprintfFloat+0x40>
    1830:	35 01       	movw	r6, r10
    1832:	46 01       	movw	r8, r12
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <rprintfFloat+0x4c>
    1836:	35 01       	movw	r6, r10
    1838:	46 01       	movw	r8, r12
    183a:	97 fa       	bst	r9, 7
    183c:	90 94       	com	r9
    183e:	97 f8       	bld	r9, 7
    1840:	90 94       	com	r9
    1842:	0f 2e       	mov	r0, r31
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	ef 2e       	mov	r14, r31
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	ff 2e       	mov	r15, r31
    184c:	f0 e8       	ldi	r31, 0x80	; 128
    184e:	0f 2f       	mov	r16, r31
    1850:	ff e3       	ldi	r31, 0x3F	; 63
    1852:	1f 2f       	mov	r17, r31
    1854:	f0 2d       	mov	r31, r0
    1856:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    1858:	c4 01       	movw	r24, r8
    185a:	b3 01       	movw	r22, r6
    185c:	a8 01       	movw	r20, r16
    185e:	97 01       	movw	r18, r14
    1860:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    1870:	87 fd       	sbrc	r24, 7
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    1874:	c8 01       	movw	r24, r16
    1876:	b7 01       	movw	r22, r14
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e2       	ldi	r20, 0x20	; 32
    187e:	51 e4       	ldi	r21, 0x41	; 65
    1880:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
    1884:	7b 01       	movw	r14, r22
    1886:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    1888:	53 94       	inc	r5
    188a:	8f e0       	ldi	r24, 0x0F	; 15
    188c:	58 16       	cp	r5, r24
    188e:	21 f7       	brne	.-56     	; 0x1858 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    1890:	c6 01       	movw	r24, r12
    1892:	b5 01       	movw	r22, r10
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	14 f4       	brge	.+4      	; 0x18a8 <rprintfFloat+0xb2>
		rprintfChar('-');
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    18a8:	8b e2       	ldi	r24, 0x2B	; 43
    18aa:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    18ae:	dd 24       	eor	r13, r13
    18b0:	aa 24       	eor	r10, r10
    18b2:	56 c0       	rjmp	.+172    	; 0x1960 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    18b4:	c4 01       	movw	r24, r8
    18b6:	b3 01       	movw	r22, r6
    18b8:	a8 01       	movw	r20, r16
    18ba:	97 01       	movw	r18, r14
    18bc:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
    18c0:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
    18c4:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    18c6:	d6 2a       	or	r13, r22
    18c8:	cd 2d       	mov	r28, r13
    18ca:	d0 e0       	ldi	r29, 0x00	; 0
    18cc:	cc 24       	eor	r12, r12
    18ce:	dd 24       	eor	r13, r13
    18d0:	c8 01       	movw	r24, r16
    18d2:	b7 01       	movw	r22, r14
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	19 f4       	brne	.+6      	; 0x18ea <rprintfFloat+0xf4>
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	c2 2e       	mov	r12, r18
    18e8:	d1 2c       	mov	r13, r1
    18ea:	cc 29       	or	r28, r12
    18ec:	dd 29       	or	r29, r13
    18ee:	cd 2b       	or	r28, r29
    18f0:	39 f0       	breq	.+14     	; 0x1900 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    18f2:	8b 2d       	mov	r24, r11
    18f4:	80 5d       	subi	r24, 0xD0	; 208
    18f6:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    18fa:	dd 24       	eor	r13, r13
    18fc:	da 94       	dec	r13
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    1906:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    1908:	c8 01       	movw	r24, r16
    190a:	b7 01       	movw	r22, r14
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 a5 11 	call	0x234a	; 0x234a <__cmpsf2>
    1918:	88 23       	and	r24, r24
    191a:	19 f4       	brne	.+6      	; 0x1922 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    191c:	8e e2       	ldi	r24, 0x2E	; 46
    191e:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
		}
		
		x -= (digit*place);
    1922:	6b 2d       	mov	r22, r11
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	88 27       	eor	r24, r24
    1928:	77 fd       	sbrc	r23, 7
    192a:	80 95       	com	r24
    192c:	98 2f       	mov	r25, r24
    192e:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatsisf>
    1932:	a8 01       	movw	r20, r16
    1934:	97 01       	movw	r18, r14
    1936:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__mulsf3>
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	c4 01       	movw	r24, r8
    1940:	b3 01       	movw	r22, r6
    1942:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    1946:	3b 01       	movw	r6, r22
    1948:	4c 01       	movw	r8, r24
		place /= 10.0;
    194a:	c8 01       	movw	r24, r16
    194c:	b7 01       	movw	r22, r14
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 a9 11 	call	0x2352	; 0x2352 <__divsf3>
    195a:	7b 01       	movw	r14, r22
    195c:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    195e:	a3 94       	inc	r10
    1960:	a4 14       	cp	r10, r4
    1962:	08 f4       	brcc	.+2      	; 0x1966 <rprintfFloat+0x170>
    1964:	a7 cf       	rjmp	.-178    	; 0x18b4 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	4f 90       	pop	r4
    1986:	08 95       	ret

00001988 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1988:	7f 92       	push	r7
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	78 88       	ldd	r7, Y+16	; 0x10
    19a8:	c9 88       	ldd	r12, Y+17	; 0x11
    19aa:	da 88       	ldd	r13, Y+18	; 0x12
    19ac:	63 e1       	ldi	r22, 0x13	; 19
    19ae:	e6 2e       	mov	r14, r22
    19b0:	f1 2c       	mov	r15, r1
    19b2:	ec 0e       	add	r14, r28
    19b4:	fd 1e       	adc	r15, r29
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    19b8:	88 23       	and	r24, r24
    19ba:	81 f4       	brne	.+32     	; 0x19dc <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	bf 90       	pop	r11
    19d2:	af 90       	pop	r10
    19d4:	9f 90       	pop	r9
    19d6:	8f 90       	pop	r8
    19d8:	7f 90       	pop	r7
    19da:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    19dc:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    19e0:	96 01       	movw	r18, r12
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    19e6:	77 20       	and	r7, r7
    19e8:	21 f0       	breq	.+8      	; 0x19f2 <rprintf1RamRom+0x6a>
    19ea:	f6 01       	movw	r30, r12
    19ec:	69 01       	movw	r12, r18
    19ee:	84 91       	lpm	r24, Z+
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <rprintf1RamRom+0x70>
    19f2:	f6 01       	movw	r30, r12
    19f4:	80 81       	ld	r24, Z
    19f6:	69 01       	movw	r12, r18
    19f8:	85 32       	cpi	r24, 0x25	; 37
    19fa:	f1 f6       	brne	.-68     	; 0x19b8 <rprintf1RamRom+0x30>
    19fc:	2f 5f       	subi	r18, 0xFF	; 255
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1a00:	77 20       	and	r7, r7
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <rprintf1RamRom+0x84>
    1a04:	f6 01       	movw	r30, r12
    1a06:	69 01       	movw	r12, r18
    1a08:	84 91       	lpm	r24, Z+
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <rprintf1RamRom+0x8a>
    1a0c:	f6 01       	movw	r30, r12
    1a0e:	80 81       	ld	r24, Z
    1a10:	69 01       	movw	r12, r18
    1a12:	84 36       	cpi	r24, 0x64	; 100
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <rprintf1RamRom+0x98>
    1a16:	88 37       	cpi	r24, 0x78	; 120
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <rprintf1RamRom+0xb2>
    1a1a:	83 36       	cpi	r24, 0x63	; 99
    1a1c:	f9 f6       	brne	.-66     	; 0x19dc <rprintf1RamRom+0x54>
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <rprintf1RamRom+0xa4>
    1a20:	00 e1       	ldi	r16, 0x10	; 16
    1a22:	17 e2       	ldi	r17, 0x27	; 39
    1a24:	5a e0       	ldi	r21, 0x0A	; 10
    1a26:	a5 2e       	mov	r10, r21
    1a28:	b1 2c       	mov	r11, r1
    1a2a:	0c c0       	rjmp	.+24     	; 0x1a44 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	80 81       	ld	r24, Z
    1a30:	22 e0       	ldi	r18, 0x02	; 2
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	e2 0e       	add	r14, r18
    1a36:	f3 1e       	adc	r15, r19
    1a38:	d1 cf       	rjmp	.-94     	; 0x19dc <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	10 e1       	ldi	r17, 0x10	; 16
    1a3e:	40 e1       	ldi	r20, 0x10	; 16
    1a40:	a4 2e       	mov	r10, r20
    1a42:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1a44:	32 e0       	ldi	r19, 0x02	; 2
    1a46:	83 2e       	mov	r8, r19
    1a48:	91 2c       	mov	r9, r1
    1a4a:	8e 0c       	add	r8, r14
    1a4c:	9f 1c       	adc	r9, r15
    1a4e:	f7 01       	movw	r30, r14
    1a50:	e0 80       	ld	r14, Z
    1a52:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    1a54:	84 36       	cpi	r24, 0x64	; 100
    1a56:	b1 f4       	brne	.+44     	; 0x1a84 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    1a58:	f7 fe       	sbrs	r15, 7
    1a5a:	11 c0       	rjmp	.+34     	; 0x1a7e <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    1a5c:	f0 94       	com	r15
    1a5e:	e1 94       	neg	r14
    1a60:	f1 08       	sbc	r15, r1
    1a62:	f3 94       	inc	r15
					rprintfChar('-');
    1a64:	8d e2       	ldi	r24, 0x2D	; 45
    1a66:	0e 94 a5 0a 	call	0x154a	; 0x154a <rprintfChar>
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	6a e0       	ldi	r22, 0x0A	; 10
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    1a76:	8b 01       	movw	r16, r22
    1a78:	62 30       	cpi	r22, 0x02	; 2
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	18 f0       	brcs	.+6      	; 0x1a84 <rprintf1RamRom+0xfc>
    1a7e:	e0 16       	cp	r14, r16
    1a80:	f1 06       	cpc	r15, r17
    1a82:	a0 f3       	brcs	.-24     	; 0x1a6c <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1a84:	c7 01       	movw	r24, r14
    1a86:	b8 01       	movw	r22, r16
    1a88:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    1a8c:	86 2f       	mov	r24, r22
    1a8e:	0e 94 08 0b 	call	0x1610	; 0x1610 <rprintfu04>
				u_val %= div_val;
    1a92:	c7 01       	movw	r24, r14
    1a94:	b8 01       	movw	r22, r16
    1a96:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    1a9a:	7c 01       	movw	r14, r24
				div_val /= base;
    1a9c:	c8 01       	movw	r24, r16
    1a9e:	b5 01       	movw	r22, r10
    1aa0:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    1aa4:	8b 01       	movw	r16, r22
			} while (div_val);
    1aa6:	61 15       	cp	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	61 f7       	brne	.-40     	; 0x1a84 <rprintf1RamRom+0xfc>
    1aac:	74 01       	movw	r14, r8
    1aae:	98 cf       	rjmp	.-208    	; 0x19e0 <rprintf1RamRom+0x58>

00001ab0 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	40 f4       	brcc	.+16     	; 0x1ac4 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    1ab4:	e8 2f       	mov	r30, r24
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	e2 50       	subi	r30, 0x02	; 2
    1abe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac0:	71 83       	std	Z+1, r23	; 0x01
    1ac2:	60 83       	st	Z, r22
    1ac4:	08 95       	ret

00001ac6 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    1ac6:	9a 01       	movw	r18, r20
    1ac8:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
    1aca:	88 23       	and	r24, r24
    1acc:	e1 f4       	brne	.+56     	; 0x1b06 <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1ace:	ca 01       	movw	r24, r20
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	60 58       	subi	r22, 0x80	; 128
    1ad4:	7b 47       	sbci	r23, 0x7B	; 123
    1ad6:	81 4e       	sbci	r24, 0xE1	; 225
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	f3 e0       	ldi	r31, 0x03	; 3
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	fa 95       	dec	r31
    1ae6:	d1 f7       	brne	.-12     	; 0x1adc <uartSetBaudRate+0x16>
    1ae8:	e4 e0       	ldi	r30, 0x04	; 4
    1aea:	22 0f       	add	r18, r18
    1aec:	33 1f       	adc	r19, r19
    1aee:	44 1f       	adc	r20, r20
    1af0:	55 1f       	adc	r21, r21
    1af2:	ea 95       	dec	r30
    1af4:	d1 f7       	brne	.-12     	; 0x1aea <uartSetBaudRate+0x24>
    1af6:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodsi4>
    1afa:	21 50       	subi	r18, 0x01	; 1
    1afc:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
    1afe:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    1b02:	30 93 c5 00 	sts	0x00C5, r19
    1b06:	08 95       	ret

00001b08 <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	a3 e0       	ldi	r26, 0x03	; 3
    1b0e:	22 0f       	add	r18, r18
    1b10:	33 1f       	adc	r19, r19
    1b12:	aa 95       	dec	r26
    1b14:	e1 f7       	brne	.-8      	; 0x1b0e <uartGetRxBuffer+0x6>
    1b16:	2e 51       	subi	r18, 0x1E	; 30
    1b18:	3b 4f       	sbci	r19, 0xFB	; 251
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	08 95       	ret

00001b1e <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	b3 e0       	ldi	r27, 0x03	; 3
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	ba 95       	dec	r27
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <uartGetTxBuffer+0x6>
    1b2c:	2a 5f       	subi	r18, 0xFA	; 250
    1b2e:	3a 4f       	sbci	r19, 0xFA	; 250
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    1b30:	c9 01       	movw	r24, r18
    1b32:	08 95       	ret

00001b34 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    1b34:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1b36:	88 23       	and	r24, r24
    1b38:	31 f4       	brne	.+12     	; 0x1b46 <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1b3a:	80 91 c0 00 	lds	r24, 0x00C0
    1b3e:	85 ff       	sbrs	r24, 5
    1b40:	fc cf       	rjmp	.-8      	; 0x1b3a <uartSendByte+0x6>
		outb(UDR0, txData);
    1b42:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	e2 52       	subi	r30, 0x22	; 34
    1b4a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b4c:	10 82       	st	Z, r1
}
    1b4e:	08 95       	ret

00001b50 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    1b50:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1b52:	80 91 c0 00 	lds	r24, 0x00C0
    1b56:	85 ff       	sbrs	r24, 5
    1b58:	fc cf       	rjmp	.-8      	; 0x1b52 <uart0SendByte+0x2>
		outb(UDR0, txData);
    1b5a:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1b5e:	10 92 de 04 	sts	0x04DE, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
    1b62:	08 95       	ret

00001b64 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	e8 2f       	mov	r30, r24
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	8a 95       	dec	r24
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <uartReceiveBufferIsEmpty+0x8>
    1b74:	ea 51       	subi	r30, 0x1A	; 26
    1b76:	fb 4f       	sbci	r31, 0xFB	; 251
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	89 2b       	or	r24, r25
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <uartReceiveBufferIsEmpty+0x1e>
    1b80:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    1b82:	82 2f       	mov	r24, r18
    1b84:	08 95       	ret

00001b86 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
    1b8a:	88 23       	and	r24, r24
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <uartReceiveService+0xc>
		c = inb(UDR0);
    1b8e:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	e9 01       	movw	r28, r18
    1b98:	cc 0f       	add	r28, r28
    1b9a:	dd 1f       	adc	r29, r29
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e2 50       	subi	r30, 0x02	; 2
    1ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	89 2b       	or	r24, r25
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1baa:	01 90       	ld	r0, Z+
    1bac:	f0 81       	ld	r31, Z
    1bae:	e0 2d       	mov	r30, r0
    1bb0:	86 2f       	mov	r24, r22
    1bb2:	09 95       	icall
    1bb4:	14 c0       	rjmp	.+40     	; 0x1bde <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    1bb6:	93 e0       	ldi	r25, 0x03	; 3
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	9a 95       	dec	r25
    1bbe:	e1 f7       	brne	.-8      	; 0x1bb8 <uartReceiveService+0x32>
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	8e 51       	subi	r24, 0x1E	; 30
    1bc4:	9b 4f       	sbci	r25, 0xFB	; 251
    1bc6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <bufferAddToEnd>
    1bca:	88 23       	and	r24, r24
    1bcc:	41 f4       	brne	.+16     	; 0x1bde <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ea 5d       	subi	r30, 0xDA	; 218
    1bd2:	fa 4f       	sbci	r31, 0xFA	; 250
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
		}
	}
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	uartReceiveService(0);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <uartReceiveService>
}
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	0f 90       	pop	r0
    1c2a:	1f 90       	pop	r1
    1c2c:	18 95       	reti

00001c2e <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	88 2e       	mov	r8, r24
    1c48:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    1c4a:	e8 2e       	mov	r14, r24
    1c4c:	ff 24       	eor	r15, r15
    1c4e:	f7 01       	movw	r30, r14
    1c50:	13 e0       	ldi	r17, 0x03	; 3
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	1a 95       	dec	r17
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <uartSendBuffer+0x24>
    1c5a:	e6 5f       	subi	r30, 0xF6	; 246
    1c5c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c5e:	20 81       	ld	r18, Z
    1c60:	31 81       	ldd	r19, Z+1	; 0x01
    1c62:	24 0f       	add	r18, r20
    1c64:	35 1f       	adc	r19, r21
    1c66:	f7 01       	movw	r30, r14
    1c68:	73 e0       	ldi	r23, 0x03	; 3
    1c6a:	ee 0f       	add	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	7a 95       	dec	r23
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <uartSendBuffer+0x3c>
    1c72:	e8 5f       	subi	r30, 0xF8	; 248
    1c74:	fa 4f       	sbci	r31, 0xFA	; 250
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	28 17       	cp	r18, r24
    1c7c:	39 07       	cpc	r19, r25
    1c7e:	b0 f5       	brcc	.+108    	; 0x1cec <uartSendBuffer+0xbe>
    1c80:	41 15       	cp	r20, r1
    1c82:	51 05       	cpc	r21, r1
    1c84:	99 f1       	breq	.+102    	; 0x1cec <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    1c86:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    1c88:	67 01       	movw	r12, r14
    1c8a:	63 e0       	ldi	r22, 0x03	; 3
    1c8c:	cc 0c       	add	r12, r12
    1c8e:	dd 1c       	adc	r13, r13
    1c90:	6a 95       	dec	r22
    1c92:	e1 f7       	brne	.-8      	; 0x1c8c <uartSendBuffer+0x5e>
    1c94:	86 e0       	ldi	r24, 0x06	; 6
    1c96:	95 e0       	ldi	r25, 0x05	; 5
    1c98:	c8 0e       	add	r12, r24
    1c9a:	d9 1e       	adc	r13, r25
    1c9c:	8d 01       	movw	r16, r26
    1c9e:	c0 e0       	ldi	r28, 0x00	; 0
    1ca0:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1ca2:	5a 01       	movw	r10, r20
    1ca4:	08 94       	sec
    1ca6:	a1 08       	sbc	r10, r1
    1ca8:	b1 08       	sbc	r11, r1
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <uartSendBuffer+0x8a>
    1cac:	c6 01       	movw	r24, r12
    1cae:	f8 01       	movw	r30, r16
    1cb0:	60 81       	ld	r22, Z
    1cb2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <bufferAddToEnd>
    1cb6:	21 96       	adiw	r28, 0x01	; 1
    1cb8:	0f 5f       	subi	r16, 0xFF	; 255
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	ca 15       	cp	r28, r10
    1cbe:	db 05       	cpc	r29, r11
    1cc0:	a8 f3       	brcs	.-22     	; 0x1cac <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	ee 5f       	subi	r30, 0xFE	; 254
    1cc6:	fa 4f       	sbci	r31, 0xFA	; 250
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1ccc:	88 20       	and	r8, r8
    1cce:	31 f4       	brne	.+12     	; 0x1cdc <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1cd0:	80 91 c0 00 	lds	r24, 0x00C0
    1cd4:	85 ff       	sbrs	r24, 5
    1cd6:	fc cf       	rjmp	.-8      	; 0x1cd0 <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    1cd8:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1cdc:	8e ed       	ldi	r24, 0xDE	; 222
    1cde:	94 e0       	ldi	r25, 0x04	; 4
    1ce0:	e8 0e       	add	r14, r24
    1ce2:	f9 1e       	adc	r15, r25
    1ce4:	f7 01       	movw	r30, r14
    1ce6:	10 82       	st	Z, r1
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	df 90       	pop	r13
    1cfc:	cf 90       	pop	r12
    1cfe:	bf 90       	pop	r11
    1d00:	af 90       	pop	r10
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	08 95       	ret

00001d08 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	23 e0       	ldi	r18, 0x03	; 3
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	2a 95       	dec	r18
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <uartAddToTxBuffer+0x4>
    1d14:	8a 5f       	subi	r24, 0xFA	; 250
    1d16:	9a 4f       	sbci	r25, 0xFA	; 250
    1d18:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <bufferAddToEnd>
}
    1d1c:	08 95       	ret

00001d1e <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    1d1e:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1d20:	86 e0       	ldi	r24, 0x06	; 6
    1d22:	95 e0       	ldi	r25, 0x05	; 5
    1d24:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    1d28:	08 95       	ret

00001d2a <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    1d30:	a8 2f       	mov	r26, r24
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	ed 01       	movw	r28, r26
    1d36:	ce 5f       	subi	r28, 0xFE	; 254
    1d38:	da 4f       	sbci	r29, 0xFA	; 250
    1d3a:	88 81       	ld	r24, Y
    1d3c:	88 23       	and	r24, r24
    1d3e:	b1 f0       	breq	.+44     	; 0x1d6c <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    1d40:	fd 01       	movw	r30, r26
    1d42:	33 e0       	ldi	r19, 0x03	; 3
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	3a 95       	dec	r19
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <uartTransmitService+0x1a>
    1d4c:	e6 5f       	subi	r30, 0xF6	; 246
    1d4e:	fa 4f       	sbci	r31, 0xFA	; 250
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	89 2b       	or	r24, r25
    1d56:	49 f0       	breq	.+18     	; 0x1d6a <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    1d58:	23 30       	cpi	r18, 0x03	; 3
    1d5a:	61 f4       	brne	.+24     	; 0x1d74 <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	95 e0       	ldi	r25, 0x05	; 5
    1d60:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <bufferGetFromFront>
    1d64:	80 93 c6 00 	sts	0x00C6, r24
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    1d6a:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    1d6c:	a2 52       	subi	r26, 0x22	; 34
    1d6e:	bb 4f       	sbci	r27, 0xFB	; 251
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	8c 93       	st	X, r24
	}
}
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    1d7a:	1f 92       	push	r1
    1d7c:	0f 92       	push	r0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	0f 92       	push	r0
    1d82:	11 24       	eor	r1, r1
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	4f 93       	push	r20
    1d8a:	5f 93       	push	r21
    1d8c:	6f 93       	push	r22
    1d8e:	7f 93       	push	r23
    1d90:	8f 93       	push	r24
    1d92:	9f 93       	push	r25
    1d94:	af 93       	push	r26
    1d96:	bf 93       	push	r27
    1d98:	ef 93       	push	r30
    1d9a:	ff 93       	push	r31
	uartTransmitService(0);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <uartTransmitService>
}
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    1dcc:	c8 2f       	mov	r28, r24
    1dce:	d0 e0       	ldi	r29, 0x00	; 0
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ee 5f       	subi	r30, 0xFE	; 254
    1dd4:	fa 4f       	sbci	r31, 0xFA	; 250
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    1dda:	ce 01       	movw	r24, r28
    1ddc:	43 e0       	ldi	r20, 0x03	; 3
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	4a 95       	dec	r20
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <uartSendTxBuffer+0x1a>
    1de6:	8a 5f       	subi	r24, 0xFA	; 250
    1de8:	9a 4f       	sbci	r25, 0xFA	; 250
    1dea:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <bufferGetFromFront>
    1dee:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1df0:	11 23       	and	r17, r17
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1df4:	80 91 c0 00 	lds	r24, 0x00C0
    1df8:	85 ff       	sbrs	r24, 5
    1dfa:	fc cf       	rjmp	.-8      	; 0x1df4 <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    1dfc:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1e00:	c2 52       	subi	r28, 0x22	; 34
    1e02:	db 4f       	sbci	r29, 0xFB	; 251
    1e04:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	08 95       	ret

00001e0e <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	f9 01       	movw	r30, r18
    1e1a:	73 e0       	ldi	r23, 0x03	; 3
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	7a 95       	dec	r23
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <uartReceiveByte+0xe>
    1e24:	ec 51       	subi	r30, 0x1C	; 28
    1e26:	fb 4f       	sbci	r31, 0xFB	; 251
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	89 2b       	or	r24, r25
    1e2e:	c9 f0       	breq	.+50     	; 0x1e62 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    1e30:	f9 01       	movw	r30, r18
    1e32:	63 e0       	ldi	r22, 0x03	; 3
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	6a 95       	dec	r22
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <uartReceiveByte+0x26>
    1e3c:	ea 51       	subi	r30, 0x1A	; 26
    1e3e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	89 2b       	or	r24, r25
    1e46:	69 f0       	breq	.+26     	; 0x1e62 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    1e48:	53 e0       	ldi	r21, 0x03	; 3
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	5a 95       	dec	r21
    1e50:	e1 f7       	brne	.-8      	; 0x1e4a <uartReceiveByte+0x3c>
    1e52:	c9 01       	movw	r24, r18
    1e54:	8e 51       	subi	r24, 0x1E	; 30
    1e56:	9b 4f       	sbci	r25, 0xFB	; 251
    1e58:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <bufferGetFromFront>
    1e5c:	88 83       	st	Y, r24
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <uartReceiveByte+0x56>
			return TRUE;
    1e62:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	be 01       	movw	r22, r28
    1e78:	6f 5f       	subi	r22, 0xFF	; 255
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <uartReceiveByte>
    1e80:	88 23       	and	r24, r24
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <uart0GetByte+0x20>
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <uart0GetByte+0x26>
		return c;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1e90:	c9 01       	movw	r24, r18
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	e3 e0       	ldi	r30, 0x03	; 3
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	ea 95       	dec	r30
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <uartFlushReceiveBuffer+0x4>
    1ea6:	8e 51       	subi	r24, 0x1E	; 30
    1ea8:	9b 4f       	sbci	r25, 0xFB	; 251
    1eaa:	0e 94 30 10 	call	0x2060	; 0x2060 <bufferFlush>
}
    1eae:	08 95       	ret

00001eb0 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    1eb0:	82 ee       	ldi	r24, 0xE2	; 226
    1eb2:	94 e0       	ldi	r25, 0x04	; 4
    1eb4:	6e e6       	ldi	r22, 0x6E	; 110
    1eb6:	71 e0       	ldi	r23, 0x01	; 1
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	95 e0       	ldi	r25, 0x05	; 5
    1ec4:	6e ee       	ldi	r22, 0xEE	; 238
    1ec6:	71 e0       	ldi	r23, 0x01	; 1
    1ec8:	40 e1       	ldi	r20, 0x10	; 16
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    1ed0:	08 95       	ret

00001ed2 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    1ed2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    1ed6:	10 92 ff 01 	sts	0x01FF, r1
    1eda:	10 92 fe 01 	sts	0x01FE, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1ede:	88 ed       	ldi	r24, 0xD8	; 216
    1ee0:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	55 e2       	ldi	r21, 0x25	; 37
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	80 93 de 04 	sts	0x04DE, r24
	uartBufferedTx[0] = FALSE;
    1ef8:	10 92 02 05 	sts	0x0502, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1efc:	10 92 27 05 	sts	0x0527, r1
    1f00:	10 92 26 05 	sts	0x0526, r1
	// enable interrupts
	sei();
    1f04:	78 94       	sei
}
    1f06:	08 95       	ret

00001f08 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    1f08:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <uart0Init>
}
    1f0c:	08 95       	ret

00001f0e <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    1f0e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1f10:	8f b7       	in	r24, 0x3f	; 63
    1f12:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    1f14:	71 83       	std	Z+1, r23	; 0x01
    1f16:	60 83       	st	Z, r22
	buffer->size = size;
    1f18:	53 83       	std	Z+3, r21	; 0x03
    1f1a:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    1f1c:	17 82       	std	Z+7, r1	; 0x07
    1f1e:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    1f20:	15 82       	std	Z+5, r1	; 0x05
    1f22:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1f24:	8f bf       	out	0x3f, r24	; 63
}
    1f26:	08 95       	ret

00001f28 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    1f28:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    1f2a:	4f b7       	in	r20, 0x3f	; 63
    1f2c:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    1f2e:	14 96       	adiw	r26, 0x04	; 4
    1f30:	8d 91       	ld	r24, X+
    1f32:	9c 91       	ld	r25, X
    1f34:	15 97       	sbiw	r26, 0x05	; 5
    1f36:	89 2b       	or	r24, r25
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <bufferGetFromFront+0x16>
    1f3a:	e0 e0       	ldi	r30, 0x00	; 0
    1f3c:	25 c0       	rjmp	.+74     	; 0x1f88 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	8d 91       	ld	r24, X+
    1f42:	9c 91       	ld	r25, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	ed 91       	ld	r30, X+
    1f48:	fc 91       	ld	r31, X
    1f4a:	11 97       	sbiw	r26, 0x01	; 1
    1f4c:	e8 0f       	add	r30, r24
    1f4e:	f9 1f       	adc	r31, r25
    1f50:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	17 96       	adiw	r26, 0x07	; 7
    1f56:	9c 93       	st	X, r25
    1f58:	8e 93       	st	-X, r24
    1f5a:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    1f5c:	12 96       	adiw	r26, 0x02	; 2
    1f5e:	2d 91       	ld	r18, X+
    1f60:	3c 91       	ld	r19, X
    1f62:	13 97       	sbiw	r26, 0x03	; 3
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	30 f0       	brcs	.+12     	; 0x1f76 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    1f6a:	82 1b       	sub	r24, r18
    1f6c:	93 0b       	sbc	r25, r19
    1f6e:	17 96       	adiw	r26, 0x07	; 7
    1f70:	9c 93       	st	X, r25
    1f72:	8e 93       	st	-X, r24
    1f74:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    1f76:	14 96       	adiw	r26, 0x04	; 4
    1f78:	8d 91       	ld	r24, X+
    1f7a:	9c 91       	ld	r25, X
    1f7c:	15 97       	sbiw	r26, 0x05	; 5
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	15 96       	adiw	r26, 0x05	; 5
    1f82:	9c 93       	st	X, r25
    1f84:	8e 93       	st	-X, r24
    1f86:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    1f88:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    1f8a:	8e 2f       	mov	r24, r30
    1f8c:	08 95       	ret

00001f8e <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    1f8e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1f90:	4f b7       	in	r20, 0x3f	; 63
    1f92:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    1f94:	84 81       	ldd	r24, Z+4	; 0x04
    1f96:	95 81       	ldd	r25, Z+5	; 0x05
    1f98:	68 17       	cp	r22, r24
    1f9a:	79 07       	cpc	r23, r25
    1f9c:	b0 f4       	brcc	.+44     	; 0x1fca <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    1f9e:	86 81       	ldd	r24, Z+6	; 0x06
    1fa0:	97 81       	ldd	r25, Z+7	; 0x07
    1fa2:	86 0f       	add	r24, r22
    1fa4:	97 1f       	adc	r25, r23
    1fa6:	97 83       	std	Z+7, r25	; 0x07
    1fa8:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    1faa:	22 81       	ldd	r18, Z+2	; 0x02
    1fac:	33 81       	ldd	r19, Z+3	; 0x03
    1fae:	82 17       	cp	r24, r18
    1fb0:	93 07       	cpc	r25, r19
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    1fb4:	82 1b       	sub	r24, r18
    1fb6:	93 0b       	sbc	r25, r19
    1fb8:	97 83       	std	Z+7, r25	; 0x07
    1fba:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    1fbc:	84 81       	ldd	r24, Z+4	; 0x04
    1fbe:	95 81       	ldd	r25, Z+5	; 0x05
    1fc0:	86 1b       	sub	r24, r22
    1fc2:	97 0b       	sbc	r25, r23
    1fc4:	95 83       	std	Z+5, r25	; 0x05
    1fc6:	84 83       	std	Z+4, r24	; 0x04
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    1fca:	15 82       	std	Z+5, r1	; 0x05
    1fcc:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    1fce:	4f bf       	out	0x3f, r20	; 63
}
    1fd0:	08 95       	ret

00001fd2 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    1fd6:	2f b7       	in	r18, 0x3f	; 63
    1fd8:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    1fda:	2f bf       	out	0x3f, r18	; 63
    1fdc:	26 81       	ldd	r18, Z+6	; 0x06
    1fde:	37 81       	ldd	r19, Z+7	; 0x07
    1fe0:	62 81       	ldd	r22, Z+2	; 0x02
    1fe2:	73 81       	ldd	r23, Z+3	; 0x03
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    1fec:	01 90       	ld	r0, Z+
    1fee:	f0 81       	ld	r31, Z
    1ff0:	e0 2d       	mov	r30, r0
    1ff2:	e8 0f       	add	r30, r24
    1ff4:	f9 1f       	adc	r31, r25
	return data;
}
    1ff6:	80 81       	ld	r24, Z
    1ff8:	08 95       	ret

00001ffa <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	ec 01       	movw	r28, r24
    2002:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    2004:	4f b7       	in	r20, 0x3f	; 63
    2006:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    2008:	2c 81       	ldd	r18, Y+4	; 0x04
    200a:	3d 81       	ldd	r19, Y+5	; 0x05
    200c:	6a 81       	ldd	r22, Y+2	; 0x02
    200e:	7b 81       	ldd	r23, Y+3	; 0x03
    2010:	26 17       	cp	r18, r22
    2012:	37 07       	cpc	r19, r23
    2014:	98 f4       	brcc	.+38     	; 0x203c <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    2016:	8e 81       	ldd	r24, Y+6	; 0x06
    2018:	9f 81       	ldd	r25, Y+7	; 0x07
    201a:	82 0f       	add	r24, r18
    201c:	93 1f       	adc	r25, r19
    201e:	0e 94 75 13 	call	0x26ea	; 0x26ea <__udivmodhi4>
    2022:	e8 81       	ld	r30, Y
    2024:	f9 81       	ldd	r31, Y+1	; 0x01
    2026:	e8 0f       	add	r30, r24
    2028:	f9 1f       	adc	r31, r25
    202a:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	9d 83       	std	Y+5, r25	; 0x05
    2034:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    2036:	4f bf       	out	0x3f, r20	; 63
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    203c:	4f bf       	out	0x3f, r20	; 63
    203e:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	08 95       	ret

00002048 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    2048:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    204a:	8f b7       	in	r24, 0x3f	; 63
    204c:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    204e:	8f bf       	out	0x3f, r24	; 63
    2050:	22 81       	ldd	r18, Z+2	; 0x02
    2052:	33 81       	ldd	r19, Z+3	; 0x03
    2054:	84 81       	ldd	r24, Z+4	; 0x04
    2056:	95 81       	ldd	r25, Z+5	; 0x05
    2058:	28 1b       	sub	r18, r24
    205a:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    205c:	c9 01       	movw	r24, r18
    205e:	08 95       	ret

00002060 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    2060:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2062:	8f b7       	in	r24, 0x3f	; 63
    2064:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    2066:	15 82       	std	Z+5, r1	; 0x05
    2068:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    206a:	8f bf       	out	0x3f, r24	; 63
}
    206c:	08 95       	ret

0000206e <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    206e:	60 91 06 02 	lds	r22, 0x0206
    2072:	70 91 07 02 	lds	r23, 0x0207
	return wheel_left_tick_counter;
}
    2076:	80 91 08 02 	lds	r24, 0x0208
    207a:	90 91 09 02 	lds	r25, 0x0209
    207e:	08 95       	ret

00002080 <get_right_count>:

u32 get_right_count(void){
    2080:	60 91 0a 02 	lds	r22, 0x020A
    2084:	70 91 0b 02 	lds	r23, 0x020B
	return wheel_right_tick_counter;
}
    2088:	80 91 0c 02 	lds	r24, 0x020C
    208c:	90 91 0d 02 	lds	r25, 0x020D
    2090:	08 95       	ret

00002092 <__vector_5>:

SIGNAL(PCINT2_vect){
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	2f 93       	push	r18
    209e:	8f 93       	push	r24
    20a0:	9f 93       	push	r25
    20a2:	af 93       	push	r26
    20a4:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    20a6:	29 b1       	in	r18, 0x09	; 9
    20a8:	20 78       	andi	r18, 0x80	; 128
    20aa:	20 93 14 02 	sts	0x0214, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    20ae:	80 91 15 02 	lds	r24, 0x0215
    20b2:	82 17       	cp	r24, r18
    20b4:	58 f4       	brcc	.+22     	; 0x20cc <__vector_5+0x3a>
    20b6:	80 91 06 02 	lds	r24, 0x0206
    20ba:	90 91 07 02 	lds	r25, 0x0207
    20be:	a0 91 08 02 	lds	r26, 0x0208
    20c2:	b0 91 09 02 	lds	r27, 0x0209
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    20c6:	18 9b       	sbis	0x03, 0	; 3
    20c8:	0b c0       	rjmp	.+22     	; 0x20e0 <__vector_5+0x4e>
    20ca:	0e c0       	rjmp	.+28     	; 0x20e8 <__vector_5+0x56>
    20cc:	80 91 06 02 	lds	r24, 0x0206
    20d0:	90 91 07 02 	lds	r25, 0x0207
    20d4:	a0 91 08 02 	lds	r26, 0x0208
    20d8:	b0 91 09 02 	lds	r27, 0x0209
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    20dc:	18 9b       	sbis	0x03, 0	; 3
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	a1 1d       	adc	r26, r1
    20e4:	b1 1d       	adc	r27, r1
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	a1 09       	sbc	r26, r1
    20ec:	b1 09       	sbc	r27, r1
    20ee:	80 93 06 02 	sts	0x0206, r24
    20f2:	90 93 07 02 	sts	0x0207, r25
    20f6:	a0 93 08 02 	sts	0x0208, r26
    20fa:	b0 93 09 02 	sts	0x0209, r27
		}
	}
	pin_level_past = pin_level_current;
    20fe:	20 93 15 02 	sts	0x0215, r18
	
}
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_3>:
SIGNAL(PCINT0_vect){
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	8f 93       	push	r24
    2128:	9f 93       	push	r25
    212a:	af 93       	push	r26
    212c:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    212e:	33 b1       	in	r19, 0x03	; 3
    2130:	31 70       	andi	r19, 0x01	; 1
    2132:	30 93 12 02 	sts	0x0212, r19
	PINB4_current = bit_is_set(PINB,4);
    2136:	23 b1       	in	r18, 0x03	; 3
    2138:	20 71       	andi	r18, 0x10	; 16
    213a:	20 93 10 02 	sts	0x0210, r18
	PINB5_current = bit_is_set(PINB,5);
    213e:	43 b1       	in	r20, 0x03	; 3
    2140:	40 72       	andi	r20, 0x20	; 32
    2142:	40 93 0e 02 	sts	0x020E, r20

	if(PINB0_current != PINB0_past){
    2146:	80 91 13 02 	lds	r24, 0x0213
    214a:	38 17       	cp	r19, r24
    214c:	49 f1       	breq	.+82     	; 0x21a0 <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    214e:	83 17       	cp	r24, r19
    2150:	58 f4       	brcc	.+22     	; 0x2168 <__vector_3+0x52>
    2152:	80 91 06 02 	lds	r24, 0x0206
    2156:	90 91 07 02 	lds	r25, 0x0207
    215a:	a0 91 08 02 	lds	r26, 0x0208
    215e:	b0 91 09 02 	lds	r27, 0x0209
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    2162:	4f 9b       	sbis	0x09, 7	; 9
    2164:	0b c0       	rjmp	.+22     	; 0x217c <__vector_3+0x66>
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <__vector_3+0x6e>
    2168:	80 91 06 02 	lds	r24, 0x0206
    216c:	90 91 07 02 	lds	r25, 0x0207
    2170:	a0 91 08 02 	lds	r26, 0x0208
    2174:	b0 91 09 02 	lds	r27, 0x0209
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    2178:	4f 9b       	sbis	0x09, 7	; 9
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	a1 09       	sbc	r26, r1
    2180:	b1 09       	sbc	r27, r1
    2182:	03 c0       	rjmp	.+6      	; 0x218a <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	a1 1d       	adc	r26, r1
    2188:	b1 1d       	adc	r27, r1
    218a:	80 93 06 02 	sts	0x0206, r24
    218e:	90 93 07 02 	sts	0x0207, r25
    2192:	a0 93 08 02 	sts	0x0208, r26
    2196:	b0 93 09 02 	sts	0x0209, r27
			}
		}
		PINB0_past = PINB0_current;
    219a:	30 93 13 02 	sts	0x0213, r19
    219e:	57 c0       	rjmp	.+174    	; 0x224e <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    21a0:	80 91 11 02 	lds	r24, 0x0211
    21a4:	28 17       	cp	r18, r24
    21a6:	49 f1       	breq	.+82     	; 0x21fa <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    21a8:	82 17       	cp	r24, r18
    21aa:	58 f4       	brcc	.+22     	; 0x21c2 <__vector_3+0xac>
    21ac:	80 91 0a 02 	lds	r24, 0x020A
    21b0:	90 91 0b 02 	lds	r25, 0x020B
    21b4:	a0 91 0c 02 	lds	r26, 0x020C
    21b8:	b0 91 0d 02 	lds	r27, 0x020D
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    21bc:	1d 9b       	sbis	0x03, 5	; 3
    21be:	0b c0       	rjmp	.+22     	; 0x21d6 <__vector_3+0xc0>
    21c0:	0e c0       	rjmp	.+28     	; 0x21de <__vector_3+0xc8>
    21c2:	80 91 0a 02 	lds	r24, 0x020A
    21c6:	90 91 0b 02 	lds	r25, 0x020B
    21ca:	a0 91 0c 02 	lds	r26, 0x020C
    21ce:	b0 91 0d 02 	lds	r27, 0x020D
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    21d2:	1d 9b       	sbis	0x03, 5	; 3
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	a1 09       	sbc	r26, r1
    21da:	b1 09       	sbc	r27, r1
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	a1 1d       	adc	r26, r1
    21e2:	b1 1d       	adc	r27, r1
    21e4:	80 93 0a 02 	sts	0x020A, r24
    21e8:	90 93 0b 02 	sts	0x020B, r25
    21ec:	a0 93 0c 02 	sts	0x020C, r26
    21f0:	b0 93 0d 02 	sts	0x020D, r27
			}
		}
		PINB4_past = PINB4_current;
    21f4:	20 93 11 02 	sts	0x0211, r18
    21f8:	2a c0       	rjmp	.+84     	; 0x224e <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    21fa:	80 91 0f 02 	lds	r24, 0x020F
    21fe:	84 17       	cp	r24, r20
    2200:	58 f4       	brcc	.+22     	; 0x2218 <__vector_3+0x102>
    2202:	80 91 0a 02 	lds	r24, 0x020A
    2206:	90 91 0b 02 	lds	r25, 0x020B
    220a:	a0 91 0c 02 	lds	r26, 0x020C
    220e:	b0 91 0d 02 	lds	r27, 0x020D
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    2212:	1c 9b       	sbis	0x03, 4	; 3
    2214:	0b c0       	rjmp	.+22     	; 0x222c <__vector_3+0x116>
    2216:	0e c0       	rjmp	.+28     	; 0x2234 <__vector_3+0x11e>
    2218:	80 91 0a 02 	lds	r24, 0x020A
    221c:	90 91 0b 02 	lds	r25, 0x020B
    2220:	a0 91 0c 02 	lds	r26, 0x020C
    2224:	b0 91 0d 02 	lds	r27, 0x020D
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    2228:	1c 9b       	sbis	0x03, 4	; 3
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	a1 1d       	adc	r26, r1
    2230:	b1 1d       	adc	r27, r1
    2232:	03 c0       	rjmp	.+6      	; 0x223a <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	a1 09       	sbc	r26, r1
    2238:	b1 09       	sbc	r27, r1
    223a:	80 93 0a 02 	sts	0x020A, r24
    223e:	90 93 0b 02 	sts	0x020B, r25
    2242:	a0 93 0c 02 	sts	0x020C, r26
    2246:	b0 93 0d 02 	sts	0x020D, r27
			}
		}
		PINB5_past = PINB5_current;
    224a:	40 93 0f 02 	sts	0x020F, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    224e:	bf 91       	pop	r27
    2250:	af 91       	pop	r26
    2252:	9f 91       	pop	r25
    2254:	8f 91       	pop	r24
    2256:	4f 91       	pop	r20
    2258:	3f 91       	pop	r19
    225a:	2f 91       	pop	r18
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <__vector_default>:


ISR(BADISR_vect){
    2266:	1f 92       	push	r1
    2268:	0f 92       	push	r0
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	0f 92       	push	r0
    226e:	11 24       	eor	r1, r1
	
}
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	0f 90       	pop	r0
    2276:	1f 90       	pop	r1
    2278:	18 95       	reti

0000227a <exit>:
    227a:	f8 94       	cli
    227c:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <_exit>

00002280 <__subsf3>:
    2280:	50 58       	subi	r21, 0x80	; 128

00002282 <__addsf3>:
    2282:	bb 27       	eor	r27, r27
    2284:	aa 27       	eor	r26, r26
    2286:	0e d0       	rcall	.+28     	; 0x22a4 <__addsf3x>
    2288:	70 c1       	rjmp	.+736    	; 0x256a <__fp_round>
    228a:	61 d1       	rcall	.+706    	; 0x254e <__fp_pscA>
    228c:	30 f0       	brcs	.+12     	; 0x229a <__addsf3+0x18>
    228e:	66 d1       	rcall	.+716    	; 0x255c <__fp_pscB>
    2290:	20 f0       	brcs	.+8      	; 0x229a <__addsf3+0x18>
    2292:	31 f4       	brne	.+12     	; 0x22a0 <__addsf3+0x1e>
    2294:	9f 3f       	cpi	r25, 0xFF	; 255
    2296:	11 f4       	brne	.+4      	; 0x229c <__addsf3+0x1a>
    2298:	1e f4       	brtc	.+6      	; 0x22a0 <__addsf3+0x1e>
    229a:	56 c1       	rjmp	.+684    	; 0x2548 <__fp_nan>
    229c:	0e f4       	brtc	.+2      	; 0x22a0 <__addsf3+0x1e>
    229e:	e0 95       	com	r30
    22a0:	e7 fb       	bst	r30, 7
    22a2:	4c c1       	rjmp	.+664    	; 0x253c <__fp_inf>

000022a4 <__addsf3x>:
    22a4:	e9 2f       	mov	r30, r25
    22a6:	72 d1       	rcall	.+740    	; 0x258c <__fp_split3>
    22a8:	80 f3       	brcs	.-32     	; 0x228a <__addsf3+0x8>
    22aa:	ba 17       	cp	r27, r26
    22ac:	62 07       	cpc	r22, r18
    22ae:	73 07       	cpc	r23, r19
    22b0:	84 07       	cpc	r24, r20
    22b2:	95 07       	cpc	r25, r21
    22b4:	18 f0       	brcs	.+6      	; 0x22bc <__addsf3x+0x18>
    22b6:	71 f4       	brne	.+28     	; 0x22d4 <__addsf3x+0x30>
    22b8:	9e f5       	brtc	.+102    	; 0x2320 <__addsf3x+0x7c>
    22ba:	8a c1       	rjmp	.+788    	; 0x25d0 <__fp_zero>
    22bc:	0e f4       	brtc	.+2      	; 0x22c0 <__addsf3x+0x1c>
    22be:	e0 95       	com	r30
    22c0:	0b 2e       	mov	r0, r27
    22c2:	ba 2f       	mov	r27, r26
    22c4:	a0 2d       	mov	r26, r0
    22c6:	0b 01       	movw	r0, r22
    22c8:	b9 01       	movw	r22, r18
    22ca:	90 01       	movw	r18, r0
    22cc:	0c 01       	movw	r0, r24
    22ce:	ca 01       	movw	r24, r20
    22d0:	a0 01       	movw	r20, r0
    22d2:	11 24       	eor	r1, r1
    22d4:	ff 27       	eor	r31, r31
    22d6:	59 1b       	sub	r21, r25
    22d8:	99 f0       	breq	.+38     	; 0x2300 <__addsf3x+0x5c>
    22da:	59 3f       	cpi	r21, 0xF9	; 249
    22dc:	50 f4       	brcc	.+20     	; 0x22f2 <__addsf3x+0x4e>
    22de:	50 3e       	cpi	r21, 0xE0	; 224
    22e0:	68 f1       	brcs	.+90     	; 0x233c <__addsf3x+0x98>
    22e2:	1a 16       	cp	r1, r26
    22e4:	f0 40       	sbci	r31, 0x00	; 0
    22e6:	a2 2f       	mov	r26, r18
    22e8:	23 2f       	mov	r18, r19
    22ea:	34 2f       	mov	r19, r20
    22ec:	44 27       	eor	r20, r20
    22ee:	58 5f       	subi	r21, 0xF8	; 248
    22f0:	f3 cf       	rjmp	.-26     	; 0x22d8 <__addsf3x+0x34>
    22f2:	46 95       	lsr	r20
    22f4:	37 95       	ror	r19
    22f6:	27 95       	ror	r18
    22f8:	a7 95       	ror	r26
    22fa:	f0 40       	sbci	r31, 0x00	; 0
    22fc:	53 95       	inc	r21
    22fe:	c9 f7       	brne	.-14     	; 0x22f2 <__addsf3x+0x4e>
    2300:	7e f4       	brtc	.+30     	; 0x2320 <__addsf3x+0x7c>
    2302:	1f 16       	cp	r1, r31
    2304:	ba 0b       	sbc	r27, r26
    2306:	62 0b       	sbc	r22, r18
    2308:	73 0b       	sbc	r23, r19
    230a:	84 0b       	sbc	r24, r20
    230c:	ba f0       	brmi	.+46     	; 0x233c <__addsf3x+0x98>
    230e:	91 50       	subi	r25, 0x01	; 1
    2310:	a1 f0       	breq	.+40     	; 0x233a <__addsf3x+0x96>
    2312:	ff 0f       	add	r31, r31
    2314:	bb 1f       	adc	r27, r27
    2316:	66 1f       	adc	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	c2 f7       	brpl	.-16     	; 0x230e <__addsf3x+0x6a>
    231e:	0e c0       	rjmp	.+28     	; 0x233c <__addsf3x+0x98>
    2320:	ba 0f       	add	r27, r26
    2322:	62 1f       	adc	r22, r18
    2324:	73 1f       	adc	r23, r19
    2326:	84 1f       	adc	r24, r20
    2328:	48 f4       	brcc	.+18     	; 0x233c <__addsf3x+0x98>
    232a:	87 95       	ror	r24
    232c:	77 95       	ror	r23
    232e:	67 95       	ror	r22
    2330:	b7 95       	ror	r27
    2332:	f7 95       	ror	r31
    2334:	9e 3f       	cpi	r25, 0xFE	; 254
    2336:	08 f0       	brcs	.+2      	; 0x233a <__addsf3x+0x96>
    2338:	b3 cf       	rjmp	.-154    	; 0x22a0 <__addsf3+0x1e>
    233a:	93 95       	inc	r25
    233c:	88 0f       	add	r24, r24
    233e:	08 f0       	brcs	.+2      	; 0x2342 <__addsf3x+0x9e>
    2340:	99 27       	eor	r25, r25
    2342:	ee 0f       	add	r30, r30
    2344:	97 95       	ror	r25
    2346:	87 95       	ror	r24
    2348:	08 95       	ret

0000234a <__cmpsf2>:
    234a:	d4 d0       	rcall	.+424    	; 0x24f4 <__fp_cmp>
    234c:	08 f4       	brcc	.+2      	; 0x2350 <__cmpsf2+0x6>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	08 95       	ret

00002352 <__divsf3>:
    2352:	0c d0       	rcall	.+24     	; 0x236c <__divsf3x>
    2354:	0a c1       	rjmp	.+532    	; 0x256a <__fp_round>
    2356:	02 d1       	rcall	.+516    	; 0x255c <__fp_pscB>
    2358:	40 f0       	brcs	.+16     	; 0x236a <__divsf3+0x18>
    235a:	f9 d0       	rcall	.+498    	; 0x254e <__fp_pscA>
    235c:	30 f0       	brcs	.+12     	; 0x236a <__divsf3+0x18>
    235e:	21 f4       	brne	.+8      	; 0x2368 <__divsf3+0x16>
    2360:	5f 3f       	cpi	r21, 0xFF	; 255
    2362:	19 f0       	breq	.+6      	; 0x236a <__divsf3+0x18>
    2364:	eb c0       	rjmp	.+470    	; 0x253c <__fp_inf>
    2366:	51 11       	cpse	r21, r1
    2368:	34 c1       	rjmp	.+616    	; 0x25d2 <__fp_szero>
    236a:	ee c0       	rjmp	.+476    	; 0x2548 <__fp_nan>

0000236c <__divsf3x>:
    236c:	0f d1       	rcall	.+542    	; 0x258c <__fp_split3>
    236e:	98 f3       	brcs	.-26     	; 0x2356 <__divsf3+0x4>

00002370 <__divsf3_pse>:
    2370:	99 23       	and	r25, r25
    2372:	c9 f3       	breq	.-14     	; 0x2366 <__divsf3+0x14>
    2374:	55 23       	and	r21, r21
    2376:	b1 f3       	breq	.-20     	; 0x2364 <__divsf3+0x12>
    2378:	95 1b       	sub	r25, r21
    237a:	55 0b       	sbc	r21, r21
    237c:	bb 27       	eor	r27, r27
    237e:	aa 27       	eor	r26, r26
    2380:	62 17       	cp	r22, r18
    2382:	73 07       	cpc	r23, r19
    2384:	84 07       	cpc	r24, r20
    2386:	38 f0       	brcs	.+14     	; 0x2396 <__divsf3_pse+0x26>
    2388:	9f 5f       	subi	r25, 0xFF	; 255
    238a:	5f 4f       	sbci	r21, 0xFF	; 255
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	44 1f       	adc	r20, r20
    2392:	aa 1f       	adc	r26, r26
    2394:	a9 f3       	breq	.-22     	; 0x2380 <__divsf3_pse+0x10>
    2396:	33 d0       	rcall	.+102    	; 0x23fe <__divsf3_pse+0x8e>
    2398:	0e 2e       	mov	r0, r30
    239a:	3a f0       	brmi	.+14     	; 0x23aa <__divsf3_pse+0x3a>
    239c:	e0 e8       	ldi	r30, 0x80	; 128
    239e:	30 d0       	rcall	.+96     	; 0x2400 <__divsf3_pse+0x90>
    23a0:	91 50       	subi	r25, 0x01	; 1
    23a2:	50 40       	sbci	r21, 0x00	; 0
    23a4:	e6 95       	lsr	r30
    23a6:	00 1c       	adc	r0, r0
    23a8:	ca f7       	brpl	.-14     	; 0x239c <__divsf3_pse+0x2c>
    23aa:	29 d0       	rcall	.+82     	; 0x23fe <__divsf3_pse+0x8e>
    23ac:	fe 2f       	mov	r31, r30
    23ae:	27 d0       	rcall	.+78     	; 0x23fe <__divsf3_pse+0x8e>
    23b0:	66 0f       	add	r22, r22
    23b2:	77 1f       	adc	r23, r23
    23b4:	88 1f       	adc	r24, r24
    23b6:	bb 1f       	adc	r27, r27
    23b8:	26 17       	cp	r18, r22
    23ba:	37 07       	cpc	r19, r23
    23bc:	48 07       	cpc	r20, r24
    23be:	ab 07       	cpc	r26, r27
    23c0:	b0 e8       	ldi	r27, 0x80	; 128
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__divsf3_pse+0x56>
    23c4:	bb 0b       	sbc	r27, r27
    23c6:	80 2d       	mov	r24, r0
    23c8:	bf 01       	movw	r22, r30
    23ca:	ff 27       	eor	r31, r31
    23cc:	93 58       	subi	r25, 0x83	; 131
    23ce:	5f 4f       	sbci	r21, 0xFF	; 255
    23d0:	2a f0       	brmi	.+10     	; 0x23dc <__divsf3_pse+0x6c>
    23d2:	9e 3f       	cpi	r25, 0xFE	; 254
    23d4:	51 05       	cpc	r21, r1
    23d6:	68 f0       	brcs	.+26     	; 0x23f2 <__divsf3_pse+0x82>
    23d8:	b1 c0       	rjmp	.+354    	; 0x253c <__fp_inf>
    23da:	fb c0       	rjmp	.+502    	; 0x25d2 <__fp_szero>
    23dc:	5f 3f       	cpi	r21, 0xFF	; 255
    23de:	ec f3       	brlt	.-6      	; 0x23da <__divsf3_pse+0x6a>
    23e0:	98 3e       	cpi	r25, 0xE8	; 232
    23e2:	dc f3       	brlt	.-10     	; 0x23da <__divsf3_pse+0x6a>
    23e4:	86 95       	lsr	r24
    23e6:	77 95       	ror	r23
    23e8:	67 95       	ror	r22
    23ea:	b7 95       	ror	r27
    23ec:	f7 95       	ror	r31
    23ee:	9f 5f       	subi	r25, 0xFF	; 255
    23f0:	c9 f7       	brne	.-14     	; 0x23e4 <__divsf3_pse+0x74>
    23f2:	88 0f       	add	r24, r24
    23f4:	91 1d       	adc	r25, r1
    23f6:	96 95       	lsr	r25
    23f8:	87 95       	ror	r24
    23fa:	97 f9       	bld	r25, 7
    23fc:	08 95       	ret
    23fe:	e1 e0       	ldi	r30, 0x01	; 1
    2400:	66 0f       	add	r22, r22
    2402:	77 1f       	adc	r23, r23
    2404:	88 1f       	adc	r24, r24
    2406:	bb 1f       	adc	r27, r27
    2408:	62 17       	cp	r22, r18
    240a:	73 07       	cpc	r23, r19
    240c:	84 07       	cpc	r24, r20
    240e:	ba 07       	cpc	r27, r26
    2410:	20 f0       	brcs	.+8      	; 0x241a <__divsf3_pse+0xaa>
    2412:	62 1b       	sub	r22, r18
    2414:	73 0b       	sbc	r23, r19
    2416:	84 0b       	sbc	r24, r20
    2418:	ba 0b       	sbc	r27, r26
    241a:	ee 1f       	adc	r30, r30
    241c:	88 f7       	brcc	.-30     	; 0x2400 <__divsf3_pse+0x90>
    241e:	e0 95       	com	r30
    2420:	08 95       	ret

00002422 <__fixunssfsi>:
    2422:	bc d0       	rcall	.+376    	; 0x259c <__fp_splitA>
    2424:	88 f0       	brcs	.+34     	; 0x2448 <__fixunssfsi+0x26>
    2426:	9f 57       	subi	r25, 0x7F	; 127
    2428:	90 f0       	brcs	.+36     	; 0x244e <__fixunssfsi+0x2c>
    242a:	b9 2f       	mov	r27, r25
    242c:	99 27       	eor	r25, r25
    242e:	b7 51       	subi	r27, 0x17	; 23
    2430:	a0 f0       	brcs	.+40     	; 0x245a <__fixunssfsi+0x38>
    2432:	d1 f0       	breq	.+52     	; 0x2468 <__fixunssfsi+0x46>
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	88 1f       	adc	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	1a f0       	brmi	.+6      	; 0x2444 <__fixunssfsi+0x22>
    243e:	ba 95       	dec	r27
    2440:	c9 f7       	brne	.-14     	; 0x2434 <__fixunssfsi+0x12>
    2442:	12 c0       	rjmp	.+36     	; 0x2468 <__fixunssfsi+0x46>
    2444:	b1 30       	cpi	r27, 0x01	; 1
    2446:	81 f0       	breq	.+32     	; 0x2468 <__fixunssfsi+0x46>
    2448:	c3 d0       	rcall	.+390    	; 0x25d0 <__fp_zero>
    244a:	b1 e0       	ldi	r27, 0x01	; 1
    244c:	08 95       	ret
    244e:	c0 c0       	rjmp	.+384    	; 0x25d0 <__fp_zero>
    2450:	67 2f       	mov	r22, r23
    2452:	78 2f       	mov	r23, r24
    2454:	88 27       	eor	r24, r24
    2456:	b8 5f       	subi	r27, 0xF8	; 248
    2458:	39 f0       	breq	.+14     	; 0x2468 <__fixunssfsi+0x46>
    245a:	b9 3f       	cpi	r27, 0xF9	; 249
    245c:	cc f3       	brlt	.-14     	; 0x2450 <__fixunssfsi+0x2e>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b3 95       	inc	r27
    2466:	d9 f7       	brne	.-10     	; 0x245e <__fixunssfsi+0x3c>
    2468:	3e f4       	brtc	.+14     	; 0x2478 <__fixunssfsi+0x56>
    246a:	90 95       	com	r25
    246c:	80 95       	com	r24
    246e:	70 95       	com	r23
    2470:	61 95       	neg	r22
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	8f 4f       	sbci	r24, 0xFF	; 255
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	08 95       	ret

0000247a <__floatunsisf>:
    247a:	e8 94       	clt
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <__floatsisf+0x12>

0000247e <__floatsisf>:
    247e:	97 fb       	bst	r25, 7
    2480:	3e f4       	brtc	.+14     	; 0x2490 <__floatsisf+0x12>
    2482:	90 95       	com	r25
    2484:	80 95       	com	r24
    2486:	70 95       	com	r23
    2488:	61 95       	neg	r22
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	8f 4f       	sbci	r24, 0xFF	; 255
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	99 23       	and	r25, r25
    2492:	a9 f0       	breq	.+42     	; 0x24be <__floatsisf+0x40>
    2494:	f9 2f       	mov	r31, r25
    2496:	96 e9       	ldi	r25, 0x96	; 150
    2498:	bb 27       	eor	r27, r27
    249a:	93 95       	inc	r25
    249c:	f6 95       	lsr	r31
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	b7 95       	ror	r27
    24a6:	f1 11       	cpse	r31, r1
    24a8:	f8 cf       	rjmp	.-16     	; 0x249a <__floatsisf+0x1c>
    24aa:	fa f4       	brpl	.+62     	; 0x24ea <__floatsisf+0x6c>
    24ac:	bb 0f       	add	r27, r27
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <__floatsisf+0x36>
    24b0:	60 ff       	sbrs	r22, 0
    24b2:	1b c0       	rjmp	.+54     	; 0x24ea <__floatsisf+0x6c>
    24b4:	6f 5f       	subi	r22, 0xFF	; 255
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <__floatsisf+0x6c>
    24be:	88 23       	and	r24, r24
    24c0:	11 f0       	breq	.+4      	; 0x24c6 <__floatsisf+0x48>
    24c2:	96 e9       	ldi	r25, 0x96	; 150
    24c4:	11 c0       	rjmp	.+34     	; 0x24e8 <__floatsisf+0x6a>
    24c6:	77 23       	and	r23, r23
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <__floatsisf+0x54>
    24ca:	9e e8       	ldi	r25, 0x8E	; 142
    24cc:	87 2f       	mov	r24, r23
    24ce:	76 2f       	mov	r23, r22
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <__floatsisf+0x5e>
    24d2:	66 23       	and	r22, r22
    24d4:	71 f0       	breq	.+28     	; 0x24f2 <__floatsisf+0x74>
    24d6:	96 e8       	ldi	r25, 0x86	; 134
    24d8:	86 2f       	mov	r24, r22
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	2a f0       	brmi	.+10     	; 0x24ea <__floatsisf+0x6c>
    24e0:	9a 95       	dec	r25
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	da f7       	brpl	.-10     	; 0x24e0 <__floatsisf+0x62>
    24ea:	88 0f       	add	r24, r24
    24ec:	96 95       	lsr	r25
    24ee:	87 95       	ror	r24
    24f0:	97 f9       	bld	r25, 7
    24f2:	08 95       	ret

000024f4 <__fp_cmp>:
    24f4:	99 0f       	add	r25, r25
    24f6:	00 08       	sbc	r0, r0
    24f8:	55 0f       	add	r21, r21
    24fa:	aa 0b       	sbc	r26, r26
    24fc:	e0 e8       	ldi	r30, 0x80	; 128
    24fe:	fe ef       	ldi	r31, 0xFE	; 254
    2500:	16 16       	cp	r1, r22
    2502:	17 06       	cpc	r1, r23
    2504:	e8 07       	cpc	r30, r24
    2506:	f9 07       	cpc	r31, r25
    2508:	c0 f0       	brcs	.+48     	; 0x253a <__fp_cmp+0x46>
    250a:	12 16       	cp	r1, r18
    250c:	13 06       	cpc	r1, r19
    250e:	e4 07       	cpc	r30, r20
    2510:	f5 07       	cpc	r31, r21
    2512:	98 f0       	brcs	.+38     	; 0x253a <__fp_cmp+0x46>
    2514:	62 1b       	sub	r22, r18
    2516:	73 0b       	sbc	r23, r19
    2518:	84 0b       	sbc	r24, r20
    251a:	95 0b       	sbc	r25, r21
    251c:	39 f4       	brne	.+14     	; 0x252c <__fp_cmp+0x38>
    251e:	0a 26       	eor	r0, r26
    2520:	61 f0       	breq	.+24     	; 0x253a <__fp_cmp+0x46>
    2522:	23 2b       	or	r18, r19
    2524:	24 2b       	or	r18, r20
    2526:	25 2b       	or	r18, r21
    2528:	21 f4       	brne	.+8      	; 0x2532 <__fp_cmp+0x3e>
    252a:	08 95       	ret
    252c:	0a 26       	eor	r0, r26
    252e:	09 f4       	brne	.+2      	; 0x2532 <__fp_cmp+0x3e>
    2530:	a1 40       	sbci	r26, 0x01	; 1
    2532:	a6 95       	lsr	r26
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	81 1d       	adc	r24, r1
    2538:	81 1d       	adc	r24, r1
    253a:	08 95       	ret

0000253c <__fp_inf>:
    253c:	97 f9       	bld	r25, 7
    253e:	9f 67       	ori	r25, 0x7F	; 127
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	08 95       	ret

00002548 <__fp_nan>:
    2548:	9f ef       	ldi	r25, 0xFF	; 255
    254a:	80 ec       	ldi	r24, 0xC0	; 192
    254c:	08 95       	ret

0000254e <__fp_pscA>:
    254e:	00 24       	eor	r0, r0
    2550:	0a 94       	dec	r0
    2552:	16 16       	cp	r1, r22
    2554:	17 06       	cpc	r1, r23
    2556:	18 06       	cpc	r1, r24
    2558:	09 06       	cpc	r0, r25
    255a:	08 95       	ret

0000255c <__fp_pscB>:
    255c:	00 24       	eor	r0, r0
    255e:	0a 94       	dec	r0
    2560:	12 16       	cp	r1, r18
    2562:	13 06       	cpc	r1, r19
    2564:	14 06       	cpc	r1, r20
    2566:	05 06       	cpc	r0, r21
    2568:	08 95       	ret

0000256a <__fp_round>:
    256a:	09 2e       	mov	r0, r25
    256c:	03 94       	inc	r0
    256e:	00 0c       	add	r0, r0
    2570:	11 f4       	brne	.+4      	; 0x2576 <__fp_round+0xc>
    2572:	88 23       	and	r24, r24
    2574:	52 f0       	brmi	.+20     	; 0x258a <__fp_round+0x20>
    2576:	bb 0f       	add	r27, r27
    2578:	40 f4       	brcc	.+16     	; 0x258a <__fp_round+0x20>
    257a:	bf 2b       	or	r27, r31
    257c:	11 f4       	brne	.+4      	; 0x2582 <__fp_round+0x18>
    257e:	60 ff       	sbrs	r22, 0
    2580:	04 c0       	rjmp	.+8      	; 0x258a <__fp_round+0x20>
    2582:	6f 5f       	subi	r22, 0xFF	; 255
    2584:	7f 4f       	sbci	r23, 0xFF	; 255
    2586:	8f 4f       	sbci	r24, 0xFF	; 255
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	08 95       	ret

0000258c <__fp_split3>:
    258c:	57 fd       	sbrc	r21, 7
    258e:	90 58       	subi	r25, 0x80	; 128
    2590:	44 0f       	add	r20, r20
    2592:	55 1f       	adc	r21, r21
    2594:	59 f0       	breq	.+22     	; 0x25ac <__fp_splitA+0x10>
    2596:	5f 3f       	cpi	r21, 0xFF	; 255
    2598:	71 f0       	breq	.+28     	; 0x25b6 <__fp_splitA+0x1a>
    259a:	47 95       	ror	r20

0000259c <__fp_splitA>:
    259c:	88 0f       	add	r24, r24
    259e:	97 fb       	bst	r25, 7
    25a0:	99 1f       	adc	r25, r25
    25a2:	61 f0       	breq	.+24     	; 0x25bc <__fp_splitA+0x20>
    25a4:	9f 3f       	cpi	r25, 0xFF	; 255
    25a6:	79 f0       	breq	.+30     	; 0x25c6 <__fp_splitA+0x2a>
    25a8:	87 95       	ror	r24
    25aa:	08 95       	ret
    25ac:	12 16       	cp	r1, r18
    25ae:	13 06       	cpc	r1, r19
    25b0:	14 06       	cpc	r1, r20
    25b2:	55 1f       	adc	r21, r21
    25b4:	f2 cf       	rjmp	.-28     	; 0x259a <__fp_split3+0xe>
    25b6:	46 95       	lsr	r20
    25b8:	f1 df       	rcall	.-30     	; 0x259c <__fp_splitA>
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <__fp_splitA+0x30>
    25bc:	16 16       	cp	r1, r22
    25be:	17 06       	cpc	r1, r23
    25c0:	18 06       	cpc	r1, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	f1 cf       	rjmp	.-30     	; 0x25a8 <__fp_splitA+0xc>
    25c6:	86 95       	lsr	r24
    25c8:	71 05       	cpc	r23, r1
    25ca:	61 05       	cpc	r22, r1
    25cc:	08 94       	sec
    25ce:	08 95       	ret

000025d0 <__fp_zero>:
    25d0:	e8 94       	clt

000025d2 <__fp_szero>:
    25d2:	bb 27       	eor	r27, r27
    25d4:	66 27       	eor	r22, r22
    25d6:	77 27       	eor	r23, r23
    25d8:	cb 01       	movw	r24, r22
    25da:	97 f9       	bld	r25, 7
    25dc:	08 95       	ret

000025de <__gesf2>:
    25de:	8a df       	rcall	.-236    	; 0x24f4 <__fp_cmp>
    25e0:	08 f4       	brcc	.+2      	; 0x25e4 <__gesf2+0x6>
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	08 95       	ret

000025e6 <__mulsf3>:
    25e6:	0b d0       	rcall	.+22     	; 0x25fe <__mulsf3x>
    25e8:	c0 cf       	rjmp	.-128    	; 0x256a <__fp_round>
    25ea:	b1 df       	rcall	.-158    	; 0x254e <__fp_pscA>
    25ec:	28 f0       	brcs	.+10     	; 0x25f8 <__mulsf3+0x12>
    25ee:	b6 df       	rcall	.-148    	; 0x255c <__fp_pscB>
    25f0:	18 f0       	brcs	.+6      	; 0x25f8 <__mulsf3+0x12>
    25f2:	95 23       	and	r25, r21
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <__mulsf3+0x12>
    25f6:	a2 cf       	rjmp	.-188    	; 0x253c <__fp_inf>
    25f8:	a7 cf       	rjmp	.-178    	; 0x2548 <__fp_nan>
    25fa:	11 24       	eor	r1, r1
    25fc:	ea cf       	rjmp	.-44     	; 0x25d2 <__fp_szero>

000025fe <__mulsf3x>:
    25fe:	c6 df       	rcall	.-116    	; 0x258c <__fp_split3>
    2600:	a0 f3       	brcs	.-24     	; 0x25ea <__mulsf3+0x4>

00002602 <__mulsf3_pse>:
    2602:	95 9f       	mul	r25, r21
    2604:	d1 f3       	breq	.-12     	; 0x25fa <__mulsf3+0x14>
    2606:	95 0f       	add	r25, r21
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	55 1f       	adc	r21, r21
    260c:	62 9f       	mul	r22, r18
    260e:	f0 01       	movw	r30, r0
    2610:	72 9f       	mul	r23, r18
    2612:	bb 27       	eor	r27, r27
    2614:	f0 0d       	add	r31, r0
    2616:	b1 1d       	adc	r27, r1
    2618:	63 9f       	mul	r22, r19
    261a:	aa 27       	eor	r26, r26
    261c:	f0 0d       	add	r31, r0
    261e:	b1 1d       	adc	r27, r1
    2620:	aa 1f       	adc	r26, r26
    2622:	64 9f       	mul	r22, r20
    2624:	66 27       	eor	r22, r22
    2626:	b0 0d       	add	r27, r0
    2628:	a1 1d       	adc	r26, r1
    262a:	66 1f       	adc	r22, r22
    262c:	82 9f       	mul	r24, r18
    262e:	22 27       	eor	r18, r18
    2630:	b0 0d       	add	r27, r0
    2632:	a1 1d       	adc	r26, r1
    2634:	62 1f       	adc	r22, r18
    2636:	73 9f       	mul	r23, r19
    2638:	b0 0d       	add	r27, r0
    263a:	a1 1d       	adc	r26, r1
    263c:	62 1f       	adc	r22, r18
    263e:	83 9f       	mul	r24, r19
    2640:	a0 0d       	add	r26, r0
    2642:	61 1d       	adc	r22, r1
    2644:	22 1f       	adc	r18, r18
    2646:	74 9f       	mul	r23, r20
    2648:	33 27       	eor	r19, r19
    264a:	a0 0d       	add	r26, r0
    264c:	61 1d       	adc	r22, r1
    264e:	23 1f       	adc	r18, r19
    2650:	84 9f       	mul	r24, r20
    2652:	60 0d       	add	r22, r0
    2654:	21 1d       	adc	r18, r1
    2656:	82 2f       	mov	r24, r18
    2658:	76 2f       	mov	r23, r22
    265a:	6a 2f       	mov	r22, r26
    265c:	11 24       	eor	r1, r1
    265e:	9f 57       	subi	r25, 0x7F	; 127
    2660:	50 40       	sbci	r21, 0x00	; 0
    2662:	8a f0       	brmi	.+34     	; 0x2686 <__mulsf3_pse+0x84>
    2664:	e1 f0       	breq	.+56     	; 0x269e <__mulsf3_pse+0x9c>
    2666:	88 23       	and	r24, r24
    2668:	4a f0       	brmi	.+18     	; 0x267c <__mulsf3_pse+0x7a>
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	bb 1f       	adc	r27, r27
    2670:	66 1f       	adc	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	88 1f       	adc	r24, r24
    2676:	91 50       	subi	r25, 0x01	; 1
    2678:	50 40       	sbci	r21, 0x00	; 0
    267a:	a9 f7       	brne	.-22     	; 0x2666 <__mulsf3_pse+0x64>
    267c:	9e 3f       	cpi	r25, 0xFE	; 254
    267e:	51 05       	cpc	r21, r1
    2680:	70 f0       	brcs	.+28     	; 0x269e <__mulsf3_pse+0x9c>
    2682:	5c cf       	rjmp	.-328    	; 0x253c <__fp_inf>
    2684:	a6 cf       	rjmp	.-180    	; 0x25d2 <__fp_szero>
    2686:	5f 3f       	cpi	r21, 0xFF	; 255
    2688:	ec f3       	brlt	.-6      	; 0x2684 <__mulsf3_pse+0x82>
    268a:	98 3e       	cpi	r25, 0xE8	; 232
    268c:	dc f3       	brlt	.-10     	; 0x2684 <__mulsf3_pse+0x82>
    268e:	86 95       	lsr	r24
    2690:	77 95       	ror	r23
    2692:	67 95       	ror	r22
    2694:	b7 95       	ror	r27
    2696:	f7 95       	ror	r31
    2698:	e7 95       	ror	r30
    269a:	9f 5f       	subi	r25, 0xFF	; 255
    269c:	c1 f7       	brne	.-16     	; 0x268e <__mulsf3_pse+0x8c>
    269e:	fe 2b       	or	r31, r30
    26a0:	88 0f       	add	r24, r24
    26a2:	91 1d       	adc	r25, r1
    26a4:	96 95       	lsr	r25
    26a6:	87 95       	ror	r24
    26a8:	97 f9       	bld	r25, 7
    26aa:	08 95       	ret

000026ac <__mulsi3>:
    26ac:	62 9f       	mul	r22, r18
    26ae:	d0 01       	movw	r26, r0
    26b0:	73 9f       	mul	r23, r19
    26b2:	f0 01       	movw	r30, r0
    26b4:	82 9f       	mul	r24, r18
    26b6:	e0 0d       	add	r30, r0
    26b8:	f1 1d       	adc	r31, r1
    26ba:	64 9f       	mul	r22, r20
    26bc:	e0 0d       	add	r30, r0
    26be:	f1 1d       	adc	r31, r1
    26c0:	92 9f       	mul	r25, r18
    26c2:	f0 0d       	add	r31, r0
    26c4:	83 9f       	mul	r24, r19
    26c6:	f0 0d       	add	r31, r0
    26c8:	74 9f       	mul	r23, r20
    26ca:	f0 0d       	add	r31, r0
    26cc:	65 9f       	mul	r22, r21
    26ce:	f0 0d       	add	r31, r0
    26d0:	99 27       	eor	r25, r25
    26d2:	72 9f       	mul	r23, r18
    26d4:	b0 0d       	add	r27, r0
    26d6:	e1 1d       	adc	r30, r1
    26d8:	f9 1f       	adc	r31, r25
    26da:	63 9f       	mul	r22, r19
    26dc:	b0 0d       	add	r27, r0
    26de:	e1 1d       	adc	r30, r1
    26e0:	f9 1f       	adc	r31, r25
    26e2:	bd 01       	movw	r22, r26
    26e4:	cf 01       	movw	r24, r30
    26e6:	11 24       	eor	r1, r1
    26e8:	08 95       	ret

000026ea <__udivmodhi4>:
    26ea:	aa 1b       	sub	r26, r26
    26ec:	bb 1b       	sub	r27, r27
    26ee:	51 e1       	ldi	r21, 0x11	; 17
    26f0:	07 c0       	rjmp	.+14     	; 0x2700 <__udivmodhi4_ep>

000026f2 <__udivmodhi4_loop>:
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	a6 17       	cp	r26, r22
    26f8:	b7 07       	cpc	r27, r23
    26fa:	10 f0       	brcs	.+4      	; 0x2700 <__udivmodhi4_ep>
    26fc:	a6 1b       	sub	r26, r22
    26fe:	b7 0b       	sbc	r27, r23

00002700 <__udivmodhi4_ep>:
    2700:	88 1f       	adc	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	5a 95       	dec	r21
    2706:	a9 f7       	brne	.-22     	; 0x26f2 <__udivmodhi4_loop>
    2708:	80 95       	com	r24
    270a:	90 95       	com	r25
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	08 95       	ret

00002712 <__udivmodsi4>:
    2712:	a1 e2       	ldi	r26, 0x21	; 33
    2714:	1a 2e       	mov	r1, r26
    2716:	aa 1b       	sub	r26, r26
    2718:	bb 1b       	sub	r27, r27
    271a:	fd 01       	movw	r30, r26
    271c:	0d c0       	rjmp	.+26     	; 0x2738 <__udivmodsi4_ep>

0000271e <__udivmodsi4_loop>:
    271e:	aa 1f       	adc	r26, r26
    2720:	bb 1f       	adc	r27, r27
    2722:	ee 1f       	adc	r30, r30
    2724:	ff 1f       	adc	r31, r31
    2726:	a2 17       	cp	r26, r18
    2728:	b3 07       	cpc	r27, r19
    272a:	e4 07       	cpc	r30, r20
    272c:	f5 07       	cpc	r31, r21
    272e:	20 f0       	brcs	.+8      	; 0x2738 <__udivmodsi4_ep>
    2730:	a2 1b       	sub	r26, r18
    2732:	b3 0b       	sbc	r27, r19
    2734:	e4 0b       	sbc	r30, r20
    2736:	f5 0b       	sbc	r31, r21

00002738 <__udivmodsi4_ep>:
    2738:	66 1f       	adc	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	88 1f       	adc	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	1a 94       	dec	r1
    2742:	69 f7       	brne	.-38     	; 0x271e <__udivmodsi4_loop>
    2744:	60 95       	com	r22
    2746:	70 95       	com	r23
    2748:	80 95       	com	r24
    274a:	90 95       	com	r25
    274c:	9b 01       	movw	r18, r22
    274e:	ac 01       	movw	r20, r24
    2750:	bd 01       	movw	r22, r26
    2752:	cf 01       	movw	r24, r30
    2754:	08 95       	ret

00002756 <_exit>:
    2756:	f8 94       	cli

00002758 <__stop_program>:
    2758:	ff cf       	rjmp	.-2      	; 0x2758 <__stop_program>

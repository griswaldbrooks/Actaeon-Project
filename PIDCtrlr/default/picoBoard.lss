
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bd0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  00001c44  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000006f0  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000187a  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000080f  00000000  00000000  00003c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000013c1  00000000  00000000  0000449d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000500  00000000  00000000  00005860  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000009dc  00000000  00000000  00005d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ea7  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_3>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_5>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_16>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <HexChars>:
      68:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e0 ed       	ldi	r30, 0xD0	; 208
      8e:	fb e1       	ldi	r31, 0x1B	; 27
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	a0 30       	cpi	r26, 0x00	; 0
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 30       	cpi	r26, 0x02	; 2
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
      b0:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_default>

000000b8 <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	7b 01       	movw	r14, r22
      c2:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 7cm/sec > v_dead > -9cm/sec
	if((cmd_vel_l < 9) && (cmd_vel_l > -9))  cmd_vel_l =  0;
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	40 e1       	ldi	r20, 0x10	; 16
      ca:	51 e4       	ldi	r21, 0x41	; 65
      cc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
      d0:	88 23       	and	r24, r24
      d2:	ac f4       	brge	.+42     	; 0xfe <wheel_l+0x46>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	20 e0       	ldi	r18, 0x00	; 0
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	40 e1       	ldi	r20, 0x10	; 16
      de:	51 ec       	ldi	r21, 0xC1	; 193
      e0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
      e4:	18 16       	cp	r1, r24
      e6:	5c f4       	brge	.+22     	; 0xfe <wheel_l+0x46>
      e8:	0f 2e       	mov	r0, r31
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	ef 2e       	mov	r14, r31
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	ff 2e       	mov	r15, r31
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	0f 2f       	mov	r16, r31
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	1f 2f       	mov	r17, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	29 c0       	rjmp	.+82     	; 0x150 <wheel_l+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
      fe:	c8 01       	movw	r24, r16
     100:	b7 01       	movw	r22, r14
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	52 e4       	ldi	r21, 0x42	; 66
     10a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     10e:	18 16       	cp	r1, r24
     110:	5c f4       	brge	.+22     	; 0x128 <wheel_l+0x70>
     112:	0f 2e       	mov	r0, r31
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	ef 2e       	mov	r14, r31
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	ff 2e       	mov	r15, r31
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	0f 2f       	mov	r16, r31
     120:	f2 e4       	ldi	r31, 0x42	; 66
     122:	1f 2f       	mov	r17, r31
     124:	f0 2d       	mov	r31, r0
     126:	14 c0       	rjmp	.+40     	; 0x150 <wheel_l+0x98>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
     128:	c8 01       	movw	r24, r16
     12a:	b7 01       	movw	r22, r14
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	52 ec       	ldi	r21, 0xC2	; 194
     134:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     138:	88 23       	and	r24, r24
     13a:	54 f4       	brge	.+20     	; 0x150 <wheel_l+0x98>
     13c:	0f 2e       	mov	r0, r31
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	ef 2e       	mov	r14, r31
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	ff 2e       	mov	r15, r31
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	0f 2f       	mov	r16, r31
     14a:	f2 ec       	ldi	r31, 0xC2	; 194
     14c:	1f 2f       	mov	r17, r31
     14e:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     150:	c8 01       	movw	r24, r16
     152:	b7 01       	movw	r22, r14
     154:	22 e4       	ldi	r18, 0x42	; 66
     156:	3e e3       	ldi	r19, 0x3E	; 62
     158:	48 e7       	ldi	r20, 0x78	; 120
     15a:	5f eb       	ldi	r21, 0xBF	; 191
     15c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     160:	2c e8       	ldi	r18, 0x8C	; 140
     162:	32 ed       	ldi	r19, 0xD2	; 210
     164:	48 eb       	ldi	r20, 0xB8	; 184
     166:	53 e4       	ldi	r21, 0x43	; 67
     168:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     16c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fixunssfsi>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	0e 94 4d 04 	call	0x89a	; 0x89a <PWM_timer1_Set_Pin9>
}
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	08 95       	ret

00000182 <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	7b 01       	movw	r14, r22
     18c:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 8cm/sec > v_dead > -5cm/sec
	if((cmd_vel_r < 8) && (cmd_vel_r > -8))  cmd_vel_r = 0;
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	51 e4       	ldi	r21, 0x41	; 65
     196:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     19a:	88 23       	and	r24, r24
     19c:	ac f4       	brge	.+42     	; 0x1c8 <wheel_r+0x46>
     19e:	c8 01       	movw	r24, r16
     1a0:	b7 01       	movw	r22, r14
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	51 ec       	ldi	r21, 0xC1	; 193
     1aa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     1ae:	18 16       	cp	r1, r24
     1b0:	5c f4       	brge	.+22     	; 0x1c8 <wheel_r+0x46>
     1b2:	0f 2e       	mov	r0, r31
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ef 2e       	mov	r14, r31
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	ff 2e       	mov	r15, r31
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	0f 2f       	mov	r16, r31
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	1f 2f       	mov	r17, r31
     1c4:	f0 2d       	mov	r31, r0
     1c6:	29 c0       	rjmp	.+82     	; 0x21a <wheel_r+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     1c8:	c8 01       	movw	r24, r16
     1ca:	b7 01       	movw	r22, r14
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	52 e4       	ldi	r21, 0x42	; 66
     1d4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     1d8:	18 16       	cp	r1, r24
     1da:	5c f4       	brge	.+22     	; 0x1f2 <wheel_r+0x70>
     1dc:	0f 2e       	mov	r0, r31
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ef 2e       	mov	r14, r31
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	ff 2e       	mov	r15, r31
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	0f 2f       	mov	r16, r31
     1ea:	f2 e4       	ldi	r31, 0x42	; 66
     1ec:	1f 2f       	mov	r17, r31
     1ee:	f0 2d       	mov	r31, r0
     1f0:	14 c0       	rjmp	.+40     	; 0x21a <wheel_r+0x98>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     1f2:	c8 01       	movw	r24, r16
     1f4:	b7 01       	movw	r22, r14
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	52 ec       	ldi	r21, 0xC2	; 194
     1fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     202:	88 23       	and	r24, r24
     204:	54 f4       	brge	.+20     	; 0x21a <wheel_r+0x98>
     206:	0f 2e       	mov	r0, r31
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	ef 2e       	mov	r14, r31
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ff 2e       	mov	r15, r31
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	0f 2f       	mov	r16, r31
     214:	f2 ec       	ldi	r31, 0xC2	; 194
     216:	1f 2f       	mov	r17, r31
     218:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     21a:	c8 01       	movw	r24, r16
     21c:	b7 01       	movw	r22, r14
     21e:	24 ef       	ldi	r18, 0xF4	; 244
     220:	3c e6       	ldi	r19, 0x6C	; 108
     222:	4e e8       	ldi	r20, 0x8E	; 142
     224:	5f e3       	ldi	r21, 0x3F	; 63
     226:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     22a:	27 e0       	ldi	r18, 0x07	; 7
     22c:	3f e1       	ldi	r19, 0x1F	; 31
     22e:	4b eb       	ldi	r20, 0xBB	; 187
     230:	53 e4       	ldi	r21, 0x43	; 67
     232:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     236:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fixunssfsi>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
     23e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <PWM_timer1_Set_Pin10>
}
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	08 95       	ret

0000024c <pwm_setup>:
#define wheel_r_on()	PWM_timer1_On_Pin10();

void pwm_setup(void){

	// 20 ms period
	timer1PWMInitICR(5000);
     24c:	88 e8       	ldi	r24, 0x88	; 136
     24e:	93 e1       	ldi	r25, 0x13	; 19
     250:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     254:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     256:	22 9a       	sbi	0x04, 2	; 4
}
     258:	08 95       	ret

0000025a <setup_hardware>:

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     25a:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     25c:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     25e:	0e 94 bf 09 	call	0x137e	; 0x137e <uartInit>
	uartSetBaudRate(0,115200);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	52 ec       	ldi	r21, 0xC2	; 194
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     270:	83 ee       	ldi	r24, 0xE3	; 227
     272:	97 e0       	ldi	r25, 0x07	; 7
     274:	0e 94 db 04 	call	0x9b6	; 0x9b6 <rprintfInit>

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     278:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     27a:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     27c:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     27e:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     280:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     282:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     284:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     286:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <init_timer0>
	init_timer1(TIMER_CLK_64);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <init_timer1>
	pwm_setup();
     294:	0e 94 26 01 	call	0x24c	; 0x24c <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     298:	e8 e6       	ldi	r30, 0x68	; 104
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 60       	ori	r24, 0x04	; 4
     2a0:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     2a2:	ad e6       	ldi	r26, 0x6D	; 109
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	8c 91       	ld	r24, X
     2a8:	80 68       	ori	r24, 0x80	; 128
     2aa:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     2ac:	80 81       	ld	r24, Z
     2ae:	81 60       	ori	r24, 0x01	; 1
     2b0:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     2b2:	eb e6       	ldi	r30, 0x6B	; 107
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	81 60       	ori	r24, 0x01	; 1
     2ba:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     2bc:	80 81       	ld	r24, Z
     2be:	80 61       	ori	r24, 0x10	; 16
     2c0:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     2c2:	80 81       	ld	r24, Z
     2c4:	80 62       	ori	r24, 0x20	; 32
     2c6:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     2c8:	78 94       	sei

}
     2ca:	08 95       	ret

000002cc <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     2cc:	2f 92       	push	r2
     2ce:	3f 92       	push	r3
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	ec 97       	sbiw	r28, 0x3c	; 60
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
	lpf2_l = lpf1_l;
	lpf3_l = (wb*T_l - 2)/(wb*T_l + 2);
	///////////////////////////////////////////////////////////////////////////////////////
	
	
	setup_hardware();
     300:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_hardware>
	
	
/**/
	wheel_l_on();
     304:	0e 94 37 04 	call	0x86e	; 0x86e <PWM_timer1_On_Pin9>
	wheel_r_on();
     308:	0e 94 40 04 	call	0x880	; 0x880 <PWM_timer1_On_Pin10>
	wheel_l(0);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 5c 00 	call	0xb8	; 0xb8 <wheel_l>
	wheel_r(0);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 c1 00 	call	0x182	; 0x182 <wheel_r>
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	10 e0       	ldi	r17, 0x00	; 0
	
	for(u16 ndx = 0; ndx < 600; ndx++){
		delay_us(200);
     328:	88 ec       	ldi	r24, 0xC8	; 200
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 99 04 	call	0x932	; 0x932 <delay_us>
	wheel_l_on();
	wheel_r_on();
	wheel_l(0);
	wheel_r(0);
	
	for(u16 ndx = 0; ndx < 600; ndx++){
     330:	0f 5f       	subi	r16, 0xFF	; 255
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	22 e0       	ldi	r18, 0x02	; 2
     336:	08 35       	cpi	r16, 0x58	; 88
     338:	12 07       	cpc	r17, r18
     33a:	b1 f7       	brne	.-20     	; 0x328 <main+0x5c>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	a0 e0       	ldi	r26, 0x00	; 0
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	8d a7       	std	Y+45, r24	; 0x2d
     346:	9e a7       	std	Y+46, r25	; 0x2e
     348:	af a7       	std	Y+47, r26	; 0x2f
     34a:	b8 ab       	std	Y+48, r27	; 0x30
     34c:	19 a6       	std	Y+41, r1	; 0x29
     34e:	1a a6       	std	Y+42, r1	; 0x2a
     350:	1b a6       	std	Y+43, r1	; 0x2b
     352:	1c a6       	std	Y+44, r1	; 0x2c
     354:	1d a2       	std	Y+37, r1	; 0x25
     356:	1e a2       	std	Y+38, r1	; 0x26
     358:	1f a2       	std	Y+39, r1	; 0x27
     35a:	18 a6       	std	Y+40, r1	; 0x28
     35c:	89 a3       	std	Y+33, r24	; 0x21
     35e:	9a a3       	std	Y+34, r25	; 0x22
     360:	ab a3       	std	Y+35, r26	; 0x23
     362:	bc a3       	std	Y+36, r27	; 0x24
     364:	8d 8f       	std	Y+29, r24	; 0x1d
     366:	9e 8f       	std	Y+30, r25	; 0x1e
     368:	af 8f       	std	Y+31, r26	; 0x1f
     36a:	b8 a3       	std	Y+32, r27	; 0x20
     36c:	89 8f       	std	Y+25, r24	; 0x19
     36e:	9a 8f       	std	Y+26, r25	; 0x1a
     370:	ab 8f       	std	Y+27, r26	; 0x1b
     372:	bc 8f       	std	Y+28, r27	; 0x1c
     374:	89 8b       	std	Y+17, r24	; 0x11
     376:	9a 8b       	std	Y+18, r25	; 0x12
     378:	ab 8b       	std	Y+19, r26	; 0x13
     37a:	bc 8b       	std	Y+20, r27	; 0x14
     37c:	8d 83       	std	Y+5, r24	; 0x05
     37e:	9e 83       	std	Y+6, r25	; 0x06
     380:	af 83       	std	Y+7, r26	; 0x07
     382:	b8 87       	std	Y+8, r27	; 0x08
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	ab 83       	std	Y+3, r26	; 0x03
     38a:	bc 83       	std	Y+4, r27	; 0x04
		delay_us(200);
	}

	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     38c:	0e 94 8e 04 	call	0x91c	; 0x91c <get_timer0_overflow>
     390:	16 b5       	in	r17, 0x26	; 38
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsi3>
     39e:	61 0f       	add	r22, r17
     3a0:	71 1d       	adc	r23, r1
     3a2:	81 1d       	adc	r24, r1
     3a4:	91 1d       	adc	r25, r1
     3a6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__floatunsisf>
     3aa:	2e e0       	ldi	r18, 0x0E	; 14
     3ac:	3d e2       	ldi	r19, 0x2D	; 45
     3ae:	42 e3       	ldi	r20, 0x32	; 50
     3b0:	5d e3       	ldi	r21, 0x3D	; 61
     3b2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e4       	ldi	r19, 0x40	; 64
     3ba:	4c e1       	ldi	r20, 0x1C	; 28
     3bc:	56 e4       	ldi	r21, 0x46	; 70
     3be:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     3c2:	69 ab       	std	Y+49, r22	; 0x31
     3c4:	7a ab       	std	Y+50, r23	; 0x32
     3c6:	8b ab       	std	Y+51, r24	; 0x33
     3c8:	9c ab       	std	Y+52, r25	; 0x34
		
		l_count_current = get_left_count();
     3ca:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <get_left_count>
     3ce:	7b 01       	movw	r14, r22
     3d0:	8c 01       	movw	r16, r24
		r_count_current = get_right_count();
     3d2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_right_count>
     3d6:	69 af       	std	Y+57, r22	; 0x39
     3d8:	7a af       	std	Y+58, r23	; 0x3a
     3da:	8b af       	std	Y+59, r24	; 0x3b
     3dc:	9c af       	std	Y+60, r25	; 0x3c

		
		

		if(l_count_current != l_count_previous){
     3de:	29 a5       	ldd	r18, Y+41	; 0x29
     3e0:	3a a5       	ldd	r19, Y+42	; 0x2a
     3e2:	4b a5       	ldd	r20, Y+43	; 0x2b
     3e4:	5c a5       	ldd	r21, Y+44	; 0x2c
     3e6:	e2 16       	cp	r14, r18
     3e8:	f3 06       	cpc	r15, r19
     3ea:	04 07       	cpc	r16, r20
     3ec:	15 07       	cpc	r17, r21
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <main+0x126>
     3f0:	8f c0       	rjmp	.+286    	; 0x510 <__stack+0x11>
			l_count_current = get_left_count();
     3f2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <get_left_count>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     3fa:	69 a9       	ldd	r22, Y+49	; 0x31
     3fc:	7a a9       	ldd	r23, Y+50	; 0x32
     3fe:	8b a9       	ldd	r24, Y+51	; 0x33
     400:	9c a9       	ldd	r25, Y+52	; 0x34
     402:	2d a5       	ldd	r18, Y+45	; 0x2d
     404:	3e a5       	ldd	r19, Y+46	; 0x2e
     406:	4f a5       	ldd	r20, Y+47	; 0x2f
     408:	58 a9       	ldd	r21, Y+48	; 0x30
     40a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     40e:	5b 01       	movw	r10, r22
     410:	6c 01       	movw	r12, r24
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     412:	c8 01       	movw	r24, r16
     414:	b7 01       	movw	r22, r14
     416:	29 a5       	ldd	r18, Y+41	; 0x29
     418:	3a a5       	ldd	r19, Y+42	; 0x2a
     41a:	4b a5       	ldd	r20, Y+43	; 0x2b
     41c:	5c a5       	ldd	r21, Y+44	; 0x2c
     41e:	62 1b       	sub	r22, r18
     420:	73 0b       	sbc	r23, r19
     422:	84 0b       	sbc	r24, r20
     424:	95 0b       	sbc	r25, r21
     426:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     42a:	a6 01       	movw	r20, r12
     42c:	95 01       	movw	r18, r10
     42e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	5c e3       	ldi	r21, 0x3C	; 60
     43a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     43e:	6d ab       	std	Y+53, r22	; 0x35
     440:	7e ab       	std	Y+54, r23	; 0x36
     442:	8f ab       	std	Y+55, r24	; 0x37
     444:	98 af       	std	Y+56, r25	; 0x38
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     446:	c6 01       	movw	r24, r12
     448:	b5 01       	movw	r22, r10
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e2       	ldi	r20, 0x20	; 32
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     456:	5b 01       	movw	r10, r22
     458:	6c 01       	movw	r12, r24
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e4       	ldi	r21, 0x40	; 64
     462:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     466:	1b 01       	movw	r2, r22
     468:	2c 01       	movw	r4, r24
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	a2 01       	movw	r20, r4
     470:	91 01       	movw	r18, r2
     472:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     476:	3b 01       	movw	r6, r22
     478:	4c 01       	movw	r8, r24
     47a:	6d a9       	ldd	r22, Y+53	; 0x35
     47c:	7e a9       	ldd	r23, Y+54	; 0x36
     47e:	8f a9       	ldd	r24, Y+55	; 0x37
     480:	98 ad       	ldd	r25, Y+56	; 0x38
     482:	29 a1       	ldd	r18, Y+33	; 0x21
     484:	3a a1       	ldd	r19, Y+34	; 0x22
     486:	4b a1       	ldd	r20, Y+35	; 0x23
     488:	5c a1       	ldd	r21, Y+36	; 0x24
     48a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	c4 01       	movw	r24, r8
     494:	b3 01       	movw	r22, r6
     496:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     49a:	3b 01       	movw	r6, r22
     49c:	4c 01       	movw	r8, r24
     49e:	c6 01       	movw	r24, r12
     4a0:	b5 01       	movw	r22, r10
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e4       	ldi	r21, 0x40	; 64
     4aa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     4ae:	a2 01       	movw	r20, r4
     4b0:	91 01       	movw	r18, r2
     4b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     4b6:	29 8d       	ldd	r18, Y+25	; 0x19
     4b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     4ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
     4bc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     4be:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	c4 01       	movw	r24, r8
     4c8:	b3 01       	movw	r22, r6
     4ca:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     4ce:	6d 8f       	std	Y+29, r22	; 0x1d
     4d0:	7e 8f       	std	Y+30, r23	; 0x1e
     4d2:	8f 8f       	std	Y+31, r24	; 0x1f
     4d4:	98 a3       	std	Y+32, r25	; 0x20
     4d6:	89 a9       	ldd	r24, Y+49	; 0x31
     4d8:	9a a9       	ldd	r25, Y+50	; 0x32
     4da:	ab a9       	ldd	r26, Y+51	; 0x33
     4dc:	bc a9       	ldd	r27, Y+52	; 0x34
     4de:	8d a7       	std	Y+45, r24	; 0x2d
     4e0:	9e a7       	std	Y+46, r25	; 0x2e
     4e2:	af a7       	std	Y+47, r26	; 0x2f
     4e4:	b8 ab       	std	Y+48, r27	; 0x30
     4e6:	e9 a6       	std	Y+41, r14	; 0x29
     4e8:	fa a6       	std	Y+42, r15	; 0x2a
     4ea:	0b a7       	std	Y+43, r16	; 0x2b
     4ec:	1c a7       	std	Y+44, r17	; 0x2c
     4ee:	2d a9       	ldd	r18, Y+53	; 0x35
     4f0:	3e a9       	ldd	r19, Y+54	; 0x36
     4f2:	4f a9       	ldd	r20, Y+55	; 0x37
     4f4:	58 ad       	ldd	r21, Y+56	; 0x38
     4f6:	29 a3       	std	Y+33, r18	; 0x21
     4f8:	3a a3       	std	Y+34, r19	; 0x22
     4fa:	4b a3       	std	Y+35, r20	; 0x23
     4fc:	5c a3       	std	Y+36, r21	; 0x24
     4fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     500:	9e 8d       	ldd	r25, Y+30	; 0x1e
     502:	af 8d       	ldd	r26, Y+31	; 0x1f
     504:	b8 a1       	ldd	r27, Y+32	; 0x20
     506:	89 8f       	std	Y+25, r24	; 0x19
     508:	9a 8f       	std	Y+26, r25	; 0x1a
     50a:	ab 8f       	std	Y+27, r26	; 0x1b
     50c:	bc 8f       	std	Y+28, r27	; 0x1c
     50e:	1a c0       	rjmp	.+52     	; 0x544 <__stack+0x45>
			
			l_count_previous = l_count_current;
			
			elapsed_time_l_previous = elapsed_time_l;
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     510:	69 a9       	ldd	r22, Y+49	; 0x31
     512:	7a a9       	ldd	r23, Y+50	; 0x32
     514:	8b a9       	ldd	r24, Y+51	; 0x33
     516:	9c a9       	ldd	r25, Y+52	; 0x34
     518:	2d a5       	ldd	r18, Y+45	; 0x2d
     51a:	3e a5       	ldd	r19, Y+46	; 0x2e
     51c:	4f a5       	ldd	r20, Y+47	; 0x2f
     51e:	58 a9       	ldd	r21, Y+48	; 0x30
     520:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     524:	2a e9       	ldi	r18, 0x9A	; 154
     526:	39 e9       	ldi	r19, 0x99	; 153
     528:	49 e1       	ldi	r20, 0x19	; 25
     52a:	5e e3       	ldi	r21, 0x3E	; 62
     52c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	44 f4       	brge	.+16     	; 0x544 <__stack+0x45>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	2d 8f       	std	Y+29, r18	; 0x1d
     53e:	3e 8f       	std	Y+30, r19	; 0x1e
     540:	4f 8f       	std	Y+31, r20	; 0x1f
     542:	58 a3       	std	Y+32, r21	; 0x20
			rps_lf = 0;
		}
		
		if(r_count_current != r_count_previous){
     544:	89 ad       	ldd	r24, Y+57	; 0x39
     546:	9a ad       	ldd	r25, Y+58	; 0x3a
     548:	ab ad       	ldd	r26, Y+59	; 0x3b
     54a:	bc ad       	ldd	r27, Y+60	; 0x3c
     54c:	2d a1       	ldd	r18, Y+37	; 0x25
     54e:	3e a1       	ldd	r19, Y+38	; 0x26
     550:	4f a1       	ldd	r20, Y+39	; 0x27
     552:	58 a5       	ldd	r21, Y+40	; 0x28
     554:	82 17       	cp	r24, r18
     556:	93 07       	cpc	r25, r19
     558:	a4 07       	cpc	r26, r20
     55a:	b5 07       	cpc	r27, r21
     55c:	49 f0       	breq	.+18     	; 0x570 <__stack+0x71>
			r_count_current = get_right_count();
     55e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <get_right_count>
     562:	ac 01       	movw	r20, r24
     564:	cb 01       	movw	r24, r22
     566:	da 01       	movw	r26, r20
     568:	8d a3       	std	Y+37, r24	; 0x25
     56a:	9e a3       	std	Y+38, r25	; 0x26
     56c:	af a3       	std	Y+39, r26	; 0x27
     56e:	b8 a7       	std	Y+40, r27	; 0x28
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
			rps_rf = 0;
		}
		
		v_l = M_2PIR*rps_lf;		
     570:	6d 8d       	ldd	r22, Y+29	; 0x1d
     572:	7e 8d       	ldd	r23, Y+30	; 0x1e
     574:	8f 8d       	ldd	r24, Y+31	; 0x1f
     576:	98 a1       	ldd	r25, Y+32	; 0x20
     578:	23 ec       	ldi	r18, 0xC3	; 195
     57a:	33 e5       	ldi	r19, 0x53	; 83
     57c:	4b ef       	ldi	r20, 0xFB	; 251
     57e:	51 e4       	ldi	r21, 0x41	; 65
     580:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     584:	6d 8b       	std	Y+21, r22	; 0x15
     586:	7e 8b       	std	Y+22, r23	; 0x16
     588:	8f 8b       	std	Y+23, r24	; 0x17
     58a:	98 8f       	std	Y+24, r25	; 0x18
		
		// PID calculation	/////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////

		error_l = v_l_cmd - v_l;									// Current Left Wheel error
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e9       	ldi	r24, 0x90	; 144
     592:	91 e4       	ldi	r25, 0x41	; 65
     594:	2d 89       	ldd	r18, Y+21	; 0x15
     596:	3e 89       	ldd	r19, Y+22	; 0x16
     598:	4f 89       	ldd	r20, Y+23	; 0x17
     59a:	58 8d       	ldd	r21, Y+24	; 0x18
     59c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     5a0:	3b 01       	movw	r6, r22
     5a2:	4c 01       	movw	r8, r24
	
		// Calculate the proportion
		up_l = Kp_l*error_l;										// Left Wheel Proportion
		
		// Calculate the integral
		ui_l = Ki_l*(error_l + error_l_n1) + ui_l_n1;				// Update Left Wheel integral
     5a4:	29 89       	ldd	r18, Y+17	; 0x11
     5a6:	3a 89       	ldd	r19, Y+18	; 0x12
     5a8:	4b 89       	ldd	r20, Y+19	; 0x13
     5aa:	5c 89       	ldd	r21, Y+20	; 0x14
     5ac:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     5b0:	2d ec       	ldi	r18, 0xCD	; 205
     5b2:	3c ec       	ldi	r19, 0xCC	; 204
     5b4:	4c ec       	ldi	r20, 0xCC	; 204
     5b6:	5c e3       	ldi	r21, 0x3C	; 60
     5b8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     5bc:	29 85       	ldd	r18, Y+9	; 0x09
     5be:	3a 85       	ldd	r19, Y+10	; 0x0a
     5c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     5c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     5c4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     5c8:	5b 01       	movw	r10, r22
     5ca:	6c 01       	movw	r12, r24

		// Calculate the derivative		
		ud_l = Kd_l*(error_l - error_l_n1) - ud_l_n1;				// Update Left Wheel derivative
     5cc:	c4 01       	movw	r24, r8
     5ce:	b3 01       	movw	r22, r6
     5d0:	29 89       	ldd	r18, Y+17	; 0x11
     5d2:	3a 89       	ldd	r19, Y+18	; 0x12
     5d4:	4b 89       	ldd	r20, Y+19	; 0x13
     5d6:	5c 89       	ldd	r21, Y+20	; 0x14
     5d8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     5dc:	29 e6       	ldi	r18, 0x69	; 105
     5de:	38 ec       	ldi	r19, 0xC8	; 200
     5e0:	4c ec       	ldi	r20, 0xCC	; 204
     5e2:	5b e3       	ldi	r21, 0x3B	; 59
     5e4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     5e8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ea:	3e 81       	ldd	r19, Y+6	; 0x06
     5ec:	4f 81       	ldd	r20, Y+7	; 0x07
     5ee:	58 85       	ldd	r21, Y+8	; 0x08
     5f0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     5f4:	6d 87       	std	Y+13, r22	; 0x0d
     5f6:	7e 87       	std	Y+14, r23	; 0x0e
     5f8:	8f 87       	std	Y+15, r24	; 0x0f
     5fa:	98 8b       	std	Y+16, r25	; 0x10
		
		// Filter the derivative output
		udf_l = lpf1_l*ud_l + lpf2_l*ud_l_n1 - lpf3_l*udf_l_n1;		// Update filtered Left Wheel derivative
     5fc:	2e e5       	ldi	r18, 0x5E	; 94
     5fe:	34 ed       	ldi	r19, 0xD4	; 212
     600:	4f e7       	ldi	r20, 0x7F	; 127
     602:	5f e3       	ldi	r21, 0x3F	; 63
     604:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     608:	7b 01       	movw	r14, r22
     60a:	8c 01       	movw	r16, r24
     60c:	6d 81       	ldd	r22, Y+5	; 0x05
     60e:	7e 81       	ldd	r23, Y+6	; 0x06
     610:	8f 81       	ldd	r24, Y+7	; 0x07
     612:	98 85       	ldd	r25, Y+8	; 0x08
     614:	2e e5       	ldi	r18, 0x5E	; 94
     616:	34 ed       	ldi	r19, 0xD4	; 212
     618:	4f e7       	ldi	r20, 0x7F	; 127
     61a:	5f e3       	ldi	r21, 0x3F	; 63
     61c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c8 01       	movw	r24, r16
     626:	b7 01       	movw	r22, r14
     628:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     62c:	7b 01       	movw	r14, r22
     62e:	8c 01       	movw	r16, r24
     630:	69 81       	ldd	r22, Y+1	; 0x01
     632:	7a 81       	ldd	r23, Y+2	; 0x02
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	2c eb       	ldi	r18, 0xBC	; 188
     63a:	38 ea       	ldi	r19, 0xA8	; 168
     63c:	4f e7       	ldi	r20, 0x7F	; 127
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	c8 01       	movw	r24, r16
     64a:	b7 01       	movw	r22, r14
     64c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     650:	1b 01       	movw	r2, r22
     652:	2c 01       	movw	r4, r24
		
		u_l = up_l + ui_l + udf_l;									// u_l(t) to be output to the Left Wheel 
     654:	c4 01       	movw	r24, r8
     656:	b3 01       	movw	r22, r6
     658:	2d ec       	ldi	r18, 0xCD	; 205
     65a:	3c ec       	ldi	r19, 0xCC	; 204
     65c:	4c ec       	ldi	r20, 0xCC	; 204
     65e:	5c e3       	ldi	r21, 0x3C	; 60
     660:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     664:	a6 01       	movw	r20, r12
     666:	95 01       	movw	r18, r10
     668:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     66c:	a2 01       	movw	r20, r4
     66e:	91 01       	movw	r18, r2
     670:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     674:	7b 01       	movw	r14, r22
     676:	8c 01       	movw	r16, r24
		
		// Anti-windup
		if(u_l > 30){
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 ef       	ldi	r20, 0xF0	; 240
     67e:	51 e4       	ldi	r21, 0x41	; 65
     680:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     684:	18 16       	cp	r1, r24
     686:	7c f4       	brge	.+30     	; 0x6a6 <__stack+0x1a7>
     688:	a9 84       	ldd	r10, Y+9	; 0x09
     68a:	ba 84       	ldd	r11, Y+10	; 0x0a
     68c:	cb 84       	ldd	r12, Y+11	; 0x0b
     68e:	dc 84       	ldd	r13, Y+12	; 0x0c
     690:	0f 2e       	mov	r0, r31
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	ef 2e       	mov	r14, r31
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ff 2e       	mov	r15, r31
     69a:	f0 ef       	ldi	r31, 0xF0	; 240
     69c:	0f 2f       	mov	r16, r31
     69e:	f1 e4       	ldi	r31, 0x41	; 65
     6a0:	1f 2f       	mov	r17, r31
     6a2:	f0 2d       	mov	r31, r0
     6a4:	18 c0       	rjmp	.+48     	; 0x6d6 <__stack+0x1d7>
			ui_l = ui_l_n1;
			u_l = 30;	
		}
		else if(u_l < -30){
     6a6:	c8 01       	movw	r24, r16
     6a8:	b7 01       	movw	r22, r14
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 ef       	ldi	r20, 0xF0	; 240
     6b0:	51 ec       	ldi	r21, 0xC1	; 193
     6b2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	74 f4       	brge	.+28     	; 0x6d6 <__stack+0x1d7>
     6ba:	a9 84       	ldd	r10, Y+9	; 0x09
     6bc:	ba 84       	ldd	r11, Y+10	; 0x0a
     6be:	cb 84       	ldd	r12, Y+11	; 0x0b
     6c0:	dc 84       	ldd	r13, Y+12	; 0x0c
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ef 2e       	mov	r14, r31
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ff 2e       	mov	r15, r31
     6cc:	f0 ef       	ldi	r31, 0xF0	; 240
     6ce:	0f 2f       	mov	r16, r31
     6d0:	f1 ec       	ldi	r31, 0xC1	; 193
     6d2:	1f 2f       	mov	r17, r31
     6d4:	f0 2d       	mov	r31, r0
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		
		
		wheel_l(u_l);
     6d6:	c8 01       	movw	r24, r16
     6d8:	b7 01       	movw	r22, r14
     6da:	0e 94 5c 00 	call	0xb8	; 0xb8 <wheel_l>
		wheel_r(0);
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 c1 00 	call	0x182	; 0x182 <wheel_r>

		//rprintf("Left: ");
		rprintfFloat(5,v_l);
     6ea:	85 e0       	ldi	r24, 0x05	; 5
     6ec:	4d 89       	ldd	r20, Y+21	; 0x15
     6ee:	5e 89       	ldd	r21, Y+22	; 0x16
     6f0:	6f 89       	ldd	r22, Y+23	; 0x17
     6f2:	78 8d       	ldd	r23, Y+24	; 0x18
     6f4:	0e 94 36 06 	call	0xc6c	; 0xc6c <rprintfFloat>
		//rprintf("Right: ");
		//rprintf("\t,");
		//rprintfFloat(5,v_r);
		//rprintf("\t,");
		//rprintfFloat(5,elapsed_time_l);
		rprintfCRLF();
     6f8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <rprintfCRLF>
     6fc:	29 82       	std	Y+1, r2	; 0x01
     6fe:	3a 82       	std	Y+2, r3	; 0x02
     700:	4b 82       	std	Y+3, r4	; 0x03
     702:	5c 82       	std	Y+4, r5	; 0x04
     704:	8d 85       	ldd	r24, Y+13	; 0x0d
     706:	9e 85       	ldd	r25, Y+14	; 0x0e
     708:	af 85       	ldd	r26, Y+15	; 0x0f
     70a:	b8 89       	ldd	r27, Y+16	; 0x10
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	9e 83       	std	Y+6, r25	; 0x06
     710:	af 83       	std	Y+7, r26	; 0x07
     712:	b8 87       	std	Y+8, r27	; 0x08
     714:	a9 86       	std	Y+9, r10	; 0x09
     716:	ba 86       	std	Y+10, r11	; 0x0a
     718:	cb 86       	std	Y+11, r12	; 0x0b
     71a:	dc 86       	std	Y+12, r13	; 0x0c
     71c:	69 8a       	std	Y+17, r6	; 0x11
     71e:	7a 8a       	std	Y+18, r7	; 0x12
     720:	8b 8a       	std	Y+19, r8	; 0x13
     722:	9c 8a       	std	Y+20, r9	; 0x14
     724:	33 ce       	rjmp	.-922    	; 0x38c <main+0xc0>

00000726 <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
     726:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
     728:	80 91 81 00 	lds	r24, 0x0081
     72c:	88 60       	ori	r24, 0x08	; 8
     72e:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     732:	80 91 81 00 	lds	r24, 0x0081
     736:	8f 7e       	andi	r24, 0xEF	; 239
     738:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     73c:	99 30       	cpi	r25, 0x09	; 9
     73e:	49 f4       	brne	.+18     	; 0x752 <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     740:	80 91 80 00 	lds	r24, 0x0080
     744:	82 60       	ori	r24, 0x02	; 2
     746:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     74a:	80 91 80 00 	lds	r24, 0x0080
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	0e c0       	rjmp	.+28     	; 0x76e <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
     752:	9a 30       	cpi	r25, 0x0A	; 10
     754:	21 f4       	brne	.+8      	; 0x75e <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     756:	80 91 80 00 	lds	r24, 0x0080
     75a:	82 60       	ori	r24, 0x02	; 2
     75c:	03 c0       	rjmp	.+6      	; 0x764 <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     75e:	80 91 80 00 	lds	r24, 0x0080
     762:	8d 7f       	andi	r24, 0xFD	; 253
     764:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     768:	80 91 80 00 	lds	r24, 0x0080
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
     772:	10 92 89 00 	sts	0x0089, r1
     776:	10 92 88 00 	sts	0x0088, r1
}
     77a:	08 95       	ret

0000077c <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
     77c:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
     77e:	80 91 81 00 	lds	r24, 0x0081
     782:	87 7f       	andi	r24, 0xF7	; 247
     784:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     788:	80 91 81 00 	lds	r24, 0x0081
     78c:	8f 7e       	andi	r24, 0xEF	; 239
     78e:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     792:	99 30       	cpi	r25, 0x09	; 9
     794:	49 f4       	brne	.+18     	; 0x7a8 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     796:	80 91 80 00 	lds	r24, 0x0080
     79a:	82 60       	ori	r24, 0x02	; 2
     79c:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     7a0:	80 91 80 00 	lds	r24, 0x0080
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
     7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
     7a8:	9a 30       	cpi	r25, 0x0A	; 10
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     7ac:	80 91 80 00 	lds	r24, 0x0080
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     7b4:	80 91 80 00 	lds	r24, 0x0080
     7b8:	8d 7f       	andi	r24, 0xFD	; 253
     7ba:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     7be:	80 91 80 00 	lds	r24, 0x0080
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     7c8:	10 92 8b 00 	sts	0x008B, r1
     7cc:	10 92 8a 00 	sts	0x008A, r1
}
     7d0:	08 95       	ret

000007d2 <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     7d2:	e0 e8       	ldi	r30, 0x80	; 128
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	20 81       	ld	r18, Z
     7d8:	2e 7f       	andi	r18, 0xFE	; 254
     7da:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     7dc:	20 81       	ld	r18, Z
     7de:	22 60       	ori	r18, 0x02	; 2
     7e0:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     7e2:	e1 e8       	ldi	r30, 0x81	; 129
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	20 81       	ld	r18, Z
     7e8:	28 60       	ori	r18, 0x08	; 8
     7ea:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     7ec:	20 81       	ld	r18, Z
     7ee:	20 61       	ori	r18, 0x10	; 16
     7f0:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     7f2:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     7f4:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
     7f6:	90 93 87 00 	sts	0x0087, r25
     7fa:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
     7fe:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
     800:	10 92 89 00 	sts	0x0089, r1
     804:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     808:	10 92 8b 00 	sts	0x008B, r1
     80c:	10 92 8a 00 	sts	0x008A, r1
}
     810:	08 95       	ret

00000812 <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
     812:	84 b5       	in	r24, 0x24	; 36
     814:	8f 7d       	andi	r24, 0xDF	; 223
     816:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     818:	84 b5       	in	r24, 0x24	; 36
     81a:	8f 7e       	andi	r24, 0xEF	; 239
     81c:	84 bd       	out	0x24, r24	; 36
}
     81e:	08 95       	ret

00000820 <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
     820:	84 b5       	in	r24, 0x24	; 36
     822:	8f 77       	andi	r24, 0x7F	; 127
     824:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     826:	84 b5       	in	r24, 0x24	; 36
     828:	8f 7b       	andi	r24, 0xBF	; 191
     82a:	84 bd       	out	0x24, r24	; 36
}
     82c:	08 95       	ret

0000082e <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
     82e:	e0 e8       	ldi	r30, 0x80	; 128
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8f 7d       	andi	r24, 0xDF	; 223
     836:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     838:	80 81       	ld	r24, Z
     83a:	8f 7e       	andi	r24, 0xEF	; 239
     83c:	80 83       	st	Z, r24
}
     83e:	08 95       	ret

00000840 <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
     840:	e0 e8       	ldi	r30, 0x80	; 128
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8f 77       	andi	r24, 0x7F	; 127
     848:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     84a:	80 81       	ld	r24, Z
     84c:	8f 7b       	andi	r24, 0xBF	; 191
     84e:	80 83       	st	Z, r24
}
     850:	08 95       	ret

00000852 <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
     852:	84 b5       	in	r24, 0x24	; 36
     854:	80 62       	ori	r24, 0x20	; 32
     856:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     858:	84 b5       	in	r24, 0x24	; 36
     85a:	8f 7e       	andi	r24, 0xEF	; 239
     85c:	84 bd       	out	0x24, r24	; 36
}
     85e:	08 95       	ret

00000860 <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
     860:	84 b5       	in	r24, 0x24	; 36
     862:	80 68       	ori	r24, 0x80	; 128
     864:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     866:	84 b5       	in	r24, 0x24	; 36
     868:	8f 7b       	andi	r24, 0xBF	; 191
     86a:	84 bd       	out	0x24, r24	; 36
}
     86c:	08 95       	ret

0000086e <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
     86e:	e0 e8       	ldi	r30, 0x80	; 128
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	80 62       	ori	r24, 0x20	; 32
     876:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     878:	80 81       	ld	r24, Z
     87a:	8f 7e       	andi	r24, 0xEF	; 239
     87c:	80 83       	st	Z, r24
}
     87e:	08 95       	ret

00000880 <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
     880:	e0 e8       	ldi	r30, 0x80	; 128
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 68       	ori	r24, 0x80	; 128
     888:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     88a:	80 81       	ld	r24, Z
     88c:	8f 7b       	andi	r24, 0xBF	; 191
     88e:	80 83       	st	Z, r24
}
     890:	08 95       	ret

00000892 <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
     892:	88 bd       	out	0x28, r24	; 40
}
     894:	08 95       	ret

00000896 <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
     896:	87 bd       	out	0x27, r24	; 39
}
     898:	08 95       	ret

0000089a <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
     89a:	90 93 89 00 	sts	0x0089, r25
     89e:	80 93 88 00 	sts	0x0088, r24
}
     8a2:	08 95       	ret

000008a4 <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
     8a4:	90 93 8b 00 	sts	0x008B, r25
     8a8:	80 93 8a 00 	sts	0x008A, r24
}
     8ac:	08 95       	ret

000008ae <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     8ae:	10 92 ae 01 	sts	0x01AE, r1
     8b2:	10 92 af 01 	sts	0x01AF, r1
     8b6:	10 92 b0 01 	sts	0x01B0, r1
     8ba:	10 92 b1 01 	sts	0x01B1, r1
     8be:	16 bc       	out	0x26, r1	; 38
}
     8c0:	08 95       	ret

000008c2 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     8c2:	10 92 aa 01 	sts	0x01AA, r1
     8c6:	10 92 ab 01 	sts	0x01AB, r1
     8ca:	10 92 ac 01 	sts	0x01AC, r1
     8ce:	10 92 ad 01 	sts	0x01AD, r1
     8d2:	10 92 85 00 	sts	0x0085, r1
     8d6:	10 92 84 00 	sts	0x0084, r1
}
     8da:	08 95       	ret

000008dc <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
     8dc:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     8e4:	10 92 ae 01 	sts	0x01AE, r1
     8e8:	10 92 af 01 	sts	0x01AF, r1
     8ec:	10 92 b0 01 	sts	0x01B0, r1
     8f0:	10 92 b1 01 	sts	0x01B1, r1
     8f4:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
     8f6:	08 95       	ret

000008f8 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
     8f8:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     902:	10 92 aa 01 	sts	0x01AA, r1
     906:	10 92 ab 01 	sts	0x01AB, r1
     90a:	10 92 ac 01 	sts	0x01AC, r1
     90e:	10 92 ad 01 	sts	0x01AD, r1
     912:	10 92 85 00 	sts	0x0085, r1
     916:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
     91a:	08 95       	ret

0000091c <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
     91c:	20 91 ae 01 	lds	r18, 0x01AE
     920:	30 91 af 01 	lds	r19, 0x01AF
     924:	40 91 b0 01 	lds	r20, 0x01B0
     928:	50 91 b1 01 	lds	r21, 0x01B1
}
     92c:	b9 01       	movw	r22, r18
     92e:	ca 01       	movw	r24, r20
     930:	08 95       	ret

00000932 <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	24 e0       	ldi	r18, 0x04	; 4
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	aa 1f       	adc	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	2a 95       	dec	r18
     942:	d1 f7       	brne	.-12     	; 0x938 <delay_us+0x6>
     944:	03 96       	adiw	r24, 0x03	; 3
     946:	a1 1d       	adc	r26, r1
     948:	b1 1d       	adc	r27, r1
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
     960:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	82 17       	cp	r24, r18
     966:	93 07       	cpc	r25, r19
     968:	d8 f3       	brcs	.-10     	; 0x960 <delay_us+0x2e>
		asm("nop");
	};
}
     96a:	08 95       	ret

0000096c <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
     97e:	80 91 ae 01 	lds	r24, 0x01AE
     982:	90 91 af 01 	lds	r25, 0x01AF
     986:	a0 91 b0 01 	lds	r26, 0x01B0
     98a:	b0 91 b1 01 	lds	r27, 0x01B1
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	a1 1d       	adc	r26, r1
     992:	b1 1d       	adc	r27, r1
     994:	80 93 ae 01 	sts	0x01AE, r24
     998:	90 93 af 01 	sts	0x01AF, r25
     99c:	a0 93 b0 01 	sts	0x01B0, r26
     9a0:	b0 93 b1 01 	sts	0x01B1, r27
}
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     9b6:	90 93 01 01 	sts	0x0101, r25
     9ba:	80 93 00 01 	sts	0x0100, r24
}
     9be:	08 95       	ret

000009c0 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     9c0:	1f 93       	push	r17
     9c2:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	31 f4       	brne	.+12     	; 0x9d4 <rprintfChar+0x14>
		rputchar('\r');
     9c8:	e0 91 00 01 	lds	r30, 0x0100
     9cc:	f0 91 01 01 	lds	r31, 0x0101
     9d0:	8d e0       	ldi	r24, 0x0D	; 13
     9d2:	09 95       	icall
	// send character
	rputchar(c);
     9d4:	e0 91 00 01 	lds	r30, 0x0100
     9d8:	f0 91 01 01 	lds	r31, 0x0101
     9dc:	81 2f       	mov	r24, r17
     9de:	09 95       	icall
}
     9e0:	1f 91       	pop	r17
     9e2:	08 95       	ret

000009e4 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	21 f4       	brne	.+8      	; 0x9f6 <rprintfStr+0x12>
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     9f6:	88 81       	ld	r24, Y
     9f8:	88 23       	and	r24, r24
     9fa:	d1 f7       	brne	.-12     	; 0x9f0 <rprintfStr+0xc>
		rprintfChar(*str++);
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	8c 01       	movw	r16, r24
     a10:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	e9 f0       	breq	.+58     	; 0xa50 <rprintfStrLen+0x4e>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     a1a:	26 17       	cp	r18, r22
     a1c:	37 07       	cpc	r19, r23
     a1e:	38 f4       	brcc	.+14     	; 0xa2e <rprintfStrLen+0x2c>
     a20:	f8 01       	movw	r30, r16
     a22:	81 91       	ld	r24, Z+
     a24:	8f 01       	movw	r16, r30
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	88 23       	and	r24, r24
     a2c:	b1 f7       	brne	.-20     	; 0xa1a <rprintfStrLen+0x18>
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	0b c0       	rjmp	.+22     	; 0xa4a <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     a34:	f8 01       	movw	r30, r16
     a36:	80 81       	ld	r24, Z
     a38:	88 23       	and	r24, r24
     a3a:	19 f0       	breq	.+6      	; 0xa42 <rprintfStrLen+0x40>
			rprintfChar(*str++);
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     a42:	80 e2       	ldi	r24, 0x20	; 32
     a44:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     a48:	21 96       	adiw	r28, 0x01	; 1
     a4a:	ce 15       	cp	r28, r14
     a4c:	df 05       	cpc	r29, r15
     a4e:	90 f3       	brcs	.-28     	; 0xa34 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	08 95       	ret

00000a5e <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	19 f4       	brne	.+6      	; 0xa6e <rprintfProgStr+0x10>
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     a6a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     a6e:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     a70:	21 96       	adiw	r28, 0x01	; 1
     a72:	84 91       	lpm	r24, Z+
     a74:	88 23       	and	r24, r24
     a76:	c9 f7       	brne	.-14     	; 0xa6a <rprintfProgStr+0xc>
		rprintfChar(c);
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
}
     a84:	08 95       	ret

00000a86 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     a86:	e8 2f       	mov	r30, r24
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	ef 70       	andi	r30, 0x0F	; 15
     a8c:	f0 70       	andi	r31, 0x00	; 0
     a8e:	e8 59       	subi	r30, 0x98	; 152
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	e4 91       	lpm	r30, Z+
     a94:	8e 2f       	mov	r24, r30
     a96:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
}
     a9a:	08 95       	ret

00000a9c <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     a9c:	1f 93       	push	r17
     a9e:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     aa0:	82 95       	swap	r24
     aa2:	8f 70       	andi	r24, 0x0F	; 15
     aa4:	0e 94 43 05 	call	0xa86	; 0xa86 <rprintfu04>
	rprintfu04(data);
     aa8:	81 2f       	mov	r24, r17
     aaa:	0e 94 43 05 	call	0xa86	; 0xa86 <rprintfu04>
}
     aae:	1f 91       	pop	r17
     ab0:	08 95       	ret

00000ab2 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     ab2:	1f 93       	push	r17
     ab4:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     ab6:	89 2f       	mov	r24, r25
     ab8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <rprintfu08>
	rprintfu08(data);
     abc:	81 2f       	mov	r24, r17
     abe:	0e 94 4e 05 	call	0xa9c	; 0xa9c <rprintfu08>
}
     ac2:	1f 91       	pop	r17
     ac4:	08 95       	ret

00000ac6 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	7b 01       	movw	r14, r22
     ad0:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     ad2:	c8 01       	movw	r24, r16
     ad4:	aa 27       	eor	r26, r26
     ad6:	bb 27       	eor	r27, r27
     ad8:	0e 94 59 05 	call	0xab2	; 0xab2 <rprintfu16>
	rprintfu16(data);
     adc:	c7 01       	movw	r24, r14
     ade:	0e 94 59 05 	call	0xab2	; 0xab2 <rprintfu16>
}
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	a3 97       	sbiw	r28, 0x23	; 35
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	6a a3       	std	Y+34, r22	; 0x22
     b22:	24 2e       	mov	r2, r20
     b24:	2b a3       	std	Y+35, r18	; 0x23
     b26:	37 01       	movw	r6, r14
     b28:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     b2a:	44 23       	and	r20, r20
     b2c:	51 f0       	breq	.+20     	; 0xb42 <rprintfNum+0x56>
     b2e:	17 ff       	sbrs	r17, 7
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <rprintfNum+0x56>
	{
		x = -n;
     b32:	ee 24       	eor	r14, r14
     b34:	ff 24       	eor	r15, r15
     b36:	87 01       	movw	r16, r14
     b38:	e6 18       	sub	r14, r6
     b3a:	f7 08       	sbc	r15, r7
     b3c:	08 09       	sbc	r16, r8
     b3e:	19 09       	sbc	r17, r9
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     b42:	84 01       	movw	r16, r8
     b44:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     b46:	2a a1       	ldd	r18, Y+34	; 0x22
     b48:	21 50       	subi	r18, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	21 10       	cpse	r2, r1
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	29 1b       	sub	r18, r25
     b52:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     b54:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     b56:	a8 2e       	mov	r10, r24
     b58:	bb 24       	eor	r11, r11
     b5a:	cc 24       	eor	r12, r12
     b5c:	dd 24       	eor	r13, r13
     b5e:	c8 01       	movw	r24, r16
     b60:	b7 01       	movw	r22, r14
     b62:	a6 01       	movw	r20, r12
     b64:	95 01       	movw	r18, r10
     b66:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     b6a:	fb 01       	movw	r30, r22
     b6c:	ef 70       	andi	r30, 0x0F	; 15
     b6e:	f0 70       	andi	r31, 0x00	; 0
     b70:	e8 59       	subi	r30, 0x98	; 152
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	64 91       	lpm	r22, Z+
     b76:	6f 8f       	std	Y+31, r22	; 0x1f
     b78:	c8 01       	movw	r24, r16
     b7a:	b7 01       	movw	r22, r14
     b7c:	a6 01       	movw	r20, r12
     b7e:	95 01       	movw	r18, r10
     b80:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     b84:	c9 01       	movw	r24, r18
     b86:	da 01       	movw	r26, r20
     b88:	7c 01       	movw	r14, r24
     b8a:	8d 01       	movw	r16, r26
     b8c:	9e e1       	ldi	r25, 0x1E	; 30
     b8e:	49 2e       	mov	r4, r25
     b90:	51 2c       	mov	r5, r1
     b92:	4c 0e       	add	r4, r28
     b94:	5d 1e       	adc	r5, r29
     b96:	39 a0       	ldd	r3, Y+33	; 0x21
     b98:	25 c0       	rjmp	.+74     	; 0xbe4 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	01 05       	cpc	r16, r1
     ba0:	11 05       	cpc	r17, r1
     ba2:	c9 f0       	breq	.+50     	; 0xbd6 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     ba4:	c8 01       	movw	r24, r16
     ba6:	b7 01       	movw	r22, r14
     ba8:	a6 01       	movw	r20, r12
     baa:	95 01       	movw	r18, r10
     bac:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     bb0:	fb 01       	movw	r30, r22
     bb2:	ef 70       	andi	r30, 0x0F	; 15
     bb4:	f0 70       	andi	r31, 0x00	; 0
     bb6:	e8 59       	subi	r30, 0x98	; 152
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	64 91       	lpm	r22, Z+
     bbc:	f2 01       	movw	r30, r4
     bbe:	60 83       	st	Z, r22
     bc0:	c8 01       	movw	r24, r16
     bc2:	b7 01       	movw	r22, r14
     bc4:	a6 01       	movw	r20, r12
     bc6:	95 01       	movw	r18, r10
     bc8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     bcc:	c9 01       	movw	r24, r18
     bce:	da 01       	movw	r26, r20
     bd0:	7c 01       	movw	r14, r24
     bd2:	8d 01       	movw	r16, r26
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     bd6:	2b a1       	ldd	r18, Y+35	; 0x23
     bd8:	f2 01       	movw	r30, r4
     bda:	20 83       	st	Z, r18
     bdc:	3a 94       	dec	r3
     bde:	08 94       	sec
     be0:	41 08       	sbc	r4, r1
     be2:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     be4:	33 20       	and	r3, r3
     be6:	c9 f6       	brne	.-78     	; 0xb9a <rprintfNum+0xae>
     be8:	ce 01       	movw	r24, r28
     bea:	4f 96       	adiw	r24, 0x1f	; 31
     bec:	8c 01       	movw	r16, r24
     bee:	e9 a1       	ldd	r30, Y+33	; 0x21
     bf0:	0e 1b       	sub	r16, r30
     bf2:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
     bf4:	22 20       	and	r2, r2
     bf6:	f1 f0       	breq	.+60     	; 0xc34 <rprintfNum+0x148>
	{
		if(n < 0)
     bf8:	97 fe       	sbrs	r9, 7
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <rprintfNum+0x11a>
		{
   			*--p = '-';
     bfc:	8d e2       	ldi	r24, 0x2D	; 45
     bfe:	f8 01       	movw	r30, r16
     c00:	82 93       	st	-Z, r24
     c02:	8f 01       	movw	r16, r30
     c04:	17 c0       	rjmp	.+46     	; 0xc34 <rprintfNum+0x148>
     c06:	c8 01       	movw	r24, r16
     c08:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
     c0a:	61 14       	cp	r6, r1
     c0c:	71 04       	cpc	r7, r1
     c0e:	81 04       	cpc	r8, r1
     c10:	91 04       	cpc	r9, r1
     c12:	19 f0       	breq	.+6      	; 0xc1a <rprintfNum+0x12e>
		{
	   		*--p = '+';
     c14:	8c 01       	movw	r16, r24
     c16:	8b e2       	ldi	r24, 0x2B	; 43
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
     c1a:	8c 01       	movw	r16, r24
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	f8 01       	movw	r30, r16
     c20:	80 83       	st	Z, r24
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
     c24:	f8 01       	movw	r30, r16
     c26:	81 91       	ld	r24, Z+
     c28:	8f 01       	movw	r16, r30
     c2a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     c2e:	fa a1       	ldd	r31, Y+34	; 0x22
     c30:	f1 50       	subi	r31, 0x01	; 1
     c32:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     c34:	2a a1       	ldd	r18, Y+34	; 0x22
     c36:	22 23       	and	r18, r18
     c38:	a9 f7       	brne	.-22     	; 0xc24 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
     c3a:	a3 96       	adiw	r28, 0x23	; 35
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	3f 90       	pop	r3
     c68:	2f 90       	pop	r2
     c6a:	08 95       	ret

00000c6c <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
     c6c:	4f 92       	push	r4
     c6e:	5f 92       	push	r5
     c70:	6f 92       	push	r6
     c72:	7f 92       	push	r7
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	48 2e       	mov	r4, r24
     c8e:	5a 01       	movw	r10, r20
     c90:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
     c92:	cb 01       	movw	r24, r22
     c94:	ba 01       	movw	r22, r20
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__gesf2>
     ca2:	18 16       	cp	r1, r24
     ca4:	1c f4       	brge	.+6      	; 0xcac <rprintfFloat+0x40>
     ca6:	35 01       	movw	r6, r10
     ca8:	46 01       	movw	r8, r12
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <rprintfFloat+0x4c>
     cac:	35 01       	movw	r6, r10
     cae:	46 01       	movw	r8, r12
     cb0:	97 fa       	bst	r9, 7
     cb2:	90 94       	com	r9
     cb4:	97 f8       	bld	r9, 7
     cb6:	90 94       	com	r9
     cb8:	0f 2e       	mov	r0, r31
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	ef 2e       	mov	r14, r31
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	ff 2e       	mov	r15, r31
     cc2:	f0 e8       	ldi	r31, 0x80	; 128
     cc4:	0f 2f       	mov	r16, r31
     cc6:	ff e3       	ldi	r31, 0x3F	; 63
     cc8:	1f 2f       	mov	r17, r31
     cca:	f0 2d       	mov	r31, r0
     ccc:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
     cce:	c4 01       	movw	r24, r8
     cd0:	b3 01       	movw	r22, r6
     cd2:	a8 01       	movw	r20, r16
     cd4:	97 01       	movw	r18, r14
     cd6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     ce6:	87 fd       	sbrc	r24, 7
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     cfa:	7b 01       	movw	r14, r22
     cfc:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
     cfe:	53 94       	inc	r5
     d00:	8f e0       	ldi	r24, 0x0F	; 15
     d02:	58 16       	cp	r5, r24
     d04:	21 f7       	brne	.-56     	; 0xcce <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
     d06:	c6 01       	movw	r24, r12
     d08:	b5 01       	movw	r22, r10
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     d16:	88 23       	and	r24, r24
     d18:	14 f4       	brge	.+4      	; 0xd1e <rprintfFloat+0xb2>
		rprintfChar('-');
     d1a:	8d e2       	ldi	r24, 0x2D	; 45
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
     d1e:	8b e2       	ldi	r24, 0x2B	; 43
     d20:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     d24:	dd 24       	eor	r13, r13
     d26:	aa 24       	eor	r10, r10
     d28:	56 c0       	rjmp	.+172    	; 0xdd6 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
     d2a:	c4 01       	movw	r24, r8
     d2c:	b3 01       	movw	r22, r6
     d2e:	a8 01       	movw	r20, r16
     d30:	97 01       	movw	r18, r14
     d32:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     d36:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fixunssfsi>
     d3a:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
     d3c:	d6 2a       	or	r13, r22
     d3e:	cd 2d       	mov	r28, r13
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	cc 24       	eor	r12, r12
     d44:	dd 24       	eor	r13, r13
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     d56:	88 23       	and	r24, r24
     d58:	19 f4       	brne	.+6      	; 0xd60 <rprintfFloat+0xf4>
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	c2 2e       	mov	r12, r18
     d5e:	d1 2c       	mov	r13, r1
     d60:	cc 29       	or	r28, r12
     d62:	dd 29       	or	r29, r13
     d64:	cd 2b       	or	r28, r29
     d66:	39 f0       	breq	.+14     	; 0xd76 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
     d68:	8b 2d       	mov	r24, r11
     d6a:	80 5d       	subi	r24, 0xD0	; 208
     d6c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     d70:	dd 24       	eor	r13, r13
     d72:	da 94       	dec	r13
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
     d76:	80 e2       	ldi	r24, 0x20	; 32
     d78:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     d7c:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	5f e3       	ldi	r21, 0x3F	; 63
     d8a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     d8e:	88 23       	and	r24, r24
     d90:	19 f4       	brne	.+6      	; 0xd98 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
     d92:	8e e2       	ldi	r24, 0x2E	; 46
     d94:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
		}
		
		x -= (digit*place);
     d98:	6b 2d       	mov	r22, r11
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	88 27       	eor	r24, r24
     d9e:	77 fd       	sbrc	r23, 7
     da0:	80 95       	com	r24
     da2:	98 2f       	mov	r25, r24
     da4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     da8:	a8 01       	movw	r20, r16
     daa:	97 01       	movw	r18, r14
     dac:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__mulsf3>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	c4 01       	movw	r24, r8
     db6:	b3 01       	movw	r22, r6
     db8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__subsf3>
     dbc:	3b 01       	movw	r6, r22
     dbe:	4c 01       	movw	r8, r24
		place /= 10.0;
     dc0:	c8 01       	movw	r24, r16
     dc2:	b7 01       	movw	r22, r14
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e2       	ldi	r20, 0x20	; 32
     dca:	51 e4       	ldi	r21, 0x41	; 65
     dcc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     dd0:	7b 01       	movw	r14, r22
     dd2:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
     dd4:	a3 94       	inc	r10
     dd6:	a4 14       	cp	r10, r4
     dd8:	08 f4       	brcc	.+2      	; 0xddc <rprintfFloat+0x170>
     dda:	a7 cf       	rjmp	.-178    	; 0xd2a <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	08 95       	ret

00000dfe <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     dfe:	7f 92       	push	r7
     e00:	8f 92       	push	r8
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	78 88       	ldd	r7, Y+16	; 0x10
     e1e:	c9 88       	ldd	r12, Y+17	; 0x11
     e20:	da 88       	ldd	r13, Y+18	; 0x12
     e22:	63 e1       	ldi	r22, 0x13	; 19
     e24:	e6 2e       	mov	r14, r22
     e26:	f1 2c       	mov	r15, r1
     e28:	ec 0e       	add	r14, r28
     e2a:	fd 1e       	adc	r15, r29
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
     e2e:	88 23       	and	r24, r24
     e30:	81 f4       	brne	.+32     	; 0xe52 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	7f 90       	pop	r7
     e50:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     e52:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     e56:	96 01       	movw	r18, r12
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     e5c:	77 20       	and	r7, r7
     e5e:	21 f0       	breq	.+8      	; 0xe68 <rprintf1RamRom+0x6a>
     e60:	f6 01       	movw	r30, r12
     e62:	69 01       	movw	r12, r18
     e64:	84 91       	lpm	r24, Z+
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <rprintf1RamRom+0x70>
     e68:	f6 01       	movw	r30, r12
     e6a:	80 81       	ld	r24, Z
     e6c:	69 01       	movw	r12, r18
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	f1 f6       	brne	.-68     	; 0xe2e <rprintf1RamRom+0x30>
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     e76:	77 20       	and	r7, r7
     e78:	21 f0       	breq	.+8      	; 0xe82 <rprintf1RamRom+0x84>
     e7a:	f6 01       	movw	r30, r12
     e7c:	69 01       	movw	r12, r18
     e7e:	84 91       	lpm	r24, Z+
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <rprintf1RamRom+0x8a>
     e82:	f6 01       	movw	r30, r12
     e84:	80 81       	ld	r24, Z
     e86:	69 01       	movw	r12, r18
     e88:	84 36       	cpi	r24, 0x64	; 100
     e8a:	29 f0       	breq	.+10     	; 0xe96 <rprintf1RamRom+0x98>
     e8c:	88 37       	cpi	r24, 0x78	; 120
     e8e:	81 f0       	breq	.+32     	; 0xeb0 <rprintf1RamRom+0xb2>
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	f9 f6       	brne	.-66     	; 0xe52 <rprintf1RamRom+0x54>
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <rprintf1RamRom+0xa4>
     e96:	00 e1       	ldi	r16, 0x10	; 16
     e98:	17 e2       	ldi	r17, 0x27	; 39
     e9a:	5a e0       	ldi	r21, 0x0A	; 10
     e9c:	a5 2e       	mov	r10, r21
     e9e:	b1 2c       	mov	r11, r1
     ea0:	0c c0       	rjmp	.+24     	; 0xeba <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
     ea2:	f7 01       	movw	r30, r14
     ea4:	80 81       	ld	r24, Z
     ea6:	22 e0       	ldi	r18, 0x02	; 2
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	e2 0e       	add	r14, r18
     eac:	f3 1e       	adc	r15, r19
     eae:	d1 cf       	rjmp	.-94     	; 0xe52 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	10 e1       	ldi	r17, 0x10	; 16
     eb4:	40 e1       	ldi	r20, 0x10	; 16
     eb6:	a4 2e       	mov	r10, r20
     eb8:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     eba:	32 e0       	ldi	r19, 0x02	; 2
     ebc:	83 2e       	mov	r8, r19
     ebe:	91 2c       	mov	r9, r1
     ec0:	8e 0c       	add	r8, r14
     ec2:	9f 1c       	adc	r9, r15
     ec4:	f7 01       	movw	r30, r14
     ec6:	e0 80       	ld	r14, Z
     ec8:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
     eca:	84 36       	cpi	r24, 0x64	; 100
     ecc:	b1 f4       	brne	.+44     	; 0xefa <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
     ece:	f7 fe       	sbrs	r15, 7
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
     ed2:	f0 94       	com	r15
     ed4:	e1 94       	neg	r14
     ed6:	f1 08       	sbc	r15, r1
     ed8:	f3 94       	inc	r15
					rprintfChar('-');
     eda:	8d e2       	ldi	r24, 0x2D	; 45
     edc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rprintfChar>
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     ee2:	c8 01       	movw	r24, r16
     ee4:	6a e0       	ldi	r22, 0x0A	; 10
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
     eec:	8b 01       	movw	r16, r22
     eee:	62 30       	cpi	r22, 0x02	; 2
     ef0:	71 05       	cpc	r23, r1
     ef2:	18 f0       	brcs	.+6      	; 0xefa <rprintf1RamRom+0xfc>
     ef4:	e0 16       	cp	r14, r16
     ef6:	f1 06       	cpc	r15, r17
     ef8:	a0 f3       	brcs	.-24     	; 0xee2 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     efa:	c7 01       	movw	r24, r14
     efc:	b8 01       	movw	r22, r16
     efe:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
     f02:	86 2f       	mov	r24, r22
     f04:	0e 94 43 05 	call	0xa86	; 0xa86 <rprintfu04>
				u_val %= div_val;
     f08:	c7 01       	movw	r24, r14
     f0a:	b8 01       	movw	r22, r16
     f0c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
     f10:	7c 01       	movw	r14, r24
				div_val /= base;
     f12:	c8 01       	movw	r24, r16
     f14:	b5 01       	movw	r22, r10
     f16:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
     f1a:	8b 01       	movw	r16, r22
			} while (div_val);
     f1c:	61 15       	cp	r22, r1
     f1e:	71 05       	cpc	r23, r1
     f20:	61 f7       	brne	.-40     	; 0xefa <rprintf1RamRom+0xfc>
     f22:	74 01       	movw	r14, r8
     f24:	98 cf       	rjmp	.-208    	; 0xe56 <rprintf1RamRom+0x58>

00000f26 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	40 f4       	brcc	.+16     	; 0xf3a <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     f2a:	e8 2f       	mov	r30, r24
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 56       	subi	r30, 0x6E	; 110
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	71 83       	std	Z+1, r23	; 0x01
     f38:	60 83       	st	Z, r22
     f3a:	08 95       	ret

00000f3c <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     f3c:	9a 01       	movw	r18, r20
     f3e:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
     f40:	88 23       	and	r24, r24
     f42:	e1 f4       	brne	.+56     	; 0xf7c <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     f44:	ca 01       	movw	r24, r20
     f46:	b9 01       	movw	r22, r18
     f48:	60 58       	subi	r22, 0x80	; 128
     f4a:	7b 47       	sbci	r23, 0x7B	; 123
     f4c:	81 4e       	sbci	r24, 0xE1	; 225
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	f3 e0       	ldi	r31, 0x03	; 3
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	fa 95       	dec	r31
     f5c:	d1 f7       	brne	.-12     	; 0xf52 <uartSetBaudRate+0x16>
     f5e:	e4 e0       	ldi	r30, 0x04	; 4
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	44 1f       	adc	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	ea 95       	dec	r30
     f6a:	d1 f7       	brne	.-12     	; 0xf60 <uartSetBaudRate+0x24>
     f6c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
     f70:	21 50       	subi	r18, 0x01	; 1
     f72:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
     f74:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     f78:	30 93 c5 00 	sts	0x00C5, r19
     f7c:	08 95       	ret

00000f7e <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a3 e0       	ldi	r26, 0x03	; 3
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	aa 95       	dec	r26
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <uartGetRxBuffer+0x6>
     f8c:	2a 54       	subi	r18, 0x4A	; 74
     f8e:	3e 4f       	sbci	r19, 0xFE	; 254
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
     f90:	c9 01       	movw	r24, r18
     f92:	08 95       	ret

00000f94 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	b3 e0       	ldi	r27, 0x03	; 3
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	ba 95       	dec	r27
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <uartGetTxBuffer+0x6>
     fa2:	26 52       	subi	r18, 0x26	; 38
     fa4:	3e 4f       	sbci	r19, 0xFE	; 254
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
     fa6:	c9 01       	movw	r24, r18
     fa8:	08 95       	ret

00000faa <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     faa:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     fac:	88 23       	and	r24, r24
     fae:	31 f4       	brne	.+12     	; 0xfbc <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     fb0:	80 91 c0 00 	lds	r24, 0x00C0
     fb4:	85 ff       	sbrs	r24, 5
     fb6:	fc cf       	rjmp	.-8      	; 0xfb0 <uartSendByte+0x6>
		outb(UDR0, txData);
     fb8:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 54       	subi	r30, 0x4E	; 78
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	10 82       	st	Z, r1
}
     fc4:	08 95       	ret

00000fc6 <uart0SendByte>:

void uart0SendByte(u08 data)
{
     fc6:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     fc8:	80 91 c0 00 	lds	r24, 0x00C0
     fcc:	85 ff       	sbrs	r24, 5
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <uart0SendByte+0x2>
		outb(UDR0, txData);
     fd0:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     fd4:	10 92 b2 01 	sts	0x01B2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
     fd8:	08 95       	ret

00000fda <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	e8 2f       	mov	r30, r24
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	8a 95       	dec	r24
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <uartReceiveBufferIsEmpty+0x8>
     fea:	e6 54       	subi	r30, 0x46	; 70
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	89 2b       	or	r24, r25
     ff4:	09 f4       	brne	.+2      	; 0xff8 <uartReceiveBufferIsEmpty+0x1e>
     ff6:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
     ff8:	82 2f       	mov	r24, r18
     ffa:	08 95       	ret

00000ffc <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
    1000:	88 23       	and	r24, r24
    1002:	11 f4       	brne	.+4      	; 0x1008 <uartReceiveService+0xc>
		c = inb(UDR0);
    1004:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	e9 01       	movw	r28, r18
    100e:	cc 0f       	add	r28, r28
    1010:	dd 1f       	adc	r29, r29
    1012:	fe 01       	movw	r30, r28
    1014:	ee 56       	subi	r30, 0x6E	; 110
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	89 2b       	or	r24, r25
    101e:	31 f0       	breq	.+12     	; 0x102c <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1020:	01 90       	ld	r0, Z+
    1022:	f0 81       	ld	r31, Z
    1024:	e0 2d       	mov	r30, r0
    1026:	86 2f       	mov	r24, r22
    1028:	09 95       	icall
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	9a 95       	dec	r25
    1034:	e1 f7       	brne	.-8      	; 0x102e <uartReceiveService+0x32>
    1036:	c9 01       	movw	r24, r18
    1038:	8a 54       	subi	r24, 0x4A	; 74
    103a:	9e 4f       	sbci	r25, 0xFE	; 254
    103c:	0e 94 38 0a 	call	0x1470	; 0x1470 <bufferAddToEnd>
    1040:	88 23       	and	r24, r24
    1042:	41 f4       	brne	.+16     	; 0x1054 <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    1044:	fe 01       	movw	r30, r28
    1046:	e6 50       	subi	r30, 0x06	; 6
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
		}
	}
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    105a:	1f 92       	push	r1
    105c:	0f 92       	push	r0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	0f 92       	push	r0
    1062:	11 24       	eor	r1, r1
    1064:	2f 93       	push	r18
    1066:	3f 93       	push	r19
    1068:	4f 93       	push	r20
    106a:	5f 93       	push	r21
    106c:	6f 93       	push	r22
    106e:	7f 93       	push	r23
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
	uartReceiveService(0);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	0e 94 fe 07 	call	0xffc	; 0xffc <uartReceiveService>
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	88 2e       	mov	r8, r24
    10be:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    10c0:	e8 2e       	mov	r14, r24
    10c2:	ff 24       	eor	r15, r15
    10c4:	f7 01       	movw	r30, r14
    10c6:	13 e0       	ldi	r17, 0x03	; 3
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	1a 95       	dec	r17
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <uartSendBuffer+0x24>
    10d0:	e2 52       	subi	r30, 0x22	; 34
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	20 81       	ld	r18, Z
    10d6:	31 81       	ldd	r19, Z+1	; 0x01
    10d8:	24 0f       	add	r18, r20
    10da:	35 1f       	adc	r19, r21
    10dc:	f7 01       	movw	r30, r14
    10de:	73 e0       	ldi	r23, 0x03	; 3
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	7a 95       	dec	r23
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <uartSendBuffer+0x3c>
    10e8:	e4 52       	subi	r30, 0x24	; 36
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	28 17       	cp	r18, r24
    10f2:	39 07       	cpc	r19, r25
    10f4:	b0 f5       	brcc	.+108    	; 0x1162 <uartSendBuffer+0xbe>
    10f6:	41 15       	cp	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	99 f1       	breq	.+102    	; 0x1162 <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    10fc:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    10fe:	67 01       	movw	r12, r14
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	cc 0c       	add	r12, r12
    1104:	dd 1c       	adc	r13, r13
    1106:	6a 95       	dec	r22
    1108:	e1 f7       	brne	.-8      	; 0x1102 <uartSendBuffer+0x5e>
    110a:	8a ed       	ldi	r24, 0xDA	; 218
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	c8 0e       	add	r12, r24
    1110:	d9 1e       	adc	r13, r25
    1112:	8d 01       	movw	r16, r26
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1118:	5a 01       	movw	r10, r20
    111a:	08 94       	sec
    111c:	a1 08       	sbc	r10, r1
    111e:	b1 08       	sbc	r11, r1
    1120:	06 c0       	rjmp	.+12     	; 0x112e <uartSendBuffer+0x8a>
    1122:	c6 01       	movw	r24, r12
    1124:	f8 01       	movw	r30, r16
    1126:	60 81       	ld	r22, Z
    1128:	0e 94 38 0a 	call	0x1470	; 0x1470 <bufferAddToEnd>
    112c:	21 96       	adiw	r28, 0x01	; 1
    112e:	0f 5f       	subi	r16, 0xFF	; 255
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	ca 15       	cp	r28, r10
    1134:	db 05       	cpc	r29, r11
    1136:	a8 f3       	brcs	.-22     	; 0x1122 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    1138:	f7 01       	movw	r30, r14
    113a:	ea 52       	subi	r30, 0x2A	; 42
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1142:	88 20       	and	r8, r8
    1144:	31 f4       	brne	.+12     	; 0x1152 <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1146:	80 91 c0 00 	lds	r24, 0x00C0
    114a:	85 ff       	sbrs	r24, 5
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    114e:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1152:	82 eb       	ldi	r24, 0xB2	; 178
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	e8 0e       	add	r14, r24
    1158:	f9 1e       	adc	r15, r25
    115a:	f7 01       	movw	r30, r14
    115c:	10 82       	st	Z, r1
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    1162:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	08 95       	ret

0000117e <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	23 e0       	ldi	r18, 0x03	; 3
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	2a 95       	dec	r18
    1188:	e1 f7       	brne	.-8      	; 0x1182 <uartAddToTxBuffer+0x4>
    118a:	86 52       	subi	r24, 0x26	; 38
    118c:	9e 4f       	sbci	r25, 0xFE	; 254
    118e:	0e 94 38 0a 	call	0x1470	; 0x1470 <bufferAddToEnd>
}
    1192:	08 95       	ret

00001194 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    1194:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1196:	8a ed       	ldi	r24, 0xDA	; 218
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 38 0a 	call	0x1470	; 0x1470 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    119e:	08 95       	ret

000011a0 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    11a6:	a8 2f       	mov	r26, r24
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ed 01       	movw	r28, r26
    11ac:	ca 52       	subi	r28, 0x2A	; 42
    11ae:	de 4f       	sbci	r29, 0xFE	; 254
    11b0:	88 81       	ld	r24, Y
    11b2:	88 23       	and	r24, r24
    11b4:	b1 f0       	breq	.+44     	; 0x11e2 <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    11b6:	fd 01       	movw	r30, r26
    11b8:	33 e0       	ldi	r19, 0x03	; 3
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	3a 95       	dec	r19
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <uartTransmitService+0x1a>
    11c2:	e2 52       	subi	r30, 0x22	; 34
    11c4:	fe 4f       	sbci	r31, 0xFE	; 254
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	89 2b       	or	r24, r25
    11cc:	49 f0       	breq	.+18     	; 0x11e0 <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    11ce:	23 30       	cpi	r18, 0x03	; 3
    11d0:	61 f4       	brne	.+24     	; 0x11ea <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    11d2:	8a ed       	ldi	r24, 0xDA	; 218
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 cf 09 	call	0x139e	; 0x139e <bufferGetFromFront>
    11da:	80 93 c6 00 	sts	0x00C6, r24
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    11e0:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    11e2:	ae 54       	subi	r26, 0x4E	; 78
    11e4:	be 4f       	sbci	r27, 0xFE	; 254
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	8c 93       	st	X, r24
	}
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	2f 93       	push	r18
    11fc:	3f 93       	push	r19
    11fe:	4f 93       	push	r20
    1200:	5f 93       	push	r21
    1202:	6f 93       	push	r22
    1204:	7f 93       	push	r23
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	af 93       	push	r26
    120c:	bf 93       	push	r27
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
	uartTransmitService(0);
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <uartTransmitService>
}
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    1242:	c8 2f       	mov	r28, r24
    1244:	d0 e0       	ldi	r29, 0x00	; 0
    1246:	fe 01       	movw	r30, r28
    1248:	ea 52       	subi	r30, 0x2A	; 42
    124a:	fe 4f       	sbci	r31, 0xFE	; 254
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    1250:	ce 01       	movw	r24, r28
    1252:	43 e0       	ldi	r20, 0x03	; 3
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	4a 95       	dec	r20
    125a:	e1 f7       	brne	.-8      	; 0x1254 <uartSendTxBuffer+0x1a>
    125c:	86 52       	subi	r24, 0x26	; 38
    125e:	9e 4f       	sbci	r25, 0xFE	; 254
    1260:	0e 94 cf 09 	call	0x139e	; 0x139e <bufferGetFromFront>
    1264:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1266:	11 23       	and	r17, r17
    1268:	31 f4       	brne	.+12     	; 0x1276 <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    126a:	80 91 c0 00 	lds	r24, 0x00C0
    126e:	85 ff       	sbrs	r24, 5
    1270:	fc cf       	rjmp	.-8      	; 0x126a <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    1272:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1276:	ce 54       	subi	r28, 0x4E	; 78
    1278:	de 4f       	sbci	r29, 0xFE	; 254
    127a:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	08 95       	ret

00001284 <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	73 e0       	ldi	r23, 0x03	; 3
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	7a 95       	dec	r23
    1298:	e1 f7       	brne	.-8      	; 0x1292 <uartReceiveByte+0xe>
    129a:	e8 54       	subi	r30, 0x48	; 72
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	89 2b       	or	r24, r25
    12a4:	c9 f0       	breq	.+50     	; 0x12d8 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    12a6:	f9 01       	movw	r30, r18
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	6a 95       	dec	r22
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <uartReceiveByte+0x26>
    12b2:	e6 54       	subi	r30, 0x46	; 70
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	89 2b       	or	r24, r25
    12bc:	69 f0       	breq	.+26     	; 0x12d8 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    12be:	53 e0       	ldi	r21, 0x03	; 3
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	5a 95       	dec	r21
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <uartReceiveByte+0x3c>
    12c8:	c9 01       	movw	r24, r18
    12ca:	8a 54       	subi	r24, 0x4A	; 74
    12cc:	9e 4f       	sbci	r25, 0xFE	; 254
    12ce:	0e 94 cf 09 	call	0x139e	; 0x139e <bufferGetFromFront>
    12d2:	88 83       	st	Y, r24
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <uartReceiveByte+0x56>
			return TRUE;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	be 01       	movw	r22, r28
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	0e 94 42 09 	call	0x1284	; 0x1284 <uartReceiveByte>
    12f6:	88 23       	and	r24, r24
    12f8:	19 f4       	brne	.+6      	; 0x1300 <uart0GetByte+0x20>
    12fa:	2f ef       	ldi	r18, 0xFF	; 255
    12fc:	3f ef       	ldi	r19, 0xFF	; 255
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <uart0GetByte+0x26>
		return c;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1306:	c9 01       	movw	r24, r18
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	e3 e0       	ldi	r30, 0x03	; 3
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	ea 95       	dec	r30
    131a:	e1 f7       	brne	.-8      	; 0x1314 <uartFlushReceiveBuffer+0x4>
    131c:	8a 54       	subi	r24, 0x4A	; 74
    131e:	9e 4f       	sbci	r25, 0xFE	; 254
    1320:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <bufferFlush>
}
    1324:	08 95       	ret

00001326 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    1326:	86 eb       	ldi	r24, 0xB6	; 182
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	62 e0       	ldi	r22, 0x02	; 2
    132c:	71 e0       	ldi	r23, 0x01	; 1
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	0e 94 c2 09 	call	0x1384	; 0x1384 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    1336:	8a ed       	ldi	r24, 0xDA	; 218
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	62 e8       	ldi	r22, 0x82	; 130
    133c:	71 e0       	ldi	r23, 0x01	; 1
    133e:	40 e1       	ldi	r20, 0x10	; 16
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 c2 09 	call	0x1384	; 0x1384 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    1346:	08 95       	ret

00001348 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    1348:	0e 94 93 09 	call	0x1326	; 0x1326 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    134c:	10 92 93 01 	sts	0x0193, r1
    1350:	10 92 92 01 	sts	0x0192, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1354:	88 ed       	ldi	r24, 0xD8	; 216
    1356:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	55 e2       	ldi	r21, 0x25	; 37
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	0e 94 9e 07 	call	0xf3c	; 0xf3c <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	80 93 b2 01 	sts	0x01B2, r24
	uartBufferedTx[0] = FALSE;
    136e:	10 92 d6 01 	sts	0x01D6, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1372:	10 92 fb 01 	sts	0x01FB, r1
    1376:	10 92 fa 01 	sts	0x01FA, r1
	// enable interrupts
	sei();
    137a:	78 94       	sei
}
    137c:	08 95       	ret

0000137e <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    137e:	0e 94 a4 09 	call	0x1348	; 0x1348 <uart0Init>
}
    1382:	08 95       	ret

00001384 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    1384:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1386:	8f b7       	in	r24, 0x3f	; 63
    1388:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    138a:	71 83       	std	Z+1, r23	; 0x01
    138c:	60 83       	st	Z, r22
	buffer->size = size;
    138e:	53 83       	std	Z+3, r21	; 0x03
    1390:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    1392:	17 82       	std	Z+7, r1	; 0x07
    1394:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    1396:	15 82       	std	Z+5, r1	; 0x05
    1398:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    139a:	8f bf       	out	0x3f, r24	; 63
}
    139c:	08 95       	ret

0000139e <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    139e:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    13a0:	4f b7       	in	r20, 0x3f	; 63
    13a2:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    13a4:	14 96       	adiw	r26, 0x04	; 4
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	15 97       	sbiw	r26, 0x05	; 5
    13ac:	89 2b       	or	r24, r25
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <bufferGetFromFront+0x16>
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	25 c0       	rjmp	.+74     	; 0x13fe <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    13b4:	16 96       	adiw	r26, 0x06	; 6
    13b6:	8d 91       	ld	r24, X+
    13b8:	9c 91       	ld	r25, X
    13ba:	17 97       	sbiw	r26, 0x07	; 7
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	11 97       	sbiw	r26, 0x01	; 1
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	17 96       	adiw	r26, 0x07	; 7
    13cc:	9c 93       	st	X, r25
    13ce:	8e 93       	st	-X, r24
    13d0:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	2d 91       	ld	r18, X+
    13d6:	3c 91       	ld	r19, X
    13d8:	13 97       	sbiw	r26, 0x03	; 3
    13da:	82 17       	cp	r24, r18
    13dc:	93 07       	cpc	r25, r19
    13de:	30 f0       	brcs	.+12     	; 0x13ec <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    13e0:	82 1b       	sub	r24, r18
    13e2:	93 0b       	sbc	r25, r19
    13e4:	17 96       	adiw	r26, 0x07	; 7
    13e6:	9c 93       	st	X, r25
    13e8:	8e 93       	st	-X, r24
    13ea:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    13ec:	14 96       	adiw	r26, 0x04	; 4
    13ee:	8d 91       	ld	r24, X+
    13f0:	9c 91       	ld	r25, X
    13f2:	15 97       	sbiw	r26, 0x05	; 5
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	15 96       	adiw	r26, 0x05	; 5
    13f8:	9c 93       	st	X, r25
    13fa:	8e 93       	st	-X, r24
    13fc:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    13fe:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    1400:	8e 2f       	mov	r24, r30
    1402:	08 95       	ret

00001404 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    1404:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1406:	4f b7       	in	r20, 0x3f	; 63
    1408:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    140a:	84 81       	ldd	r24, Z+4	; 0x04
    140c:	95 81       	ldd	r25, Z+5	; 0x05
    140e:	68 17       	cp	r22, r24
    1410:	79 07       	cpc	r23, r25
    1412:	b0 f4       	brcc	.+44     	; 0x1440 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    1414:	86 81       	ldd	r24, Z+6	; 0x06
    1416:	97 81       	ldd	r25, Z+7	; 0x07
    1418:	86 0f       	add	r24, r22
    141a:	97 1f       	adc	r25, r23
    141c:	97 83       	std	Z+7, r25	; 0x07
    141e:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    1420:	22 81       	ldd	r18, Z+2	; 0x02
    1422:	33 81       	ldd	r19, Z+3	; 0x03
    1424:	82 17       	cp	r24, r18
    1426:	93 07       	cpc	r25, r19
    1428:	20 f0       	brcs	.+8      	; 0x1432 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    142a:	82 1b       	sub	r24, r18
    142c:	93 0b       	sbc	r25, r19
    142e:	97 83       	std	Z+7, r25	; 0x07
    1430:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	95 81       	ldd	r25, Z+5	; 0x05
    1436:	86 1b       	sub	r24, r22
    1438:	97 0b       	sbc	r25, r23
    143a:	95 83       	std	Z+5, r25	; 0x05
    143c:	84 83       	std	Z+4, r24	; 0x04
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    1440:	15 82       	std	Z+5, r1	; 0x05
    1442:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    1444:	4f bf       	out	0x3f, r20	; 63
}
    1446:	08 95       	ret

00001448 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    1448:	fc 01       	movw	r30, r24
    144a:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    144c:	2f b7       	in	r18, 0x3f	; 63
    144e:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    1450:	2f bf       	out	0x3f, r18	; 63
    1452:	26 81       	ldd	r18, Z+6	; 0x06
    1454:	37 81       	ldd	r19, Z+7	; 0x07
    1456:	62 81       	ldd	r22, Z+2	; 0x02
    1458:	73 81       	ldd	r23, Z+3	; 0x03
    145a:	82 0f       	add	r24, r18
    145c:	93 1f       	adc	r25, r19
    145e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
    1462:	01 90       	ld	r0, Z+
    1464:	f0 81       	ld	r31, Z
    1466:	e0 2d       	mov	r30, r0
    1468:	e8 0f       	add	r30, r24
    146a:	f9 1f       	adc	r31, r25
	return data;
}
    146c:	80 81       	ld	r24, Z
    146e:	08 95       	ret

00001470 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	ec 01       	movw	r28, r24
    1478:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    147a:	4f b7       	in	r20, 0x3f	; 63
    147c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	6a 81       	ldd	r22, Y+2	; 0x02
    1484:	7b 81       	ldd	r23, Y+3	; 0x03
    1486:	26 17       	cp	r18, r22
    1488:	37 07       	cpc	r19, r23
    148a:	98 f4       	brcc	.+38     	; 0x14b2 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	9f 81       	ldd	r25, Y+7	; 0x07
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodhi4>
    1498:	e8 81       	ld	r30, Y
    149a:	f9 81       	ldd	r31, Y+1	; 0x01
    149c:	e8 0f       	add	r30, r24
    149e:	f9 1f       	adc	r31, r25
    14a0:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9d 83       	std	Y+5, r25	; 0x05
    14aa:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    14ac:	4f bf       	out	0x3f, r20	; 63
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    14b2:	4f bf       	out	0x3f, r20	; 63
    14b4:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	08 95       	ret

000014be <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    14be:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    14c0:	8f b7       	in	r24, 0x3f	; 63
    14c2:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    14c4:	8f bf       	out	0x3f, r24	; 63
    14c6:	22 81       	ldd	r18, Z+2	; 0x02
    14c8:	33 81       	ldd	r19, Z+3	; 0x03
    14ca:	84 81       	ldd	r24, Z+4	; 0x04
    14cc:	95 81       	ldd	r25, Z+5	; 0x05
    14ce:	28 1b       	sub	r18, r24
    14d0:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    14d2:	c9 01       	movw	r24, r18
    14d4:	08 95       	ret

000014d6 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    14d6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    14d8:	8f b7       	in	r24, 0x3f	; 63
    14da:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    14dc:	15 82       	std	Z+5, r1	; 0x05
    14de:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    14e0:	8f bf       	out	0x3f, r24	; 63
}
    14e2:	08 95       	ret

000014e4 <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    14e4:	60 91 9a 01 	lds	r22, 0x019A
    14e8:	70 91 9b 01 	lds	r23, 0x019B
	return wheel_left_tick_counter;
}
    14ec:	80 91 9c 01 	lds	r24, 0x019C
    14f0:	90 91 9d 01 	lds	r25, 0x019D
    14f4:	08 95       	ret

000014f6 <get_right_count>:

u32 get_right_count(void){
    14f6:	60 91 9e 01 	lds	r22, 0x019E
    14fa:	70 91 9f 01 	lds	r23, 0x019F
	return wheel_right_tick_counter;
}
    14fe:	80 91 a0 01 	lds	r24, 0x01A0
    1502:	90 91 a1 01 	lds	r25, 0x01A1
    1506:	08 95       	ret

00001508 <__vector_5>:

SIGNAL(PCINT2_vect){
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	2f 93       	push	r18
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    151c:	29 b1       	in	r18, 0x09	; 9
    151e:	20 78       	andi	r18, 0x80	; 128
    1520:	20 93 a8 01 	sts	0x01A8, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    1524:	80 91 a9 01 	lds	r24, 0x01A9
    1528:	82 17       	cp	r24, r18
    152a:	58 f4       	brcc	.+22     	; 0x1542 <__vector_5+0x3a>
    152c:	80 91 9a 01 	lds	r24, 0x019A
    1530:	90 91 9b 01 	lds	r25, 0x019B
    1534:	a0 91 9c 01 	lds	r26, 0x019C
    1538:	b0 91 9d 01 	lds	r27, 0x019D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    153c:	18 9b       	sbis	0x03, 0	; 3
    153e:	0b c0       	rjmp	.+22     	; 0x1556 <__vector_5+0x4e>
    1540:	0e c0       	rjmp	.+28     	; 0x155e <__vector_5+0x56>
    1542:	80 91 9a 01 	lds	r24, 0x019A
    1546:	90 91 9b 01 	lds	r25, 0x019B
    154a:	a0 91 9c 01 	lds	r26, 0x019C
    154e:	b0 91 9d 01 	lds	r27, 0x019D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    1552:	18 9b       	sbis	0x03, 0	; 3
    1554:	04 c0       	rjmp	.+8      	; 0x155e <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	a1 1d       	adc	r26, r1
    155a:	b1 1d       	adc	r27, r1
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	a1 09       	sbc	r26, r1
    1562:	b1 09       	sbc	r27, r1
    1564:	80 93 9a 01 	sts	0x019A, r24
    1568:	90 93 9b 01 	sts	0x019B, r25
    156c:	a0 93 9c 01 	sts	0x019C, r26
    1570:	b0 93 9d 01 	sts	0x019D, r27
		}
	}
	pin_level_past = pin_level_current;
    1574:	20 93 a9 01 	sts	0x01A9, r18
	
}
    1578:	bf 91       	pop	r27
    157a:	af 91       	pop	r26
    157c:	9f 91       	pop	r25
    157e:	8f 91       	pop	r24
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <__vector_3>:
SIGNAL(PCINT0_vect){
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    15a4:	33 b1       	in	r19, 0x03	; 3
    15a6:	31 70       	andi	r19, 0x01	; 1
    15a8:	30 93 a6 01 	sts	0x01A6, r19
	PINB4_current = bit_is_set(PINB,4);
    15ac:	23 b1       	in	r18, 0x03	; 3
    15ae:	20 71       	andi	r18, 0x10	; 16
    15b0:	20 93 a4 01 	sts	0x01A4, r18
	PINB5_current = bit_is_set(PINB,5);
    15b4:	43 b1       	in	r20, 0x03	; 3
    15b6:	40 72       	andi	r20, 0x20	; 32
    15b8:	40 93 a2 01 	sts	0x01A2, r20

	if(PINB0_current != PINB0_past){
    15bc:	80 91 a7 01 	lds	r24, 0x01A7
    15c0:	38 17       	cp	r19, r24
    15c2:	49 f1       	breq	.+82     	; 0x1616 <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    15c4:	83 17       	cp	r24, r19
    15c6:	58 f4       	brcc	.+22     	; 0x15de <__vector_3+0x52>
    15c8:	80 91 9a 01 	lds	r24, 0x019A
    15cc:	90 91 9b 01 	lds	r25, 0x019B
    15d0:	a0 91 9c 01 	lds	r26, 0x019C
    15d4:	b0 91 9d 01 	lds	r27, 0x019D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    15d8:	4f 9b       	sbis	0x09, 7	; 9
    15da:	0b c0       	rjmp	.+22     	; 0x15f2 <__vector_3+0x66>
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <__vector_3+0x6e>
    15de:	80 91 9a 01 	lds	r24, 0x019A
    15e2:	90 91 9b 01 	lds	r25, 0x019B
    15e6:	a0 91 9c 01 	lds	r26, 0x019C
    15ea:	b0 91 9d 01 	lds	r27, 0x019D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    15ee:	4f 9b       	sbis	0x09, 7	; 9
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	a1 09       	sbc	r26, r1
    15f6:	b1 09       	sbc	r27, r1
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	a1 1d       	adc	r26, r1
    15fe:	b1 1d       	adc	r27, r1
    1600:	80 93 9a 01 	sts	0x019A, r24
    1604:	90 93 9b 01 	sts	0x019B, r25
    1608:	a0 93 9c 01 	sts	0x019C, r26
    160c:	b0 93 9d 01 	sts	0x019D, r27
			}
		}
		PINB0_past = PINB0_current;
    1610:	30 93 a7 01 	sts	0x01A7, r19
    1614:	57 c0       	rjmp	.+174    	; 0x16c4 <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    1616:	80 91 a5 01 	lds	r24, 0x01A5
    161a:	28 17       	cp	r18, r24
    161c:	49 f1       	breq	.+82     	; 0x1670 <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    161e:	82 17       	cp	r24, r18
    1620:	58 f4       	brcc	.+22     	; 0x1638 <__vector_3+0xac>
    1622:	80 91 9e 01 	lds	r24, 0x019E
    1626:	90 91 9f 01 	lds	r25, 0x019F
    162a:	a0 91 a0 01 	lds	r26, 0x01A0
    162e:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    1632:	1d 9b       	sbis	0x03, 5	; 3
    1634:	0b c0       	rjmp	.+22     	; 0x164c <__vector_3+0xc0>
    1636:	0e c0       	rjmp	.+28     	; 0x1654 <__vector_3+0xc8>
    1638:	80 91 9e 01 	lds	r24, 0x019E
    163c:	90 91 9f 01 	lds	r25, 0x019F
    1640:	a0 91 a0 01 	lds	r26, 0x01A0
    1644:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    1648:	1d 9b       	sbis	0x03, 5	; 3
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	a1 09       	sbc	r26, r1
    1650:	b1 09       	sbc	r27, r1
    1652:	03 c0       	rjmp	.+6      	; 0x165a <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	a1 1d       	adc	r26, r1
    1658:	b1 1d       	adc	r27, r1
    165a:	80 93 9e 01 	sts	0x019E, r24
    165e:	90 93 9f 01 	sts	0x019F, r25
    1662:	a0 93 a0 01 	sts	0x01A0, r26
    1666:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB4_past = PINB4_current;
    166a:	20 93 a5 01 	sts	0x01A5, r18
    166e:	2a c0       	rjmp	.+84     	; 0x16c4 <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    1670:	80 91 a3 01 	lds	r24, 0x01A3
    1674:	84 17       	cp	r24, r20
    1676:	58 f4       	brcc	.+22     	; 0x168e <__vector_3+0x102>
    1678:	80 91 9e 01 	lds	r24, 0x019E
    167c:	90 91 9f 01 	lds	r25, 0x019F
    1680:	a0 91 a0 01 	lds	r26, 0x01A0
    1684:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    1688:	1c 9b       	sbis	0x03, 4	; 3
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <__vector_3+0x116>
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <__vector_3+0x11e>
    168e:	80 91 9e 01 	lds	r24, 0x019E
    1692:	90 91 9f 01 	lds	r25, 0x019F
    1696:	a0 91 a0 01 	lds	r26, 0x01A0
    169a:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    169e:	1c 9b       	sbis	0x03, 4	; 3
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	a1 1d       	adc	r26, r1
    16a6:	b1 1d       	adc	r27, r1
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	a1 09       	sbc	r26, r1
    16ae:	b1 09       	sbc	r27, r1
    16b0:	80 93 9e 01 	sts	0x019E, r24
    16b4:	90 93 9f 01 	sts	0x019F, r25
    16b8:	a0 93 a0 01 	sts	0x01A0, r26
    16bc:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB5_past = PINB5_current;
    16c0:	40 93 a3 01 	sts	0x01A3, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_default>:


ISR(BADISR_vect){
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
	
}
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <exit>:
    16f0:	f8 94       	cli
    16f2:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <_exit>

000016f6 <__subsf3>:
    16f6:	50 58       	subi	r21, 0x80	; 128

000016f8 <__addsf3>:
    16f8:	bb 27       	eor	r27, r27
    16fa:	aa 27       	eor	r26, r26
    16fc:	0e d0       	rcall	.+28     	; 0x171a <__addsf3x>
    16fe:	70 c1       	rjmp	.+736    	; 0x19e0 <__fp_round>
    1700:	61 d1       	rcall	.+706    	; 0x19c4 <__fp_pscA>
    1702:	30 f0       	brcs	.+12     	; 0x1710 <__addsf3+0x18>
    1704:	66 d1       	rcall	.+716    	; 0x19d2 <__fp_pscB>
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__addsf3+0x18>
    1708:	31 f4       	brne	.+12     	; 0x1716 <__addsf3+0x1e>
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	11 f4       	brne	.+4      	; 0x1712 <__addsf3+0x1a>
    170e:	1e f4       	brtc	.+6      	; 0x1716 <__addsf3+0x1e>
    1710:	56 c1       	rjmp	.+684    	; 0x19be <__fp_nan>
    1712:	0e f4       	brtc	.+2      	; 0x1716 <__addsf3+0x1e>
    1714:	e0 95       	com	r30
    1716:	e7 fb       	bst	r30, 7
    1718:	4c c1       	rjmp	.+664    	; 0x19b2 <__fp_inf>

0000171a <__addsf3x>:
    171a:	e9 2f       	mov	r30, r25
    171c:	72 d1       	rcall	.+740    	; 0x1a02 <__fp_split3>
    171e:	80 f3       	brcs	.-32     	; 0x1700 <__addsf3+0x8>
    1720:	ba 17       	cp	r27, r26
    1722:	62 07       	cpc	r22, r18
    1724:	73 07       	cpc	r23, r19
    1726:	84 07       	cpc	r24, r20
    1728:	95 07       	cpc	r25, r21
    172a:	18 f0       	brcs	.+6      	; 0x1732 <__addsf3x+0x18>
    172c:	71 f4       	brne	.+28     	; 0x174a <__addsf3x+0x30>
    172e:	9e f5       	brtc	.+102    	; 0x1796 <__addsf3x+0x7c>
    1730:	8a c1       	rjmp	.+788    	; 0x1a46 <__fp_zero>
    1732:	0e f4       	brtc	.+2      	; 0x1736 <__addsf3x+0x1c>
    1734:	e0 95       	com	r30
    1736:	0b 2e       	mov	r0, r27
    1738:	ba 2f       	mov	r27, r26
    173a:	a0 2d       	mov	r26, r0
    173c:	0b 01       	movw	r0, r22
    173e:	b9 01       	movw	r22, r18
    1740:	90 01       	movw	r18, r0
    1742:	0c 01       	movw	r0, r24
    1744:	ca 01       	movw	r24, r20
    1746:	a0 01       	movw	r20, r0
    1748:	11 24       	eor	r1, r1
    174a:	ff 27       	eor	r31, r31
    174c:	59 1b       	sub	r21, r25
    174e:	99 f0       	breq	.+38     	; 0x1776 <__addsf3x+0x5c>
    1750:	59 3f       	cpi	r21, 0xF9	; 249
    1752:	50 f4       	brcc	.+20     	; 0x1768 <__addsf3x+0x4e>
    1754:	50 3e       	cpi	r21, 0xE0	; 224
    1756:	68 f1       	brcs	.+90     	; 0x17b2 <__addsf3x+0x98>
    1758:	1a 16       	cp	r1, r26
    175a:	f0 40       	sbci	r31, 0x00	; 0
    175c:	a2 2f       	mov	r26, r18
    175e:	23 2f       	mov	r18, r19
    1760:	34 2f       	mov	r19, r20
    1762:	44 27       	eor	r20, r20
    1764:	58 5f       	subi	r21, 0xF8	; 248
    1766:	f3 cf       	rjmp	.-26     	; 0x174e <__addsf3x+0x34>
    1768:	46 95       	lsr	r20
    176a:	37 95       	ror	r19
    176c:	27 95       	ror	r18
    176e:	a7 95       	ror	r26
    1770:	f0 40       	sbci	r31, 0x00	; 0
    1772:	53 95       	inc	r21
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__addsf3x+0x4e>
    1776:	7e f4       	brtc	.+30     	; 0x1796 <__addsf3x+0x7c>
    1778:	1f 16       	cp	r1, r31
    177a:	ba 0b       	sbc	r27, r26
    177c:	62 0b       	sbc	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	ba f0       	brmi	.+46     	; 0x17b2 <__addsf3x+0x98>
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	a1 f0       	breq	.+40     	; 0x17b0 <__addsf3x+0x96>
    1788:	ff 0f       	add	r31, r31
    178a:	bb 1f       	adc	r27, r27
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	c2 f7       	brpl	.-16     	; 0x1784 <__addsf3x+0x6a>
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <__addsf3x+0x98>
    1796:	ba 0f       	add	r27, r26
    1798:	62 1f       	adc	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	48 f4       	brcc	.+18     	; 0x17b2 <__addsf3x+0x98>
    17a0:	87 95       	ror	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	9e 3f       	cpi	r25, 0xFE	; 254
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <__addsf3x+0x96>
    17ae:	b3 cf       	rjmp	.-154    	; 0x1716 <__addsf3+0x1e>
    17b0:	93 95       	inc	r25
    17b2:	88 0f       	add	r24, r24
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <__addsf3x+0x9e>
    17b6:	99 27       	eor	r25, r25
    17b8:	ee 0f       	add	r30, r30
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	08 95       	ret

000017c0 <__cmpsf2>:
    17c0:	d4 d0       	rcall	.+424    	; 0x196a <__fp_cmp>
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <__cmpsf2+0x6>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret

000017c8 <__divsf3>:
    17c8:	0c d0       	rcall	.+24     	; 0x17e2 <__divsf3x>
    17ca:	0a c1       	rjmp	.+532    	; 0x19e0 <__fp_round>
    17cc:	02 d1       	rcall	.+516    	; 0x19d2 <__fp_pscB>
    17ce:	40 f0       	brcs	.+16     	; 0x17e0 <__divsf3+0x18>
    17d0:	f9 d0       	rcall	.+498    	; 0x19c4 <__fp_pscA>
    17d2:	30 f0       	brcs	.+12     	; 0x17e0 <__divsf3+0x18>
    17d4:	21 f4       	brne	.+8      	; 0x17de <__divsf3+0x16>
    17d6:	5f 3f       	cpi	r21, 0xFF	; 255
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <__divsf3+0x18>
    17da:	eb c0       	rjmp	.+470    	; 0x19b2 <__fp_inf>
    17dc:	51 11       	cpse	r21, r1
    17de:	34 c1       	rjmp	.+616    	; 0x1a48 <__fp_szero>
    17e0:	ee c0       	rjmp	.+476    	; 0x19be <__fp_nan>

000017e2 <__divsf3x>:
    17e2:	0f d1       	rcall	.+542    	; 0x1a02 <__fp_split3>
    17e4:	98 f3       	brcs	.-26     	; 0x17cc <__divsf3+0x4>

000017e6 <__divsf3_pse>:
    17e6:	99 23       	and	r25, r25
    17e8:	c9 f3       	breq	.-14     	; 0x17dc <__divsf3+0x14>
    17ea:	55 23       	and	r21, r21
    17ec:	b1 f3       	breq	.-20     	; 0x17da <__divsf3+0x12>
    17ee:	95 1b       	sub	r25, r21
    17f0:	55 0b       	sbc	r21, r21
    17f2:	bb 27       	eor	r27, r27
    17f4:	aa 27       	eor	r26, r26
    17f6:	62 17       	cp	r22, r18
    17f8:	73 07       	cpc	r23, r19
    17fa:	84 07       	cpc	r24, r20
    17fc:	38 f0       	brcs	.+14     	; 0x180c <__divsf3_pse+0x26>
    17fe:	9f 5f       	subi	r25, 0xFF	; 255
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	44 1f       	adc	r20, r20
    1808:	aa 1f       	adc	r26, r26
    180a:	a9 f3       	breq	.-22     	; 0x17f6 <__divsf3_pse+0x10>
    180c:	33 d0       	rcall	.+102    	; 0x1874 <__divsf3_pse+0x8e>
    180e:	0e 2e       	mov	r0, r30
    1810:	3a f0       	brmi	.+14     	; 0x1820 <__divsf3_pse+0x3a>
    1812:	e0 e8       	ldi	r30, 0x80	; 128
    1814:	30 d0       	rcall	.+96     	; 0x1876 <__divsf3_pse+0x90>
    1816:	91 50       	subi	r25, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	e6 95       	lsr	r30
    181c:	00 1c       	adc	r0, r0
    181e:	ca f7       	brpl	.-14     	; 0x1812 <__divsf3_pse+0x2c>
    1820:	29 d0       	rcall	.+82     	; 0x1874 <__divsf3_pse+0x8e>
    1822:	fe 2f       	mov	r31, r30
    1824:	27 d0       	rcall	.+78     	; 0x1874 <__divsf3_pse+0x8e>
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	bb 1f       	adc	r27, r27
    182e:	26 17       	cp	r18, r22
    1830:	37 07       	cpc	r19, r23
    1832:	48 07       	cpc	r20, r24
    1834:	ab 07       	cpc	r26, r27
    1836:	b0 e8       	ldi	r27, 0x80	; 128
    1838:	09 f0       	breq	.+2      	; 0x183c <__divsf3_pse+0x56>
    183a:	bb 0b       	sbc	r27, r27
    183c:	80 2d       	mov	r24, r0
    183e:	bf 01       	movw	r22, r30
    1840:	ff 27       	eor	r31, r31
    1842:	93 58       	subi	r25, 0x83	; 131
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	2a f0       	brmi	.+10     	; 0x1852 <__divsf3_pse+0x6c>
    1848:	9e 3f       	cpi	r25, 0xFE	; 254
    184a:	51 05       	cpc	r21, r1
    184c:	68 f0       	brcs	.+26     	; 0x1868 <__divsf3_pse+0x82>
    184e:	b1 c0       	rjmp	.+354    	; 0x19b2 <__fp_inf>
    1850:	fb c0       	rjmp	.+502    	; 0x1a48 <__fp_szero>
    1852:	5f 3f       	cpi	r21, 0xFF	; 255
    1854:	ec f3       	brlt	.-6      	; 0x1850 <__divsf3_pse+0x6a>
    1856:	98 3e       	cpi	r25, 0xE8	; 232
    1858:	dc f3       	brlt	.-10     	; 0x1850 <__divsf3_pse+0x6a>
    185a:	86 95       	lsr	r24
    185c:	77 95       	ror	r23
    185e:	67 95       	ror	r22
    1860:	b7 95       	ror	r27
    1862:	f7 95       	ror	r31
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c9 f7       	brne	.-14     	; 0x185a <__divsf3_pse+0x74>
    1868:	88 0f       	add	r24, r24
    186a:	91 1d       	adc	r25, r1
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	97 f9       	bld	r25, 7
    1872:	08 95       	ret
    1874:	e1 e0       	ldi	r30, 0x01	; 1
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	bb 1f       	adc	r27, r27
    187e:	62 17       	cp	r22, r18
    1880:	73 07       	cpc	r23, r19
    1882:	84 07       	cpc	r24, r20
    1884:	ba 07       	cpc	r27, r26
    1886:	20 f0       	brcs	.+8      	; 0x1890 <__divsf3_pse+0xaa>
    1888:	62 1b       	sub	r22, r18
    188a:	73 0b       	sbc	r23, r19
    188c:	84 0b       	sbc	r24, r20
    188e:	ba 0b       	sbc	r27, r26
    1890:	ee 1f       	adc	r30, r30
    1892:	88 f7       	brcc	.-30     	; 0x1876 <__divsf3_pse+0x90>
    1894:	e0 95       	com	r30
    1896:	08 95       	ret

00001898 <__fixunssfsi>:
    1898:	bc d0       	rcall	.+376    	; 0x1a12 <__fp_splitA>
    189a:	88 f0       	brcs	.+34     	; 0x18be <__fixunssfsi+0x26>
    189c:	9f 57       	subi	r25, 0x7F	; 127
    189e:	90 f0       	brcs	.+36     	; 0x18c4 <__fixunssfsi+0x2c>
    18a0:	b9 2f       	mov	r27, r25
    18a2:	99 27       	eor	r25, r25
    18a4:	b7 51       	subi	r27, 0x17	; 23
    18a6:	a0 f0       	brcs	.+40     	; 0x18d0 <__fixunssfsi+0x38>
    18a8:	d1 f0       	breq	.+52     	; 0x18de <__fixunssfsi+0x46>
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	1a f0       	brmi	.+6      	; 0x18ba <__fixunssfsi+0x22>
    18b4:	ba 95       	dec	r27
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <__fixunssfsi+0x12>
    18b8:	12 c0       	rjmp	.+36     	; 0x18de <__fixunssfsi+0x46>
    18ba:	b1 30       	cpi	r27, 0x01	; 1
    18bc:	81 f0       	breq	.+32     	; 0x18de <__fixunssfsi+0x46>
    18be:	c3 d0       	rcall	.+390    	; 0x1a46 <__fp_zero>
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	08 95       	ret
    18c4:	c0 c0       	rjmp	.+384    	; 0x1a46 <__fp_zero>
    18c6:	67 2f       	mov	r22, r23
    18c8:	78 2f       	mov	r23, r24
    18ca:	88 27       	eor	r24, r24
    18cc:	b8 5f       	subi	r27, 0xF8	; 248
    18ce:	39 f0       	breq	.+14     	; 0x18de <__fixunssfsi+0x46>
    18d0:	b9 3f       	cpi	r27, 0xF9	; 249
    18d2:	cc f3       	brlt	.-14     	; 0x18c6 <__fixunssfsi+0x2e>
    18d4:	86 95       	lsr	r24
    18d6:	77 95       	ror	r23
    18d8:	67 95       	ror	r22
    18da:	b3 95       	inc	r27
    18dc:	d9 f7       	brne	.-10     	; 0x18d4 <__fixunssfsi+0x3c>
    18de:	3e f4       	brtc	.+14     	; 0x18ee <__fixunssfsi+0x56>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	08 95       	ret

000018f0 <__floatunsisf>:
    18f0:	e8 94       	clt
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <__floatsisf+0x12>

000018f4 <__floatsisf>:
    18f4:	97 fb       	bst	r25, 7
    18f6:	3e f4       	brtc	.+14     	; 0x1906 <__floatsisf+0x12>
    18f8:	90 95       	com	r25
    18fa:	80 95       	com	r24
    18fc:	70 95       	com	r23
    18fe:	61 95       	neg	r22
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	99 23       	and	r25, r25
    1908:	a9 f0       	breq	.+42     	; 0x1934 <__floatsisf+0x40>
    190a:	f9 2f       	mov	r31, r25
    190c:	96 e9       	ldi	r25, 0x96	; 150
    190e:	bb 27       	eor	r27, r27
    1910:	93 95       	inc	r25
    1912:	f6 95       	lsr	r31
    1914:	87 95       	ror	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b7 95       	ror	r27
    191c:	f1 11       	cpse	r31, r1
    191e:	f8 cf       	rjmp	.-16     	; 0x1910 <__floatsisf+0x1c>
    1920:	fa f4       	brpl	.+62     	; 0x1960 <__floatsisf+0x6c>
    1922:	bb 0f       	add	r27, r27
    1924:	11 f4       	brne	.+4      	; 0x192a <__floatsisf+0x36>
    1926:	60 ff       	sbrs	r22, 0
    1928:	1b c0       	rjmp	.+54     	; 0x1960 <__floatsisf+0x6c>
    192a:	6f 5f       	subi	r22, 0xFF	; 255
    192c:	7f 4f       	sbci	r23, 0xFF	; 255
    192e:	8f 4f       	sbci	r24, 0xFF	; 255
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	16 c0       	rjmp	.+44     	; 0x1960 <__floatsisf+0x6c>
    1934:	88 23       	and	r24, r24
    1936:	11 f0       	breq	.+4      	; 0x193c <__floatsisf+0x48>
    1938:	96 e9       	ldi	r25, 0x96	; 150
    193a:	11 c0       	rjmp	.+34     	; 0x195e <__floatsisf+0x6a>
    193c:	77 23       	and	r23, r23
    193e:	21 f0       	breq	.+8      	; 0x1948 <__floatsisf+0x54>
    1940:	9e e8       	ldi	r25, 0x8E	; 142
    1942:	87 2f       	mov	r24, r23
    1944:	76 2f       	mov	r23, r22
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <__floatsisf+0x5e>
    1948:	66 23       	and	r22, r22
    194a:	71 f0       	breq	.+28     	; 0x1968 <__floatsisf+0x74>
    194c:	96 e8       	ldi	r25, 0x86	; 134
    194e:	86 2f       	mov	r24, r22
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	2a f0       	brmi	.+10     	; 0x1960 <__floatsisf+0x6c>
    1956:	9a 95       	dec	r25
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	da f7       	brpl	.-10     	; 0x1956 <__floatsisf+0x62>
    1960:	88 0f       	add	r24, r24
    1962:	96 95       	lsr	r25
    1964:	87 95       	ror	r24
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret

0000196a <__fp_cmp>:
    196a:	99 0f       	add	r25, r25
    196c:	00 08       	sbc	r0, r0
    196e:	55 0f       	add	r21, r21
    1970:	aa 0b       	sbc	r26, r26
    1972:	e0 e8       	ldi	r30, 0x80	; 128
    1974:	fe ef       	ldi	r31, 0xFE	; 254
    1976:	16 16       	cp	r1, r22
    1978:	17 06       	cpc	r1, r23
    197a:	e8 07       	cpc	r30, r24
    197c:	f9 07       	cpc	r31, r25
    197e:	c0 f0       	brcs	.+48     	; 0x19b0 <__fp_cmp+0x46>
    1980:	12 16       	cp	r1, r18
    1982:	13 06       	cpc	r1, r19
    1984:	e4 07       	cpc	r30, r20
    1986:	f5 07       	cpc	r31, r21
    1988:	98 f0       	brcs	.+38     	; 0x19b0 <__fp_cmp+0x46>
    198a:	62 1b       	sub	r22, r18
    198c:	73 0b       	sbc	r23, r19
    198e:	84 0b       	sbc	r24, r20
    1990:	95 0b       	sbc	r25, r21
    1992:	39 f4       	brne	.+14     	; 0x19a2 <__fp_cmp+0x38>
    1994:	0a 26       	eor	r0, r26
    1996:	61 f0       	breq	.+24     	; 0x19b0 <__fp_cmp+0x46>
    1998:	23 2b       	or	r18, r19
    199a:	24 2b       	or	r18, r20
    199c:	25 2b       	or	r18, r21
    199e:	21 f4       	brne	.+8      	; 0x19a8 <__fp_cmp+0x3e>
    19a0:	08 95       	ret
    19a2:	0a 26       	eor	r0, r26
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <__fp_cmp+0x3e>
    19a6:	a1 40       	sbci	r26, 0x01	; 1
    19a8:	a6 95       	lsr	r26
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	81 1d       	adc	r24, r1
    19ae:	81 1d       	adc	r24, r1
    19b0:	08 95       	ret

000019b2 <__fp_inf>:
    19b2:	97 f9       	bld	r25, 7
    19b4:	9f 67       	ori	r25, 0x7F	; 127
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	08 95       	ret

000019be <__fp_nan>:
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	80 ec       	ldi	r24, 0xC0	; 192
    19c2:	08 95       	ret

000019c4 <__fp_pscA>:
    19c4:	00 24       	eor	r0, r0
    19c6:	0a 94       	dec	r0
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	09 06       	cpc	r0, r25
    19d0:	08 95       	ret

000019d2 <__fp_pscB>:
    19d2:	00 24       	eor	r0, r0
    19d4:	0a 94       	dec	r0
    19d6:	12 16       	cp	r1, r18
    19d8:	13 06       	cpc	r1, r19
    19da:	14 06       	cpc	r1, r20
    19dc:	05 06       	cpc	r0, r21
    19de:	08 95       	ret

000019e0 <__fp_round>:
    19e0:	09 2e       	mov	r0, r25
    19e2:	03 94       	inc	r0
    19e4:	00 0c       	add	r0, r0
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__fp_round+0xc>
    19e8:	88 23       	and	r24, r24
    19ea:	52 f0       	brmi	.+20     	; 0x1a00 <__fp_round+0x20>
    19ec:	bb 0f       	add	r27, r27
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <__fp_round+0x20>
    19f0:	bf 2b       	or	r27, r31
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <__fp_round+0x18>
    19f4:	60 ff       	sbrs	r22, 0
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <__fp_round+0x20>
    19f8:	6f 5f       	subi	r22, 0xFF	; 255
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__fp_split3>:
    1a02:	57 fd       	sbrc	r21, 7
    1a04:	90 58       	subi	r25, 0x80	; 128
    1a06:	44 0f       	add	r20, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <__fp_splitA+0x10>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <__fp_splitA+0x1a>
    1a10:	47 95       	ror	r20

00001a12 <__fp_splitA>:
    1a12:	88 0f       	add	r24, r24
    1a14:	97 fb       	bst	r25, 7
    1a16:	99 1f       	adc	r25, r25
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <__fp_splitA+0x20>
    1a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1c:	79 f0       	breq	.+30     	; 0x1a3c <__fp_splitA+0x2a>
    1a1e:	87 95       	ror	r24
    1a20:	08 95       	ret
    1a22:	12 16       	cp	r1, r18
    1a24:	13 06       	cpc	r1, r19
    1a26:	14 06       	cpc	r1, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	f2 cf       	rjmp	.-28     	; 0x1a10 <__fp_split3+0xe>
    1a2c:	46 95       	lsr	r20
    1a2e:	f1 df       	rcall	.-30     	; 0x1a12 <__fp_splitA>
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <__fp_splitA+0x30>
    1a32:	16 16       	cp	r1, r22
    1a34:	17 06       	cpc	r1, r23
    1a36:	18 06       	cpc	r1, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	f1 cf       	rjmp	.-30     	; 0x1a1e <__fp_splitA+0xc>
    1a3c:	86 95       	lsr	r24
    1a3e:	71 05       	cpc	r23, r1
    1a40:	61 05       	cpc	r22, r1
    1a42:	08 94       	sec
    1a44:	08 95       	ret

00001a46 <__fp_zero>:
    1a46:	e8 94       	clt

00001a48 <__fp_szero>:
    1a48:	bb 27       	eor	r27, r27
    1a4a:	66 27       	eor	r22, r22
    1a4c:	77 27       	eor	r23, r23
    1a4e:	cb 01       	movw	r24, r22
    1a50:	97 f9       	bld	r25, 7
    1a52:	08 95       	ret

00001a54 <__gesf2>:
    1a54:	8a df       	rcall	.-236    	; 0x196a <__fp_cmp>
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <__gesf2+0x6>
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	08 95       	ret

00001a5c <__mulsf3>:
    1a5c:	0b d0       	rcall	.+22     	; 0x1a74 <__mulsf3x>
    1a5e:	c0 cf       	rjmp	.-128    	; 0x19e0 <__fp_round>
    1a60:	b1 df       	rcall	.-158    	; 0x19c4 <__fp_pscA>
    1a62:	28 f0       	brcs	.+10     	; 0x1a6e <__mulsf3+0x12>
    1a64:	b6 df       	rcall	.-148    	; 0x19d2 <__fp_pscB>
    1a66:	18 f0       	brcs	.+6      	; 0x1a6e <__mulsf3+0x12>
    1a68:	95 23       	and	r25, r21
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <__mulsf3+0x12>
    1a6c:	a2 cf       	rjmp	.-188    	; 0x19b2 <__fp_inf>
    1a6e:	a7 cf       	rjmp	.-178    	; 0x19be <__fp_nan>
    1a70:	11 24       	eor	r1, r1
    1a72:	ea cf       	rjmp	.-44     	; 0x1a48 <__fp_szero>

00001a74 <__mulsf3x>:
    1a74:	c6 df       	rcall	.-116    	; 0x1a02 <__fp_split3>
    1a76:	a0 f3       	brcs	.-24     	; 0x1a60 <__mulsf3+0x4>

00001a78 <__mulsf3_pse>:
    1a78:	95 9f       	mul	r25, r21
    1a7a:	d1 f3       	breq	.-12     	; 0x1a70 <__mulsf3+0x14>
    1a7c:	95 0f       	add	r25, r21
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	55 1f       	adc	r21, r21
    1a82:	62 9f       	mul	r22, r18
    1a84:	f0 01       	movw	r30, r0
    1a86:	72 9f       	mul	r23, r18
    1a88:	bb 27       	eor	r27, r27
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	b1 1d       	adc	r27, r1
    1a8e:	63 9f       	mul	r22, r19
    1a90:	aa 27       	eor	r26, r26
    1a92:	f0 0d       	add	r31, r0
    1a94:	b1 1d       	adc	r27, r1
    1a96:	aa 1f       	adc	r26, r26
    1a98:	64 9f       	mul	r22, r20
    1a9a:	66 27       	eor	r22, r22
    1a9c:	b0 0d       	add	r27, r0
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	82 9f       	mul	r24, r18
    1aa4:	22 27       	eor	r18, r18
    1aa6:	b0 0d       	add	r27, r0
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	62 1f       	adc	r22, r18
    1aac:	73 9f       	mul	r23, r19
    1aae:	b0 0d       	add	r27, r0
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	62 1f       	adc	r22, r18
    1ab4:	83 9f       	mul	r24, r19
    1ab6:	a0 0d       	add	r26, r0
    1ab8:	61 1d       	adc	r22, r1
    1aba:	22 1f       	adc	r18, r18
    1abc:	74 9f       	mul	r23, r20
    1abe:	33 27       	eor	r19, r19
    1ac0:	a0 0d       	add	r26, r0
    1ac2:	61 1d       	adc	r22, r1
    1ac4:	23 1f       	adc	r18, r19
    1ac6:	84 9f       	mul	r24, r20
    1ac8:	60 0d       	add	r22, r0
    1aca:	21 1d       	adc	r18, r1
    1acc:	82 2f       	mov	r24, r18
    1ace:	76 2f       	mov	r23, r22
    1ad0:	6a 2f       	mov	r22, r26
    1ad2:	11 24       	eor	r1, r1
    1ad4:	9f 57       	subi	r25, 0x7F	; 127
    1ad6:	50 40       	sbci	r21, 0x00	; 0
    1ad8:	8a f0       	brmi	.+34     	; 0x1afc <__mulsf3_pse+0x84>
    1ada:	e1 f0       	breq	.+56     	; 0x1b14 <__mulsf3_pse+0x9c>
    1adc:	88 23       	and	r24, r24
    1ade:	4a f0       	brmi	.+18     	; 0x1af2 <__mulsf3_pse+0x7a>
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	a9 f7       	brne	.-22     	; 0x1adc <__mulsf3_pse+0x64>
    1af2:	9e 3f       	cpi	r25, 0xFE	; 254
    1af4:	51 05       	cpc	r21, r1
    1af6:	70 f0       	brcs	.+28     	; 0x1b14 <__mulsf3_pse+0x9c>
    1af8:	5c cf       	rjmp	.-328    	; 0x19b2 <__fp_inf>
    1afa:	a6 cf       	rjmp	.-180    	; 0x1a48 <__fp_szero>
    1afc:	5f 3f       	cpi	r21, 0xFF	; 255
    1afe:	ec f3       	brlt	.-6      	; 0x1afa <__mulsf3_pse+0x82>
    1b00:	98 3e       	cpi	r25, 0xE8	; 232
    1b02:	dc f3       	brlt	.-10     	; 0x1afa <__mulsf3_pse+0x82>
    1b04:	86 95       	lsr	r24
    1b06:	77 95       	ror	r23
    1b08:	67 95       	ror	r22
    1b0a:	b7 95       	ror	r27
    1b0c:	f7 95       	ror	r31
    1b0e:	e7 95       	ror	r30
    1b10:	9f 5f       	subi	r25, 0xFF	; 255
    1b12:	c1 f7       	brne	.-16     	; 0x1b04 <__mulsf3_pse+0x8c>
    1b14:	fe 2b       	or	r31, r30
    1b16:	88 0f       	add	r24, r24
    1b18:	91 1d       	adc	r25, r1
    1b1a:	96 95       	lsr	r25
    1b1c:	87 95       	ror	r24
    1b1e:	97 f9       	bld	r25, 7
    1b20:	08 95       	ret

00001b22 <__mulsi3>:
    1b22:	62 9f       	mul	r22, r18
    1b24:	d0 01       	movw	r26, r0
    1b26:	73 9f       	mul	r23, r19
    1b28:	f0 01       	movw	r30, r0
    1b2a:	82 9f       	mul	r24, r18
    1b2c:	e0 0d       	add	r30, r0
    1b2e:	f1 1d       	adc	r31, r1
    1b30:	64 9f       	mul	r22, r20
    1b32:	e0 0d       	add	r30, r0
    1b34:	f1 1d       	adc	r31, r1
    1b36:	92 9f       	mul	r25, r18
    1b38:	f0 0d       	add	r31, r0
    1b3a:	83 9f       	mul	r24, r19
    1b3c:	f0 0d       	add	r31, r0
    1b3e:	74 9f       	mul	r23, r20
    1b40:	f0 0d       	add	r31, r0
    1b42:	65 9f       	mul	r22, r21
    1b44:	f0 0d       	add	r31, r0
    1b46:	99 27       	eor	r25, r25
    1b48:	72 9f       	mul	r23, r18
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	e1 1d       	adc	r30, r1
    1b4e:	f9 1f       	adc	r31, r25
    1b50:	63 9f       	mul	r22, r19
    1b52:	b0 0d       	add	r27, r0
    1b54:	e1 1d       	adc	r30, r1
    1b56:	f9 1f       	adc	r31, r25
    1b58:	bd 01       	movw	r22, r26
    1b5a:	cf 01       	movw	r24, r30
    1b5c:	11 24       	eor	r1, r1
    1b5e:	08 95       	ret

00001b60 <__udivmodhi4>:
    1b60:	aa 1b       	sub	r26, r26
    1b62:	bb 1b       	sub	r27, r27
    1b64:	51 e1       	ldi	r21, 0x11	; 17
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <__udivmodhi4_ep>

00001b68 <__udivmodhi4_loop>:
    1b68:	aa 1f       	adc	r26, r26
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	a6 17       	cp	r26, r22
    1b6e:	b7 07       	cpc	r27, r23
    1b70:	10 f0       	brcs	.+4      	; 0x1b76 <__udivmodhi4_ep>
    1b72:	a6 1b       	sub	r26, r22
    1b74:	b7 0b       	sbc	r27, r23

00001b76 <__udivmodhi4_ep>:
    1b76:	88 1f       	adc	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	5a 95       	dec	r21
    1b7c:	a9 f7       	brne	.-22     	; 0x1b68 <__udivmodhi4_loop>
    1b7e:	80 95       	com	r24
    1b80:	90 95       	com	r25
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	08 95       	ret

00001b88 <__udivmodsi4>:
    1b88:	a1 e2       	ldi	r26, 0x21	; 33
    1b8a:	1a 2e       	mov	r1, r26
    1b8c:	aa 1b       	sub	r26, r26
    1b8e:	bb 1b       	sub	r27, r27
    1b90:	fd 01       	movw	r30, r26
    1b92:	0d c0       	rjmp	.+26     	; 0x1bae <__udivmodsi4_ep>

00001b94 <__udivmodsi4_loop>:
    1b94:	aa 1f       	adc	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	ee 1f       	adc	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	a2 17       	cp	r26, r18
    1b9e:	b3 07       	cpc	r27, r19
    1ba0:	e4 07       	cpc	r30, r20
    1ba2:	f5 07       	cpc	r31, r21
    1ba4:	20 f0       	brcs	.+8      	; 0x1bae <__udivmodsi4_ep>
    1ba6:	a2 1b       	sub	r26, r18
    1ba8:	b3 0b       	sbc	r27, r19
    1baa:	e4 0b       	sbc	r30, r20
    1bac:	f5 0b       	sbc	r31, r21

00001bae <__udivmodsi4_ep>:
    1bae:	66 1f       	adc	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	1a 94       	dec	r1
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <__udivmodsi4_loop>
    1bba:	60 95       	com	r22
    1bbc:	70 95       	com	r23
    1bbe:	80 95       	com	r24
    1bc0:	90 95       	com	r25
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	bd 01       	movw	r22, r26
    1bc8:	cf 01       	movw	r24, r30
    1bca:	08 95       	ret

00001bcc <_exit>:
    1bcc:	f8 94       	cli

00001bce <__stop_program>:
    1bce:	ff cf       	rjmp	.-2      	; 0x1bce <__stop_program>

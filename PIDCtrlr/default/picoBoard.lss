
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001728  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  0000179c  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000006d8  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000161c  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007b5  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000012dd  00000000  00000000  00003d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004e0  00000000  00000000  00005004  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008df  00000000  00000000  000054e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d6d  00000000  00000000  00005dc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_3>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_5>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_16>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <HexChars>:
      68:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e8 e2       	ldi	r30, 0x28	; 40
      8e:	f7 e1       	ldi	r31, 0x17	; 23
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	a0 30       	cpi	r26, 0x00	; 0
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 30       	cpi	r26, 0x02	; 2
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 a0 00 	call	0x140	; 0x140 <main>
      b0:	0c 94 24 09 	jmp	0x1248	; 0x1248 <exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_default>

000000b8 <pwm_setup>:

#define TICKS_PER_ROTATION		128

void pwm_setup(void){

	PWM_timer1_On_Pin9();
      b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <PWM_timer1_On_Pin9>
	PWM_timer1_On_Pin10();
      bc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <PWM_timer1_On_Pin10>

	// 20 ms period
	timer1PWMInitICR(5000);
      c0:	88 e8       	ldi	r24, 0x88	; 136
      c2:	93 e1       	ldi	r25, 0x13	; 19
      c4:	0e 94 95 01 	call	0x32a	; 0x32a <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
      c8:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
      ca:	22 9a       	sbi	0x04, 2	; 4
}
      cc:	08 95       	ret

000000ce <setup_hardware>:

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
      ce:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
      d0:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
      d2:	0e 94 6b 07 	call	0xed6	; 0xed6 <uartInit>
	uartSetBaudRate(0,115200);
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	52 ec       	ldi	r21, 0xC2	; 194
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	0e 94 4a 05 	call	0xa94	; 0xa94 <uartSetBaudRate>
	rprintfInit(uart0SendByte);
      e4:	8f e8       	ldi	r24, 0x8F	; 143
      e6:	95 e0       	ldi	r25, 0x05	; 5
      e8:	0e 94 87 02 	call	0x50e	; 0x50e <rprintfInit>

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
      ec:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
      ee:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
      f0:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
      f2:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
      f4:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
      f6:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
      f8:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
      fa:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 1a 02 	call	0x434	; 0x434 <init_timer0>
	init_timer1(TIMER_CLK_64);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 28 02 	call	0x450	; 0x450 <init_timer1>
	pwm_setup();
     108:	0e 94 5c 00 	call	0xb8	; 0xb8 <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     10c:	e8 e6       	ldi	r30, 0x68	; 104
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	84 60       	ori	r24, 0x04	; 4
     114:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	8c 91       	ld	r24, X
     11c:	80 68       	ori	r24, 0x80	; 128
     11e:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     120:	80 81       	ld	r24, Z
     122:	81 60       	ori	r24, 0x01	; 1
     124:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     126:	eb e6       	ldi	r30, 0x6B	; 107
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	81 60       	ori	r24, 0x01	; 1
     12e:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     130:	80 81       	ld	r24, Z
     132:	80 61       	ori	r24, 0x10	; 16
     134:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     136:	80 81       	ld	r24, Z
     138:	80 62       	ori	r24, 0x20	; 32
     13a:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     13c:	78 94       	sei

}
     13e:	08 95       	ret

00000140 <main>:



int main(void){
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	28 97       	sbiw	r28, 0x08	; 8
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
	s32 l_count_current = 0;
	s32 l_count_previous = 0;
	s32 r_count_current = 0;
	s32 r_count_previous = 0;
	
	setup_hardware();
     174:	0e 94 67 00 	call	0xce	; 0xce <setup_hardware>
	PWM_timer1_Set_Pin9(500);
     178:	84 ef       	ldi	r24, 0xF4	; 244
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <PWM_timer1_Set_Pin9>
	PWM_timer1_Set_Pin10(500);
     180:	84 ef       	ldi	r24, 0xF4	; 244
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 fe 01 	call	0x3fc	; 0x3fc <PWM_timer1_Set_Pin10>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	a0 e0       	ldi	r26, 0x00	; 0
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	8d 83       	std	Y+5, r24	; 0x05
     192:	9e 83       	std	Y+6, r25	; 0x06
     194:	af 83       	std	Y+7, r26	; 0x07
     196:	b8 87       	std	Y+8, r27	; 0x08
     198:	19 82       	std	Y+1, r1	; 0x01
     19a:	1a 82       	std	Y+2, r1	; 0x02
     19c:	1b 82       	std	Y+3, r1	; 0x03
     19e:	1c 82       	std	Y+4, r1	; 0x04
     1a0:	66 24       	eor	r6, r6
     1a2:	77 24       	eor	r7, r7
     1a4:	43 01       	movw	r8, r6
	
/**/
	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     1a6:	0e 94 3a 02 	call	0x474	; 0x474 <get_timer0_overflow>
     1aa:	16 b5       	in	r17, 0x26	; 38
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsi3>
     1b8:	61 0f       	add	r22, r17
     1ba:	71 1d       	adc	r23, r1
     1bc:	81 1d       	adc	r24, r1
     1be:	91 1d       	adc	r25, r1
     1c0:	0e 94 24 0a 	call	0x1448	; 0x1448 <__floatunsisf>
     1c4:	2e e0       	ldi	r18, 0x0E	; 14
     1c6:	3d e2       	ldi	r19, 0x2D	; 45
     1c8:	42 e3       	ldi	r20, 0x32	; 50
     1ca:	5d e3       	ldi	r21, 0x3D	; 61
     1cc:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3>
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e4       	ldi	r19, 0x40	; 64
     1d4:	4c e1       	ldi	r20, 0x1C	; 28
     1d6:	56 e4       	ldi	r21, 0x46	; 70
     1d8:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     1dc:	1b 01       	movw	r2, r22
     1de:	2c 01       	movw	r4, r24
		
		l_count_current = get_left_count();
     1e0:	0e 94 1e 08 	call	0x103c	; 0x103c <get_left_count>
     1e4:	7b 01       	movw	r14, r22
     1e6:	8c 01       	movw	r16, r24
		r_count_current = get_right_count();
     1e8:	0e 94 27 08 	call	0x104e	; 0x104e <get_right_count>
     1ec:	5b 01       	movw	r10, r22
     1ee:	6c 01       	movw	r12, r24
		
		
		if(l_count_current != l_count_previous){
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	9a 81       	ldd	r25, Y+2	; 0x02
     1f4:	ab 81       	ldd	r26, Y+3	; 0x03
     1f6:	bc 81       	ldd	r27, Y+4	; 0x04
     1f8:	e8 16       	cp	r14, r24
     1fa:	f9 06       	cpc	r15, r25
     1fc:	0a 07       	cpc	r16, r26
     1fe:	1b 07       	cpc	r17, r27
     200:	49 f0       	breq	.+18     	; 0x214 <main+0xd4>
			l_count_current = get_left_count();
     202:	0e 94 1e 08 	call	0x103c	; 0x103c <get_left_count>
     206:	ac 01       	movw	r20, r24
     208:	cb 01       	movw	r24, r22
     20a:	da 01       	movw	r26, r20
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	ab 83       	std	Y+3, r26	; 0x03
     212:	bc 83       	std	Y+4, r27	; 0x04
			l_count_previous = l_count_current;
			
			elapsed_time_l_previous = elapsed_time_l;
		}
		
		if(r_count_current != r_count_previous){
     214:	a6 14       	cp	r10, r6
     216:	b7 04       	cpc	r11, r7
     218:	c8 04       	cpc	r12, r8
     21a:	d9 04       	cpc	r13, r9
     21c:	21 f2       	breq	.-120    	; 0x1a6 <main+0x66>
			r_count_current = get_right_count();
     21e:	0e 94 27 08 	call	0x104e	; 0x104e <get_right_count>
     222:	7b 01       	movw	r14, r22
     224:	8c 01       	movw	r16, r24
			ticks_per_sec_r = (r_count_current - r_count_previous)/(elapsed_time_r - elapsed_time_r_previous);
			
			//rprintf("\tRight: ");
			rprintfFloat(5,ticks_per_sec_r/(TICKS_PER_ROTATION));
     226:	c8 01       	movw	r24, r16
     228:	b7 01       	movw	r22, r14
     22a:	66 19       	sub	r22, r6
     22c:	77 09       	sbc	r23, r7
     22e:	88 09       	sbc	r24, r8
     230:	99 09       	sbc	r25, r9
     232:	0e 94 26 0a 	call	0x144c	; 0x144c <__floatsisf>
     236:	5b 01       	movw	r10, r22
     238:	6c 01       	movw	r12, r24
     23a:	c2 01       	movw	r24, r4
     23c:	b1 01       	movw	r22, r2
     23e:	2d 81       	ldd	r18, Y+5	; 0x05
     240:	3e 81       	ldd	r19, Y+6	; 0x06
     242:	4f 81       	ldd	r20, Y+7	; 0x07
     244:	58 85       	ldd	r21, Y+8	; 0x08
     246:	0e 94 27 09 	call	0x124e	; 0x124e <__subsf3>
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	5c e3       	ldi	r21, 0x3C	; 60
     25e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3>
     262:	ab 01       	movw	r20, r22
     264:	bc 01       	movw	r22, r24
     266:	85 e0       	ldi	r24, 0x05	; 5
     268:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <rprintfFloat>
			rprintfCRLF();
     26c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <rprintfCRLF>
     270:	2d 82       	std	Y+5, r2	; 0x05
     272:	3e 82       	std	Y+6, r3	; 0x06
     274:	4f 82       	std	Y+7, r4	; 0x07
     276:	58 86       	std	Y+8, r5	; 0x08
     278:	37 01       	movw	r6, r14
     27a:	48 01       	movw	r8, r16
     27c:	94 cf       	rjmp	.-216    	; 0x1a6 <main+0x66>

0000027e <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
     27e:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
     280:	80 91 81 00 	lds	r24, 0x0081
     284:	88 60       	ori	r24, 0x08	; 8
     286:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     28a:	80 91 81 00 	lds	r24, 0x0081
     28e:	8f 7e       	andi	r24, 0xEF	; 239
     290:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     294:	99 30       	cpi	r25, 0x09	; 9
     296:	49 f4       	brne	.+18     	; 0x2aa <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     298:	80 91 80 00 	lds	r24, 0x0080
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     2a2:	80 91 80 00 	lds	r24, 0x0080
     2a6:	8e 7f       	andi	r24, 0xFE	; 254
     2a8:	0e c0       	rjmp	.+28     	; 0x2c6 <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
     2aa:	9a 30       	cpi	r25, 0x0A	; 10
     2ac:	21 f4       	brne	.+8      	; 0x2b6 <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     2ae:	80 91 80 00 	lds	r24, 0x0080
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     2b6:	80 91 80 00 	lds	r24, 0x0080
     2ba:	8d 7f       	andi	r24, 0xFD	; 253
     2bc:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     2c0:	80 91 80 00 	lds	r24, 0x0080
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
     2ca:	10 92 89 00 	sts	0x0089, r1
     2ce:	10 92 88 00 	sts	0x0088, r1
}
     2d2:	08 95       	ret

000002d4 <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
     2d4:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
     2d6:	80 91 81 00 	lds	r24, 0x0081
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     2e0:	80 91 81 00 	lds	r24, 0x0081
     2e4:	8f 7e       	andi	r24, 0xEF	; 239
     2e6:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     2ea:	99 30       	cpi	r25, 0x09	; 9
     2ec:	49 f4       	brne	.+18     	; 0x300 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     2ee:	80 91 80 00 	lds	r24, 0x0080
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     2f8:	80 91 80 00 	lds	r24, 0x0080
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	0e c0       	rjmp	.+28     	; 0x31c <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
     300:	9a 30       	cpi	r25, 0x0A	; 10
     302:	21 f4       	brne	.+8      	; 0x30c <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     304:	80 91 80 00 	lds	r24, 0x0080
     308:	82 60       	ori	r24, 0x02	; 2
     30a:	03 c0       	rjmp	.+6      	; 0x312 <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     30c:	80 91 80 00 	lds	r24, 0x0080
     310:	8d 7f       	andi	r24, 0xFD	; 253
     312:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     316:	80 91 80 00 	lds	r24, 0x0080
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     320:	10 92 8b 00 	sts	0x008B, r1
     324:	10 92 8a 00 	sts	0x008A, r1
}
     328:	08 95       	ret

0000032a <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     32a:	e0 e8       	ldi	r30, 0x80	; 128
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	20 81       	ld	r18, Z
     330:	2e 7f       	andi	r18, 0xFE	; 254
     332:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     334:	20 81       	ld	r18, Z
     336:	22 60       	ori	r18, 0x02	; 2
     338:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     33a:	e1 e8       	ldi	r30, 0x81	; 129
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	20 81       	ld	r18, Z
     340:	28 60       	ori	r18, 0x08	; 8
     342:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     344:	20 81       	ld	r18, Z
     346:	20 61       	ori	r18, 0x10	; 16
     348:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     34a:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     34c:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
     34e:	90 93 87 00 	sts	0x0087, r25
     352:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
     356:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
     358:	10 92 89 00 	sts	0x0089, r1
     35c:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     360:	10 92 8b 00 	sts	0x008B, r1
     364:	10 92 8a 00 	sts	0x008A, r1
}
     368:	08 95       	ret

0000036a <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
     36a:	84 b5       	in	r24, 0x24	; 36
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     370:	84 b5       	in	r24, 0x24	; 36
     372:	8f 7e       	andi	r24, 0xEF	; 239
     374:	84 bd       	out	0x24, r24	; 36
}
     376:	08 95       	ret

00000378 <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
     378:	84 b5       	in	r24, 0x24	; 36
     37a:	8f 77       	andi	r24, 0x7F	; 127
     37c:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     37e:	84 b5       	in	r24, 0x24	; 36
     380:	8f 7b       	andi	r24, 0xBF	; 191
     382:	84 bd       	out	0x24, r24	; 36
}
     384:	08 95       	ret

00000386 <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
     386:	e0 e8       	ldi	r30, 0x80	; 128
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	8f 7d       	andi	r24, 0xDF	; 223
     38e:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     390:	80 81       	ld	r24, Z
     392:	8f 7e       	andi	r24, 0xEF	; 239
     394:	80 83       	st	Z, r24
}
     396:	08 95       	ret

00000398 <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
     398:	e0 e8       	ldi	r30, 0x80	; 128
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	8f 77       	andi	r24, 0x7F	; 127
     3a0:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     3a2:	80 81       	ld	r24, Z
     3a4:	8f 7b       	andi	r24, 0xBF	; 191
     3a6:	80 83       	st	Z, r24
}
     3a8:	08 95       	ret

000003aa <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
     3aa:	84 b5       	in	r24, 0x24	; 36
     3ac:	80 62       	ori	r24, 0x20	; 32
     3ae:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     3b0:	84 b5       	in	r24, 0x24	; 36
     3b2:	8f 7e       	andi	r24, 0xEF	; 239
     3b4:	84 bd       	out	0x24, r24	; 36
}
     3b6:	08 95       	ret

000003b8 <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
     3b8:	84 b5       	in	r24, 0x24	; 36
     3ba:	80 68       	ori	r24, 0x80	; 128
     3bc:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     3be:	84 b5       	in	r24, 0x24	; 36
     3c0:	8f 7b       	andi	r24, 0xBF	; 191
     3c2:	84 bd       	out	0x24, r24	; 36
}
     3c4:	08 95       	ret

000003c6 <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
     3c6:	e0 e8       	ldi	r30, 0x80	; 128
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	80 62       	ori	r24, 0x20	; 32
     3ce:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     3d0:	80 81       	ld	r24, Z
     3d2:	8f 7e       	andi	r24, 0xEF	; 239
     3d4:	80 83       	st	Z, r24
}
     3d6:	08 95       	ret

000003d8 <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
     3d8:	e0 e8       	ldi	r30, 0x80	; 128
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	80 68       	ori	r24, 0x80	; 128
     3e0:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     3e2:	80 81       	ld	r24, Z
     3e4:	8f 7b       	andi	r24, 0xBF	; 191
     3e6:	80 83       	st	Z, r24
}
     3e8:	08 95       	ret

000003ea <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
     3ea:	88 bd       	out	0x28, r24	; 40
}
     3ec:	08 95       	ret

000003ee <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
     3ee:	87 bd       	out	0x27, r24	; 39
}
     3f0:	08 95       	ret

000003f2 <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1B = duty;
     3f2:	90 93 8b 00 	sts	0x008B, r25
     3f6:	80 93 8a 00 	sts	0x008A, r24
}
     3fa:	08 95       	ret

000003fc <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1A = duty;
     3fc:	90 93 89 00 	sts	0x0089, r25
     400:	80 93 88 00 	sts	0x0088, r24
}
     404:	08 95       	ret

00000406 <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     406:	10 92 ae 01 	sts	0x01AE, r1
     40a:	10 92 af 01 	sts	0x01AF, r1
     40e:	10 92 b0 01 	sts	0x01B0, r1
     412:	10 92 b1 01 	sts	0x01B1, r1
     416:	16 bc       	out	0x26, r1	; 38
}
     418:	08 95       	ret

0000041a <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     41a:	10 92 aa 01 	sts	0x01AA, r1
     41e:	10 92 ab 01 	sts	0x01AB, r1
     422:	10 92 ac 01 	sts	0x01AC, r1
     426:	10 92 ad 01 	sts	0x01AD, r1
     42a:	10 92 85 00 	sts	0x0085, r1
     42e:	10 92 84 00 	sts	0x0084, r1
}
     432:	08 95       	ret

00000434 <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
     434:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     43c:	10 92 ae 01 	sts	0x01AE, r1
     440:	10 92 af 01 	sts	0x01AF, r1
     444:	10 92 b0 01 	sts	0x01B0, r1
     448:	10 92 b1 01 	sts	0x01B1, r1
     44c:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
     44e:	08 95       	ret

00000450 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
     450:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     45a:	10 92 aa 01 	sts	0x01AA, r1
     45e:	10 92 ab 01 	sts	0x01AB, r1
     462:	10 92 ac 01 	sts	0x01AC, r1
     466:	10 92 ad 01 	sts	0x01AD, r1
     46a:	10 92 85 00 	sts	0x0085, r1
     46e:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
     472:	08 95       	ret

00000474 <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
     474:	20 91 ae 01 	lds	r18, 0x01AE
     478:	30 91 af 01 	lds	r19, 0x01AF
     47c:	40 91 b0 01 	lds	r20, 0x01B0
     480:	50 91 b1 01 	lds	r21, 0x01B1
}
     484:	b9 01       	movw	r22, r18
     486:	ca 01       	movw	r24, r20
     488:	08 95       	ret

0000048a <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	24 e0       	ldi	r18, 0x04	; 4
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	aa 1f       	adc	r26, r26
     496:	bb 1f       	adc	r27, r27
     498:	2a 95       	dec	r18
     49a:	d1 f7       	brne	.-12     	; 0x490 <delay_us+0x6>
     49c:	03 96       	adiw	r24, 0x03	; 3
     49e:	a1 1d       	adc	r26, r1
     4a0:	b1 1d       	adc	r27, r1
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	2a e0       	ldi	r18, 0x0A	; 10
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
     4b8:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	82 17       	cp	r24, r18
     4be:	93 07       	cpc	r25, r19
     4c0:	d8 f3       	brcs	.-10     	; 0x4b8 <delay_us+0x2e>
		asm("nop");
	};
}
     4c2:	08 95       	ret

000004c4 <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
     4d6:	80 91 ae 01 	lds	r24, 0x01AE
     4da:	90 91 af 01 	lds	r25, 0x01AF
     4de:	a0 91 b0 01 	lds	r26, 0x01B0
     4e2:	b0 91 b1 01 	lds	r27, 0x01B1
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	a1 1d       	adc	r26, r1
     4ea:	b1 1d       	adc	r27, r1
     4ec:	80 93 ae 01 	sts	0x01AE, r24
     4f0:	90 93 af 01 	sts	0x01AF, r25
     4f4:	a0 93 b0 01 	sts	0x01B0, r26
     4f8:	b0 93 b1 01 	sts	0x01B1, r27
}
     4fc:	bf 91       	pop	r27
     4fe:	af 91       	pop	r26
     500:	9f 91       	pop	r25
     502:	8f 91       	pop	r24
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     50e:	90 93 01 01 	sts	0x0101, r25
     512:	80 93 00 01 	sts	0x0100, r24
}
     516:	08 95       	ret

00000518 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     518:	1f 93       	push	r17
     51a:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     51c:	8a 30       	cpi	r24, 0x0A	; 10
     51e:	31 f4       	brne	.+12     	; 0x52c <rprintfChar+0x14>
		rputchar('\r');
     520:	e0 91 00 01 	lds	r30, 0x0100
     524:	f0 91 01 01 	lds	r31, 0x0101
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	09 95       	icall
	// send character
	rputchar(c);
     52c:	e0 91 00 01 	lds	r30, 0x0100
     530:	f0 91 01 01 	lds	r31, 0x0101
     534:	81 2f       	mov	r24, r17
     536:	09 95       	icall
}
     538:	1f 91       	pop	r17
     53a:	08 95       	ret

0000053c <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	21 f4       	brne	.+8      	; 0x54e <rprintfStr+0x12>
     546:	06 c0       	rjmp	.+12     	; 0x554 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     54e:	88 81       	ld	r24, Y
     550:	88 23       	and	r24, r24
     552:	d1 f7       	brne	.-12     	; 0x548 <rprintfStr+0xc>
		rprintfChar(*str++);
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	8c 01       	movw	r16, r24
     568:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	e9 f0       	breq	.+58     	; 0x5a8 <rprintfStrLen+0x4e>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     572:	26 17       	cp	r18, r22
     574:	37 07       	cpc	r19, r23
     576:	38 f4       	brcc	.+14     	; 0x586 <rprintfStrLen+0x2c>
     578:	f8 01       	movw	r30, r16
     57a:	81 91       	ld	r24, Z+
     57c:	8f 01       	movw	r16, r30
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	88 23       	and	r24, r24
     584:	b1 f7       	brne	.-20     	; 0x572 <rprintfStrLen+0x18>
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	0b c0       	rjmp	.+22     	; 0x5a2 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     58c:	f8 01       	movw	r30, r16
     58e:	80 81       	ld	r24, Z
     590:	88 23       	and	r24, r24
     592:	19 f0       	breq	.+6      	; 0x59a <rprintfStrLen+0x40>
			rprintfChar(*str++);
     594:	0f 5f       	subi	r16, 0xFF	; 255
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	01 c0       	rjmp	.+2      	; 0x59c <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     59a:	80 e2       	ldi	r24, 0x20	; 32
     59c:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     5a0:	21 96       	adiw	r28, 0x01	; 1
     5a2:	ce 15       	cp	r28, r14
     5a4:	df 05       	cpc	r29, r15
     5a6:	90 f3       	brcs	.-28     	; 0x58c <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	08 95       	ret

000005b6 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	19 f4       	brne	.+6      	; 0x5c6 <rprintfProgStr+0x10>
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     5c2:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     5c6:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     5c8:	21 96       	adiw	r28, 0x01	; 1
     5ca:	84 91       	lpm	r24, Z+
     5cc:	88 23       	and	r24, r24
     5ce:	c9 f7       	brne	.-14     	; 0x5c2 <rprintfProgStr+0xc>
		rprintfChar(c);
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
     5d6:	8a e0       	ldi	r24, 0x0A	; 10
     5d8:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
}
     5dc:	08 95       	ret

000005de <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     5de:	e8 2f       	mov	r30, r24
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ef 70       	andi	r30, 0x0F	; 15
     5e4:	f0 70       	andi	r31, 0x00	; 0
     5e6:	e8 59       	subi	r30, 0x98	; 152
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	e4 91       	lpm	r30, Z+
     5ec:	8e 2f       	mov	r24, r30
     5ee:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
}
     5f2:	08 95       	ret

000005f4 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     5f4:	1f 93       	push	r17
     5f6:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     5f8:	82 95       	swap	r24
     5fa:	8f 70       	andi	r24, 0x0F	; 15
     5fc:	0e 94 ef 02 	call	0x5de	; 0x5de <rprintfu04>
	rprintfu04(data);
     600:	81 2f       	mov	r24, r17
     602:	0e 94 ef 02 	call	0x5de	; 0x5de <rprintfu04>
}
     606:	1f 91       	pop	r17
     608:	08 95       	ret

0000060a <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     60a:	1f 93       	push	r17
     60c:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     60e:	89 2f       	mov	r24, r25
     610:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <rprintfu08>
	rprintfu08(data);
     614:	81 2f       	mov	r24, r17
     616:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <rprintfu08>
}
     61a:	1f 91       	pop	r17
     61c:	08 95       	ret

0000061e <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	7b 01       	movw	r14, r22
     628:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     62a:	c8 01       	movw	r24, r16
     62c:	aa 27       	eor	r26, r26
     62e:	bb 27       	eor	r27, r27
     630:	0e 94 05 03 	call	0x60a	; 0x60a <rprintfu16>
	rprintfu16(data);
     634:	c7 01       	movw	r24, r14
     636:	0e 94 05 03 	call	0x60a	; 0x60a <rprintfu16>
}
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	08 95       	ret

00000644 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     644:	2f 92       	push	r2
     646:	3f 92       	push	r3
     648:	4f 92       	push	r4
     64a:	5f 92       	push	r5
     64c:	6f 92       	push	r6
     64e:	7f 92       	push	r7
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	a3 97       	sbiw	r28, 0x23	; 35
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	6a a3       	std	Y+34, r22	; 0x22
     67a:	24 2e       	mov	r2, r20
     67c:	2b a3       	std	Y+35, r18	; 0x23
     67e:	37 01       	movw	r6, r14
     680:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     682:	44 23       	and	r20, r20
     684:	51 f0       	breq	.+20     	; 0x69a <rprintfNum+0x56>
     686:	17 ff       	sbrs	r17, 7
     688:	08 c0       	rjmp	.+16     	; 0x69a <rprintfNum+0x56>
	{
		x = -n;
     68a:	ee 24       	eor	r14, r14
     68c:	ff 24       	eor	r15, r15
     68e:	87 01       	movw	r16, r14
     690:	e6 18       	sub	r14, r6
     692:	f7 08       	sbc	r15, r7
     694:	08 09       	sbc	r16, r8
     696:	19 09       	sbc	r17, r9
     698:	02 c0       	rjmp	.+4      	; 0x69e <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     69a:	84 01       	movw	r16, r8
     69c:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     69e:	2a a1       	ldd	r18, Y+34	; 0x22
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	21 10       	cpse	r2, r1
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	29 1b       	sub	r18, r25
     6aa:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     6ac:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     6ae:	a8 2e       	mov	r10, r24
     6b0:	bb 24       	eor	r11, r11
     6b2:	cc 24       	eor	r12, r12
     6b4:	dd 24       	eor	r13, r13
     6b6:	c8 01       	movw	r24, r16
     6b8:	b7 01       	movw	r22, r14
     6ba:	a6 01       	movw	r20, r12
     6bc:	95 01       	movw	r18, r10
     6be:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     6c2:	fb 01       	movw	r30, r22
     6c4:	ef 70       	andi	r30, 0x0F	; 15
     6c6:	f0 70       	andi	r31, 0x00	; 0
     6c8:	e8 59       	subi	r30, 0x98	; 152
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	64 91       	lpm	r22, Z+
     6ce:	6f 8f       	std	Y+31, r22	; 0x1f
     6d0:	c8 01       	movw	r24, r16
     6d2:	b7 01       	movw	r22, r14
     6d4:	a6 01       	movw	r20, r12
     6d6:	95 01       	movw	r18, r10
     6d8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     6dc:	c9 01       	movw	r24, r18
     6de:	da 01       	movw	r26, r20
     6e0:	7c 01       	movw	r14, r24
     6e2:	8d 01       	movw	r16, r26
     6e4:	9e e1       	ldi	r25, 0x1E	; 30
     6e6:	49 2e       	mov	r4, r25
     6e8:	51 2c       	mov	r5, r1
     6ea:	4c 0e       	add	r4, r28
     6ec:	5d 1e       	adc	r5, r29
     6ee:	39 a0       	ldd	r3, Y+33	; 0x21
     6f0:	25 c0       	rjmp	.+74     	; 0x73c <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	c9 f0       	breq	.+50     	; 0x72e <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     6fc:	c8 01       	movw	r24, r16
     6fe:	b7 01       	movw	r22, r14
     700:	a6 01       	movw	r20, r12
     702:	95 01       	movw	r18, r10
     704:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     708:	fb 01       	movw	r30, r22
     70a:	ef 70       	andi	r30, 0x0F	; 15
     70c:	f0 70       	andi	r31, 0x00	; 0
     70e:	e8 59       	subi	r30, 0x98	; 152
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	64 91       	lpm	r22, Z+
     714:	f2 01       	movw	r30, r4
     716:	60 83       	st	Z, r22
     718:	c8 01       	movw	r24, r16
     71a:	b7 01       	movw	r22, r14
     71c:	a6 01       	movw	r20, r12
     71e:	95 01       	movw	r18, r10
     720:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     724:	c9 01       	movw	r24, r18
     726:	da 01       	movw	r26, r20
     728:	7c 01       	movw	r14, r24
     72a:	8d 01       	movw	r16, r26
     72c:	03 c0       	rjmp	.+6      	; 0x734 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     72e:	2b a1       	ldd	r18, Y+35	; 0x23
     730:	f2 01       	movw	r30, r4
     732:	20 83       	st	Z, r18
     734:	3a 94       	dec	r3
     736:	08 94       	sec
     738:	41 08       	sbc	r4, r1
     73a:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     73c:	33 20       	and	r3, r3
     73e:	c9 f6       	brne	.-78     	; 0x6f2 <rprintfNum+0xae>
     740:	ce 01       	movw	r24, r28
     742:	4f 96       	adiw	r24, 0x1f	; 31
     744:	8c 01       	movw	r16, r24
     746:	e9 a1       	ldd	r30, Y+33	; 0x21
     748:	0e 1b       	sub	r16, r30
     74a:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
     74c:	22 20       	and	r2, r2
     74e:	f1 f0       	breq	.+60     	; 0x78c <rprintfNum+0x148>
	{
		if(n < 0)
     750:	97 fe       	sbrs	r9, 7
     752:	05 c0       	rjmp	.+10     	; 0x75e <rprintfNum+0x11a>
		{
   			*--p = '-';
     754:	8d e2       	ldi	r24, 0x2D	; 45
     756:	f8 01       	movw	r30, r16
     758:	82 93       	st	-Z, r24
     75a:	8f 01       	movw	r16, r30
     75c:	17 c0       	rjmp	.+46     	; 0x78c <rprintfNum+0x148>
     75e:	c8 01       	movw	r24, r16
     760:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
     762:	61 14       	cp	r6, r1
     764:	71 04       	cpc	r7, r1
     766:	81 04       	cpc	r8, r1
     768:	91 04       	cpc	r9, r1
     76a:	19 f0       	breq	.+6      	; 0x772 <rprintfNum+0x12e>
		{
	   		*--p = '+';
     76c:	8c 01       	movw	r16, r24
     76e:	8b e2       	ldi	r24, 0x2B	; 43
     770:	02 c0       	rjmp	.+4      	; 0x776 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
     772:	8c 01       	movw	r16, r24
     774:	80 e2       	ldi	r24, 0x20	; 32
     776:	f8 01       	movw	r30, r16
     778:	80 83       	st	Z, r24
     77a:	08 c0       	rjmp	.+16     	; 0x78c <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
     77c:	f8 01       	movw	r30, r16
     77e:	81 91       	ld	r24, Z+
     780:	8f 01       	movw	r16, r30
     782:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     786:	fa a1       	ldd	r31, Y+34	; 0x22
     788:	f1 50       	subi	r31, 0x01	; 1
     78a:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     78c:	2a a1       	ldd	r18, Y+34	; 0x22
     78e:	22 23       	and	r18, r18
     790:	a9 f7       	brne	.-22     	; 0x77c <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
     792:	a3 96       	adiw	r28, 0x23	; 35
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	3f 90       	pop	r3
     7c0:	2f 90       	pop	r2
     7c2:	08 95       	ret

000007c4 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	48 2e       	mov	r4, r24
     7e6:	5a 01       	movw	r10, r20
     7e8:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
     7ea:	cb 01       	movw	r24, r22
     7ec:	ba 01       	movw	r22, r20
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	1c f4       	brge	.+6      	; 0x804 <rprintfFloat+0x40>
     7fe:	35 01       	movw	r6, r10
     800:	46 01       	movw	r8, r12
     802:	06 c0       	rjmp	.+12     	; 0x810 <rprintfFloat+0x4c>
     804:	35 01       	movw	r6, r10
     806:	46 01       	movw	r8, r12
     808:	97 fa       	bst	r9, 7
     80a:	90 94       	com	r9
     80c:	97 f8       	bld	r9, 7
     80e:	90 94       	com	r9
     810:	0f 2e       	mov	r0, r31
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ef 2e       	mov	r14, r31
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	ff 2e       	mov	r15, r31
     81a:	f0 e8       	ldi	r31, 0x80	; 128
     81c:	0f 2f       	mov	r16, r31
     81e:	ff e3       	ldi	r31, 0x3F	; 63
     820:	1f 2f       	mov	r17, r31
     822:	f0 2d       	mov	r31, r0
     824:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
     826:	c4 01       	movw	r24, r8
     828:	b3 01       	movw	r22, r6
     82a:	a8 01       	movw	r20, r16
     82c:	97 01       	movw	r18, r14
     82e:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e2       	ldi	r20, 0x20	; 32
     838:	51 e4       	ldi	r21, 0x41	; 65
     83a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
     83e:	87 fd       	sbrc	r24, 7
     840:	0e c0       	rjmp	.+28     	; 0x85e <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
     842:	c8 01       	movw	r24, r16
     844:	b7 01       	movw	r22, r14
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e2       	ldi	r20, 0x20	; 32
     84c:	51 e4       	ldi	r21, 0x41	; 65
     84e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3>
     852:	7b 01       	movw	r14, r22
     854:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
     856:	53 94       	inc	r5
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	58 16       	cp	r5, r24
     85c:	21 f7       	brne	.-56     	; 0x826 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
     85e:	c6 01       	movw	r24, r12
     860:	b5 01       	movw	r22, r10
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	14 f4       	brge	.+4      	; 0x876 <rprintfFloat+0xb2>
		rprintfChar('-');
     872:	8d e2       	ldi	r24, 0x2D	; 45
     874:	01 c0       	rjmp	.+2      	; 0x878 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
     876:	8b e2       	ldi	r24, 0x2B	; 43
     878:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     87c:	dd 24       	eor	r13, r13
     87e:	aa 24       	eor	r10, r10
     880:	56 c0       	rjmp	.+172    	; 0x92e <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
     882:	c4 01       	movw	r24, r8
     884:	b3 01       	movw	r22, r6
     886:	a8 01       	movw	r20, r16
     888:	97 01       	movw	r18, r14
     88a:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     88e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
     892:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
     894:	d6 2a       	or	r13, r22
     896:	cd 2d       	mov	r28, r13
     898:	d0 e0       	ldi	r29, 0x00	; 0
     89a:	cc 24       	eor	r12, r12
     89c:	dd 24       	eor	r13, r13
     89e:	c8 01       	movw	r24, r16
     8a0:	b7 01       	movw	r22, r14
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e8       	ldi	r20, 0x80	; 128
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	19 f4       	brne	.+6      	; 0x8b8 <rprintfFloat+0xf4>
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	c2 2e       	mov	r12, r18
     8b6:	d1 2c       	mov	r13, r1
     8b8:	cc 29       	or	r28, r12
     8ba:	dd 29       	or	r29, r13
     8bc:	cd 2b       	or	r28, r29
     8be:	39 f0       	breq	.+14     	; 0x8ce <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
     8c0:	8b 2d       	mov	r24, r11
     8c2:	80 5d       	subi	r24, 0xD0	; 208
     8c4:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     8c8:	dd 24       	eor	r13, r13
     8ca:	da 94       	dec	r13
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
     8ce:	80 e2       	ldi	r24, 0x20	; 32
     8d0:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     8d4:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
     8d6:	c8 01       	movw	r24, r16
     8d8:	b7 01       	movw	r22, r14
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e8       	ldi	r20, 0x80	; 128
     8e0:	5f e3       	ldi	r21, 0x3F	; 63
     8e2:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
     8ea:	8e e2       	ldi	r24, 0x2E	; 46
     8ec:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
		}
		
		x -= (digit*place);
     8f0:	6b 2d       	mov	r22, r11
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	88 27       	eor	r24, r24
     8f6:	77 fd       	sbrc	r23, 7
     8f8:	80 95       	com	r24
     8fa:	98 2f       	mov	r25, r24
     8fc:	0e 94 26 0a 	call	0x144c	; 0x144c <__floatsisf>
     900:	a8 01       	movw	r20, r16
     902:	97 01       	movw	r18, r14
     904:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c4 01       	movw	r24, r8
     90e:	b3 01       	movw	r22, r6
     910:	0e 94 27 09 	call	0x124e	; 0x124e <__subsf3>
     914:	3b 01       	movw	r6, r22
     916:	4c 01       	movw	r8, r24
		place /= 10.0;
     918:	c8 01       	movw	r24, r16
     91a:	b7 01       	movw	r22, r14
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     928:	7b 01       	movw	r14, r22
     92a:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
     92c:	a3 94       	inc	r10
     92e:	a4 14       	cp	r10, r4
     930:	08 f4       	brcc	.+2      	; 0x934 <rprintfFloat+0x170>
     932:	a7 cf       	rjmp	.-178    	; 0x882 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	08 95       	ret

00000956 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     956:	7f 92       	push	r7
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	78 88       	ldd	r7, Y+16	; 0x10
     976:	c9 88       	ldd	r12, Y+17	; 0x11
     978:	da 88       	ldd	r13, Y+18	; 0x12
     97a:	63 e1       	ldi	r22, 0x13	; 19
     97c:	e6 2e       	mov	r14, r22
     97e:	f1 2c       	mov	r15, r1
     980:	ec 0e       	add	r14, r28
     982:	fd 1e       	adc	r15, r29
     984:	14 c0       	rjmp	.+40     	; 0x9ae <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
     986:	88 23       	and	r24, r24
     988:	81 f4       	brne	.+32     	; 0x9aa <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	cf 91       	pop	r28
     990:	df 91       	pop	r29
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     9aa:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     9ae:	96 01       	movw	r18, r12
     9b0:	2f 5f       	subi	r18, 0xFF	; 255
     9b2:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     9b4:	77 20       	and	r7, r7
     9b6:	21 f0       	breq	.+8      	; 0x9c0 <rprintf1RamRom+0x6a>
     9b8:	f6 01       	movw	r30, r12
     9ba:	69 01       	movw	r12, r18
     9bc:	84 91       	lpm	r24, Z+
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <rprintf1RamRom+0x70>
     9c0:	f6 01       	movw	r30, r12
     9c2:	80 81       	ld	r24, Z
     9c4:	69 01       	movw	r12, r18
     9c6:	85 32       	cpi	r24, 0x25	; 37
     9c8:	f1 f6       	brne	.-68     	; 0x986 <rprintf1RamRom+0x30>
     9ca:	2f 5f       	subi	r18, 0xFF	; 255
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     9ce:	77 20       	and	r7, r7
     9d0:	21 f0       	breq	.+8      	; 0x9da <rprintf1RamRom+0x84>
     9d2:	f6 01       	movw	r30, r12
     9d4:	69 01       	movw	r12, r18
     9d6:	84 91       	lpm	r24, Z+
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <rprintf1RamRom+0x8a>
     9da:	f6 01       	movw	r30, r12
     9dc:	80 81       	ld	r24, Z
     9de:	69 01       	movw	r12, r18
     9e0:	84 36       	cpi	r24, 0x64	; 100
     9e2:	29 f0       	breq	.+10     	; 0x9ee <rprintf1RamRom+0x98>
     9e4:	88 37       	cpi	r24, 0x78	; 120
     9e6:	81 f0       	breq	.+32     	; 0xa08 <rprintf1RamRom+0xb2>
     9e8:	83 36       	cpi	r24, 0x63	; 99
     9ea:	f9 f6       	brne	.-66     	; 0x9aa <rprintf1RamRom+0x54>
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <rprintf1RamRom+0xa4>
     9ee:	00 e1       	ldi	r16, 0x10	; 16
     9f0:	17 e2       	ldi	r17, 0x27	; 39
     9f2:	5a e0       	ldi	r21, 0x0A	; 10
     9f4:	a5 2e       	mov	r10, r21
     9f6:	b1 2c       	mov	r11, r1
     9f8:	0c c0       	rjmp	.+24     	; 0xa12 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
     9fa:	f7 01       	movw	r30, r14
     9fc:	80 81       	ld	r24, Z
     9fe:	22 e0       	ldi	r18, 0x02	; 2
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	e2 0e       	add	r14, r18
     a04:	f3 1e       	adc	r15, r19
     a06:	d1 cf       	rjmp	.-94     	; 0x9aa <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	10 e1       	ldi	r17, 0x10	; 16
     a0c:	40 e1       	ldi	r20, 0x10	; 16
     a0e:	a4 2e       	mov	r10, r20
     a10:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     a12:	32 e0       	ldi	r19, 0x02	; 2
     a14:	83 2e       	mov	r8, r19
     a16:	91 2c       	mov	r9, r1
     a18:	8e 0c       	add	r8, r14
     a1a:	9f 1c       	adc	r9, r15
     a1c:	f7 01       	movw	r30, r14
     a1e:	e0 80       	ld	r14, Z
     a20:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
     a22:	84 36       	cpi	r24, 0x64	; 100
     a24:	b1 f4       	brne	.+44     	; 0xa52 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
     a26:	f7 fe       	sbrs	r15, 7
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
     a2a:	f0 94       	com	r15
     a2c:	e1 94       	neg	r14
     a2e:	f1 08       	sbc	r15, r1
     a30:	f3 94       	inc	r15
					rprintfChar('-');
     a32:	8d e2       	ldi	r24, 0x2D	; 45
     a34:	0e 94 8c 02 	call	0x518	; 0x518 <rprintfChar>
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     a3a:	c8 01       	movw	r24, r16
     a3c:	6a e0       	ldi	r22, 0x0A	; 10
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     a44:	8b 01       	movw	r16, r22
     a46:	62 30       	cpi	r22, 0x02	; 2
     a48:	71 05       	cpc	r23, r1
     a4a:	18 f0       	brcs	.+6      	; 0xa52 <rprintf1RamRom+0xfc>
     a4c:	e0 16       	cp	r14, r16
     a4e:	f1 06       	cpc	r15, r17
     a50:	a0 f3       	brcs	.-24     	; 0xa3a <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     a52:	c7 01       	movw	r24, r14
     a54:	b8 01       	movw	r22, r16
     a56:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     a5a:	86 2f       	mov	r24, r22
     a5c:	0e 94 ef 02 	call	0x5de	; 0x5de <rprintfu04>
				u_val %= div_val;
     a60:	c7 01       	movw	r24, r14
     a62:	b8 01       	movw	r22, r16
     a64:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     a68:	7c 01       	movw	r14, r24
				div_val /= base;
     a6a:	c8 01       	movw	r24, r16
     a6c:	b5 01       	movw	r22, r10
     a6e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     a72:	8b 01       	movw	r16, r22
			} while (div_val);
     a74:	61 15       	cp	r22, r1
     a76:	71 05       	cpc	r23, r1
     a78:	61 f7       	brne	.-40     	; 0xa52 <rprintf1RamRom+0xfc>
     a7a:	74 01       	movw	r14, r8
     a7c:	98 cf       	rjmp	.-208    	; 0x9ae <rprintf1RamRom+0x58>

00000a7e <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
     a7e:	84 30       	cpi	r24, 0x04	; 4
     a80:	40 f4       	brcc	.+16     	; 0xa92 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     a82:	e8 2f       	mov	r30, r24
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 56       	subi	r30, 0x6E	; 110
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	71 83       	std	Z+1, r23	; 0x01
     a90:	60 83       	st	Z, r22
     a92:	08 95       	ret

00000a94 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     a94:	9a 01       	movw	r18, r20
     a96:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
     a98:	88 23       	and	r24, r24
     a9a:	e1 f4       	brne	.+56     	; 0xad4 <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     a9c:	ca 01       	movw	r24, r20
     a9e:	b9 01       	movw	r22, r18
     aa0:	60 58       	subi	r22, 0x80	; 128
     aa2:	7b 47       	sbci	r23, 0x7B	; 123
     aa4:	81 4e       	sbci	r24, 0xE1	; 225
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	66 0f       	add	r22, r22
     aac:	77 1f       	adc	r23, r23
     aae:	88 1f       	adc	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	fa 95       	dec	r31
     ab4:	d1 f7       	brne	.-12     	; 0xaaa <uartSetBaudRate+0x16>
     ab6:	e4 e0       	ldi	r30, 0x04	; 4
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	44 1f       	adc	r20, r20
     abe:	55 1f       	adc	r21, r21
     ac0:	ea 95       	dec	r30
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <uartSetBaudRate+0x24>
     ac4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
     acc:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     ad0:	30 93 c5 00 	sts	0x00C5, r19
     ad4:	08 95       	ret

00000ad6 <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	a3 e0       	ldi	r26, 0x03	; 3
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	aa 95       	dec	r26
     ae2:	e1 f7       	brne	.-8      	; 0xadc <uartGetRxBuffer+0x6>
     ae4:	2a 54       	subi	r18, 0x4A	; 74
     ae6:	3e 4f       	sbci	r19, 0xFE	; 254
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
     ae8:	c9 01       	movw	r24, r18
     aea:	08 95       	ret

00000aec <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	b3 e0       	ldi	r27, 0x03	; 3
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	ba 95       	dec	r27
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <uartGetTxBuffer+0x6>
     afa:	26 52       	subi	r18, 0x26	; 38
     afc:	3e 4f       	sbci	r19, 0xFE	; 254
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
     afe:	c9 01       	movw	r24, r18
     b00:	08 95       	ret

00000b02 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     b02:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     b04:	88 23       	and	r24, r24
     b06:	31 f4       	brne	.+12     	; 0xb14 <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     b08:	80 91 c0 00 	lds	r24, 0x00C0
     b0c:	85 ff       	sbrs	r24, 5
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <uartSendByte+0x6>
		outb(UDR0, txData);
     b10:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	ee 54       	subi	r30, 0x4E	; 78
     b18:	fe 4f       	sbci	r31, 0xFE	; 254
     b1a:	10 82       	st	Z, r1
}
     b1c:	08 95       	ret

00000b1e <uart0SendByte>:

void uart0SendByte(u08 data)
{
     b1e:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     b20:	80 91 c0 00 	lds	r24, 0x00C0
     b24:	85 ff       	sbrs	r24, 5
     b26:	fc cf       	rjmp	.-8      	; 0xb20 <uart0SendByte+0x2>
		outb(UDR0, txData);
     b28:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     b2c:	10 92 b2 01 	sts	0x01B2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
     b30:	08 95       	ret

00000b32 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	e8 2f       	mov	r30, r24
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	8a 95       	dec	r24
     b40:	e1 f7       	brne	.-8      	; 0xb3a <uartReceiveBufferIsEmpty+0x8>
     b42:	e6 54       	subi	r30, 0x46	; 70
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <uartReceiveBufferIsEmpty+0x1e>
     b4e:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
     b50:	82 2f       	mov	r24, r18
     b52:	08 95       	ret

00000b54 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
     b58:	88 23       	and	r24, r24
     b5a:	11 f4       	brne	.+4      	; 0xb60 <uartReceiveService+0xc>
		c = inb(UDR0);
     b5c:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	e9 01       	movw	r28, r18
     b66:	cc 0f       	add	r28, r28
     b68:	dd 1f       	adc	r29, r29
     b6a:	fe 01       	movw	r30, r28
     b6c:	ee 56       	subi	r30, 0x6E	; 110
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	89 2b       	or	r24, r25
     b76:	31 f0       	breq	.+12     	; 0xb84 <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
     b78:	01 90       	ld	r0, Z+
     b7a:	f0 81       	ld	r31, Z
     b7c:	e0 2d       	mov	r30, r0
     b7e:	86 2f       	mov	r24, r22
     b80:	09 95       	icall
     b82:	14 c0       	rjmp	.+40     	; 0xbac <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	9a 95       	dec	r25
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <uartReceiveService+0x32>
     b8e:	c9 01       	movw	r24, r18
     b90:	8a 54       	subi	r24, 0x4A	; 74
     b92:	9e 4f       	sbci	r25, 0xFE	; 254
     b94:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <bufferAddToEnd>
     b98:	88 23       	and	r24, r24
     b9a:	41 f4       	brne	.+16     	; 0xbac <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
     b9c:	fe 01       	movw	r30, r28
     b9e:	e6 50       	subi	r30, 0x06	; 6
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	80 83       	st	Z, r24
		}
	}
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	4f 93       	push	r20
     bc2:	5f 93       	push	r21
     bc4:	6f 93       	push	r22
     bc6:	7f 93       	push	r23
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	af 93       	push	r26
     bce:	bf 93       	push	r27
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
	uartReceiveService(0);
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 aa 05 	call	0xb54	; 0xb54 <uartReceiveService>
}
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	88 2e       	mov	r8, r24
     c16:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
     c18:	e8 2e       	mov	r14, r24
     c1a:	ff 24       	eor	r15, r15
     c1c:	f7 01       	movw	r30, r14
     c1e:	13 e0       	ldi	r17, 0x03	; 3
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	1a 95       	dec	r17
     c26:	e1 f7       	brne	.-8      	; 0xc20 <uartSendBuffer+0x24>
     c28:	e2 52       	subi	r30, 0x22	; 34
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	24 0f       	add	r18, r20
     c32:	35 1f       	adc	r19, r21
     c34:	f7 01       	movw	r30, r14
     c36:	73 e0       	ldi	r23, 0x03	; 3
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	7a 95       	dec	r23
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <uartSendBuffer+0x3c>
     c40:	e4 52       	subi	r30, 0x24	; 36
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	28 17       	cp	r18, r24
     c4a:	39 07       	cpc	r19, r25
     c4c:	b0 f5       	brcc	.+108    	; 0xcba <uartSendBuffer+0xbe>
     c4e:	41 15       	cp	r20, r1
     c50:	51 05       	cpc	r21, r1
     c52:	99 f1       	breq	.+102    	; 0xcba <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
     c54:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
     c56:	67 01       	movw	r12, r14
     c58:	63 e0       	ldi	r22, 0x03	; 3
     c5a:	cc 0c       	add	r12, r12
     c5c:	dd 1c       	adc	r13, r13
     c5e:	6a 95       	dec	r22
     c60:	e1 f7       	brne	.-8      	; 0xc5a <uartSendBuffer+0x5e>
     c62:	8a ed       	ldi	r24, 0xDA	; 218
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	c8 0e       	add	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	8d 01       	movw	r16, r26
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
     c70:	5a 01       	movw	r10, r20
     c72:	08 94       	sec
     c74:	a1 08       	sbc	r10, r1
     c76:	b1 08       	sbc	r11, r1
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <uartSendBuffer+0x8a>
     c7a:	c6 01       	movw	r24, r12
     c7c:	f8 01       	movw	r30, r16
     c7e:	60 81       	ld	r22, Z
     c80:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <bufferAddToEnd>
     c84:	21 96       	adiw	r28, 0x01	; 1
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	ca 15       	cp	r28, r10
     c8c:	db 05       	cpc	r29, r11
     c8e:	a8 f3       	brcs	.-22     	; 0xc7a <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
     c90:	f7 01       	movw	r30, r14
     c92:	ea 52       	subi	r30, 0x2A	; 42
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     c9a:	88 20       	and	r8, r8
     c9c:	31 f4       	brne	.+12     	; 0xcaa <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c9e:	80 91 c0 00 	lds	r24, 0x00C0
     ca2:	85 ff       	sbrs	r24, 5
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <uartSendBuffer+0xa2>
		outb(UDR0, txData);
     ca6:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     caa:	82 eb       	ldi	r24, 0xB2	; 178
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	e8 0e       	add	r14, r24
     cb0:	f9 1e       	adc	r15, r25
     cb2:	f7 01       	movw	r30, r14
     cb4:	10 82       	st	Z, r1
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
     cba:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	9f 90       	pop	r9
     cd2:	8f 90       	pop	r8
     cd4:	08 95       	ret

00000cd6 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	23 e0       	ldi	r18, 0x03	; 3
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	2a 95       	dec	r18
     ce0:	e1 f7       	brne	.-8      	; 0xcda <uartAddToTxBuffer+0x4>
     ce2:	86 52       	subi	r24, 0x26	; 38
     ce4:	9e 4f       	sbci	r25, 0xFE	; 254
     ce6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <bufferAddToEnd>
}
     cea:	08 95       	ret

00000cec <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
     cec:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     cee:	8a ed       	ldi	r24, 0xDA	; 218
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
     cf6:	08 95       	ret

00000cf8 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
     cfe:	a8 2f       	mov	r26, r24
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ed 01       	movw	r28, r26
     d04:	ca 52       	subi	r28, 0x2A	; 42
     d06:	de 4f       	sbci	r29, 0xFE	; 254
     d08:	88 81       	ld	r24, Y
     d0a:	88 23       	and	r24, r24
     d0c:	b1 f0       	breq	.+44     	; 0xd3a <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
     d0e:	fd 01       	movw	r30, r26
     d10:	33 e0       	ldi	r19, 0x03	; 3
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	3a 95       	dec	r19
     d18:	e1 f7       	brne	.-8      	; 0xd12 <uartTransmitService+0x1a>
     d1a:	e2 52       	subi	r30, 0x22	; 34
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	89 2b       	or	r24, r25
     d24:	49 f0       	breq	.+18     	; 0xd38 <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
     d26:	23 30       	cpi	r18, 0x03	; 3
     d28:	61 f4       	brne	.+24     	; 0xd42 <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
     d2a:	8a ed       	ldi	r24, 0xDA	; 218
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 7b 07 	call	0xef6	; 0xef6 <bufferGetFromFront>
     d32:	80 93 c6 00 	sts	0x00C6, r24
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
     d38:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
     d3a:	ae 54       	subi	r26, 0x4E	; 78
     d3c:	be 4f       	sbci	r27, 0xFE	; 254
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	8c 93       	st	X, r24
	}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	uartTransmitService(0);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uartTransmitService>
}
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
     d9a:	c8 2f       	mov	r28, r24
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	fe 01       	movw	r30, r28
     da0:	ea 52       	subi	r30, 0x2A	; 42
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
     da8:	ce 01       	movw	r24, r28
     daa:	43 e0       	ldi	r20, 0x03	; 3
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	4a 95       	dec	r20
     db2:	e1 f7       	brne	.-8      	; 0xdac <uartSendTxBuffer+0x1a>
     db4:	86 52       	subi	r24, 0x26	; 38
     db6:	9e 4f       	sbci	r25, 0xFE	; 254
     db8:	0e 94 7b 07 	call	0xef6	; 0xef6 <bufferGetFromFront>
     dbc:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     dbe:	11 23       	and	r17, r17
     dc0:	31 f4       	brne	.+12     	; 0xdce <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     dc2:	80 91 c0 00 	lds	r24, 0x00C0
     dc6:	85 ff       	sbrs	r24, 5
     dc8:	fc cf       	rjmp	.-8      	; 0xdc2 <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
     dca:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     dce:	ce 54       	subi	r28, 0x4E	; 78
     dd0:	de 4f       	sbci	r29, 0xFE	; 254
     dd2:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	08 95       	ret

00000ddc <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	73 e0       	ldi	r23, 0x03	; 3
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	7a 95       	dec	r23
     df0:	e1 f7       	brne	.-8      	; 0xdea <uartReceiveByte+0xe>
     df2:	e8 54       	subi	r30, 0x48	; 72
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	89 2b       	or	r24, r25
     dfc:	c9 f0       	breq	.+50     	; 0xe30 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
     dfe:	f9 01       	movw	r30, r18
     e00:	63 e0       	ldi	r22, 0x03	; 3
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	6a 95       	dec	r22
     e08:	e1 f7       	brne	.-8      	; 0xe02 <uartReceiveByte+0x26>
     e0a:	e6 54       	subi	r30, 0x46	; 70
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	89 2b       	or	r24, r25
     e14:	69 f0       	breq	.+26     	; 0xe30 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
     e16:	53 e0       	ldi	r21, 0x03	; 3
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	5a 95       	dec	r21
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <uartReceiveByte+0x3c>
     e20:	c9 01       	movw	r24, r18
     e22:	8a 54       	subi	r24, 0x4A	; 74
     e24:	9e 4f       	sbci	r25, 0xFE	; 254
     e26:	0e 94 7b 07 	call	0xef6	; 0xef6 <bufferGetFromFront>
     e2a:	88 83       	st	Y, r24
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <uartReceiveByte+0x56>
			return TRUE;
     e30:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	be 01       	movw	r22, r28
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	0e 94 ee 06 	call	0xddc	; 0xddc <uartReceiveByte>
     e4e:	88 23       	and	r24, r24
     e50:	19 f4       	brne	.+6      	; 0xe58 <uart0GetByte+0x20>
     e52:	2f ef       	ldi	r18, 0xFF	; 255
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <uart0GetByte+0x26>
		return c;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     e5e:	c9 01       	movw	r24, r18
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	e3 e0       	ldi	r30, 0x03	; 3
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	ea 95       	dec	r30
     e72:	e1 f7       	brne	.-8      	; 0xe6c <uartFlushReceiveBuffer+0x4>
     e74:	8a 54       	subi	r24, 0x4A	; 74
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	0e 94 17 08 	call	0x102e	; 0x102e <bufferFlush>
}
     e7c:	08 95       	ret

00000e7e <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
     e7e:	86 eb       	ldi	r24, 0xB6	; 182
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	71 e0       	ldi	r23, 0x01	; 1
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 6e 07 	call	0xedc	; 0xedc <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
     e8e:	8a ed       	ldi	r24, 0xDA	; 218
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	62 e8       	ldi	r22, 0x82	; 130
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	40 e1       	ldi	r20, 0x10	; 16
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	0e 94 6e 07 	call	0xedc	; 0xedc <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
     e9e:	08 95       	ret

00000ea0 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
     ea0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
     ea4:	10 92 93 01 	sts	0x0193, r1
     ea8:	10 92 92 01 	sts	0x0192, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     eac:	88 ed       	ldi	r24, 0xD8	; 216
     eae:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	55 e2       	ldi	r21, 0x25	; 37
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	0e 94 4a 05 	call	0xa94	; 0xa94 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	80 93 b2 01 	sts	0x01B2, r24
	uartBufferedTx[0] = FALSE;
     ec6:	10 92 d6 01 	sts	0x01D6, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
     eca:	10 92 fb 01 	sts	0x01FB, r1
     ece:	10 92 fa 01 	sts	0x01FA, r1
	// enable interrupts
	sei();
     ed2:	78 94       	sei
}
     ed4:	08 95       	ret

00000ed6 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
     ed6:	0e 94 50 07 	call	0xea0	; 0xea0 <uart0Init>
}
     eda:	08 95       	ret

00000edc <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     edc:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     ede:	8f b7       	in	r24, 0x3f	; 63
     ee0:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     ee2:	71 83       	std	Z+1, r23	; 0x01
     ee4:	60 83       	st	Z, r22
	buffer->size = size;
     ee6:	53 83       	std	Z+3, r21	; 0x03
     ee8:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     eea:	17 82       	std	Z+7, r1	; 0x07
     eec:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     eee:	15 82       	std	Z+5, r1	; 0x05
     ef0:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     ef2:	8f bf       	out	0x3f, r24	; 63
}
     ef4:	08 95       	ret

00000ef6 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     ef6:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     ef8:	4f b7       	in	r20, 0x3f	; 63
     efa:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     efc:	14 96       	adiw	r26, 0x04	; 4
     efe:	8d 91       	ld	r24, X+
     f00:	9c 91       	ld	r25, X
     f02:	15 97       	sbiw	r26, 0x05	; 5
     f04:	89 2b       	or	r24, r25
     f06:	11 f4       	brne	.+4      	; 0xf0c <bufferGetFromFront+0x16>
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     f0c:	16 96       	adiw	r26, 0x06	; 6
     f0e:	8d 91       	ld	r24, X+
     f10:	9c 91       	ld	r25, X
     f12:	17 97       	sbiw	r26, 0x07	; 7
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	11 97       	sbiw	r26, 0x01	; 1
     f1a:	e8 0f       	add	r30, r24
     f1c:	f9 1f       	adc	r31, r25
     f1e:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	17 96       	adiw	r26, 0x07	; 7
     f24:	9c 93       	st	X, r25
     f26:	8e 93       	st	-X, r24
     f28:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
     f2a:	12 96       	adiw	r26, 0x02	; 2
     f2c:	2d 91       	ld	r18, X+
     f2e:	3c 91       	ld	r19, X
     f30:	13 97       	sbiw	r26, 0x03	; 3
     f32:	82 17       	cp	r24, r18
     f34:	93 07       	cpc	r25, r19
     f36:	30 f0       	brcs	.+12     	; 0xf44 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
     f38:	82 1b       	sub	r24, r18
     f3a:	93 0b       	sbc	r25, r19
     f3c:	17 96       	adiw	r26, 0x07	; 7
     f3e:	9c 93       	st	X, r25
     f40:	8e 93       	st	-X, r24
     f42:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
     f44:	14 96       	adiw	r26, 0x04	; 4
     f46:	8d 91       	ld	r24, X+
     f48:	9c 91       	ld	r25, X
     f4a:	15 97       	sbiw	r26, 0x05	; 5
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	15 96       	adiw	r26, 0x05	; 5
     f50:	9c 93       	st	X, r25
     f52:	8e 93       	st	-X, r24
     f54:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
     f56:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
     f58:	8e 2f       	mov	r24, r30
     f5a:	08 95       	ret

00000f5c <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
     f5c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     f5e:	4f b7       	in	r20, 0x3f	; 63
     f60:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
     f62:	84 81       	ldd	r24, Z+4	; 0x04
     f64:	95 81       	ldd	r25, Z+5	; 0x05
     f66:	68 17       	cp	r22, r24
     f68:	79 07       	cpc	r23, r25
     f6a:	b0 f4       	brcc	.+44     	; 0xf98 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
     f6c:	86 81       	ldd	r24, Z+6	; 0x06
     f6e:	97 81       	ldd	r25, Z+7	; 0x07
     f70:	86 0f       	add	r24, r22
     f72:	97 1f       	adc	r25, r23
     f74:	97 83       	std	Z+7, r25	; 0x07
     f76:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     f78:	22 81       	ldd	r18, Z+2	; 0x02
     f7a:	33 81       	ldd	r19, Z+3	; 0x03
     f7c:	82 17       	cp	r24, r18
     f7e:	93 07       	cpc	r25, r19
     f80:	20 f0       	brcs	.+8      	; 0xf8a <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
     f82:	82 1b       	sub	r24, r18
     f84:	93 0b       	sbc	r25, r19
     f86:	97 83       	std	Z+7, r25	; 0x07
     f88:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     f8a:	84 81       	ldd	r24, Z+4	; 0x04
     f8c:	95 81       	ldd	r25, Z+5	; 0x05
     f8e:	86 1b       	sub	r24, r22
     f90:	97 0b       	sbc	r25, r23
     f92:	95 83       	std	Z+5, r25	; 0x05
     f94:	84 83       	std	Z+4, r24	; 0x04
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     f98:	15 82       	std	Z+5, r1	; 0x05
     f9a:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     f9c:	4f bf       	out	0x3f, r20	; 63
}
     f9e:	08 95       	ret

00000fa0 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     fa0:	fc 01       	movw	r30, r24
     fa2:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     fa4:	2f b7       	in	r18, 0x3f	; 63
     fa6:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
     fa8:	2f bf       	out	0x3f, r18	; 63
     faa:	26 81       	ldd	r18, Z+6	; 0x06
     fac:	37 81       	ldd	r19, Z+7	; 0x07
     fae:	62 81       	ldd	r22, Z+2	; 0x02
     fb0:	73 81       	ldd	r23, Z+3	; 0x03
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     fba:	01 90       	ld	r0, Z+
     fbc:	f0 81       	ld	r31, Z
     fbe:	e0 2d       	mov	r30, r0
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
	return data;
}
     fc4:	80 81       	ld	r24, Z
     fc6:	08 95       	ret

00000fc8 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
     fd2:	4f b7       	in	r20, 0x3f	; 63
     fd4:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	6a 81       	ldd	r22, Y+2	; 0x02
     fdc:	7b 81       	ldd	r23, Y+3	; 0x03
     fde:	26 17       	cp	r18, r22
     fe0:	37 07       	cpc	r19, r23
     fe2:	98 f4       	brcc	.+38     	; 0x100a <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9f 81       	ldd	r25, Y+7	; 0x07
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodhi4>
     ff0:	e8 81       	ld	r30, Y
     ff2:	f9 81       	ldd	r31, Y+1	; 0x01
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	9d 83       	std	Y+5, r25	; 0x05
    1002:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    1004:	4f bf       	out	0x3f, r20	; 63
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	02 c0       	rjmp	.+4      	; 0x100e <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    100a:	4f bf       	out	0x3f, r20	; 63
    100c:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	08 95       	ret

00001016 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    1016:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1018:	8f b7       	in	r24, 0x3f	; 63
    101a:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    101c:	8f bf       	out	0x3f, r24	; 63
    101e:	22 81       	ldd	r18, Z+2	; 0x02
    1020:	33 81       	ldd	r19, Z+3	; 0x03
    1022:	84 81       	ldd	r24, Z+4	; 0x04
    1024:	95 81       	ldd	r25, Z+5	; 0x05
    1026:	28 1b       	sub	r18, r24
    1028:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    102a:	c9 01       	movw	r24, r18
    102c:	08 95       	ret

0000102e <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    102e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1030:	8f b7       	in	r24, 0x3f	; 63
    1032:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    1034:	15 82       	std	Z+5, r1	; 0x05
    1036:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1038:	8f bf       	out	0x3f, r24	; 63
}
    103a:	08 95       	ret

0000103c <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    103c:	60 91 9a 01 	lds	r22, 0x019A
    1040:	70 91 9b 01 	lds	r23, 0x019B
	return wheel_left_tick_counter;
}
    1044:	80 91 9c 01 	lds	r24, 0x019C
    1048:	90 91 9d 01 	lds	r25, 0x019D
    104c:	08 95       	ret

0000104e <get_right_count>:

u32 get_right_count(void){
    104e:	60 91 9e 01 	lds	r22, 0x019E
    1052:	70 91 9f 01 	lds	r23, 0x019F
	return wheel_right_tick_counter;
}
    1056:	80 91 a0 01 	lds	r24, 0x01A0
    105a:	90 91 a1 01 	lds	r25, 0x01A1
    105e:	08 95       	ret

00001060 <__vector_5>:

SIGNAL(PCINT2_vect){
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	2f 93       	push	r18
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    1074:	29 b1       	in	r18, 0x09	; 9
    1076:	20 78       	andi	r18, 0x80	; 128
    1078:	20 93 a8 01 	sts	0x01A8, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    107c:	80 91 a9 01 	lds	r24, 0x01A9
    1080:	82 17       	cp	r24, r18
    1082:	58 f4       	brcc	.+22     	; 0x109a <__vector_5+0x3a>
    1084:	80 91 9a 01 	lds	r24, 0x019A
    1088:	90 91 9b 01 	lds	r25, 0x019B
    108c:	a0 91 9c 01 	lds	r26, 0x019C
    1090:	b0 91 9d 01 	lds	r27, 0x019D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    1094:	18 9b       	sbis	0x03, 0	; 3
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <__vector_5+0x4e>
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <__vector_5+0x56>
    109a:	80 91 9a 01 	lds	r24, 0x019A
    109e:	90 91 9b 01 	lds	r25, 0x019B
    10a2:	a0 91 9c 01 	lds	r26, 0x019C
    10a6:	b0 91 9d 01 	lds	r27, 0x019D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    10aa:	18 9b       	sbis	0x03, 0	; 3
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	a1 1d       	adc	r26, r1
    10b2:	b1 1d       	adc	r27, r1
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	a1 09       	sbc	r26, r1
    10ba:	b1 09       	sbc	r27, r1
    10bc:	80 93 9a 01 	sts	0x019A, r24
    10c0:	90 93 9b 01 	sts	0x019B, r25
    10c4:	a0 93 9c 01 	sts	0x019C, r26
    10c8:	b0 93 9d 01 	sts	0x019D, r27
		}
	}
	pin_level_past = pin_level_current;
    10cc:	20 93 a9 01 	sts	0x01A9, r18
	
}
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	2f 91       	pop	r18
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_3>:
SIGNAL(PCINT0_vect){
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    10fc:	33 b1       	in	r19, 0x03	; 3
    10fe:	31 70       	andi	r19, 0x01	; 1
    1100:	30 93 a6 01 	sts	0x01A6, r19
	PINB4_current = bit_is_set(PINB,4);
    1104:	23 b1       	in	r18, 0x03	; 3
    1106:	20 71       	andi	r18, 0x10	; 16
    1108:	20 93 a4 01 	sts	0x01A4, r18
	PINB5_current = bit_is_set(PINB,5);
    110c:	43 b1       	in	r20, 0x03	; 3
    110e:	40 72       	andi	r20, 0x20	; 32
    1110:	40 93 a2 01 	sts	0x01A2, r20

	if(PINB0_current != PINB0_past){
    1114:	80 91 a7 01 	lds	r24, 0x01A7
    1118:	38 17       	cp	r19, r24
    111a:	49 f1       	breq	.+82     	; 0x116e <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    111c:	83 17       	cp	r24, r19
    111e:	58 f4       	brcc	.+22     	; 0x1136 <__vector_3+0x52>
    1120:	80 91 9a 01 	lds	r24, 0x019A
    1124:	90 91 9b 01 	lds	r25, 0x019B
    1128:	a0 91 9c 01 	lds	r26, 0x019C
    112c:	b0 91 9d 01 	lds	r27, 0x019D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    1130:	4f 9b       	sbis	0x09, 7	; 9
    1132:	0b c0       	rjmp	.+22     	; 0x114a <__vector_3+0x66>
    1134:	0e c0       	rjmp	.+28     	; 0x1152 <__vector_3+0x6e>
    1136:	80 91 9a 01 	lds	r24, 0x019A
    113a:	90 91 9b 01 	lds	r25, 0x019B
    113e:	a0 91 9c 01 	lds	r26, 0x019C
    1142:	b0 91 9d 01 	lds	r27, 0x019D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    1146:	4f 9b       	sbis	0x09, 7	; 9
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	a1 09       	sbc	r26, r1
    114e:	b1 09       	sbc	r27, r1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	a1 1d       	adc	r26, r1
    1156:	b1 1d       	adc	r27, r1
    1158:	80 93 9a 01 	sts	0x019A, r24
    115c:	90 93 9b 01 	sts	0x019B, r25
    1160:	a0 93 9c 01 	sts	0x019C, r26
    1164:	b0 93 9d 01 	sts	0x019D, r27
			}
		}
		PINB0_past = PINB0_current;
    1168:	30 93 a7 01 	sts	0x01A7, r19
    116c:	57 c0       	rjmp	.+174    	; 0x121c <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    116e:	80 91 a5 01 	lds	r24, 0x01A5
    1172:	28 17       	cp	r18, r24
    1174:	49 f1       	breq	.+82     	; 0x11c8 <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    1176:	82 17       	cp	r24, r18
    1178:	58 f4       	brcc	.+22     	; 0x1190 <__vector_3+0xac>
    117a:	80 91 9e 01 	lds	r24, 0x019E
    117e:	90 91 9f 01 	lds	r25, 0x019F
    1182:	a0 91 a0 01 	lds	r26, 0x01A0
    1186:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    118a:	1d 9b       	sbis	0x03, 5	; 3
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <__vector_3+0xc0>
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <__vector_3+0xc8>
    1190:	80 91 9e 01 	lds	r24, 0x019E
    1194:	90 91 9f 01 	lds	r25, 0x019F
    1198:	a0 91 a0 01 	lds	r26, 0x01A0
    119c:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    11a0:	1d 9b       	sbis	0x03, 5	; 3
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	a1 09       	sbc	r26, r1
    11a8:	b1 09       	sbc	r27, r1
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	a1 1d       	adc	r26, r1
    11b0:	b1 1d       	adc	r27, r1
    11b2:	80 93 9e 01 	sts	0x019E, r24
    11b6:	90 93 9f 01 	sts	0x019F, r25
    11ba:	a0 93 a0 01 	sts	0x01A0, r26
    11be:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB4_past = PINB4_current;
    11c2:	20 93 a5 01 	sts	0x01A5, r18
    11c6:	2a c0       	rjmp	.+84     	; 0x121c <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    11c8:	80 91 a3 01 	lds	r24, 0x01A3
    11cc:	84 17       	cp	r24, r20
    11ce:	58 f4       	brcc	.+22     	; 0x11e6 <__vector_3+0x102>
    11d0:	80 91 9e 01 	lds	r24, 0x019E
    11d4:	90 91 9f 01 	lds	r25, 0x019F
    11d8:	a0 91 a0 01 	lds	r26, 0x01A0
    11dc:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    11e0:	1c 9b       	sbis	0x03, 4	; 3
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <__vector_3+0x116>
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <__vector_3+0x11e>
    11e6:	80 91 9e 01 	lds	r24, 0x019E
    11ea:	90 91 9f 01 	lds	r25, 0x019F
    11ee:	a0 91 a0 01 	lds	r26, 0x01A0
    11f2:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    11f6:	1c 9b       	sbis	0x03, 4	; 3
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	a1 1d       	adc	r26, r1
    11fe:	b1 1d       	adc	r27, r1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	80 93 9e 01 	sts	0x019E, r24
    120c:	90 93 9f 01 	sts	0x019F, r25
    1210:	a0 93 a0 01 	sts	0x01A0, r26
    1214:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB5_past = PINB5_current;
    1218:	40 93 a3 01 	sts	0x01A3, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_default>:


ISR(BADISR_vect){
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
	
}
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <exit>:
    1248:	f8 94       	cli
    124a:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <_exit>

0000124e <__subsf3>:
    124e:	50 58       	subi	r21, 0x80	; 128

00001250 <__addsf3>:
    1250:	bb 27       	eor	r27, r27
    1252:	aa 27       	eor	r26, r26
    1254:	0e d0       	rcall	.+28     	; 0x1272 <__addsf3x>
    1256:	70 c1       	rjmp	.+736    	; 0x1538 <__fp_round>
    1258:	61 d1       	rcall	.+706    	; 0x151c <__fp_pscA>
    125a:	30 f0       	brcs	.+12     	; 0x1268 <__addsf3+0x18>
    125c:	66 d1       	rcall	.+716    	; 0x152a <__fp_pscB>
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__addsf3+0x18>
    1260:	31 f4       	brne	.+12     	; 0x126e <__addsf3+0x1e>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	11 f4       	brne	.+4      	; 0x126a <__addsf3+0x1a>
    1266:	1e f4       	brtc	.+6      	; 0x126e <__addsf3+0x1e>
    1268:	56 c1       	rjmp	.+684    	; 0x1516 <__fp_nan>
    126a:	0e f4       	brtc	.+2      	; 0x126e <__addsf3+0x1e>
    126c:	e0 95       	com	r30
    126e:	e7 fb       	bst	r30, 7
    1270:	4c c1       	rjmp	.+664    	; 0x150a <__fp_inf>

00001272 <__addsf3x>:
    1272:	e9 2f       	mov	r30, r25
    1274:	72 d1       	rcall	.+740    	; 0x155a <__fp_split3>
    1276:	80 f3       	brcs	.-32     	; 0x1258 <__addsf3+0x8>
    1278:	ba 17       	cp	r27, r26
    127a:	62 07       	cpc	r22, r18
    127c:	73 07       	cpc	r23, r19
    127e:	84 07       	cpc	r24, r20
    1280:	95 07       	cpc	r25, r21
    1282:	18 f0       	brcs	.+6      	; 0x128a <__addsf3x+0x18>
    1284:	71 f4       	brne	.+28     	; 0x12a2 <__addsf3x+0x30>
    1286:	9e f5       	brtc	.+102    	; 0x12ee <__addsf3x+0x7c>
    1288:	8a c1       	rjmp	.+788    	; 0x159e <__fp_zero>
    128a:	0e f4       	brtc	.+2      	; 0x128e <__addsf3x+0x1c>
    128c:	e0 95       	com	r30
    128e:	0b 2e       	mov	r0, r27
    1290:	ba 2f       	mov	r27, r26
    1292:	a0 2d       	mov	r26, r0
    1294:	0b 01       	movw	r0, r22
    1296:	b9 01       	movw	r22, r18
    1298:	90 01       	movw	r18, r0
    129a:	0c 01       	movw	r0, r24
    129c:	ca 01       	movw	r24, r20
    129e:	a0 01       	movw	r20, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	ff 27       	eor	r31, r31
    12a4:	59 1b       	sub	r21, r25
    12a6:	99 f0       	breq	.+38     	; 0x12ce <__addsf3x+0x5c>
    12a8:	59 3f       	cpi	r21, 0xF9	; 249
    12aa:	50 f4       	brcc	.+20     	; 0x12c0 <__addsf3x+0x4e>
    12ac:	50 3e       	cpi	r21, 0xE0	; 224
    12ae:	68 f1       	brcs	.+90     	; 0x130a <__addsf3x+0x98>
    12b0:	1a 16       	cp	r1, r26
    12b2:	f0 40       	sbci	r31, 0x00	; 0
    12b4:	a2 2f       	mov	r26, r18
    12b6:	23 2f       	mov	r18, r19
    12b8:	34 2f       	mov	r19, r20
    12ba:	44 27       	eor	r20, r20
    12bc:	58 5f       	subi	r21, 0xF8	; 248
    12be:	f3 cf       	rjmp	.-26     	; 0x12a6 <__addsf3x+0x34>
    12c0:	46 95       	lsr	r20
    12c2:	37 95       	ror	r19
    12c4:	27 95       	ror	r18
    12c6:	a7 95       	ror	r26
    12c8:	f0 40       	sbci	r31, 0x00	; 0
    12ca:	53 95       	inc	r21
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__addsf3x+0x4e>
    12ce:	7e f4       	brtc	.+30     	; 0x12ee <__addsf3x+0x7c>
    12d0:	1f 16       	cp	r1, r31
    12d2:	ba 0b       	sbc	r27, r26
    12d4:	62 0b       	sbc	r22, r18
    12d6:	73 0b       	sbc	r23, r19
    12d8:	84 0b       	sbc	r24, r20
    12da:	ba f0       	brmi	.+46     	; 0x130a <__addsf3x+0x98>
    12dc:	91 50       	subi	r25, 0x01	; 1
    12de:	a1 f0       	breq	.+40     	; 0x1308 <__addsf3x+0x96>
    12e0:	ff 0f       	add	r31, r31
    12e2:	bb 1f       	adc	r27, r27
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	c2 f7       	brpl	.-16     	; 0x12dc <__addsf3x+0x6a>
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <__addsf3x+0x98>
    12ee:	ba 0f       	add	r27, r26
    12f0:	62 1f       	adc	r22, r18
    12f2:	73 1f       	adc	r23, r19
    12f4:	84 1f       	adc	r24, r20
    12f6:	48 f4       	brcc	.+18     	; 0x130a <__addsf3x+0x98>
    12f8:	87 95       	ror	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f7 95       	ror	r31
    1302:	9e 3f       	cpi	r25, 0xFE	; 254
    1304:	08 f0       	brcs	.+2      	; 0x1308 <__addsf3x+0x96>
    1306:	b3 cf       	rjmp	.-154    	; 0x126e <__addsf3+0x1e>
    1308:	93 95       	inc	r25
    130a:	88 0f       	add	r24, r24
    130c:	08 f0       	brcs	.+2      	; 0x1310 <__addsf3x+0x9e>
    130e:	99 27       	eor	r25, r25
    1310:	ee 0f       	add	r30, r30
    1312:	97 95       	ror	r25
    1314:	87 95       	ror	r24
    1316:	08 95       	ret

00001318 <__cmpsf2>:
    1318:	d4 d0       	rcall	.+424    	; 0x14c2 <__fp_cmp>
    131a:	08 f4       	brcc	.+2      	; 0x131e <__cmpsf2+0x6>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	08 95       	ret

00001320 <__divsf3>:
    1320:	0c d0       	rcall	.+24     	; 0x133a <__divsf3x>
    1322:	0a c1       	rjmp	.+532    	; 0x1538 <__fp_round>
    1324:	02 d1       	rcall	.+516    	; 0x152a <__fp_pscB>
    1326:	40 f0       	brcs	.+16     	; 0x1338 <__divsf3+0x18>
    1328:	f9 d0       	rcall	.+498    	; 0x151c <__fp_pscA>
    132a:	30 f0       	brcs	.+12     	; 0x1338 <__divsf3+0x18>
    132c:	21 f4       	brne	.+8      	; 0x1336 <__divsf3+0x16>
    132e:	5f 3f       	cpi	r21, 0xFF	; 255
    1330:	19 f0       	breq	.+6      	; 0x1338 <__divsf3+0x18>
    1332:	eb c0       	rjmp	.+470    	; 0x150a <__fp_inf>
    1334:	51 11       	cpse	r21, r1
    1336:	34 c1       	rjmp	.+616    	; 0x15a0 <__fp_szero>
    1338:	ee c0       	rjmp	.+476    	; 0x1516 <__fp_nan>

0000133a <__divsf3x>:
    133a:	0f d1       	rcall	.+542    	; 0x155a <__fp_split3>
    133c:	98 f3       	brcs	.-26     	; 0x1324 <__divsf3+0x4>

0000133e <__divsf3_pse>:
    133e:	99 23       	and	r25, r25
    1340:	c9 f3       	breq	.-14     	; 0x1334 <__divsf3+0x14>
    1342:	55 23       	and	r21, r21
    1344:	b1 f3       	breq	.-20     	; 0x1332 <__divsf3+0x12>
    1346:	95 1b       	sub	r25, r21
    1348:	55 0b       	sbc	r21, r21
    134a:	bb 27       	eor	r27, r27
    134c:	aa 27       	eor	r26, r26
    134e:	62 17       	cp	r22, r18
    1350:	73 07       	cpc	r23, r19
    1352:	84 07       	cpc	r24, r20
    1354:	38 f0       	brcs	.+14     	; 0x1364 <__divsf3_pse+0x26>
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	44 1f       	adc	r20, r20
    1360:	aa 1f       	adc	r26, r26
    1362:	a9 f3       	breq	.-22     	; 0x134e <__divsf3_pse+0x10>
    1364:	33 d0       	rcall	.+102    	; 0x13cc <__divsf3_pse+0x8e>
    1366:	0e 2e       	mov	r0, r30
    1368:	3a f0       	brmi	.+14     	; 0x1378 <__divsf3_pse+0x3a>
    136a:	e0 e8       	ldi	r30, 0x80	; 128
    136c:	30 d0       	rcall	.+96     	; 0x13ce <__divsf3_pse+0x90>
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	e6 95       	lsr	r30
    1374:	00 1c       	adc	r0, r0
    1376:	ca f7       	brpl	.-14     	; 0x136a <__divsf3_pse+0x2c>
    1378:	29 d0       	rcall	.+82     	; 0x13cc <__divsf3_pse+0x8e>
    137a:	fe 2f       	mov	r31, r30
    137c:	27 d0       	rcall	.+78     	; 0x13cc <__divsf3_pse+0x8e>
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	bb 1f       	adc	r27, r27
    1386:	26 17       	cp	r18, r22
    1388:	37 07       	cpc	r19, r23
    138a:	48 07       	cpc	r20, r24
    138c:	ab 07       	cpc	r26, r27
    138e:	b0 e8       	ldi	r27, 0x80	; 128
    1390:	09 f0       	breq	.+2      	; 0x1394 <__divsf3_pse+0x56>
    1392:	bb 0b       	sbc	r27, r27
    1394:	80 2d       	mov	r24, r0
    1396:	bf 01       	movw	r22, r30
    1398:	ff 27       	eor	r31, r31
    139a:	93 58       	subi	r25, 0x83	; 131
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	2a f0       	brmi	.+10     	; 0x13aa <__divsf3_pse+0x6c>
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	51 05       	cpc	r21, r1
    13a4:	68 f0       	brcs	.+26     	; 0x13c0 <__divsf3_pse+0x82>
    13a6:	b1 c0       	rjmp	.+354    	; 0x150a <__fp_inf>
    13a8:	fb c0       	rjmp	.+502    	; 0x15a0 <__fp_szero>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	ec f3       	brlt	.-6      	; 0x13a8 <__divsf3_pse+0x6a>
    13ae:	98 3e       	cpi	r25, 0xE8	; 232
    13b0:	dc f3       	brlt	.-10     	; 0x13a8 <__divsf3_pse+0x6a>
    13b2:	86 95       	lsr	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	9f 5f       	subi	r25, 0xFF	; 255
    13be:	c9 f7       	brne	.-14     	; 0x13b2 <__divsf3_pse+0x74>
    13c0:	88 0f       	add	r24, r24
    13c2:	91 1d       	adc	r25, r1
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	97 f9       	bld	r25, 7
    13ca:	08 95       	ret
    13cc:	e1 e0       	ldi	r30, 0x01	; 1
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	bb 1f       	adc	r27, r27
    13d6:	62 17       	cp	r22, r18
    13d8:	73 07       	cpc	r23, r19
    13da:	84 07       	cpc	r24, r20
    13dc:	ba 07       	cpc	r27, r26
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__divsf3_pse+0xaa>
    13e0:	62 1b       	sub	r22, r18
    13e2:	73 0b       	sbc	r23, r19
    13e4:	84 0b       	sbc	r24, r20
    13e6:	ba 0b       	sbc	r27, r26
    13e8:	ee 1f       	adc	r30, r30
    13ea:	88 f7       	brcc	.-30     	; 0x13ce <__divsf3_pse+0x90>
    13ec:	e0 95       	com	r30
    13ee:	08 95       	ret

000013f0 <__fixunssfsi>:
    13f0:	bc d0       	rcall	.+376    	; 0x156a <__fp_splitA>
    13f2:	88 f0       	brcs	.+34     	; 0x1416 <__fixunssfsi+0x26>
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	90 f0       	brcs	.+36     	; 0x141c <__fixunssfsi+0x2c>
    13f8:	b9 2f       	mov	r27, r25
    13fa:	99 27       	eor	r25, r25
    13fc:	b7 51       	subi	r27, 0x17	; 23
    13fe:	a0 f0       	brcs	.+40     	; 0x1428 <__fixunssfsi+0x38>
    1400:	d1 f0       	breq	.+52     	; 0x1436 <__fixunssfsi+0x46>
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1a f0       	brmi	.+6      	; 0x1412 <__fixunssfsi+0x22>
    140c:	ba 95       	dec	r27
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__fixunssfsi+0x12>
    1410:	12 c0       	rjmp	.+36     	; 0x1436 <__fixunssfsi+0x46>
    1412:	b1 30       	cpi	r27, 0x01	; 1
    1414:	81 f0       	breq	.+32     	; 0x1436 <__fixunssfsi+0x46>
    1416:	c3 d0       	rcall	.+390    	; 0x159e <__fp_zero>
    1418:	b1 e0       	ldi	r27, 0x01	; 1
    141a:	08 95       	ret
    141c:	c0 c0       	rjmp	.+384    	; 0x159e <__fp_zero>
    141e:	67 2f       	mov	r22, r23
    1420:	78 2f       	mov	r23, r24
    1422:	88 27       	eor	r24, r24
    1424:	b8 5f       	subi	r27, 0xF8	; 248
    1426:	39 f0       	breq	.+14     	; 0x1436 <__fixunssfsi+0x46>
    1428:	b9 3f       	cpi	r27, 0xF9	; 249
    142a:	cc f3       	brlt	.-14     	; 0x141e <__fixunssfsi+0x2e>
    142c:	86 95       	lsr	r24
    142e:	77 95       	ror	r23
    1430:	67 95       	ror	r22
    1432:	b3 95       	inc	r27
    1434:	d9 f7       	brne	.-10     	; 0x142c <__fixunssfsi+0x3c>
    1436:	3e f4       	brtc	.+14     	; 0x1446 <__fixunssfsi+0x56>
    1438:	90 95       	com	r25
    143a:	80 95       	com	r24
    143c:	70 95       	com	r23
    143e:	61 95       	neg	r22
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	08 95       	ret

00001448 <__floatunsisf>:
    1448:	e8 94       	clt
    144a:	09 c0       	rjmp	.+18     	; 0x145e <__floatsisf+0x12>

0000144c <__floatsisf>:
    144c:	97 fb       	bst	r25, 7
    144e:	3e f4       	brtc	.+14     	; 0x145e <__floatsisf+0x12>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	99 23       	and	r25, r25
    1460:	a9 f0       	breq	.+42     	; 0x148c <__floatsisf+0x40>
    1462:	f9 2f       	mov	r31, r25
    1464:	96 e9       	ldi	r25, 0x96	; 150
    1466:	bb 27       	eor	r27, r27
    1468:	93 95       	inc	r25
    146a:	f6 95       	lsr	r31
    146c:	87 95       	ror	r24
    146e:	77 95       	ror	r23
    1470:	67 95       	ror	r22
    1472:	b7 95       	ror	r27
    1474:	f1 11       	cpse	r31, r1
    1476:	f8 cf       	rjmp	.-16     	; 0x1468 <__floatsisf+0x1c>
    1478:	fa f4       	brpl	.+62     	; 0x14b8 <__floatsisf+0x6c>
    147a:	bb 0f       	add	r27, r27
    147c:	11 f4       	brne	.+4      	; 0x1482 <__floatsisf+0x36>
    147e:	60 ff       	sbrs	r22, 0
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <__floatsisf+0x6c>
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	16 c0       	rjmp	.+44     	; 0x14b8 <__floatsisf+0x6c>
    148c:	88 23       	and	r24, r24
    148e:	11 f0       	breq	.+4      	; 0x1494 <__floatsisf+0x48>
    1490:	96 e9       	ldi	r25, 0x96	; 150
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <__floatsisf+0x6a>
    1494:	77 23       	and	r23, r23
    1496:	21 f0       	breq	.+8      	; 0x14a0 <__floatsisf+0x54>
    1498:	9e e8       	ldi	r25, 0x8E	; 142
    149a:	87 2f       	mov	r24, r23
    149c:	76 2f       	mov	r23, r22
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <__floatsisf+0x5e>
    14a0:	66 23       	and	r22, r22
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__floatsisf+0x74>
    14a4:	96 e8       	ldi	r25, 0x86	; 134
    14a6:	86 2f       	mov	r24, r22
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	2a f0       	brmi	.+10     	; 0x14b8 <__floatsisf+0x6c>
    14ae:	9a 95       	dec	r25
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	da f7       	brpl	.-10     	; 0x14ae <__floatsisf+0x62>
    14b8:	88 0f       	add	r24, r24
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret

000014c2 <__fp_cmp>:
    14c2:	99 0f       	add	r25, r25
    14c4:	00 08       	sbc	r0, r0
    14c6:	55 0f       	add	r21, r21
    14c8:	aa 0b       	sbc	r26, r26
    14ca:	e0 e8       	ldi	r30, 0x80	; 128
    14cc:	fe ef       	ldi	r31, 0xFE	; 254
    14ce:	16 16       	cp	r1, r22
    14d0:	17 06       	cpc	r1, r23
    14d2:	e8 07       	cpc	r30, r24
    14d4:	f9 07       	cpc	r31, r25
    14d6:	c0 f0       	brcs	.+48     	; 0x1508 <__fp_cmp+0x46>
    14d8:	12 16       	cp	r1, r18
    14da:	13 06       	cpc	r1, r19
    14dc:	e4 07       	cpc	r30, r20
    14de:	f5 07       	cpc	r31, r21
    14e0:	98 f0       	brcs	.+38     	; 0x1508 <__fp_cmp+0x46>
    14e2:	62 1b       	sub	r22, r18
    14e4:	73 0b       	sbc	r23, r19
    14e6:	84 0b       	sbc	r24, r20
    14e8:	95 0b       	sbc	r25, r21
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__fp_cmp+0x38>
    14ec:	0a 26       	eor	r0, r26
    14ee:	61 f0       	breq	.+24     	; 0x1508 <__fp_cmp+0x46>
    14f0:	23 2b       	or	r18, r19
    14f2:	24 2b       	or	r18, r20
    14f4:	25 2b       	or	r18, r21
    14f6:	21 f4       	brne	.+8      	; 0x1500 <__fp_cmp+0x3e>
    14f8:	08 95       	ret
    14fa:	0a 26       	eor	r0, r26
    14fc:	09 f4       	brne	.+2      	; 0x1500 <__fp_cmp+0x3e>
    14fe:	a1 40       	sbci	r26, 0x01	; 1
    1500:	a6 95       	lsr	r26
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	81 1d       	adc	r24, r1
    1506:	81 1d       	adc	r24, r1
    1508:	08 95       	ret

0000150a <__fp_inf>:
    150a:	97 f9       	bld	r25, 7
    150c:	9f 67       	ori	r25, 0x7F	; 127
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	08 95       	ret

00001516 <__fp_nan>:
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	80 ec       	ldi	r24, 0xC0	; 192
    151a:	08 95       	ret

0000151c <__fp_pscA>:
    151c:	00 24       	eor	r0, r0
    151e:	0a 94       	dec	r0
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	09 06       	cpc	r0, r25
    1528:	08 95       	ret

0000152a <__fp_pscB>:
    152a:	00 24       	eor	r0, r0
    152c:	0a 94       	dec	r0
    152e:	12 16       	cp	r1, r18
    1530:	13 06       	cpc	r1, r19
    1532:	14 06       	cpc	r1, r20
    1534:	05 06       	cpc	r0, r21
    1536:	08 95       	ret

00001538 <__fp_round>:
    1538:	09 2e       	mov	r0, r25
    153a:	03 94       	inc	r0
    153c:	00 0c       	add	r0, r0
    153e:	11 f4       	brne	.+4      	; 0x1544 <__fp_round+0xc>
    1540:	88 23       	and	r24, r24
    1542:	52 f0       	brmi	.+20     	; 0x1558 <__fp_round+0x20>
    1544:	bb 0f       	add	r27, r27
    1546:	40 f4       	brcc	.+16     	; 0x1558 <__fp_round+0x20>
    1548:	bf 2b       	or	r27, r31
    154a:	11 f4       	brne	.+4      	; 0x1550 <__fp_round+0x18>
    154c:	60 ff       	sbrs	r22, 0
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__fp_round+0x20>
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__fp_split3>:
    155a:	57 fd       	sbrc	r21, 7
    155c:	90 58       	subi	r25, 0x80	; 128
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	59 f0       	breq	.+22     	; 0x157a <__fp_splitA+0x10>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	71 f0       	breq	.+28     	; 0x1584 <__fp_splitA+0x1a>
    1568:	47 95       	ror	r20

0000156a <__fp_splitA>:
    156a:	88 0f       	add	r24, r24
    156c:	97 fb       	bst	r25, 7
    156e:	99 1f       	adc	r25, r25
    1570:	61 f0       	breq	.+24     	; 0x158a <__fp_splitA+0x20>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	79 f0       	breq	.+30     	; 0x1594 <__fp_splitA+0x2a>
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	12 16       	cp	r1, r18
    157c:	13 06       	cpc	r1, r19
    157e:	14 06       	cpc	r1, r20
    1580:	55 1f       	adc	r21, r21
    1582:	f2 cf       	rjmp	.-28     	; 0x1568 <__fp_split3+0xe>
    1584:	46 95       	lsr	r20
    1586:	f1 df       	rcall	.-30     	; 0x156a <__fp_splitA>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__fp_splitA+0x30>
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	99 1f       	adc	r25, r25
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <__fp_splitA+0xc>
    1594:	86 95       	lsr	r24
    1596:	71 05       	cpc	r23, r1
    1598:	61 05       	cpc	r22, r1
    159a:	08 94       	sec
    159c:	08 95       	ret

0000159e <__fp_zero>:
    159e:	e8 94       	clt

000015a0 <__fp_szero>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	66 27       	eor	r22, r22
    15a4:	77 27       	eor	r23, r23
    15a6:	cb 01       	movw	r24, r22
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret

000015ac <__gesf2>:
    15ac:	8a df       	rcall	.-236    	; 0x14c2 <__fp_cmp>
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <__gesf2+0x6>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <__mulsf3>:
    15b4:	0b d0       	rcall	.+22     	; 0x15cc <__mulsf3x>
    15b6:	c0 cf       	rjmp	.-128    	; 0x1538 <__fp_round>
    15b8:	b1 df       	rcall	.-158    	; 0x151c <__fp_pscA>
    15ba:	28 f0       	brcs	.+10     	; 0x15c6 <__mulsf3+0x12>
    15bc:	b6 df       	rcall	.-148    	; 0x152a <__fp_pscB>
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <__mulsf3+0x12>
    15c0:	95 23       	and	r25, r21
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <__mulsf3+0x12>
    15c4:	a2 cf       	rjmp	.-188    	; 0x150a <__fp_inf>
    15c6:	a7 cf       	rjmp	.-178    	; 0x1516 <__fp_nan>
    15c8:	11 24       	eor	r1, r1
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__fp_szero>

000015cc <__mulsf3x>:
    15cc:	c6 df       	rcall	.-116    	; 0x155a <__fp_split3>
    15ce:	a0 f3       	brcs	.-24     	; 0x15b8 <__mulsf3+0x4>

000015d0 <__mulsf3_pse>:
    15d0:	95 9f       	mul	r25, r21
    15d2:	d1 f3       	breq	.-12     	; 0x15c8 <__mulsf3+0x14>
    15d4:	95 0f       	add	r25, r21
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	55 1f       	adc	r21, r21
    15da:	62 9f       	mul	r22, r18
    15dc:	f0 01       	movw	r30, r0
    15de:	72 9f       	mul	r23, r18
    15e0:	bb 27       	eor	r27, r27
    15e2:	f0 0d       	add	r31, r0
    15e4:	b1 1d       	adc	r27, r1
    15e6:	63 9f       	mul	r22, r19
    15e8:	aa 27       	eor	r26, r26
    15ea:	f0 0d       	add	r31, r0
    15ec:	b1 1d       	adc	r27, r1
    15ee:	aa 1f       	adc	r26, r26
    15f0:	64 9f       	mul	r22, r20
    15f2:	66 27       	eor	r22, r22
    15f4:	b0 0d       	add	r27, r0
    15f6:	a1 1d       	adc	r26, r1
    15f8:	66 1f       	adc	r22, r22
    15fa:	82 9f       	mul	r24, r18
    15fc:	22 27       	eor	r18, r18
    15fe:	b0 0d       	add	r27, r0
    1600:	a1 1d       	adc	r26, r1
    1602:	62 1f       	adc	r22, r18
    1604:	73 9f       	mul	r23, r19
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	62 1f       	adc	r22, r18
    160c:	83 9f       	mul	r24, r19
    160e:	a0 0d       	add	r26, r0
    1610:	61 1d       	adc	r22, r1
    1612:	22 1f       	adc	r18, r18
    1614:	74 9f       	mul	r23, r20
    1616:	33 27       	eor	r19, r19
    1618:	a0 0d       	add	r26, r0
    161a:	61 1d       	adc	r22, r1
    161c:	23 1f       	adc	r18, r19
    161e:	84 9f       	mul	r24, r20
    1620:	60 0d       	add	r22, r0
    1622:	21 1d       	adc	r18, r1
    1624:	82 2f       	mov	r24, r18
    1626:	76 2f       	mov	r23, r22
    1628:	6a 2f       	mov	r22, r26
    162a:	11 24       	eor	r1, r1
    162c:	9f 57       	subi	r25, 0x7F	; 127
    162e:	50 40       	sbci	r21, 0x00	; 0
    1630:	8a f0       	brmi	.+34     	; 0x1654 <__mulsf3_pse+0x84>
    1632:	e1 f0       	breq	.+56     	; 0x166c <__mulsf3_pse+0x9c>
    1634:	88 23       	and	r24, r24
    1636:	4a f0       	brmi	.+18     	; 0x164a <__mulsf3_pse+0x7a>
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	bb 1f       	adc	r27, r27
    163e:	66 1f       	adc	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	91 50       	subi	r25, 0x01	; 1
    1646:	50 40       	sbci	r21, 0x00	; 0
    1648:	a9 f7       	brne	.-22     	; 0x1634 <__mulsf3_pse+0x64>
    164a:	9e 3f       	cpi	r25, 0xFE	; 254
    164c:	51 05       	cpc	r21, r1
    164e:	70 f0       	brcs	.+28     	; 0x166c <__mulsf3_pse+0x9c>
    1650:	5c cf       	rjmp	.-328    	; 0x150a <__fp_inf>
    1652:	a6 cf       	rjmp	.-180    	; 0x15a0 <__fp_szero>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	ec f3       	brlt	.-6      	; 0x1652 <__mulsf3_pse+0x82>
    1658:	98 3e       	cpi	r25, 0xE8	; 232
    165a:	dc f3       	brlt	.-10     	; 0x1652 <__mulsf3_pse+0x82>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	e7 95       	ror	r30
    1668:	9f 5f       	subi	r25, 0xFF	; 255
    166a:	c1 f7       	brne	.-16     	; 0x165c <__mulsf3_pse+0x8c>
    166c:	fe 2b       	or	r31, r30
    166e:	88 0f       	add	r24, r24
    1670:	91 1d       	adc	r25, r1
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	97 f9       	bld	r25, 7
    1678:	08 95       	ret

0000167a <__mulsi3>:
    167a:	62 9f       	mul	r22, r18
    167c:	d0 01       	movw	r26, r0
    167e:	73 9f       	mul	r23, r19
    1680:	f0 01       	movw	r30, r0
    1682:	82 9f       	mul	r24, r18
    1684:	e0 0d       	add	r30, r0
    1686:	f1 1d       	adc	r31, r1
    1688:	64 9f       	mul	r22, r20
    168a:	e0 0d       	add	r30, r0
    168c:	f1 1d       	adc	r31, r1
    168e:	92 9f       	mul	r25, r18
    1690:	f0 0d       	add	r31, r0
    1692:	83 9f       	mul	r24, r19
    1694:	f0 0d       	add	r31, r0
    1696:	74 9f       	mul	r23, r20
    1698:	f0 0d       	add	r31, r0
    169a:	65 9f       	mul	r22, r21
    169c:	f0 0d       	add	r31, r0
    169e:	99 27       	eor	r25, r25
    16a0:	72 9f       	mul	r23, r18
    16a2:	b0 0d       	add	r27, r0
    16a4:	e1 1d       	adc	r30, r1
    16a6:	f9 1f       	adc	r31, r25
    16a8:	63 9f       	mul	r22, r19
    16aa:	b0 0d       	add	r27, r0
    16ac:	e1 1d       	adc	r30, r1
    16ae:	f9 1f       	adc	r31, r25
    16b0:	bd 01       	movw	r22, r26
    16b2:	cf 01       	movw	r24, r30
    16b4:	11 24       	eor	r1, r1
    16b6:	08 95       	ret

000016b8 <__udivmodhi4>:
    16b8:	aa 1b       	sub	r26, r26
    16ba:	bb 1b       	sub	r27, r27
    16bc:	51 e1       	ldi	r21, 0x11	; 17
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <__udivmodhi4_ep>

000016c0 <__udivmodhi4_loop>:
    16c0:	aa 1f       	adc	r26, r26
    16c2:	bb 1f       	adc	r27, r27
    16c4:	a6 17       	cp	r26, r22
    16c6:	b7 07       	cpc	r27, r23
    16c8:	10 f0       	brcs	.+4      	; 0x16ce <__udivmodhi4_ep>
    16ca:	a6 1b       	sub	r26, r22
    16cc:	b7 0b       	sbc	r27, r23

000016ce <__udivmodhi4_ep>:
    16ce:	88 1f       	adc	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	5a 95       	dec	r21
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <__udivmodhi4_loop>
    16d6:	80 95       	com	r24
    16d8:	90 95       	com	r25
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	08 95       	ret

000016e0 <__udivmodsi4>:
    16e0:	a1 e2       	ldi	r26, 0x21	; 33
    16e2:	1a 2e       	mov	r1, r26
    16e4:	aa 1b       	sub	r26, r26
    16e6:	bb 1b       	sub	r27, r27
    16e8:	fd 01       	movw	r30, r26
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <__udivmodsi4_ep>

000016ec <__udivmodsi4_loop>:
    16ec:	aa 1f       	adc	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	ee 1f       	adc	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	a2 17       	cp	r26, r18
    16f6:	b3 07       	cpc	r27, r19
    16f8:	e4 07       	cpc	r30, r20
    16fa:	f5 07       	cpc	r31, r21
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__udivmodsi4_ep>
    16fe:	a2 1b       	sub	r26, r18
    1700:	b3 0b       	sbc	r27, r19
    1702:	e4 0b       	sbc	r30, r20
    1704:	f5 0b       	sbc	r31, r21

00001706 <__udivmodsi4_ep>:
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	1a 94       	dec	r1
    1710:	69 f7       	brne	.-38     	; 0x16ec <__udivmodsi4_loop>
    1712:	60 95       	com	r22
    1714:	70 95       	com	r23
    1716:	80 95       	com	r24
    1718:	90 95       	com	r25
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	bd 01       	movw	r22, r26
    1720:	cf 01       	movw	r24, r30
    1722:	08 95       	ret

00001724 <_exit>:
    1724:	f8 94       	cli

00001726 <__stop_program>:
    1726:	ff cf       	rjmp	.-2      	; 0x1726 <__stop_program>


picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000288c  00002920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000288c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080010c  0080010c  0000292c  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000aeb  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cf7  00000000  00000000  000034f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d0  00000000  00000000  000051ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001747  00000000  00000000  00005abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000540  00000000  00000000  00007208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b3c  00000000  00000000  00007748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e19  00000000  00000000  00008284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 05 11 	jmp	0x220a	; 0x220a <__vector_3>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__vector_5>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_16>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_18>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_20>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <HexChars>:
      68:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ec e8       	ldi	r30, 0x8C	; 140
      8e:	f8 e2       	ldi	r31, 0x28	; 40
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	ac 30       	cpi	r26, 0x0C	; 12
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	13 e0       	ldi	r17, 0x03	; 3
      9e:	ac e0       	ldi	r26, 0x0C	; 12
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 33       	cpi	r26, 0x32	; 50
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
      b0:	0c 94 b7 11 	jmp	0x236e	; 0x236e <exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_default>

000000b8 <ubRcv>:
	sbi(DDRB,DDB1);		// Pin 9
	sbi(DDRB,DDB2);		// Pin 10
}

void ubRcv(unsigned char c){
	if(c != 0xff){
      b8:	8f 3f       	cpi	r24, 0xFF	; 255
      ba:	b9 f0       	breq	.+46     	; 0xea <ubRcv+0x32>
		*ub_buffer_write_ndx = c;
      bc:	e0 91 0c 01 	lds	r30, 0x010C
      c0:	f0 91 0d 01 	lds	r31, 0x010D
      c4:	80 83       	st	Z, r24
		ub_buffer_write_ndx++;		
      c6:	80 91 0c 01 	lds	r24, 0x010C
      ca:	90 91 0d 01 	lds	r25, 0x010D
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	90 93 0d 01 	sts	0x010D, r25
      d4:	80 93 0c 01 	sts	0x010C, r24
		if(ub_buffer_write_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
      d8:	8a 55       	subi	r24, 0x5A	; 90
      da:	92 40       	sbci	r25, 0x02	; 2
      dc:	30 f0       	brcs	.+12     	; 0xea <ubRcv+0x32>
			ub_buffer_write_ndx = ub_buffer;
      de:	82 e5       	ldi	r24, 0x52	; 82
      e0:	92 e0       	ldi	r25, 0x02	; 2
      e2:	90 93 0d 01 	sts	0x010D, r25
      e6:	80 93 0c 01 	sts	0x010C, r24
      ea:	08 95       	ret

000000ec <init_ub_buffer>:
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
      ec:	82 e5       	ldi	r24, 0x52	; 82
      ee:	92 e0       	ldi	r25, 0x02	; 2
      f0:	90 93 0f 01 	sts	0x010F, r25
      f4:	80 93 0e 01 	sts	0x010E, r24
      f8:	90 93 0d 01 	sts	0x010D, r25
      fc:	80 93 0c 01 	sts	0x010C, r24
}
     100:	08 95       	ret

00000102 <read_ub>:
			ub_buffer_write_ndx = ub_buffer;
		}
	}
}

uint8_t read_ub(){
     102:	04 c0       	rjmp	.+8      	; 0x10c <read_ub+0xa>
	while(ub_buffer_read_ndx == ub_buffer_write_ndx){ delay_us(10); };
     104:	8a e0       	ldi	r24, 0x0A	; 10
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <delay_us>
     10c:	e0 91 0e 01 	lds	r30, 0x010E
     110:	f0 91 0f 01 	lds	r31, 0x010F
     114:	80 91 0c 01 	lds	r24, 0x010C
     118:	90 91 0d 01 	lds	r25, 0x010D
     11c:	e8 17       	cp	r30, r24
     11e:	f9 07       	cpc	r31, r25
     120:	89 f3       	breq	.-30     	; 0x104 <read_ub+0x2>
	uint8_t data = *ub_buffer_read_ndx;
     122:	21 91       	ld	r18, Z+
	ub_buffer_read_ndx++;
     124:	f0 93 0f 01 	sts	0x010F, r31
     128:	e0 93 0e 01 	sts	0x010E, r30
	if(ub_buffer_read_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
     12c:	ea 55       	subi	r30, 0x5A	; 90
     12e:	f2 40       	sbci	r31, 0x02	; 2
     130:	30 f0       	brcs	.+12     	; 0x13e <read_ub+0x3c>
		ub_buffer_read_ndx = ub_buffer;
     132:	82 e5       	ldi	r24, 0x52	; 82
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 0f 01 	sts	0x010F, r25
     13a:	80 93 0e 01 	sts	0x010E, r24
	}
	return data;
}
     13e:	82 2f       	mov	r24, r18
     140:	08 95       	ret

00000142 <update_vw_cmd>:

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
}

void update_vw_cmd(){
     142:	af 92       	push	r10
     144:	bf 92       	push	r11
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
	union u_ome fltuint8_omega;
	uint8_t rcv_byte;
	uint8_t rcv_chk;
	uint8_t calc_chk;
	
	rcv_byte = read_ub();
     152:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
	
	if(rcv_byte == 0xFA){
     156:	8a 3f       	cpi	r24, 0xFA	; 250
     158:	e1 f5       	brne	.+120    	; 0x1d2 <update_vw_cmd+0x90>
		
		fltuint8_velocity.arr_vel[0] = read_ub();
     15a:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     15e:	e8 2e       	mov	r14, r24
		fltuint8_velocity.arr_vel[1] = read_ub();
     160:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     164:	f8 2e       	mov	r15, r24
		fltuint8_velocity.arr_vel[2] = read_ub();
     166:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     16a:	08 2f       	mov	r16, r24
		fltuint8_velocity.arr_vel[3] = read_ub();	
     16c:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     170:	18 2f       	mov	r17, r24

		fltuint8_omega.arr_ome[0] = read_ub();
     172:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     176:	a8 2e       	mov	r10, r24
		fltuint8_omega.arr_ome[1] = read_ub();
     178:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     17c:	b8 2e       	mov	r11, r24
		fltuint8_omega.arr_ome[2] = read_ub();
     17e:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     182:	c8 2e       	mov	r12, r24
		fltuint8_omega.arr_ome[3] = read_ub();
     184:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     188:	d8 2e       	mov	r13, r24
		

		rcv_chk = read_ub();
     18a:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
		rprintfu08(fltuint8_omega.arr_ome[0]);
		rprintfu08(fltuint8_omega.arr_ome[1]);
		rprintfu08(fltuint8_omega.arr_ome[2]);
		rprintfu08(fltuint8_omega.arr_ome[3]);
*/
		if(calc_chk == rcv_chk){
     18e:	9f 2d       	mov	r25, r15
     190:	9e 0d       	add	r25, r14
     192:	90 0f       	add	r25, r16
     194:	9a 0d       	add	r25, r10
     196:	9b 0d       	add	r25, r11
     198:	9c 0d       	add	r25, r12
     19a:	91 0f       	add	r25, r17
     19c:	9d 0d       	add	r25, r13
     19e:	98 17       	cp	r25, r24
     1a0:	c1 f4       	brne	.+48     	; 0x1d2 <update_vw_cmd+0x90>
			
				cmd_lin_vel = fltuint8_velocity.f_vel;
     1a2:	97 01       	movw	r18, r14
     1a4:	a8 01       	movw	r20, r16
     1a6:	c9 01       	movw	r24, r18
     1a8:	da 01       	movw	r26, r20
     1aa:	80 93 68 01 	sts	0x0168, r24
     1ae:	90 93 69 01 	sts	0x0169, r25
     1b2:	a0 93 6a 01 	sts	0x016A, r26
     1b6:	b0 93 6b 01 	sts	0x016B, r27
				cmd_ang_vel = fltuint8_omega.f_ome;
     1ba:	95 01       	movw	r18, r10
     1bc:	a6 01       	movw	r20, r12
     1be:	c9 01       	movw	r24, r18
     1c0:	da 01       	movw	r26, r20
     1c2:	80 93 6c 01 	sts	0x016C, r24
     1c6:	90 93 6d 01 	sts	0x016D, r25
     1ca:	a0 93 6e 01 	sts	0x016E, r26
     1ce:	b0 93 6f 01 	sts	0x016F, r27
				//rprintfFloat(5,fltuint8_omega.f_ome);
				//rprintfCRLF();
		}
			
	}
}
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	df 90       	pop	r13
     1dc:	cf 90       	pop	r12
     1de:	bf 90       	pop	r11
     1e0:	af 90       	pop	r10
     1e2:	08 95       	ret

000001e4 <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	7b 01       	movw	r14, r22
     1ee:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 7cm/sec > v_dead > -9cm/sec
	if((cmd_vel_l < 9) && (cmd_vel_l > -9))  cmd_vel_l =  0;
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e1       	ldi	r20, 0x10	; 16
     1f6:	51 e4       	ldi	r21, 0x41	; 65
     1f8:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
     1fc:	88 23       	and	r24, r24
     1fe:	ac f4       	brge	.+42     	; 0x22a <wheel_l+0x46>
     200:	c8 01       	movw	r24, r16
     202:	b7 01       	movw	r22, r14
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e1       	ldi	r20, 0x10	; 16
     20a:	51 ec       	ldi	r21, 0xC1	; 193
     20c:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     210:	18 16       	cp	r1, r24
     212:	5c f4       	brge	.+22     	; 0x22a <wheel_l+0x46>
     214:	0f 2e       	mov	r0, r31
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	ef 2e       	mov	r14, r31
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	0f 2f       	mov	r16, r31
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	1f 2f       	mov	r17, r31
     226:	f0 2d       	mov	r31, r0
     228:	29 c0       	rjmp	.+82     	; 0x27c <wheel_l+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
     22a:	c8 01       	movw	r24, r16
     22c:	b7 01       	movw	r22, r14
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	52 e4       	ldi	r21, 0x42	; 66
     236:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     23a:	18 16       	cp	r1, r24
     23c:	5c f4       	brge	.+22     	; 0x254 <wheel_l+0x70>
     23e:	0f 2e       	mov	r0, r31
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ef 2e       	mov	r14, r31
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	ff 2e       	mov	r15, r31
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	0f 2f       	mov	r16, r31
     24c:	f2 e4       	ldi	r31, 0x42	; 66
     24e:	1f 2f       	mov	r17, r31
     250:	f0 2d       	mov	r31, r0
     252:	14 c0       	rjmp	.+40     	; 0x27c <wheel_l+0x98>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
     254:	c8 01       	movw	r24, r16
     256:	b7 01       	movw	r22, r14
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	52 ec       	ldi	r21, 0xC2	; 194
     260:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
     264:	88 23       	and	r24, r24
     266:	54 f4       	brge	.+20     	; 0x27c <wheel_l+0x98>
     268:	0f 2e       	mov	r0, r31
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ef 2e       	mov	r14, r31
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ff 2e       	mov	r15, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	0f 2f       	mov	r16, r31
     276:	f2 ec       	ldi	r31, 0xC2	; 194
     278:	1f 2f       	mov	r17, r31
     27a:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     27c:	c8 01       	movw	r24, r16
     27e:	b7 01       	movw	r22, r14
     280:	22 e4       	ldi	r18, 0x42	; 66
     282:	3e e3       	ldi	r19, 0x3E	; 62
     284:	48 e7       	ldi	r20, 0x78	; 120
     286:	5f eb       	ldi	r21, 0xBF	; 191
     288:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     28c:	2c e8       	ldi	r18, 0x8C	; 140
     28e:	32 ed       	ldi	r19, 0xD2	; 210
     290:	48 eb       	ldi	r20, 0xB8	; 184
     292:	53 e4       	ldi	r21, 0x43	; 67
     294:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     298:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fixunssfsi>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <PWM_timer1_Set_Pin9>
}
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	08 95       	ret

000002ae <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	7b 01       	movw	r14, r22
     2b8:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 8cm/sec > v_dead > -5cm/sec
	if((cmd_vel_r < 8) && (cmd_vel_r > -8))  cmd_vel_r = 0;
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	51 e4       	ldi	r21, 0x41	; 65
     2c2:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
     2c6:	88 23       	and	r24, r24
     2c8:	ac f4       	brge	.+42     	; 0x2f4 <wheel_r+0x46>
     2ca:	c8 01       	movw	r24, r16
     2cc:	b7 01       	movw	r22, r14
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	51 ec       	ldi	r21, 0xC1	; 193
     2d6:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     2da:	18 16       	cp	r1, r24
     2dc:	5c f4       	brge	.+22     	; 0x2f4 <wheel_r+0x46>
     2de:	0f 2e       	mov	r0, r31
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ef 2e       	mov	r14, r31
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	0f 2f       	mov	r16, r31
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	1f 2f       	mov	r17, r31
     2f0:	f0 2d       	mov	r31, r0
     2f2:	29 c0       	rjmp	.+82     	; 0x346 <wheel_r+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     2f4:	c8 01       	movw	r24, r16
     2f6:	b7 01       	movw	r22, r14
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     304:	18 16       	cp	r1, r24
     306:	5c f4       	brge	.+22     	; 0x31e <wheel_r+0x70>
     308:	0f 2e       	mov	r0, r31
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ef 2e       	mov	r14, r31
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ff 2e       	mov	r15, r31
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	0f 2f       	mov	r16, r31
     316:	f2 e4       	ldi	r31, 0x42	; 66
     318:	1f 2f       	mov	r17, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	14 c0       	rjmp	.+40     	; 0x346 <wheel_r+0x98>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     31e:	c8 01       	movw	r24, r16
     320:	b7 01       	movw	r22, r14
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	52 ec       	ldi	r21, 0xC2	; 194
     32a:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
     32e:	88 23       	and	r24, r24
     330:	54 f4       	brge	.+20     	; 0x346 <wheel_r+0x98>
     332:	0f 2e       	mov	r0, r31
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ef 2e       	mov	r14, r31
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	0f 2f       	mov	r16, r31
     340:	f2 ec       	ldi	r31, 0xC2	; 194
     342:	1f 2f       	mov	r17, r31
     344:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	24 ef       	ldi	r18, 0xF4	; 244
     34c:	3c e6       	ldi	r19, 0x6C	; 108
     34e:	4e e8       	ldi	r20, 0x8E	; 142
     350:	5f e3       	ldi	r21, 0x3F	; 63
     352:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     356:	27 e0       	ldi	r18, 0x07	; 7
     358:	3f e1       	ldi	r19, 0x1F	; 31
     35a:	4b eb       	ldi	r20, 0xBB	; 187
     35c:	53 e4       	ldi	r21, 0x43	; 67
     35e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     362:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fixunssfsi>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 91 0a 	call	0x1522	; 0x1522 <PWM_timer1_Set_Pin10>
}
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	08 95       	ret

00000378 <pwm_setup>:
////////////////////////////////////////

void pwm_setup(void){

	// 20 ms period
	timer1PWMInitICR(5000);
     378:	88 e8       	ldi	r24, 0x88	; 136
     37a:	93 e1       	ldi	r25, 0x13	; 19
     37c:	0e 94 28 0a 	call	0x1450	; 0x1450 <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     380:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     382:	22 9a       	sbi	0x04, 2	; 4
}
     384:	08 95       	ret

00000386 <setup_hardware>:
	}
}

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     386:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     388:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     38a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <uartInit>
	uartSetBaudRate(0,38400);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	56 e9       	ldi	r21, 0x96	; 150
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     39c:	82 e2       	ldi	r24, 0x22	; 34
     39e:	9e e0       	ldi	r25, 0x0E	; 14
     3a0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <rprintfInit>
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
     3a4:	82 e5       	ldi	r24, 0x52	; 82
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	90 93 0f 01 	sts	0x010F, r25
     3ac:	80 93 0e 01 	sts	0x010E, r24
     3b0:	90 93 0d 01 	sts	0x010D, r25
     3b4:	80 93 0c 01 	sts	0x010C, r24
	uartInit();
	uartSetBaudRate(0,38400);
	rprintfInit(uart0SendByte);
	//UART ISR *** UART ISR ***
	init_ub_buffer();
	uartSetRxHandler(0, &ubRcv);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	6c e5       	ldi	r22, 0x5C	; 92
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <uartSetRxHandler>
	//UART ISR *** UART ISR ***

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     3c2:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     3c4:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     3c6:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     3c8:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     3ca:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     3cc:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     3ce:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     3d0:	2d 9a       	sbi	0x05, 5	; 5
	
	// Set test pin
	sbi(DDRD,DDD5);		// Pin 5  Digital Out
     3d2:	55 9a       	sbi	0x0a, 5	; 10
	PORT_OFF(PORTD,5);	// Set pin off
     3d4:	5d 98       	cbi	0x0b, 5	; 11

	init_timer0(TIMER_CLK_64);
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	0e 94 ad 0a 	call	0x155a	; 0x155a <init_timer0>
	init_timer1(TIMER_CLK_64);
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	0e 94 bb 0a 	call	0x1576	; 0x1576 <init_timer1>
	pwm_setup();
     3e2:	0e 94 bc 01 	call	0x378	; 0x378 <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     3e6:	e8 e6       	ldi	r30, 0x68	; 104
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     3f0:	ad e6       	ldi	r26, 0x6D	; 109
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	8c 91       	ld	r24, X
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     3fa:	80 81       	ld	r24, Z
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     400:	eb e6       	ldi	r30, 0x6B	; 107
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	81 60       	ori	r24, 0x01	; 1
     408:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     40a:	80 81       	ld	r24, Z
     40c:	80 61       	ori	r24, 0x10	; 16
     40e:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     410:	80 81       	ld	r24, Z
     412:	80 62       	ori	r24, 0x20	; 32
     414:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     416:	78 94       	sei

}
     418:	08 95       	ret

0000041a <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     41a:	2f 92       	push	r2
     41c:	3f 92       	push	r3
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	68 97       	sbiw	r28, 0x18	; 24
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
	
	// Initialize variables ///////////////////////////////////////////////////////////
	error_l_n1 = error_l = u_l = 0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	80 93 c2 02 	sts	0x02C2, r24
     45a:	90 93 c3 02 	sts	0x02C3, r25
     45e:	a0 93 c4 02 	sts	0x02C4, r26
     462:	b0 93 c5 02 	sts	0x02C5, r27
     466:	80 93 46 02 	sts	0x0246, r24
     46a:	90 93 47 02 	sts	0x0247, r25
     46e:	a0 93 48 02 	sts	0x0248, r26
     472:	b0 93 49 02 	sts	0x0249, r27
     476:	80 93 b6 02 	sts	0x02B6, r24
     47a:	90 93 b7 02 	sts	0x02B7, r25
     47e:	a0 93 b8 02 	sts	0x02B8, r26
     482:	b0 93 b9 02 	sts	0x02B9, r27
	error_r_n1 = error_r = u_r = 0;
     486:	80 93 3a 02 	sts	0x023A, r24
     48a:	90 93 3b 02 	sts	0x023B, r25
     48e:	a0 93 3c 02 	sts	0x023C, r26
     492:	b0 93 3d 02 	sts	0x023D, r27
     496:	80 93 d2 02 	sts	0x02D2, r24
     49a:	90 93 d3 02 	sts	0x02D3, r25
     49e:	a0 93 d4 02 	sts	0x02D4, r26
     4a2:	b0 93 d5 02 	sts	0x02D5, r27
     4a6:	80 93 36 02 	sts	0x0236, r24
     4aa:	90 93 37 02 	sts	0x0237, r25
     4ae:	a0 93 38 02 	sts	0x0238, r26
     4b2:	b0 93 39 02 	sts	0x0239, r27

	ud_l_n1 = udf_l = udf_l_n1 = 0;
     4b6:	80 93 de 02 	sts	0x02DE, r24
     4ba:	90 93 df 02 	sts	0x02DF, r25
     4be:	a0 93 e0 02 	sts	0x02E0, r26
     4c2:	b0 93 e1 02 	sts	0x02E1, r27
     4c6:	80 93 66 02 	sts	0x0266, r24
     4ca:	90 93 67 02 	sts	0x0267, r25
     4ce:	a0 93 68 02 	sts	0x0268, r26
     4d2:	b0 93 69 02 	sts	0x0269, r27
     4d6:	80 93 a2 02 	sts	0x02A2, r24
     4da:	90 93 a3 02 	sts	0x02A3, r25
     4de:	a0 93 a4 02 	sts	0x02A4, r26
     4e2:	b0 93 a5 02 	sts	0x02A5, r27
	ud_r_n1 = udf_r = udf_r_n1 = 0;
     4e6:	80 93 8a 02 	sts	0x028A, r24
     4ea:	90 93 8b 02 	sts	0x028B, r25
     4ee:	a0 93 8c 02 	sts	0x028C, r26
     4f2:	b0 93 8d 02 	sts	0x028D, r27
     4f6:	80 93 9a 02 	sts	0x029A, r24
     4fa:	90 93 9b 02 	sts	0x029B, r25
     4fe:	a0 93 9c 02 	sts	0x029C, r26
     502:	b0 93 9d 02 	sts	0x029D, r27
     506:	80 93 62 02 	sts	0x0262, r24
     50a:	90 93 63 02 	sts	0x0263, r25
     50e:	a0 93 64 02 	sts	0x0264, r26
     512:	b0 93 65 02 	sts	0x0265, r27
	
	//K_l = 0.0008;
	K_l = 0.6;
     516:	2a e9       	ldi	r18, 0x9A	; 154
     518:	39 e9       	ldi	r19, 0x99	; 153
     51a:	49 e1       	ldi	r20, 0x19	; 25
     51c:	5f e3       	ldi	r21, 0x3F	; 63
     51e:	20 93 2e 02 	sts	0x022E, r18
     522:	30 93 2f 02 	sts	0x022F, r19
     526:	40 93 30 02 	sts	0x0230, r20
     52a:	50 93 31 02 	sts	0x0231, r21
	K_r = 0.6;
     52e:	20 93 be 02 	sts	0x02BE, r18
     532:	30 93 bf 02 	sts	0x02BF, r19
     536:	40 93 c0 02 	sts	0x02C0, r20
     53a:	50 93 c1 02 	sts	0x02C1, r21
	//K_r = 0.0006;

	Ti_l = 1.1945;
     53e:	80 e6       	ldi	r24, 0x60	; 96
     540:	95 ee       	ldi	r25, 0xE5	; 229
     542:	a8 e9       	ldi	r26, 0x98	; 152
     544:	bf e3       	ldi	r27, 0x3F	; 63
     546:	80 93 26 02 	sts	0x0226, r24
     54a:	90 93 27 02 	sts	0x0227, r25
     54e:	a0 93 28 02 	sts	0x0228, r26
     552:	b0 93 29 02 	sts	0x0229, r27
	Td_l = 0.2986;
     556:	89 e1       	ldi	r24, 0x19	; 25
     558:	92 ee       	ldi	r25, 0xE2	; 226
     55a:	a8 e9       	ldi	r26, 0x98	; 152
     55c:	be e3       	ldi	r27, 0x3E	; 62
     55e:	80 93 82 02 	sts	0x0282, r24
     562:	90 93 83 02 	sts	0x0283, r25
     566:	a0 93 84 02 	sts	0x0284, r26
     56a:	b0 93 85 02 	sts	0x0285, r27
	T_l = 2.3890;										// sec
     56e:	80 e6       	ldi	r24, 0x60	; 96
     570:	95 ee       	ldi	r25, 0xE5	; 229
     572:	a8 e1       	ldi	r26, 0x18	; 24
     574:	b0 e4       	ldi	r27, 0x40	; 64
     576:	80 93 9e 02 	sts	0x029E, r24
     57a:	90 93 9f 02 	sts	0x029F, r25
     57e:	a0 93 a0 02 	sts	0x02A0, r26
     582:	b0 93 a1 02 	sts	0x02A1, r27

	Ti_r = 0.1100;
     586:	8e ea       	ldi	r24, 0xAE	; 174
     588:	97 e4       	ldi	r25, 0x47	; 71
     58a:	a1 ee       	ldi	r26, 0xE1	; 225
     58c:	bd e3       	ldi	r27, 0x3D	; 61
     58e:	80 93 d6 02 	sts	0x02D6, r24
     592:	90 93 d7 02 	sts	0x02D7, r25
     596:	a0 93 d8 02 	sts	0x02D8, r26
     59a:	b0 93 d9 02 	sts	0x02D9, r27
	Td_r = 0.0275;
     59e:	8e ea       	ldi	r24, 0xAE	; 174
     5a0:	97 e4       	ldi	r25, 0x47	; 71
     5a2:	a1 ee       	ldi	r26, 0xE1	; 225
     5a4:	bc e3       	ldi	r27, 0x3C	; 60
     5a6:	80 93 86 02 	sts	0x0286, r24
     5aa:	90 93 87 02 	sts	0x0287, r25
     5ae:	a0 93 88 02 	sts	0x0288, r26
     5b2:	b0 93 89 02 	sts	0x0289, r27
	T_r = 0.2200;										// sec
     5b6:	8e ea       	ldi	r24, 0xAE	; 174
     5b8:	97 e4       	ldi	r25, 0x47	; 71
     5ba:	a1 e6       	ldi	r26, 0x61	; 97
     5bc:	be e3       	ldi	r27, 0x3E	; 62
     5be:	80 93 8e 02 	sts	0x028E, r24
     5c2:	90 93 8f 02 	sts	0x028F, r25
     5c6:	a0 93 90 02 	sts	0x0290, r26
     5ca:	b0 93 91 02 	sts	0x0291, r27
		
	Kp_l = K_l;											// Proportional constant
     5ce:	20 93 1e 02 	sts	0x021E, r18
     5d2:	30 93 1f 02 	sts	0x021F, r19
     5d6:	40 93 20 02 	sts	0x0220, r20
     5da:	50 93 21 02 	sts	0x0221, r21
	Ki_l = (K_l*T_l)/(2*Ti_l);							// Integral constant
     5de:	20 93 5e 02 	sts	0x025E, r18
     5e2:	30 93 5f 02 	sts	0x025F, r19
     5e6:	40 93 60 02 	sts	0x0260, r20
     5ea:	50 93 61 02 	sts	0x0261, r21
	Kd_l = (2*K_l*Td_l)/T_l;							// Derivative constant
     5ee:	8f e4       	ldi	r24, 0x4F	; 79
     5f0:	96 e9       	ldi	r25, 0x96	; 150
     5f2:	a9 e1       	ldi	r26, 0x19	; 25
     5f4:	be e3       	ldi	r27, 0x3E	; 62
     5f6:	80 93 6a 02 	sts	0x026A, r24
     5fa:	90 93 6b 02 	sts	0x026B, r25
     5fe:	a0 93 6c 02 	sts	0x026C, r26
     602:	b0 93 6d 02 	sts	0x026D, r27

	Kp_r = 0.6*K_r;										// Proportional constant
     606:	8c ee       	ldi	r24, 0xEC	; 236
     608:	91 e5       	ldi	r25, 0x51	; 81
     60a:	a8 eb       	ldi	r26, 0xB8	; 184
     60c:	be e3       	ldi	r27, 0x3E	; 62
     60e:	80 93 6e 02 	sts	0x026E, r24
     612:	90 93 6f 02 	sts	0x026F, r25
     616:	a0 93 70 02 	sts	0x0270, r26
     61a:	b0 93 71 02 	sts	0x0271, r27
	Ki_r = (K_r*T_r)/(2*Ti_r);							// Integral constant
     61e:	20 93 b2 02 	sts	0x02B2, r18
     622:	30 93 b3 02 	sts	0x02B3, r19
     626:	40 93 b4 02 	sts	0x02B4, r20
     62a:	50 93 b5 02 	sts	0x02B5, r21
	Kd_r = (2*K_r*Td_r)/T_r;							// Derivative constant
     62e:	8a e9       	ldi	r24, 0x9A	; 154
     630:	99 e9       	ldi	r25, 0x99	; 153
     632:	a9 e1       	ldi	r26, 0x19	; 25
     634:	be e3       	ldi	r27, 0x3E	; 62
     636:	80 93 ae 02 	sts	0x02AE, r24
     63a:	90 93 af 02 	sts	0x02AF, r25
     63e:	a0 93 b0 02 	sts	0x02B0, r26
     642:	b0 93 b1 02 	sts	0x02B1, r27
	
	lpf1_l = (wb*T_l)/(2 + wb*T_l);
     646:	60 91 08 01 	lds	r22, 0x0108
     64a:	70 91 09 01 	lds	r23, 0x0109
     64e:	80 91 0a 01 	lds	r24, 0x010A
     652:	90 91 0b 01 	lds	r25, 0x010B
     656:	20 e6       	ldi	r18, 0x60	; 96
     658:	35 ee       	ldi	r19, 0xE5	; 229
     65a:	48 e1       	ldi	r20, 0x18	; 24
     65c:	50 e4       	ldi	r21, 0x40	; 64
     65e:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     662:	7b 01       	movw	r14, r22
     664:	8c 01       	movw	r16, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e4       	ldi	r21, 0x40	; 64
     66e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     672:	5b 01       	movw	r10, r22
     674:	6c 01       	movw	r12, r24
     676:	c8 01       	movw	r24, r16
     678:	b7 01       	movw	r22, r14
     67a:	a6 01       	movw	r20, r12
     67c:	95 01       	movw	r18, r10
     67e:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     682:	dc 01       	movw	r26, r24
     684:	9b 01       	movw	r18, r22
     686:	ac 01       	movw	r20, r24
     688:	20 93 ce 02 	sts	0x02CE, r18
     68c:	30 93 cf 02 	sts	0x02CF, r19
     690:	40 93 d0 02 	sts	0x02D0, r20
     694:	50 93 d1 02 	sts	0x02D1, r21
	lpf2_l = lpf1_l;
     698:	cb 01       	movw	r24, r22
     69a:	80 93 92 02 	sts	0x0292, r24
     69e:	90 93 93 02 	sts	0x0293, r25
     6a2:	a0 93 94 02 	sts	0x0294, r26
     6a6:	b0 93 95 02 	sts	0x0295, r27
	lpf3_l = (wb*T_l - 2)/(wb*T_l + 2);
     6aa:	c8 01       	movw	r24, r16
     6ac:	b7 01       	movw	r22, r14
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e4       	ldi	r21, 0x40	; 64
     6b6:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     6ba:	a6 01       	movw	r20, r12
     6bc:	95 01       	movw	r18, r10
     6be:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     6c2:	60 93 a6 02 	sts	0x02A6, r22
     6c6:	70 93 a7 02 	sts	0x02A7, r23
     6ca:	80 93 a8 02 	sts	0x02A8, r24
     6ce:	90 93 a9 02 	sts	0x02A9, r25

	lpf1_r = (wb*T_r)/(2 + wb*T_r);
     6d2:	60 91 08 01 	lds	r22, 0x0108
     6d6:	70 91 09 01 	lds	r23, 0x0109
     6da:	80 91 0a 01 	lds	r24, 0x010A
     6de:	90 91 0b 01 	lds	r25, 0x010B
     6e2:	2e ea       	ldi	r18, 0xAE	; 174
     6e4:	37 e4       	ldi	r19, 0x47	; 71
     6e6:	41 e6       	ldi	r20, 0x61	; 97
     6e8:	5e e3       	ldi	r21, 0x3E	; 62
     6ea:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     6ee:	7b 01       	movw	r14, r22
     6f0:	8c 01       	movw	r16, r24
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     6fe:	5b 01       	movw	r10, r22
     700:	6c 01       	movw	r12, r24
     702:	c8 01       	movw	r24, r16
     704:	b7 01       	movw	r22, r14
     706:	a6 01       	movw	r20, r12
     708:	95 01       	movw	r18, r10
     70a:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     70e:	dc 01       	movw	r26, r24
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	20 93 da 02 	sts	0x02DA, r18
     718:	30 93 db 02 	sts	0x02DB, r19
     71c:	40 93 dc 02 	sts	0x02DC, r20
     720:	50 93 dd 02 	sts	0x02DD, r21
	lpf2_r = lpf1_r;
     724:	cb 01       	movw	r24, r22
     726:	80 93 aa 02 	sts	0x02AA, r24
     72a:	90 93 ab 02 	sts	0x02AB, r25
     72e:	a0 93 ac 02 	sts	0x02AC, r26
     732:	b0 93 ad 02 	sts	0x02AD, r27
	lpf3_r = (wb*T_r - 2)/(wb*T_r + 2);
     736:	c8 01       	movw	r24, r16
     738:	b7 01       	movw	r22, r14
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     746:	a6 01       	movw	r20, r12
     748:	95 01       	movw	r18, r10
     74a:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     74e:	60 93 96 02 	sts	0x0296, r22
     752:	70 93 97 02 	sts	0x0297, r23
     756:	80 93 98 02 	sts	0x0298, r24
     75a:	90 93 99 02 	sts	0x0299, r25
	///////////////////////////////////////////////////////////////////////////////////////
	
	setup_hardware();
     75e:	0e 94 c3 01 	call	0x386	; 0x386 <setup_hardware>
	
	
/**/
	wheel_l(0);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <wheel_l>
	wheel_r(0);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 57 01 	call	0x2ae	; 0x2ae <wheel_r>
	wheel_l_on();
     77a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <PWM_timer1_On_Pin9>
	wheel_r_on();
     77e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <PWM_timer1_On_Pin10>
     782:	ff 24       	eor	r15, r15
     784:	1c c0       	rjmp	.+56     	; 0x7be <__stack+0x2bf>
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_ON(PORTD,5);	// Set pin off
     786:	5d 9a       	sbi	0x0b, 5	; 11
			delay_us(200);
     788:	88 ec       	ldi	r24, 0xC8	; 200
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <delay_us>
	wheel_l_on();
	wheel_r_on();
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	24 e0       	ldi	r18, 0x04	; 4
     796:	02 3e       	cpi	r16, 0xE2	; 226
     798:	12 07       	cpc	r17, r18
     79a:	a9 f7       	brne	.-22     	; 0x786 <__stack+0x287>
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0
			PORT_ON(PORTD,5);	// Set pin off
			delay_us(200);
		}
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_OFF(PORTD,5);	// Set pin off
     7a0:	5d 98       	cbi	0x0b, 5	; 11
			delay_us(200);
     7a2:	88 ec       	ldi	r24, 0xC8	; 200
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <delay_us>
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_ON(PORTD,5);	// Set pin off
			delay_us(200);
		}
		for(u16 ndx = 0; ndx < 1250; ndx++){
     7aa:	0f 5f       	subi	r16, 0xFF	; 255
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	34 e0       	ldi	r19, 0x04	; 4
     7b0:	02 3e       	cpi	r16, 0xE2	; 226
     7b2:	13 07       	cpc	r17, r19
     7b4:	a9 f7       	brne	.-22     	; 0x7a0 <__stack+0x2a1>
	wheel_r(0);
	wheel_l_on();
	wheel_r_on();
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
     7b6:	f3 94       	inc	r15
     7b8:	45 e0       	ldi	r20, 0x05	; 5
     7ba:	f4 16       	cp	r15, r20
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <__stack+0x2c5>
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	e1 cf       	rjmp	.-62     	; 0x786 <__stack+0x287>
	}
	//cmd_lin_vel = 15;
	while(1){
		
	// Velocity Encoding //////////////////////////////////////////////////////////////////////
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     7c4:	0e 94 cd 0a 	call	0x159a	; 0x159a <get_timer0_overflow>
     7c8:	16 b5       	in	r17, 0x26	; 38
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	0e 94 ef 13 	call	0x27de	; 0x27de <__mulsi3>
     7d6:	61 0f       	add	r22, r17
     7d8:	71 1d       	adc	r23, r1
     7da:	81 1d       	adc	r24, r1
     7dc:	91 1d       	adc	r25, r1
     7de:	0e 94 b7 12 	call	0x256e	; 0x256e <__floatunsisf>
     7e2:	2e e0       	ldi	r18, 0x0E	; 14
     7e4:	3d e2       	ldi	r19, 0x2D	; 45
     7e6:	42 e3       	ldi	r20, 0x32	; 50
     7e8:	5d e3       	ldi	r21, 0x3D	; 61
     7ea:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e4       	ldi	r19, 0x40	; 64
     7f2:	4c e1       	ldi	r20, 0x1C	; 28
     7f4:	56 e4       	ldi	r21, 0x46	; 70
     7f6:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	20 93 14 01 	sts	0x0114, r18
     804:	30 93 15 01 	sts	0x0115, r19
     808:	40 93 16 01 	sts	0x0116, r20
     80c:	50 93 17 01 	sts	0x0117, r21
     810:	cb 01       	movw	r24, r22
     812:	80 93 10 01 	sts	0x0110, r24
     816:	90 93 11 01 	sts	0x0111, r25
     81a:	a0 93 12 01 	sts	0x0112, r26
     81e:	b0 93 13 01 	sts	0x0113, r27
		
		l_count_current = get_left_count();
     822:	0e 94 b1 10 	call	0x2162	; 0x2162 <get_left_count>
     826:	60 93 28 01 	sts	0x0128, r22
     82a:	70 93 29 01 	sts	0x0129, r23
     82e:	80 93 2a 01 	sts	0x012A, r24
     832:	90 93 2b 01 	sts	0x012B, r25
		r_count_current = get_right_count();
     836:	0e 94 ba 10 	call	0x2174	; 0x2174 <get_right_count>
     83a:	60 93 30 01 	sts	0x0130, r22
     83e:	70 93 31 01 	sts	0x0131, r23
     842:	80 93 32 01 	sts	0x0132, r24
     846:	90 93 33 01 	sts	0x0133, r25

		if(l_count_current != l_count_previous){
     84a:	20 91 28 01 	lds	r18, 0x0128
     84e:	30 91 29 01 	lds	r19, 0x0129
     852:	40 91 2a 01 	lds	r20, 0x012A
     856:	50 91 2b 01 	lds	r21, 0x012B
     85a:	80 91 2c 01 	lds	r24, 0x012C
     85e:	90 91 2d 01 	lds	r25, 0x012D
     862:	a0 91 2e 01 	lds	r26, 0x012E
     866:	b0 91 2f 01 	lds	r27, 0x012F
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	4a 07       	cpc	r20, r26
     870:	5b 07       	cpc	r21, r27
     872:	09 f4       	brne	.+2      	; 0x876 <__stack+0x377>
     874:	e1 c0       	rjmp	.+450    	; 0xa38 <__stack+0x539>
			l_count_current = get_left_count();
     876:	0e 94 b1 10 	call	0x2162	; 0x2162 <get_left_count>
     87a:	7b 01       	movw	r14, r22
     87c:	8c 01       	movw	r16, r24
     87e:	e0 92 28 01 	sts	0x0128, r14
     882:	f0 92 29 01 	sts	0x0129, r15
     886:	00 93 2a 01 	sts	0x012A, r16
     88a:	10 93 2b 01 	sts	0x012B, r17
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     88e:	60 91 10 01 	lds	r22, 0x0110
     892:	70 91 11 01 	lds	r23, 0x0111
     896:	80 91 12 01 	lds	r24, 0x0112
     89a:	90 91 13 01 	lds	r25, 0x0113
     89e:	20 91 18 01 	lds	r18, 0x0118
     8a2:	30 91 19 01 	lds	r19, 0x0119
     8a6:	40 91 1a 01 	lds	r20, 0x011A
     8aa:	50 91 1b 01 	lds	r21, 0x011B
     8ae:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     8b2:	5b 01       	movw	r10, r22
     8b4:	6c 01       	movw	r12, r24
     8b6:	60 93 5c 01 	sts	0x015C, r22
     8ba:	70 93 5d 01 	sts	0x015D, r23
     8be:	80 93 5e 01 	sts	0x015E, r24
     8c2:	90 93 5f 01 	sts	0x015F, r25
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;
     8c6:	80 91 2c 01 	lds	r24, 0x012C
     8ca:	90 91 2d 01 	lds	r25, 0x012D
     8ce:	a0 91 2e 01 	lds	r26, 0x012E
     8d2:	b0 91 2f 01 	lds	r27, 0x012F
     8d6:	e8 1a       	sub	r14, r24
     8d8:	f9 0a       	sbc	r15, r25
     8da:	0a 0b       	sbc	r16, r26
     8dc:	1b 0b       	sbc	r17, r27
     8de:	c8 01       	movw	r24, r16
     8e0:	b7 01       	movw	r22, r14
     8e2:	0e 94 b9 12 	call	0x2572	; 0x2572 <__floatsisf>
     8e6:	a6 01       	movw	r20, r12
     8e8:	95 01       	movw	r18, r10
     8ea:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     8ee:	60 93 20 01 	sts	0x0120, r22
     8f2:	70 93 21 01 	sts	0x0121, r23
     8f6:	80 93 22 01 	sts	0x0122, r24
     8fa:	90 93 23 01 	sts	0x0123, r25

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	5c e3       	ldi	r21, 0x3C	; 60
     906:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     90a:	3b 01       	movw	r6, r22
     90c:	4c 01       	movw	r8, r24
     90e:	60 93 4c 01 	sts	0x014C, r22
     912:	70 93 4d 01 	sts	0x014D, r23
     916:	80 93 4e 01 	sts	0x014E, r24
     91a:	90 93 4f 01 	sts	0x014F, r25
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     91e:	60 91 04 01 	lds	r22, 0x0104
     922:	70 91 05 01 	lds	r23, 0x0105
     926:	80 91 06 01 	lds	r24, 0x0106
     92a:	90 91 07 01 	lds	r25, 0x0107
     92e:	a6 01       	movw	r20, r12
     930:	95 01       	movw	r18, r10
     932:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     936:	7b 01       	movw	r14, r22
     938:	8c 01       	movw	r16, r24
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e4       	ldi	r21, 0x40	; 64
     942:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     946:	1b 01       	movw	r2, r22
     948:	2c 01       	movw	r4, r24
     94a:	c8 01       	movw	r24, r16
     94c:	b7 01       	movw	r22, r14
     94e:	a2 01       	movw	r20, r4
     950:	91 01       	movw	r18, r2
     952:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     956:	5b 01       	movw	r10, r22
     958:	6c 01       	movw	r12, r24
     95a:	c4 01       	movw	r24, r8
     95c:	b3 01       	movw	r22, r6
     95e:	20 91 50 01 	lds	r18, 0x0150
     962:	30 91 51 01 	lds	r19, 0x0151
     966:	40 91 52 01 	lds	r20, 0x0152
     96a:	50 91 53 01 	lds	r21, 0x0153
     96e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c6 01       	movw	r24, r12
     978:	b5 01       	movw	r22, r10
     97a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     97e:	5b 01       	movw	r10, r22
     980:	6c 01       	movw	r12, r24
     982:	c8 01       	movw	r24, r16
     984:	b7 01       	movw	r22, r14
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e4       	ldi	r21, 0x40	; 64
     98e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     992:	a2 01       	movw	r20, r4
     994:	91 01       	movw	r18, r2
     996:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     99a:	20 91 58 01 	lds	r18, 0x0158
     99e:	30 91 59 01 	lds	r19, 0x0159
     9a2:	40 91 5a 01 	lds	r20, 0x015A
     9a6:	50 91 5b 01 	lds	r21, 0x015B
     9aa:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c6 01       	movw	r24, r12
     9b4:	b5 01       	movw	r22, r10
     9b6:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     9ba:	60 93 54 01 	sts	0x0154, r22
     9be:	70 93 55 01 	sts	0x0155, r23
     9c2:	80 93 56 01 	sts	0x0156, r24
     9c6:	90 93 57 01 	sts	0x0157, r25

			rps_l_prev = rps_l;
     9ca:	60 92 50 01 	sts	0x0150, r6
     9ce:	70 92 51 01 	sts	0x0151, r7
     9d2:	80 92 52 01 	sts	0x0152, r8
     9d6:	90 92 53 01 	sts	0x0153, r9
			rps_lf_prev = rps_lf;
     9da:	60 93 58 01 	sts	0x0158, r22
     9de:	70 93 59 01 	sts	0x0159, r23
     9e2:	80 93 5a 01 	sts	0x015A, r24
     9e6:	90 93 5b 01 	sts	0x015B, r25
			//rprintfFloat(5,rps_lf);
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_l);
			//rprintfCRLF();

			PORT_ON(PORTD,5);
     9ea:	5d 9a       	sbi	0x0b, 5	; 11
			delay_us(200);
     9ec:	88 ec       	ldi	r24, 0xC8	; 200
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <delay_us>
			PORT_OFF(PORTD,5);
     9f4:	5d 98       	cbi	0x0b, 5	; 11
			
			l_count_previous = l_count_current;
     9f6:	80 91 28 01 	lds	r24, 0x0128
     9fa:	90 91 29 01 	lds	r25, 0x0129
     9fe:	a0 91 2a 01 	lds	r26, 0x012A
     a02:	b0 91 2b 01 	lds	r27, 0x012B
     a06:	80 93 2c 01 	sts	0x012C, r24
     a0a:	90 93 2d 01 	sts	0x012D, r25
     a0e:	a0 93 2e 01 	sts	0x012E, r26
     a12:	b0 93 2f 01 	sts	0x012F, r27
			
			elapsed_time_l_previous = elapsed_time_l;
     a16:	80 91 10 01 	lds	r24, 0x0110
     a1a:	90 91 11 01 	lds	r25, 0x0111
     a1e:	a0 91 12 01 	lds	r26, 0x0112
     a22:	b0 91 13 01 	lds	r27, 0x0113
     a26:	80 93 18 01 	sts	0x0118, r24
     a2a:	90 93 19 01 	sts	0x0119, r25
     a2e:	a0 93 1a 01 	sts	0x011A, r26
     a32:	b0 93 1b 01 	sts	0x011B, r27
     a36:	26 c0       	rjmp	.+76     	; 0xa84 <__stack+0x585>
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     a38:	60 91 10 01 	lds	r22, 0x0110
     a3c:	70 91 11 01 	lds	r23, 0x0111
     a40:	80 91 12 01 	lds	r24, 0x0112
     a44:	90 91 13 01 	lds	r25, 0x0113
     a48:	20 91 18 01 	lds	r18, 0x0118
     a4c:	30 91 19 01 	lds	r19, 0x0119
     a50:	40 91 1a 01 	lds	r20, 0x011A
     a54:	50 91 1b 01 	lds	r21, 0x011B
     a58:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     a5c:	2a e9       	ldi	r18, 0x9A	; 154
     a5e:	39 e9       	ldi	r19, 0x99	; 153
     a60:	49 e1       	ldi	r20, 0x19	; 25
     a62:	5e e3       	ldi	r21, 0x3E	; 62
     a64:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	64 f4       	brge	.+24     	; 0xa84 <__stack+0x585>
			rps_lf = 0;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	80 93 54 01 	sts	0x0154, r24
     a78:	90 93 55 01 	sts	0x0155, r25
     a7c:	a0 93 56 01 	sts	0x0156, r26
     a80:	b0 93 57 01 	sts	0x0157, r27

		}
		
		if(r_count_current != r_count_previous){
     a84:	20 91 30 01 	lds	r18, 0x0130
     a88:	30 91 31 01 	lds	r19, 0x0131
     a8c:	40 91 32 01 	lds	r20, 0x0132
     a90:	50 91 33 01 	lds	r21, 0x0133
     a94:	80 91 34 01 	lds	r24, 0x0134
     a98:	90 91 35 01 	lds	r25, 0x0135
     a9c:	a0 91 36 01 	lds	r26, 0x0136
     aa0:	b0 91 37 01 	lds	r27, 0x0137
     aa4:	28 17       	cp	r18, r24
     aa6:	39 07       	cpc	r19, r25
     aa8:	4a 07       	cpc	r20, r26
     aaa:	5b 07       	cpc	r21, r27
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x5b1>
     aae:	dd c0       	rjmp	.+442    	; 0xc6a <__stack+0x76b>
			r_count_current = get_right_count();
     ab0:	0e 94 ba 10 	call	0x2174	; 0x2174 <get_right_count>
     ab4:	7b 01       	movw	r14, r22
     ab6:	8c 01       	movw	r16, r24
     ab8:	e0 92 30 01 	sts	0x0130, r14
     abc:	f0 92 31 01 	sts	0x0131, r15
     ac0:	00 93 32 01 	sts	0x0132, r16
     ac4:	10 93 33 01 	sts	0x0133, r17
			dt_r = (elapsed_time_r - elapsed_time_r_previous);
     ac8:	20 91 14 01 	lds	r18, 0x0114
     acc:	30 91 15 01 	lds	r19, 0x0115
     ad0:	40 91 16 01 	lds	r20, 0x0116
     ad4:	50 91 17 01 	lds	r21, 0x0117
     ad8:	29 87       	std	Y+9, r18	; 0x09
     ada:	3a 87       	std	Y+10, r19	; 0x0a
     adc:	4b 87       	std	Y+11, r20	; 0x0b
     ade:	5c 87       	std	Y+12, r21	; 0x0c
     ae0:	ca 01       	movw	r24, r20
     ae2:	b9 01       	movw	r22, r18
     ae4:	20 91 1c 01 	lds	r18, 0x011C
     ae8:	30 91 1d 01 	lds	r19, 0x011D
     aec:	40 91 1e 01 	lds	r20, 0x011E
     af0:	50 91 1f 01 	lds	r21, 0x011F
     af4:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     af8:	5b 01       	movw	r10, r22
     afa:	6c 01       	movw	r12, r24
     afc:	60 93 48 01 	sts	0x0148, r22
     b00:	70 93 49 01 	sts	0x0149, r23
     b04:	80 93 4a 01 	sts	0x014A, r24
     b08:	90 93 4b 01 	sts	0x014B, r25
			ticks_per_sec_r = (r_count_current - r_count_previous)/dt_r;
     b0c:	80 91 34 01 	lds	r24, 0x0134
     b10:	90 91 35 01 	lds	r25, 0x0135
     b14:	a0 91 36 01 	lds	r26, 0x0136
     b18:	b0 91 37 01 	lds	r27, 0x0137
     b1c:	a8 01       	movw	r20, r16
     b1e:	97 01       	movw	r18, r14
     b20:	28 1b       	sub	r18, r24
     b22:	39 0b       	sbc	r19, r25
     b24:	4a 0b       	sbc	r20, r26
     b26:	5b 0b       	sbc	r21, r27
     b28:	ca 01       	movw	r24, r20
     b2a:	b9 01       	movw	r22, r18
     b2c:	0e 94 b9 12 	call	0x2572	; 0x2572 <__floatsisf>
     b30:	a6 01       	movw	r20, r12
     b32:	95 01       	movw	r18, r10
     b34:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     b38:	60 93 24 01 	sts	0x0124, r22
     b3c:	70 93 25 01 	sts	0x0125, r23
     b40:	80 93 26 01 	sts	0x0126, r24
     b44:	90 93 27 01 	sts	0x0127, r25
			
			rps_r = ticks_per_sec_r/(TICKS_PER_ROTATION);
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	5c e3       	ldi	r21, 0x3C	; 60
     b50:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     b54:	1b 01       	movw	r2, r22
     b56:	2c 01       	movw	r4, r24
     b58:	60 93 38 01 	sts	0x0138, r22
     b5c:	70 93 39 01 	sts	0x0139, r23
     b60:	80 93 3a 01 	sts	0x013A, r24
     b64:	90 93 3b 01 	sts	0x013B, r25
			rps_rf = ((Kr*dt_r)/(Kr*dt_r + 2))*(rps_r + rps_r_prev) - ((Kr*dt_r - 2)/(Kr*dt_r + 2))*rps_rf_prev;
     b68:	60 91 00 01 	lds	r22, 0x0100
     b6c:	70 91 01 01 	lds	r23, 0x0101
     b70:	80 91 02 01 	lds	r24, 0x0102
     b74:	90 91 03 01 	lds	r25, 0x0103
     b78:	a6 01       	movw	r20, r12
     b7a:	95 01       	movw	r18, r10
     b7c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     b80:	5b 01       	movw	r10, r22
     b82:	6c 01       	movw	r12, r24
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e4       	ldi	r21, 0x40	; 64
     b8c:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     b90:	6d 87       	std	Y+13, r22	; 0x0d
     b92:	7e 87       	std	Y+14, r23	; 0x0e
     b94:	8f 87       	std	Y+15, r24	; 0x0f
     b96:	98 8b       	std	Y+16, r25	; 0x10
     b98:	c6 01       	movw	r24, r12
     b9a:	b5 01       	movw	r22, r10
     b9c:	2d 85       	ldd	r18, Y+13	; 0x0d
     b9e:	3e 85       	ldd	r19, Y+14	; 0x0e
     ba0:	4f 85       	ldd	r20, Y+15	; 0x0f
     ba2:	58 89       	ldd	r21, Y+16	; 0x10
     ba4:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     ba8:	3b 01       	movw	r6, r22
     baa:	4c 01       	movw	r8, r24
     bac:	c2 01       	movw	r24, r4
     bae:	b1 01       	movw	r22, r2
     bb0:	20 91 3c 01 	lds	r18, 0x013C
     bb4:	30 91 3d 01 	lds	r19, 0x013D
     bb8:	40 91 3e 01 	lds	r20, 0x013E
     bbc:	50 91 3f 01 	lds	r21, 0x013F
     bc0:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c4 01       	movw	r24, r8
     bca:	b3 01       	movw	r22, r6
     bcc:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     bd0:	3b 01       	movw	r6, r22
     bd2:	4c 01       	movw	r8, r24
     bd4:	c6 01       	movw	r24, r12
     bd6:	b5 01       	movw	r22, r10
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e4       	ldi	r21, 0x40	; 64
     be0:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     be4:	2d 85       	ldd	r18, Y+13	; 0x0d
     be6:	3e 85       	ldd	r19, Y+14	; 0x0e
     be8:	4f 85       	ldd	r20, Y+15	; 0x0f
     bea:	58 89       	ldd	r21, Y+16	; 0x10
     bec:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     bf0:	20 91 44 01 	lds	r18, 0x0144
     bf4:	30 91 45 01 	lds	r19, 0x0145
     bf8:	40 91 46 01 	lds	r20, 0x0146
     bfc:	50 91 47 01 	lds	r21, 0x0147
     c00:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c4 01       	movw	r24, r8
     c0a:	b3 01       	movw	r22, r6
     c0c:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     c10:	60 93 40 01 	sts	0x0140, r22
     c14:	70 93 41 01 	sts	0x0141, r23
     c18:	80 93 42 01 	sts	0x0142, r24
     c1c:	90 93 43 01 	sts	0x0143, r25

			rps_r_prev = rps_r;
     c20:	20 92 3c 01 	sts	0x013C, r2
     c24:	30 92 3d 01 	sts	0x013D, r3
     c28:	40 92 3e 01 	sts	0x013E, r4
     c2c:	50 92 3f 01 	sts	0x013F, r5
			rps_rf_prev = rps_rf;
     c30:	60 93 44 01 	sts	0x0144, r22
     c34:	70 93 45 01 	sts	0x0145, r23
     c38:	80 93 46 01 	sts	0x0146, r24
     c3c:	90 93 47 01 	sts	0x0147, r25
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_r);
			//rprintfCRLF();
			
			
			r_count_previous = r_count_current;
     c40:	e0 92 34 01 	sts	0x0134, r14
     c44:	f0 92 35 01 	sts	0x0135, r15
     c48:	00 93 36 01 	sts	0x0136, r16
     c4c:	10 93 37 01 	sts	0x0137, r17
			
			elapsed_time_r_previous = elapsed_time_r;
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	ab 85       	ldd	r26, Y+11	; 0x0b
     c56:	bc 85       	ldd	r27, Y+12	; 0x0c
     c58:	80 93 1c 01 	sts	0x011C, r24
     c5c:	90 93 1d 01 	sts	0x011D, r25
     c60:	a0 93 1e 01 	sts	0x011E, r26
     c64:	b0 93 1f 01 	sts	0x011F, r27
     c68:	26 c0       	rjmp	.+76     	; 0xcb6 <__stack+0x7b7>
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
     c6a:	60 91 14 01 	lds	r22, 0x0114
     c6e:	70 91 15 01 	lds	r23, 0x0115
     c72:	80 91 16 01 	lds	r24, 0x0116
     c76:	90 91 17 01 	lds	r25, 0x0117
     c7a:	20 91 1c 01 	lds	r18, 0x011C
     c7e:	30 91 1d 01 	lds	r19, 0x011D
     c82:	40 91 1e 01 	lds	r20, 0x011E
     c86:	50 91 1f 01 	lds	r21, 0x011F
     c8a:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     c8e:	2a e9       	ldi	r18, 0x9A	; 154
     c90:	39 e9       	ldi	r19, 0x99	; 153
     c92:	49 e1       	ldi	r20, 0x19	; 25
     c94:	5e e3       	ldi	r21, 0x3E	; 62
     c96:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
     c9a:	18 16       	cp	r1, r24
     c9c:	64 f4       	brge	.+24     	; 0xcb6 <__stack+0x7b7>
			rps_rf = 0;
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	20 93 40 01 	sts	0x0140, r18
     caa:	30 93 41 01 	sts	0x0141, r19
     cae:	40 93 42 01 	sts	0x0142, r20
     cb2:	50 93 43 01 	sts	0x0143, r21
		}
		
		// Convert from revolutions per second to cm/sec
		v_l = M_2PIR*rps_lf;		
     cb6:	60 91 54 01 	lds	r22, 0x0154
     cba:	70 91 55 01 	lds	r23, 0x0155
     cbe:	80 91 56 01 	lds	r24, 0x0156
     cc2:	90 91 57 01 	lds	r25, 0x0157
     cc6:	23 ec       	ldi	r18, 0xC3	; 195
     cc8:	33 e5       	ldi	r19, 0x53	; 83
     cca:	4b ef       	ldi	r20, 0xFB	; 251
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     cd2:	3b 01       	movw	r6, r22
     cd4:	4c 01       	movw	r8, r24
     cd6:	60 93 22 02 	sts	0x0222, r22
     cda:	70 93 23 02 	sts	0x0223, r23
     cde:	80 93 24 02 	sts	0x0224, r24
     ce2:	90 93 25 02 	sts	0x0225, r25
		v_r = M_2PIR*rps_rf;
     ce6:	60 91 40 01 	lds	r22, 0x0140
     cea:	70 91 41 01 	lds	r23, 0x0141
     cee:	80 91 42 01 	lds	r24, 0x0142
     cf2:	90 91 43 01 	lds	r25, 0x0143
     cf6:	23 ec       	ldi	r18, 0xC3	; 195
     cf8:	33 e5       	ldi	r19, 0x53	; 83
     cfa:	4b ef       	ldi	r20, 0xFB	; 251
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     d02:	1b 01       	movw	r2, r22
     d04:	2c 01       	movw	r4, r24
     d06:	60 93 7e 02 	sts	0x027E, r22
     d0a:	70 93 7f 02 	sts	0x027F, r23
     d0e:	80 93 80 02 	sts	0x0280, r24
     d12:	90 93 81 02 	sts	0x0281, r25
		///////////////////////////////////////////////

		// Calculate total elapsed time ////////////////////////////
		elapsed_time = fmin(elapsed_time_r - elapsed_time_r_previous, elapsed_time_l - elapsed_time_l_previous);
     d16:	60 91 14 01 	lds	r22, 0x0114
     d1a:	70 91 15 01 	lds	r23, 0x0115
     d1e:	80 91 16 01 	lds	r24, 0x0116
     d22:	90 91 17 01 	lds	r25, 0x0117
     d26:	20 91 1c 01 	lds	r18, 0x011C
     d2a:	30 91 1d 01 	lds	r19, 0x011D
     d2e:	40 91 1e 01 	lds	r20, 0x011E
     d32:	50 91 1f 01 	lds	r21, 0x011F
     d36:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     d3a:	7b 01       	movw	r14, r22
     d3c:	8c 01       	movw	r16, r24
     d3e:	60 91 10 01 	lds	r22, 0x0110
     d42:	70 91 11 01 	lds	r23, 0x0111
     d46:	80 91 12 01 	lds	r24, 0x0112
     d4a:	90 91 13 01 	lds	r25, 0x0113
     d4e:	20 91 18 01 	lds	r18, 0x0118
     d52:	30 91 19 01 	lds	r19, 0x0119
     d56:	40 91 1a 01 	lds	r20, 0x011A
     d5a:	50 91 1b 01 	lds	r21, 0x011B
     d5e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	c8 01       	movw	r24, r16
     d68:	b7 01       	movw	r22, r14
     d6a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <fmin>
     d6e:	60 93 2a 02 	sts	0x022A, r22
     d72:	70 93 2b 02 	sts	0x022B, r23
     d76:	80 93 2c 02 	sts	0x022C, r24
     d7a:	90 93 2d 02 	sts	0x022D, r25
		cmd_ang_vel = -0.5*atan2(1*(heading_robot - cmd_heading) +0,1);
		////////////////////////////////////////////////////////////
		*/

		// Velocity Commands
		v_l_cmd = (cmd_lin_vel - cmd_ang_vel*ROBOT_RADIUS);
     d7e:	60 91 6c 01 	lds	r22, 0x016C
     d82:	70 91 6d 01 	lds	r23, 0x016D
     d86:	80 91 6e 01 	lds	r24, 0x016E
     d8a:	90 91 6f 01 	lds	r25, 0x016F
     d8e:	26 e6       	ldi	r18, 0x66	; 102
     d90:	36 e6       	ldi	r19, 0x66	; 102
     d92:	46 e0       	ldi	r20, 0x06	; 6
     d94:	51 ec       	ldi	r21, 0xC1	; 193
     d96:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	60 91 68 01 	lds	r22, 0x0168
     da2:	70 91 69 01 	lds	r23, 0x0169
     da6:	80 91 6a 01 	lds	r24, 0x016A
     daa:	90 91 6b 01 	lds	r25, 0x016B
     dae:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     db2:	5b 01       	movw	r10, r22
     db4:	6c 01       	movw	r12, r24
     db6:	60 93 c6 02 	sts	0x02C6, r22
     dba:	70 93 c7 02 	sts	0x02C7, r23
     dbe:	80 93 c8 02 	sts	0x02C8, r24
     dc2:	90 93 c9 02 	sts	0x02C9, r25
		v_r_cmd = (cmd_lin_vel + cmd_ang_vel*ROBOT_RADIUS);
     dc6:	60 91 6c 01 	lds	r22, 0x016C
     dca:	70 91 6d 01 	lds	r23, 0x016D
     dce:	80 91 6e 01 	lds	r24, 0x016E
     dd2:	90 91 6f 01 	lds	r25, 0x016F
     dd6:	26 e6       	ldi	r18, 0x66	; 102
     dd8:	36 e6       	ldi	r19, 0x66	; 102
     dda:	46 e0       	ldi	r20, 0x06	; 6
     ddc:	51 e4       	ldi	r21, 0x41	; 65
     dde:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     de2:	20 91 68 01 	lds	r18, 0x0168
     de6:	30 91 69 01 	lds	r19, 0x0169
     dea:	40 91 6a 01 	lds	r20, 0x016A
     dee:	50 91 6b 01 	lds	r21, 0x016B
     df2:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     df6:	7b 01       	movw	r14, r22
     df8:	8c 01       	movw	r16, r24
     dfa:	60 93 72 02 	sts	0x0272, r22
     dfe:	70 93 73 02 	sts	0x0273, r23
     e02:	80 93 74 02 	sts	0x0274, r24
     e06:	90 93 75 02 	sts	0x0275, r25
		////////////////////////////////////////
		
		// PID calculation	/////////////////////////////////////////
		error_l = v_l_cmd - v_l;									// Current Left Wheel error
     e0a:	c6 01       	movw	r24, r12
     e0c:	b5 01       	movw	r22, r10
     e0e:	a4 01       	movw	r20, r8
     e10:	93 01       	movw	r18, r6
     e12:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     e16:	6d 83       	std	Y+5, r22	; 0x05
     e18:	7e 83       	std	Y+6, r23	; 0x06
     e1a:	8f 83       	std	Y+7, r24	; 0x07
     e1c:	98 87       	std	Y+8, r25	; 0x08
     e1e:	60 93 46 02 	sts	0x0246, r22
     e22:	70 93 47 02 	sts	0x0247, r23
     e26:	80 93 48 02 	sts	0x0248, r24
     e2a:	90 93 49 02 	sts	0x0249, r25
		error_r = v_r_cmd - v_r;									// Current Right Wheel error
     e2e:	c8 01       	movw	r24, r16
     e30:	b7 01       	movw	r22, r14
     e32:	a2 01       	movw	r20, r4
     e34:	91 01       	movw	r18, r2
     e36:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	60 93 d2 02 	sts	0x02D2, r22
     e46:	70 93 d3 02 	sts	0x02D3, r23
     e4a:	80 93 d4 02 	sts	0x02D4, r24
     e4e:	90 93 d5 02 	sts	0x02D5, r25
	
		// Calculate the proportion
		up_l = Kp_l*error_l;										// Left Wheel Proportion
     e52:	60 91 1e 02 	lds	r22, 0x021E
     e56:	70 91 1f 02 	lds	r23, 0x021F
     e5a:	80 91 20 02 	lds	r24, 0x0220
     e5e:	90 91 21 02 	lds	r25, 0x0221
     e62:	2d 81       	ldd	r18, Y+5	; 0x05
     e64:	3e 81       	ldd	r19, Y+6	; 0x06
     e66:	4f 81       	ldd	r20, Y+7	; 0x07
     e68:	58 85       	ldd	r21, Y+8	; 0x08
     e6a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     e6e:	69 8b       	std	Y+17, r22	; 0x11
     e70:	7a 8b       	std	Y+18, r23	; 0x12
     e72:	8b 8b       	std	Y+19, r24	; 0x13
     e74:	9c 8b       	std	Y+20, r25	; 0x14
     e76:	60 93 76 02 	sts	0x0276, r22
     e7a:	70 93 77 02 	sts	0x0277, r23
     e7e:	80 93 78 02 	sts	0x0278, r24
     e82:	90 93 79 02 	sts	0x0279, r25
		up_r = Kp_r*error_r;										// Right Wheel Proportion
     e86:	60 91 6e 02 	lds	r22, 0x026E
     e8a:	70 91 6f 02 	lds	r23, 0x026F
     e8e:	80 91 70 02 	lds	r24, 0x0270
     e92:	90 91 71 02 	lds	r25, 0x0271
     e96:	29 81       	ldd	r18, Y+1	; 0x01
     e98:	3a 81       	ldd	r19, Y+2	; 0x02
     e9a:	4b 81       	ldd	r20, Y+3	; 0x03
     e9c:	5c 81       	ldd	r21, Y+4	; 0x04
     e9e:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     ea2:	6d 8b       	std	Y+21, r22	; 0x15
     ea4:	7e 8b       	std	Y+22, r23	; 0x16
     ea6:	8f 8b       	std	Y+23, r24	; 0x17
     ea8:	98 8f       	std	Y+24, r25	; 0x18
     eaa:	60 93 42 02 	sts	0x0242, r22
     eae:	70 93 43 02 	sts	0x0243, r23
     eb2:	80 93 44 02 	sts	0x0244, r24
     eb6:	90 93 45 02 	sts	0x0245, r25
		
		// Calculate the integral
		ui_l = Ki_l*(error_l + error_l_n1) + ui_l_n1;				// Update Left Wheel integral
     eba:	e0 90 b6 02 	lds	r14, 0x02B6
     ebe:	f0 90 b7 02 	lds	r15, 0x02B7
     ec2:	00 91 b8 02 	lds	r16, 0x02B8
     ec6:	10 91 b9 02 	lds	r17, 0x02B9
     eca:	6d 81       	ldd	r22, Y+5	; 0x05
     ecc:	7e 81       	ldd	r23, Y+6	; 0x06
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
     ed0:	98 85       	ldd	r25, Y+8	; 0x08
     ed2:	a8 01       	movw	r20, r16
     ed4:	97 01       	movw	r18, r14
     ed6:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     eda:	20 91 5e 02 	lds	r18, 0x025E
     ede:	30 91 5f 02 	lds	r19, 0x025F
     ee2:	40 91 60 02 	lds	r20, 0x0260
     ee6:	50 91 61 02 	lds	r21, 0x0261
     eea:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     eee:	20 91 60 01 	lds	r18, 0x0160
     ef2:	30 91 61 01 	lds	r19, 0x0161
     ef6:	40 91 62 01 	lds	r20, 0x0162
     efa:	50 91 63 01 	lds	r21, 0x0163
     efe:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     f02:	60 93 32 02 	sts	0x0232, r22
     f06:	70 93 33 02 	sts	0x0233, r23
     f0a:	80 93 34 02 	sts	0x0234, r24
     f0e:	90 93 35 02 	sts	0x0235, r25
		ui_r = Ki_r*(error_r + error_r_n1) + ui_r_n1;				// Update Right Wheel integral
     f12:	a0 90 36 02 	lds	r10, 0x0236
     f16:	b0 90 37 02 	lds	r11, 0x0237
     f1a:	c0 90 38 02 	lds	r12, 0x0238
     f1e:	d0 90 39 02 	lds	r13, 0x0239
     f22:	69 81       	ldd	r22, Y+1	; 0x01
     f24:	7a 81       	ldd	r23, Y+2	; 0x02
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	a6 01       	movw	r20, r12
     f2c:	95 01       	movw	r18, r10
     f2e:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     f32:	20 91 b2 02 	lds	r18, 0x02B2
     f36:	30 91 b3 02 	lds	r19, 0x02B3
     f3a:	40 91 b4 02 	lds	r20, 0x02B4
     f3e:	50 91 b5 02 	lds	r21, 0x02B5
     f42:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     f46:	20 91 64 01 	lds	r18, 0x0164
     f4a:	30 91 65 01 	lds	r19, 0x0165
     f4e:	40 91 66 01 	lds	r20, 0x0166
     f52:	50 91 67 01 	lds	r21, 0x0167
     f56:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
     f5a:	60 93 1a 02 	sts	0x021A, r22
     f5e:	70 93 1b 02 	sts	0x021B, r23
     f62:	80 93 1c 02 	sts	0x021C, r24
     f66:	90 93 1d 02 	sts	0x021D, r25
		Td_r = 25*(elapsed_time);
		Kd_l = (2*K_l*Td_l)/T_l;									// Update Derivative coefficient
		Kd_r = (2*K_r*Td_r)/T_r;									// Update Derivative coefficient
*/
		// Calculate the derivative		
		ud_l = Kd_l*(error_l - error_l_n1) - ud_l_n1;				// Update Left Wheel derivative
     f6a:	60 90 a2 02 	lds	r6, 0x02A2
     f6e:	70 90 a3 02 	lds	r7, 0x02A3
     f72:	80 90 a4 02 	lds	r8, 0x02A4
     f76:	90 90 a5 02 	lds	r9, 0x02A5
     f7a:	6d 81       	ldd	r22, Y+5	; 0x05
     f7c:	7e 81       	ldd	r23, Y+6	; 0x06
     f7e:	8f 81       	ldd	r24, Y+7	; 0x07
     f80:	98 85       	ldd	r25, Y+8	; 0x08
     f82:	a8 01       	movw	r20, r16
     f84:	97 01       	movw	r18, r14
     f86:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     f8a:	20 91 6a 02 	lds	r18, 0x026A
     f8e:	30 91 6b 02 	lds	r19, 0x026B
     f92:	40 91 6c 02 	lds	r20, 0x026C
     f96:	50 91 6d 02 	lds	r21, 0x026D
     f9a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     f9e:	a4 01       	movw	r20, r8
     fa0:	93 01       	movw	r18, r6
     fa2:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     fa6:	7b 01       	movw	r14, r22
     fa8:	8c 01       	movw	r16, r24
     faa:	60 93 ca 02 	sts	0x02CA, r22
     fae:	70 93 cb 02 	sts	0x02CB, r23
     fb2:	80 93 cc 02 	sts	0x02CC, r24
     fb6:	90 93 cd 02 	sts	0x02CD, r25
		ud_r = Kd_r*(error_r - error_r_n1) - ud_r_n1;				// Update Right Wheel derivative
     fba:	20 90 62 02 	lds	r2, 0x0262
     fbe:	30 90 63 02 	lds	r3, 0x0263
     fc2:	40 90 64 02 	lds	r4, 0x0264
     fc6:	50 90 65 02 	lds	r5, 0x0265
     fca:	69 81       	ldd	r22, Y+1	; 0x01
     fcc:	7a 81       	ldd	r23, Y+2	; 0x02
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	a6 01       	movw	r20, r12
     fd4:	95 01       	movw	r18, r10
     fd6:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     fda:	20 91 ae 02 	lds	r18, 0x02AE
     fde:	30 91 af 02 	lds	r19, 0x02AF
     fe2:	40 91 b0 02 	lds	r20, 0x02B0
     fe6:	50 91 b1 02 	lds	r21, 0x02B1
     fea:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     fee:	a2 01       	movw	r20, r4
     ff0:	91 01       	movw	r18, r2
     ff2:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
     ff6:	5b 01       	movw	r10, r22
     ff8:	6c 01       	movw	r12, r24
     ffa:	60 93 7a 02 	sts	0x027A, r22
     ffe:	70 93 7b 02 	sts	0x027B, r23
    1002:	80 93 7c 02 	sts	0x027C, r24
    1006:	90 93 7d 02 	sts	0x027D, r25
		
		// Filter the derivative output
		udf_l = lpf1_l*ud_l + lpf2_l*ud_l_n1 - lpf3_l*udf_l_n1;		// Update filtered Left Wheel derivative
    100a:	60 91 ce 02 	lds	r22, 0x02CE
    100e:	70 91 cf 02 	lds	r23, 0x02CF
    1012:	80 91 d0 02 	lds	r24, 0x02D0
    1016:	90 91 d1 02 	lds	r25, 0x02D1
    101a:	a8 01       	movw	r20, r16
    101c:	97 01       	movw	r18, r14
    101e:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    1022:	7b 01       	movw	r14, r22
    1024:	8c 01       	movw	r16, r24
    1026:	c4 01       	movw	r24, r8
    1028:	b3 01       	movw	r22, r6
    102a:	20 91 92 02 	lds	r18, 0x0292
    102e:	30 91 93 02 	lds	r19, 0x0293
    1032:	40 91 94 02 	lds	r20, 0x0294
    1036:	50 91 95 02 	lds	r21, 0x0295
    103a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	c8 01       	movw	r24, r16
    1044:	b7 01       	movw	r22, r14
    1046:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
    104a:	7b 01       	movw	r14, r22
    104c:	8c 01       	movw	r16, r24
    104e:	60 91 a6 02 	lds	r22, 0x02A6
    1052:	70 91 a7 02 	lds	r23, 0x02A7
    1056:	80 91 a8 02 	lds	r24, 0x02A8
    105a:	90 91 a9 02 	lds	r25, 0x02A9
    105e:	20 91 de 02 	lds	r18, 0x02DE
    1062:	30 91 df 02 	lds	r19, 0x02DF
    1066:	40 91 e0 02 	lds	r20, 0x02E0
    106a:	50 91 e1 02 	lds	r21, 0x02E1
    106e:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	c8 01       	movw	r24, r16
    1078:	b7 01       	movw	r22, r14
    107a:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
    107e:	60 93 66 02 	sts	0x0266, r22
    1082:	70 93 67 02 	sts	0x0267, r23
    1086:	80 93 68 02 	sts	0x0268, r24
    108a:	90 93 69 02 	sts	0x0269, r25
		udf_r = lpf1_r*ud_r + lpf2_r*ud_r_n1 - lpf3_r*udf_r_n1;		// Update filtered Right Wheel derivative
    108e:	60 91 da 02 	lds	r22, 0x02DA
    1092:	70 91 db 02 	lds	r23, 0x02DB
    1096:	80 91 dc 02 	lds	r24, 0x02DC
    109a:	90 91 dd 02 	lds	r25, 0x02DD
    109e:	a6 01       	movw	r20, r12
    10a0:	95 01       	movw	r18, r10
    10a2:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    10a6:	7b 01       	movw	r14, r22
    10a8:	8c 01       	movw	r16, r24
    10aa:	c2 01       	movw	r24, r4
    10ac:	b1 01       	movw	r22, r2
    10ae:	20 91 aa 02 	lds	r18, 0x02AA
    10b2:	30 91 ab 02 	lds	r19, 0x02AB
    10b6:	40 91 ac 02 	lds	r20, 0x02AC
    10ba:	50 91 ad 02 	lds	r21, 0x02AD
    10be:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	c8 01       	movw	r24, r16
    10c8:	b7 01       	movw	r22, r14
    10ca:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
    10ce:	7b 01       	movw	r14, r22
    10d0:	8c 01       	movw	r16, r24
    10d2:	60 91 96 02 	lds	r22, 0x0296
    10d6:	70 91 97 02 	lds	r23, 0x0297
    10da:	80 91 98 02 	lds	r24, 0x0298
    10de:	90 91 99 02 	lds	r25, 0x0299
    10e2:	20 91 8a 02 	lds	r18, 0x028A
    10e6:	30 91 8b 02 	lds	r19, 0x028B
    10ea:	40 91 8c 02 	lds	r20, 0x028C
    10ee:	50 91 8d 02 	lds	r21, 0x028D
    10f2:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    10f6:	9b 01       	movw	r18, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	c8 01       	movw	r24, r16
    10fc:	b7 01       	movw	r22, r14
    10fe:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
    1102:	60 93 9a 02 	sts	0x029A, r22
    1106:	70 93 9b 02 	sts	0x029B, r23
    110a:	80 93 9c 02 	sts	0x029C, r24
    110e:	90 93 9d 02 	sts	0x029D, r25
		
		u_l += up_l;									// u_l(t) to be output to the Left Wheel 
    1112:	60 91 c2 02 	lds	r22, 0x02C2
    1116:	70 91 c3 02 	lds	r23, 0x02C3
    111a:	80 91 c4 02 	lds	r24, 0x02C4
    111e:	90 91 c5 02 	lds	r25, 0x02C5
    1122:	29 89       	ldd	r18, Y+17	; 0x11
    1124:	3a 89       	ldd	r19, Y+18	; 0x12
    1126:	4b 89       	ldd	r20, Y+19	; 0x13
    1128:	5c 89       	ldd	r21, Y+20	; 0x14
    112a:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
    112e:	7b 01       	movw	r14, r22
    1130:	8c 01       	movw	r16, r24
    1132:	60 93 c2 02 	sts	0x02C2, r22
    1136:	70 93 c3 02 	sts	0x02C3, r23
    113a:	80 93 c4 02 	sts	0x02C4, r24
    113e:	90 93 c5 02 	sts	0x02C5, r25
		u_r += up_r;									// u_r(t) to be output to the Right Wheel 
    1142:	60 91 3a 02 	lds	r22, 0x023A
    1146:	70 91 3b 02 	lds	r23, 0x023B
    114a:	80 91 3c 02 	lds	r24, 0x023C
    114e:	90 91 3d 02 	lds	r25, 0x023D
    1152:	2d 89       	ldd	r18, Y+21	; 0x15
    1154:	3e 89       	ldd	r19, Y+22	; 0x16
    1156:	4f 89       	ldd	r20, Y+23	; 0x17
    1158:	58 8d       	ldd	r21, Y+24	; 0x18
    115a:	0e 94 bb 11 	call	0x2376	; 0x2376 <__addsf3>
    115e:	5b 01       	movw	r10, r22
    1160:	6c 01       	movw	r12, r24
    1162:	60 93 3a 02 	sts	0x023A, r22
    1166:	70 93 3b 02 	sts	0x023B, r23
    116a:	80 93 3c 02 	sts	0x023C, r24
    116e:	90 93 3d 02 	sts	0x023D, r25
		//u_l += up_l + ui_l + udf_l;									// u_l(t) to be output to the Left Wheel 
		//u_r += up_r + ui_r + udf_r;									// u_r(t) to be output to the Right Wheel 

		// Anti-windup
		if(u_l > 30){
    1172:	c8 01       	movw	r24, r16
    1174:	b7 01       	movw	r22, r14
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 ef       	ldi	r20, 0xF0	; 240
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
    1182:	18 16       	cp	r1, r24
    1184:	ac f4       	brge	.+42     	; 0x11b0 <__stack+0xcb1>
			ui_l = ui_l_n1;
    1186:	80 91 60 01 	lds	r24, 0x0160
    118a:	90 91 61 01 	lds	r25, 0x0161
    118e:	a0 91 62 01 	lds	r26, 0x0162
    1192:	b0 91 63 01 	lds	r27, 0x0163
    1196:	80 93 32 02 	sts	0x0232, r24
    119a:	90 93 33 02 	sts	0x0233, r25
    119e:	a0 93 34 02 	sts	0x0234, r26
    11a2:	b0 93 35 02 	sts	0x0235, r27
			u_l = 30;	
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 ef       	ldi	r26, 0xF0	; 240
    11ac:	b1 e4       	ldi	r27, 0x41	; 65
    11ae:	1e c0       	rjmp	.+60     	; 0x11ec <__stack+0xced>
		}
		else if(u_l < -30){
    11b0:	c8 01       	movw	r24, r16
    11b2:	b7 01       	movw	r22, r14
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 ef       	ldi	r20, 0xF0	; 240
    11ba:	51 ec       	ldi	r21, 0xC1	; 193
    11bc:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	e4 f4       	brge	.+56     	; 0x11fc <__stack+0xcfd>
			ui_l = ui_l_n1;
    11c4:	80 91 60 01 	lds	r24, 0x0160
    11c8:	90 91 61 01 	lds	r25, 0x0161
    11cc:	a0 91 62 01 	lds	r26, 0x0162
    11d0:	b0 91 63 01 	lds	r27, 0x0163
    11d4:	80 93 32 02 	sts	0x0232, r24
    11d8:	90 93 33 02 	sts	0x0233, r25
    11dc:	a0 93 34 02 	sts	0x0234, r26
    11e0:	b0 93 35 02 	sts	0x0235, r27
			u_l = -30;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 ef       	ldi	r26, 0xF0	; 240
    11ea:	b1 ec       	ldi	r27, 0xC1	; 193
    11ec:	80 93 c2 02 	sts	0x02C2, r24
    11f0:	90 93 c3 02 	sts	0x02C3, r25
    11f4:	a0 93 c4 02 	sts	0x02C4, r26
    11f8:	b0 93 c5 02 	sts	0x02C5, r27
		}

		if(u_r > 30){
    11fc:	c6 01       	movw	r24, r12
    11fe:	b5 01       	movw	r22, r10
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 ef       	ldi	r20, 0xF0	; 240
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
    120c:	18 16       	cp	r1, r24
    120e:	ac f4       	brge	.+42     	; 0x123a <__stack+0xd3b>
			ui_r = ui_r_n1;
    1210:	80 91 64 01 	lds	r24, 0x0164
    1214:	90 91 65 01 	lds	r25, 0x0165
    1218:	a0 91 66 01 	lds	r26, 0x0166
    121c:	b0 91 67 01 	lds	r27, 0x0167
    1220:	80 93 1a 02 	sts	0x021A, r24
    1224:	90 93 1b 02 	sts	0x021B, r25
    1228:	a0 93 1c 02 	sts	0x021C, r26
    122c:	b0 93 1d 02 	sts	0x021D, r27
			u_r = 30;	
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 ef       	ldi	r26, 0xF0	; 240
    1236:	b1 e4       	ldi	r27, 0x41	; 65
    1238:	1e c0       	rjmp	.+60     	; 0x1276 <__stack+0xd77>
		}
		else if(u_r < -30){
    123a:	c6 01       	movw	r24, r12
    123c:	b5 01       	movw	r22, r10
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 ef       	ldi	r20, 0xF0	; 240
    1244:	51 ec       	ldi	r21, 0xC1	; 193
    1246:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    124a:	88 23       	and	r24, r24
    124c:	e4 f4       	brge	.+56     	; 0x1286 <__stack+0xd87>
			ui_r = ui_r_n1;
    124e:	80 91 64 01 	lds	r24, 0x0164
    1252:	90 91 65 01 	lds	r25, 0x0165
    1256:	a0 91 66 01 	lds	r26, 0x0166
    125a:	b0 91 67 01 	lds	r27, 0x0167
    125e:	80 93 1a 02 	sts	0x021A, r24
    1262:	90 93 1b 02 	sts	0x021B, r25
    1266:	a0 93 1c 02 	sts	0x021C, r26
    126a:	b0 93 1d 02 	sts	0x021D, r27
			u_r = -30;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 ef       	ldi	r26, 0xF0	; 240
    1274:	b1 ec       	ldi	r27, 0xC1	; 193
    1276:	80 93 3a 02 	sts	0x023A, r24
    127a:	90 93 3b 02 	sts	0x023B, r25
    127e:	a0 93 3c 02 	sts	0x023C, r26
    1282:	b0 93 3d 02 	sts	0x023D, r27
		}

		error_l_n1 = error_l;						// Update previous Left Wheel proportional error
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	af 81       	ldd	r26, Y+7	; 0x07
    128c:	b8 85       	ldd	r27, Y+8	; 0x08
    128e:	80 93 b6 02 	sts	0x02B6, r24
    1292:	90 93 b7 02 	sts	0x02B7, r25
    1296:	a0 93 b8 02 	sts	0x02B8, r26
    129a:	b0 93 b9 02 	sts	0x02B9, r27
		ui_l_n1 = ui_l;								// Update previous Left Wheel integral
    129e:	80 91 32 02 	lds	r24, 0x0232
    12a2:	90 91 33 02 	lds	r25, 0x0233
    12a6:	a0 91 34 02 	lds	r26, 0x0234
    12aa:	b0 91 35 02 	lds	r27, 0x0235
    12ae:	80 93 60 01 	sts	0x0160, r24
    12b2:	90 93 61 01 	sts	0x0161, r25
    12b6:	a0 93 62 01 	sts	0x0162, r26
    12ba:	b0 93 63 01 	sts	0x0163, r27
		ud_l_n1 = ud_l;								// Update previous Left Wheel derivative
    12be:	80 91 ca 02 	lds	r24, 0x02CA
    12c2:	90 91 cb 02 	lds	r25, 0x02CB
    12c6:	a0 91 cc 02 	lds	r26, 0x02CC
    12ca:	b0 91 cd 02 	lds	r27, 0x02CD
    12ce:	80 93 a2 02 	sts	0x02A2, r24
    12d2:	90 93 a3 02 	sts	0x02A3, r25
    12d6:	a0 93 a4 02 	sts	0x02A4, r26
    12da:	b0 93 a5 02 	sts	0x02A5, r27
		udf_l_n1 = udf_l;							// Update previous Left Wheel filtered derivative
    12de:	80 91 66 02 	lds	r24, 0x0266
    12e2:	90 91 67 02 	lds	r25, 0x0267
    12e6:	a0 91 68 02 	lds	r26, 0x0268
    12ea:	b0 91 69 02 	lds	r27, 0x0269
    12ee:	80 93 de 02 	sts	0x02DE, r24
    12f2:	90 93 df 02 	sts	0x02DF, r25
    12f6:	a0 93 e0 02 	sts	0x02E0, r26
    12fa:	b0 93 e1 02 	sts	0x02E1, r27

		error_r_n1 = error_r;						// Update previous Right Wheel proportional error
    12fe:	29 81       	ldd	r18, Y+1	; 0x01
    1300:	3a 81       	ldd	r19, Y+2	; 0x02
    1302:	4b 81       	ldd	r20, Y+3	; 0x03
    1304:	5c 81       	ldd	r21, Y+4	; 0x04
    1306:	20 93 36 02 	sts	0x0236, r18
    130a:	30 93 37 02 	sts	0x0237, r19
    130e:	40 93 38 02 	sts	0x0238, r20
    1312:	50 93 39 02 	sts	0x0239, r21
		ui_r_n1 = ui_r;								// Update previous Right Wheel integral
    1316:	80 91 1a 02 	lds	r24, 0x021A
    131a:	90 91 1b 02 	lds	r25, 0x021B
    131e:	a0 91 1c 02 	lds	r26, 0x021C
    1322:	b0 91 1d 02 	lds	r27, 0x021D
    1326:	80 93 64 01 	sts	0x0164, r24
    132a:	90 93 65 01 	sts	0x0165, r25
    132e:	a0 93 66 01 	sts	0x0166, r26
    1332:	b0 93 67 01 	sts	0x0167, r27
		ud_r_n1 = ud_r;								// Update previous Right Wheel derivative
    1336:	80 91 7a 02 	lds	r24, 0x027A
    133a:	90 91 7b 02 	lds	r25, 0x027B
    133e:	a0 91 7c 02 	lds	r26, 0x027C
    1342:	b0 91 7d 02 	lds	r27, 0x027D
    1346:	80 93 62 02 	sts	0x0262, r24
    134a:	90 93 63 02 	sts	0x0263, r25
    134e:	a0 93 64 02 	sts	0x0264, r26
    1352:	b0 93 65 02 	sts	0x0265, r27
		udf_r_n1 = udf_r;							// Update previous Right Wheel filtered derivative
    1356:	80 91 9a 02 	lds	r24, 0x029A
    135a:	90 91 9b 02 	lds	r25, 0x029B
    135e:	a0 91 9c 02 	lds	r26, 0x029C
    1362:	b0 91 9d 02 	lds	r27, 0x029D
    1366:	80 93 8a 02 	sts	0x028A, r24
    136a:	90 93 8b 02 	sts	0x028B, r25
    136e:	a0 93 8c 02 	sts	0x028C, r26
    1372:	b0 93 8d 02 	sts	0x028D, r27
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		
		
		wheel_l(u_l);
    1376:	60 91 c2 02 	lds	r22, 0x02C2
    137a:	70 91 c3 02 	lds	r23, 0x02C3
    137e:	80 91 c4 02 	lds	r24, 0x02C4
    1382:	90 91 c5 02 	lds	r25, 0x02C5
    1386:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <wheel_l>
		wheel_r(u_r);
    138a:	60 91 3a 02 	lds	r22, 0x023A
    138e:	70 91 3b 02 	lds	r23, 0x023B
    1392:	80 91 3c 02 	lds	r24, 0x023C
    1396:	90 91 3d 02 	lds	r25, 0x023D
    139a:	0e 94 57 01 	call	0x2ae	; 0x2ae <wheel_r>
		

		// Update velocity commands /////////////////////////////////
		update_vw_cmd();
    139e:	0e 94 a1 00 	call	0x142	; 0x142 <update_vw_cmd>
    13a2:	10 ca       	rjmp	.-3040   	; 0x7c4 <__stack+0x2c5>

000013a4 <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
    13a4:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
    13a6:	80 91 81 00 	lds	r24, 0x0081
    13aa:	88 60       	ori	r24, 0x08	; 8
    13ac:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    13b0:	80 91 81 00 	lds	r24, 0x0081
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    13ba:	99 30       	cpi	r25, 0x09	; 9
    13bc:	49 f4       	brne	.+18     	; 0x13d0 <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    13be:	80 91 80 00 	lds	r24, 0x0080
    13c2:	82 60       	ori	r24, 0x02	; 2
    13c4:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    13c8:	80 91 80 00 	lds	r24, 0x0080
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
    13d0:	9a 30       	cpi	r25, 0x0A	; 10
    13d2:	21 f4       	brne	.+8      	; 0x13dc <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    13d4:	80 91 80 00 	lds	r24, 0x0080
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    13dc:	80 91 80 00 	lds	r24, 0x0080
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    13e6:	80 91 80 00 	lds	r24, 0x0080
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
    13f0:	10 92 89 00 	sts	0x0089, r1
    13f4:	10 92 88 00 	sts	0x0088, r1
}
    13f8:	08 95       	ret

000013fa <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
    13fa:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
    13fc:	80 91 81 00 	lds	r24, 0x0081
    1400:	87 7f       	andi	r24, 0xF7	; 247
    1402:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    1406:	80 91 81 00 	lds	r24, 0x0081
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    1410:	99 30       	cpi	r25, 0x09	; 9
    1412:	49 f4       	brne	.+18     	; 0x1426 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    1414:	80 91 80 00 	lds	r24, 0x0080
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    141e:	80 91 80 00 	lds	r24, 0x0080
    1422:	8e 7f       	andi	r24, 0xFE	; 254
    1424:	0e c0       	rjmp	.+28     	; 0x1442 <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
    1426:	9a 30       	cpi	r25, 0x0A	; 10
    1428:	21 f4       	brne	.+8      	; 0x1432 <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    142a:	80 91 80 00 	lds	r24, 0x0080
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    1432:	80 91 80 00 	lds	r24, 0x0080
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    143c:	80 91 80 00 	lds	r24, 0x0080
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
    1446:	10 92 8b 00 	sts	0x008B, r1
    144a:	10 92 8a 00 	sts	0x008A, r1
}
    144e:	08 95       	ret

00001450 <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    1450:	e0 e8       	ldi	r30, 0x80	; 128
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	20 81       	ld	r18, Z
    1456:	2e 7f       	andi	r18, 0xFE	; 254
    1458:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
    145a:	20 81       	ld	r18, Z
    145c:	22 60       	ori	r18, 0x02	; 2
    145e:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
    1460:	e1 e8       	ldi	r30, 0x81	; 129
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	20 81       	ld	r18, Z
    1466:	28 60       	ori	r18, 0x08	; 8
    1468:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
    146a:	20 81       	ld	r18, Z
    146c:	20 61       	ori	r18, 0x10	; 16
    146e:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
    1470:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    1472:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
    1474:	90 93 87 00 	sts	0x0087, r25
    1478:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
    147c:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
    147e:	10 92 89 00 	sts	0x0089, r1
    1482:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
    1486:	10 92 8b 00 	sts	0x008B, r1
    148a:	10 92 8a 00 	sts	0x008A, r1
}
    148e:	08 95       	ret

00001490 <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
    1490:	84 b5       	in	r24, 0x24	; 36
    1492:	8f 7d       	andi	r24, 0xDF	; 223
    1494:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    1496:	84 b5       	in	r24, 0x24	; 36
    1498:	8f 7e       	andi	r24, 0xEF	; 239
    149a:	84 bd       	out	0x24, r24	; 36
}
    149c:	08 95       	ret

0000149e <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
    149e:	84 b5       	in	r24, 0x24	; 36
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    14a4:	84 b5       	in	r24, 0x24	; 36
    14a6:	8f 7b       	andi	r24, 0xBF	; 191
    14a8:	84 bd       	out	0x24, r24	; 36
}
    14aa:	08 95       	ret

000014ac <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
    14ac:	e0 e8       	ldi	r30, 0x80	; 128
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7d       	andi	r24, 0xDF	; 223
    14b4:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    14b6:	80 81       	ld	r24, Z
    14b8:	8f 7e       	andi	r24, 0xEF	; 239
    14ba:	80 83       	st	Z, r24
}
    14bc:	08 95       	ret

000014be <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
    14be:	e0 e8       	ldi	r30, 0x80	; 128
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 77       	andi	r24, 0x7F	; 127
    14c6:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 7b       	andi	r24, 0xBF	; 191
    14cc:	80 83       	st	Z, r24
}
    14ce:	08 95       	ret

000014d0 <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
    14d0:	84 b5       	in	r24, 0x24	; 36
    14d2:	80 62       	ori	r24, 0x20	; 32
    14d4:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    14d6:	84 b5       	in	r24, 0x24	; 36
    14d8:	8f 7e       	andi	r24, 0xEF	; 239
    14da:	84 bd       	out	0x24, r24	; 36
}
    14dc:	08 95       	ret

000014de <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
    14de:	84 b5       	in	r24, 0x24	; 36
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    14e4:	84 b5       	in	r24, 0x24	; 36
    14e6:	8f 7b       	andi	r24, 0xBF	; 191
    14e8:	84 bd       	out	0x24, r24	; 36
}
    14ea:	08 95       	ret

000014ec <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
    14ec:	e0 e8       	ldi	r30, 0x80	; 128
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	80 62       	ori	r24, 0x20	; 32
    14f4:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7e       	andi	r24, 0xEF	; 239
    14fa:	80 83       	st	Z, r24
}
    14fc:	08 95       	ret

000014fe <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
    14fe:	e0 e8       	ldi	r30, 0x80	; 128
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    1508:	80 81       	ld	r24, Z
    150a:	8f 7b       	andi	r24, 0xBF	; 191
    150c:	80 83       	st	Z, r24
}
    150e:	08 95       	ret

00001510 <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
    1510:	88 bd       	out	0x28, r24	; 40
}
    1512:	08 95       	ret

00001514 <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
    1514:	87 bd       	out	0x27, r24	; 39
}
    1516:	08 95       	ret

00001518 <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
    1518:	90 93 89 00 	sts	0x0089, r25
    151c:	80 93 88 00 	sts	0x0088, r24
}
    1520:	08 95       	ret

00001522 <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
    1522:	90 93 8b 00 	sts	0x008B, r25
    1526:	80 93 8a 00 	sts	0x008A, r24
}
    152a:	08 95       	ret

0000152c <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    152c:	10 92 4a 02 	sts	0x024A, r1
    1530:	10 92 4b 02 	sts	0x024B, r1
    1534:	10 92 4c 02 	sts	0x024C, r1
    1538:	10 92 4d 02 	sts	0x024D, r1
    153c:	16 bc       	out	0x26, r1	; 38
}
    153e:	08 95       	ret

00001540 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1540:	10 92 3e 02 	sts	0x023E, r1
    1544:	10 92 3f 02 	sts	0x023F, r1
    1548:	10 92 40 02 	sts	0x0240, r1
    154c:	10 92 41 02 	sts	0x0241, r1
    1550:	10 92 85 00 	sts	0x0085, r1
    1554:	10 92 84 00 	sts	0x0084, r1
}
    1558:	08 95       	ret

0000155a <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
    155a:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1562:	10 92 4a 02 	sts	0x024A, r1
    1566:	10 92 4b 02 	sts	0x024B, r1
    156a:	10 92 4c 02 	sts	0x024C, r1
    156e:	10 92 4d 02 	sts	0x024D, r1
    1572:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    1574:	08 95       	ret

00001576 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
    1576:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1580:	10 92 3e 02 	sts	0x023E, r1
    1584:	10 92 3f 02 	sts	0x023F, r1
    1588:	10 92 40 02 	sts	0x0240, r1
    158c:	10 92 41 02 	sts	0x0241, r1
    1590:	10 92 85 00 	sts	0x0085, r1
    1594:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    1598:	08 95       	ret

0000159a <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    159a:	20 91 4a 02 	lds	r18, 0x024A
    159e:	30 91 4b 02 	lds	r19, 0x024B
    15a2:	40 91 4c 02 	lds	r20, 0x024C
    15a6:	50 91 4d 02 	lds	r21, 0x024D
}
    15aa:	b9 01       	movw	r22, r18
    15ac:	ca 01       	movw	r24, r20
    15ae:	08 95       	ret

000015b0 <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	24 e0       	ldi	r18, 0x04	; 4
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	2a 95       	dec	r18
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <delay_us+0x6>
    15c2:	03 96       	adiw	r24, 0x03	; 3
    15c4:	a1 1d       	adc	r26, r1
    15c6:	b1 1d       	adc	r27, r1
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
    15de:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
    15e6:	d8 f3       	brcs	.-10     	; 0x15de <delay_us+0x2e>
		asm("nop");
	};
}
    15e8:	08 95       	ret

000015ea <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
    15fc:	80 91 4a 02 	lds	r24, 0x024A
    1600:	90 91 4b 02 	lds	r25, 0x024B
    1604:	a0 91 4c 02 	lds	r26, 0x024C
    1608:	b0 91 4d 02 	lds	r27, 0x024D
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	a1 1d       	adc	r26, r1
    1610:	b1 1d       	adc	r27, r1
    1612:	80 93 4a 02 	sts	0x024A, r24
    1616:	90 93 4b 02 	sts	0x024B, r25
    161a:	a0 93 4c 02 	sts	0x024C, r26
    161e:	b0 93 4d 02 	sts	0x024D, r27
}
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    1634:	90 93 71 01 	sts	0x0171, r25
    1638:	80 93 70 01 	sts	0x0170, r24
}
    163c:	08 95       	ret

0000163e <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    163e:	1f 93       	push	r17
    1640:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    1642:	8a 30       	cpi	r24, 0x0A	; 10
    1644:	31 f4       	brne	.+12     	; 0x1652 <rprintfChar+0x14>
		rputchar('\r');
    1646:	e0 91 70 01 	lds	r30, 0x0170
    164a:	f0 91 71 01 	lds	r31, 0x0171
    164e:	8d e0       	ldi	r24, 0x0D	; 13
    1650:	09 95       	icall
	// send character
	rputchar(c);
    1652:	e0 91 70 01 	lds	r30, 0x0170
    1656:	f0 91 71 01 	lds	r31, 0x0171
    165a:	81 2f       	mov	r24, r17
    165c:	09 95       	icall
}
    165e:	1f 91       	pop	r17
    1660:	08 95       	ret

00001662 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	21 f4       	brne	.+8      	; 0x1674 <rprintfStr+0x12>
    166c:	06 c0       	rjmp	.+12     	; 0x167a <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    166e:	21 96       	adiw	r28, 0x01	; 1
    1670:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    1674:	88 81       	ld	r24, Y
    1676:	88 23       	and	r24, r24
    1678:	d1 f7       	brne	.-12     	; 0x166e <rprintfStr+0xc>
		rprintfChar(*str++);
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	8c 01       	movw	r16, r24
    168e:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	e9 f0       	breq	.+58     	; 0x16ce <rprintfStrLen+0x4e>
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    1698:	26 17       	cp	r18, r22
    169a:	37 07       	cpc	r19, r23
    169c:	38 f4       	brcc	.+14     	; 0x16ac <rprintfStrLen+0x2c>
    169e:	f8 01       	movw	r30, r16
    16a0:	81 91       	ld	r24, Z+
    16a2:	8f 01       	movw	r16, r30
    16a4:	2f 5f       	subi	r18, 0xFF	; 255
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	88 23       	and	r24, r24
    16aa:	b1 f7       	brne	.-20     	; 0x1698 <rprintfStrLen+0x18>
    16ac:	c0 e0       	ldi	r28, 0x00	; 0
    16ae:	d0 e0       	ldi	r29, 0x00	; 0
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 81       	ld	r24, Z
    16b6:	88 23       	and	r24, r24
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    16ba:	0f 5f       	subi	r16, 0xFF	; 255
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    16c0:	80 e2       	ldi	r24, 0x20	; 32
    16c2:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    16c6:	21 96       	adiw	r28, 0x01	; 1
    16c8:	ce 15       	cp	r28, r14
    16ca:	df 05       	cpc	r29, r15
    16cc:	90 f3       	brcs	.-28     	; 0x16b2 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	08 95       	ret

000016dc <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	19 f4       	brne	.+6      	; 0x16ec <rprintfProgStr+0x10>
    16e6:	07 c0       	rjmp	.+14     	; 0x16f6 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    16e8:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    16ec:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    16ee:	21 96       	adiw	r28, 0x01	; 1
    16f0:	84 91       	lpm	r24, Z+
    16f2:	88 23       	and	r24, r24
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    16fc:	8a e0       	ldi	r24, 0x0A	; 10
    16fe:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
}
    1702:	08 95       	ret

00001704 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    1704:	e8 2f       	mov	r30, r24
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	ef 70       	andi	r30, 0x0F	; 15
    170a:	f0 70       	andi	r31, 0x00	; 0
    170c:	e8 59       	subi	r30, 0x98	; 152
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	e4 91       	lpm	r30, Z+
    1712:	8e 2f       	mov	r24, r30
    1714:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
}
    1718:	08 95       	ret

0000171a <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    171a:	1f 93       	push	r17
    171c:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    171e:	82 95       	swap	r24
    1720:	8f 70       	andi	r24, 0x0F	; 15
    1722:	0e 94 82 0b 	call	0x1704	; 0x1704 <rprintfu04>
	rprintfu04(data);
    1726:	81 2f       	mov	r24, r17
    1728:	0e 94 82 0b 	call	0x1704	; 0x1704 <rprintfu04>
}
    172c:	1f 91       	pop	r17
    172e:	08 95       	ret

00001730 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    1730:	1f 93       	push	r17
    1732:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    1734:	89 2f       	mov	r24, r25
    1736:	0e 94 8d 0b 	call	0x171a	; 0x171a <rprintfu08>
	rprintfu08(data);
    173a:	81 2f       	mov	r24, r17
    173c:	0e 94 8d 0b 	call	0x171a	; 0x171a <rprintfu08>
}
    1740:	1f 91       	pop	r17
    1742:	08 95       	ret

00001744 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	7b 01       	movw	r14, r22
    174e:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    1750:	c8 01       	movw	r24, r16
    1752:	aa 27       	eor	r26, r26
    1754:	bb 27       	eor	r27, r27
    1756:	0e 94 98 0b 	call	0x1730	; 0x1730 <rprintfu16>
	rprintfu16(data);
    175a:	c7 01       	movw	r24, r14
    175c:	0e 94 98 0b 	call	0x1730	; 0x1730 <rprintfu16>
}
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	08 95       	ret

0000176a <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    176a:	2f 92       	push	r2
    176c:	3f 92       	push	r3
    176e:	4f 92       	push	r4
    1770:	5f 92       	push	r5
    1772:	6f 92       	push	r6
    1774:	7f 92       	push	r7
    1776:	8f 92       	push	r8
    1778:	9f 92       	push	r9
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	a3 97       	sbiw	r28, 0x23	; 35
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	6a a3       	std	Y+34, r22	; 0x22
    17a0:	24 2e       	mov	r2, r20
    17a2:	2b a3       	std	Y+35, r18	; 0x23
    17a4:	37 01       	movw	r6, r14
    17a6:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    17a8:	44 23       	and	r20, r20
    17aa:	51 f0       	breq	.+20     	; 0x17c0 <rprintfNum+0x56>
    17ac:	17 ff       	sbrs	r17, 7
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <rprintfNum+0x56>
	{
		x = -n;
    17b0:	ee 24       	eor	r14, r14
    17b2:	ff 24       	eor	r15, r15
    17b4:	87 01       	movw	r16, r14
    17b6:	e6 18       	sub	r14, r6
    17b8:	f7 08       	sbc	r15, r7
    17ba:	08 09       	sbc	r16, r8
    17bc:	19 09       	sbc	r17, r9
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    17c0:	84 01       	movw	r16, r8
    17c2:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    17c4:	2a a1       	ldd	r18, Y+34	; 0x22
    17c6:	21 50       	subi	r18, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	21 10       	cpse	r2, r1
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	29 1b       	sub	r18, r25
    17d0:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    17d2:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    17d4:	a8 2e       	mov	r10, r24
    17d6:	bb 24       	eor	r11, r11
    17d8:	cc 24       	eor	r12, r12
    17da:	dd 24       	eor	r13, r13
    17dc:	c8 01       	movw	r24, r16
    17de:	b7 01       	movw	r22, r14
    17e0:	a6 01       	movw	r20, r12
    17e2:	95 01       	movw	r18, r10
    17e4:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    17e8:	fb 01       	movw	r30, r22
    17ea:	ef 70       	andi	r30, 0x0F	; 15
    17ec:	f0 70       	andi	r31, 0x00	; 0
    17ee:	e8 59       	subi	r30, 0x98	; 152
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	64 91       	lpm	r22, Z+
    17f4:	6f 8f       	std	Y+31, r22	; 0x1f
    17f6:	c8 01       	movw	r24, r16
    17f8:	b7 01       	movw	r22, r14
    17fa:	a6 01       	movw	r20, r12
    17fc:	95 01       	movw	r18, r10
    17fe:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    1802:	c9 01       	movw	r24, r18
    1804:	da 01       	movw	r26, r20
    1806:	7c 01       	movw	r14, r24
    1808:	8d 01       	movw	r16, r26
    180a:	9e e1       	ldi	r25, 0x1E	; 30
    180c:	49 2e       	mov	r4, r25
    180e:	51 2c       	mov	r5, r1
    1810:	4c 0e       	add	r4, r28
    1812:	5d 1e       	adc	r5, r29
    1814:	39 a0       	ldd	r3, Y+33	; 0x21
    1816:	25 c0       	rjmp	.+74     	; 0x1862 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    1818:	e1 14       	cp	r14, r1
    181a:	f1 04       	cpc	r15, r1
    181c:	01 05       	cpc	r16, r1
    181e:	11 05       	cpc	r17, r1
    1820:	c9 f0       	breq	.+50     	; 0x1854 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    1822:	c8 01       	movw	r24, r16
    1824:	b7 01       	movw	r22, r14
    1826:	a6 01       	movw	r20, r12
    1828:	95 01       	movw	r18, r10
    182a:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    182e:	fb 01       	movw	r30, r22
    1830:	ef 70       	andi	r30, 0x0F	; 15
    1832:	f0 70       	andi	r31, 0x00	; 0
    1834:	e8 59       	subi	r30, 0x98	; 152
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	64 91       	lpm	r22, Z+
    183a:	f2 01       	movw	r30, r4
    183c:	60 83       	st	Z, r22
    183e:	c8 01       	movw	r24, r16
    1840:	b7 01       	movw	r22, r14
    1842:	a6 01       	movw	r20, r12
    1844:	95 01       	movw	r18, r10
    1846:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    184a:	c9 01       	movw	r24, r18
    184c:	da 01       	movw	r26, r20
    184e:	7c 01       	movw	r14, r24
    1850:	8d 01       	movw	r16, r26
    1852:	03 c0       	rjmp	.+6      	; 0x185a <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    1854:	2b a1       	ldd	r18, Y+35	; 0x23
    1856:	f2 01       	movw	r30, r4
    1858:	20 83       	st	Z, r18
    185a:	3a 94       	dec	r3
    185c:	08 94       	sec
    185e:	41 08       	sbc	r4, r1
    1860:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    1862:	33 20       	and	r3, r3
    1864:	c9 f6       	brne	.-78     	; 0x1818 <rprintfNum+0xae>
    1866:	ce 01       	movw	r24, r28
    1868:	4f 96       	adiw	r24, 0x1f	; 31
    186a:	8c 01       	movw	r16, r24
    186c:	e9 a1       	ldd	r30, Y+33	; 0x21
    186e:	0e 1b       	sub	r16, r30
    1870:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    1872:	22 20       	and	r2, r2
    1874:	f1 f0       	breq	.+60     	; 0x18b2 <rprintfNum+0x148>
	{
		if(n < 0)
    1876:	97 fe       	sbrs	r9, 7
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <rprintfNum+0x11a>
		{
   			*--p = '-';
    187a:	8d e2       	ldi	r24, 0x2D	; 45
    187c:	f8 01       	movw	r30, r16
    187e:	82 93       	st	-Z, r24
    1880:	8f 01       	movw	r16, r30
    1882:	17 c0       	rjmp	.+46     	; 0x18b2 <rprintfNum+0x148>
    1884:	c8 01       	movw	r24, r16
    1886:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    1888:	61 14       	cp	r6, r1
    188a:	71 04       	cpc	r7, r1
    188c:	81 04       	cpc	r8, r1
    188e:	91 04       	cpc	r9, r1
    1890:	19 f0       	breq	.+6      	; 0x1898 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    1892:	8c 01       	movw	r16, r24
    1894:	8b e2       	ldi	r24, 0x2B	; 43
    1896:	02 c0       	rjmp	.+4      	; 0x189c <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    1898:	8c 01       	movw	r16, r24
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	f8 01       	movw	r30, r16
    189e:	80 83       	st	Z, r24
    18a0:	08 c0       	rjmp	.+16     	; 0x18b2 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    18a2:	f8 01       	movw	r30, r16
    18a4:	81 91       	ld	r24, Z+
    18a6:	8f 01       	movw	r16, r30
    18a8:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    18ac:	fa a1       	ldd	r31, Y+34	; 0x22
    18ae:	f1 50       	subi	r31, 0x01	; 1
    18b0:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    18b2:	2a a1       	ldd	r18, Y+34	; 0x22
    18b4:	22 23       	and	r18, r18
    18b6:	a9 f7       	brne	.-22     	; 0x18a2 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    18b8:	a3 96       	adiw	r28, 0x23	; 35
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	5f 90       	pop	r5
    18e2:	4f 90       	pop	r4
    18e4:	3f 90       	pop	r3
    18e6:	2f 90       	pop	r2
    18e8:	08 95       	ret

000018ea <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    18ea:	4f 92       	push	r4
    18ec:	5f 92       	push	r5
    18ee:	6f 92       	push	r6
    18f0:	7f 92       	push	r7
    18f2:	8f 92       	push	r8
    18f4:	9f 92       	push	r9
    18f6:	af 92       	push	r10
    18f8:	bf 92       	push	r11
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	48 2e       	mov	r4, r24
    190c:	5a 01       	movw	r10, r20
    190e:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    1910:	cb 01       	movw	r24, r22
    1912:	ba 01       	movw	r22, r20
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 88 13 	call	0x2710	; 0x2710 <__gesf2>
    1920:	18 16       	cp	r1, r24
    1922:	1c f4       	brge	.+6      	; 0x192a <rprintfFloat+0x40>
    1924:	35 01       	movw	r6, r10
    1926:	46 01       	movw	r8, r12
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <rprintfFloat+0x4c>
    192a:	35 01       	movw	r6, r10
    192c:	46 01       	movw	r8, r12
    192e:	97 fa       	bst	r9, 7
    1930:	90 94       	com	r9
    1932:	97 f8       	bld	r9, 7
    1934:	90 94       	com	r9
    1936:	0f 2e       	mov	r0, r31
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ef 2e       	mov	r14, r31
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	ff 2e       	mov	r15, r31
    1940:	f0 e8       	ldi	r31, 0x80	; 128
    1942:	0f 2f       	mov	r16, r31
    1944:	ff e3       	ldi	r31, 0x3F	; 63
    1946:	1f 2f       	mov	r17, r31
    1948:	f0 2d       	mov	r31, r0
    194a:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    194c:	c4 01       	movw	r24, r8
    194e:	b3 01       	movw	r22, r6
    1950:	a8 01       	movw	r20, r16
    1952:	97 01       	movw	r18, r14
    1954:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    1964:	87 fd       	sbrc	r24, 7
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    1968:	c8 01       	movw	r24, r16
    196a:	b7 01       	movw	r22, r14
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    1978:	7b 01       	movw	r14, r22
    197a:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    197c:	53 94       	inc	r5
    197e:	8f e0       	ldi	r24, 0x0F	; 15
    1980:	58 16       	cp	r5, r24
    1982:	21 f7       	brne	.-56     	; 0x194c <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    1984:	c6 01       	movw	r24, r12
    1986:	b5 01       	movw	r22, r10
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    1994:	88 23       	and	r24, r24
    1996:	14 f4       	brge	.+4      	; 0x199c <rprintfFloat+0xb2>
		rprintfChar('-');
    1998:	8d e2       	ldi	r24, 0x2D	; 45
    199a:	01 c0       	rjmp	.+2      	; 0x199e <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    199c:	8b e2       	ldi	r24, 0x2B	; 43
    199e:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    19a2:	dd 24       	eor	r13, r13
    19a4:	aa 24       	eor	r10, r10
    19a6:	56 c0       	rjmp	.+172    	; 0x1a54 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    19a8:	c4 01       	movw	r24, r8
    19aa:	b3 01       	movw	r22, r6
    19ac:	a8 01       	movw	r20, r16
    19ae:	97 01       	movw	r18, r14
    19b0:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
    19b4:	0e 94 8b 12 	call	0x2516	; 0x2516 <__fixunssfsi>
    19b8:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    19ba:	d6 2a       	or	r13, r22
    19bc:	cd 2d       	mov	r28, r13
    19be:	d0 e0       	ldi	r29, 0x00	; 0
    19c0:	cc 24       	eor	r12, r12
    19c2:	dd 24       	eor	r13, r13
    19c4:	c8 01       	movw	r24, r16
    19c6:	b7 01       	movw	r22, r14
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	19 f4       	brne	.+6      	; 0x19de <rprintfFloat+0xf4>
    19d8:	21 e0       	ldi	r18, 0x01	; 1
    19da:	c2 2e       	mov	r12, r18
    19dc:	d1 2c       	mov	r13, r1
    19de:	cc 29       	or	r28, r12
    19e0:	dd 29       	or	r29, r13
    19e2:	cd 2b       	or	r28, r29
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    19e6:	8b 2d       	mov	r24, r11
    19e8:	80 5d       	subi	r24, 0xD0	; 208
    19ea:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    19ee:	dd 24       	eor	r13, r13
    19f0:	da 94       	dec	r13
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    19fa:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    19fc:	c8 01       	movw	r24, r16
    19fe:	b7 01       	movw	r22, r14
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 1f 12 	call	0x243e	; 0x243e <__cmpsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    1a10:	8e e2       	ldi	r24, 0x2E	; 46
    1a12:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
		}
		
		x -= (digit*place);
    1a16:	6b 2d       	mov	r22, r11
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	88 27       	eor	r24, r24
    1a1c:	77 fd       	sbrc	r23, 7
    1a1e:	80 95       	com	r24
    1a20:	98 2f       	mov	r25, r24
    1a22:	0e 94 b9 12 	call	0x2572	; 0x2572 <__floatsisf>
    1a26:	a8 01       	movw	r20, r16
    1a28:	97 01       	movw	r18, r14
    1a2a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    1a2e:	9b 01       	movw	r18, r22
    1a30:	ac 01       	movw	r20, r24
    1a32:	c4 01       	movw	r24, r8
    1a34:	b3 01       	movw	r22, r6
    1a36:	0e 94 ba 11 	call	0x2374	; 0x2374 <__subsf3>
    1a3a:	3b 01       	movw	r6, r22
    1a3c:	4c 01       	movw	r8, r24
		place /= 10.0;
    1a3e:	c8 01       	movw	r24, r16
    1a40:	b7 01       	movw	r22, r14
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
    1a4e:	7b 01       	movw	r14, r22
    1a50:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    1a52:	a3 94       	inc	r10
    1a54:	a4 14       	cp	r10, r4
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <rprintfFloat+0x170>
    1a58:	a7 cf       	rjmp	.-178    	; 0x19a8 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	af 90       	pop	r10
    1a6e:	9f 90       	pop	r9
    1a70:	8f 90       	pop	r8
    1a72:	7f 90       	pop	r7
    1a74:	6f 90       	pop	r6
    1a76:	5f 90       	pop	r5
    1a78:	4f 90       	pop	r4
    1a7a:	08 95       	ret

00001a7c <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1a7c:	7f 92       	push	r7
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	78 88       	ldd	r7, Y+16	; 0x10
    1a9c:	c9 88       	ldd	r12, Y+17	; 0x11
    1a9e:	da 88       	ldd	r13, Y+18	; 0x12
    1aa0:	63 e1       	ldi	r22, 0x13	; 19
    1aa2:	e6 2e       	mov	r14, r22
    1aa4:	f1 2c       	mov	r15, r1
    1aa6:	ec 0e       	add	r14, r28
    1aa8:	fd 1e       	adc	r15, r29
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    1aac:	88 23       	and	r24, r24
    1aae:	81 f4       	brne	.+32     	; 0x1ad0 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	7f 90       	pop	r7
    1ace:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    1ad0:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    1ad4:	96 01       	movw	r18, r12
    1ad6:	2f 5f       	subi	r18, 0xFF	; 255
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1ada:	77 20       	and	r7, r7
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <rprintf1RamRom+0x6a>
    1ade:	f6 01       	movw	r30, r12
    1ae0:	69 01       	movw	r12, r18
    1ae2:	84 91       	lpm	r24, Z+
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <rprintf1RamRom+0x70>
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	80 81       	ld	r24, Z
    1aea:	69 01       	movw	r12, r18
    1aec:	85 32       	cpi	r24, 0x25	; 37
    1aee:	f1 f6       	brne	.-68     	; 0x1aac <rprintf1RamRom+0x30>
    1af0:	2f 5f       	subi	r18, 0xFF	; 255
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1af4:	77 20       	and	r7, r7
    1af6:	21 f0       	breq	.+8      	; 0x1b00 <rprintf1RamRom+0x84>
    1af8:	f6 01       	movw	r30, r12
    1afa:	69 01       	movw	r12, r18
    1afc:	84 91       	lpm	r24, Z+
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <rprintf1RamRom+0x8a>
    1b00:	f6 01       	movw	r30, r12
    1b02:	80 81       	ld	r24, Z
    1b04:	69 01       	movw	r12, r18
    1b06:	84 36       	cpi	r24, 0x64	; 100
    1b08:	29 f0       	breq	.+10     	; 0x1b14 <rprintf1RamRom+0x98>
    1b0a:	88 37       	cpi	r24, 0x78	; 120
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <rprintf1RamRom+0xb2>
    1b0e:	83 36       	cpi	r24, 0x63	; 99
    1b10:	f9 f6       	brne	.-66     	; 0x1ad0 <rprintf1RamRom+0x54>
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <rprintf1RamRom+0xa4>
    1b14:	00 e1       	ldi	r16, 0x10	; 16
    1b16:	17 e2       	ldi	r17, 0x27	; 39
    1b18:	5a e0       	ldi	r21, 0x0A	; 10
    1b1a:	a5 2e       	mov	r10, r21
    1b1c:	b1 2c       	mov	r11, r1
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    1b20:	f7 01       	movw	r30, r14
    1b22:	80 81       	ld	r24, Z
    1b24:	22 e0       	ldi	r18, 0x02	; 2
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	e2 0e       	add	r14, r18
    1b2a:	f3 1e       	adc	r15, r19
    1b2c:	d1 cf       	rjmp	.-94     	; 0x1ad0 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	10 e1       	ldi	r17, 0x10	; 16
    1b32:	40 e1       	ldi	r20, 0x10	; 16
    1b34:	a4 2e       	mov	r10, r20
    1b36:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1b38:	32 e0       	ldi	r19, 0x02	; 2
    1b3a:	83 2e       	mov	r8, r19
    1b3c:	91 2c       	mov	r9, r1
    1b3e:	8e 0c       	add	r8, r14
    1b40:	9f 1c       	adc	r9, r15
    1b42:	f7 01       	movw	r30, r14
    1b44:	e0 80       	ld	r14, Z
    1b46:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    1b48:	84 36       	cpi	r24, 0x64	; 100
    1b4a:	b1 f4       	brne	.+44     	; 0x1b78 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    1b4c:	f7 fe       	sbrs	r15, 7
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    1b50:	f0 94       	com	r15
    1b52:	e1 94       	neg	r14
    1b54:	f1 08       	sbc	r15, r1
    1b56:	f3 94       	inc	r15
					rprintfChar('-');
    1b58:	8d e2       	ldi	r24, 0x2D	; 45
    1b5a:	0e 94 1f 0b 	call	0x163e	; 0x163e <rprintfChar>
    1b5e:	09 c0       	rjmp	.+18     	; 0x1b72 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1b60:	c8 01       	movw	r24, r16
    1b62:	6a e0       	ldi	r22, 0x0A	; 10
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    1b6a:	8b 01       	movw	r16, r22
    1b6c:	62 30       	cpi	r22, 0x02	; 2
    1b6e:	71 05       	cpc	r23, r1
    1b70:	18 f0       	brcs	.+6      	; 0x1b78 <rprintf1RamRom+0xfc>
    1b72:	e0 16       	cp	r14, r16
    1b74:	f1 06       	cpc	r15, r17
    1b76:	a0 f3       	brcs	.-24     	; 0x1b60 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1b78:	c7 01       	movw	r24, r14
    1b7a:	b8 01       	movw	r22, r16
    1b7c:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    1b80:	86 2f       	mov	r24, r22
    1b82:	0e 94 82 0b 	call	0x1704	; 0x1704 <rprintfu04>
				u_val %= div_val;
    1b86:	c7 01       	movw	r24, r14
    1b88:	b8 01       	movw	r22, r16
    1b8a:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    1b8e:	7c 01       	movw	r14, r24
				div_val /= base;
    1b90:	c8 01       	movw	r24, r16
    1b92:	b5 01       	movw	r22, r10
    1b94:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    1b98:	8b 01       	movw	r16, r22
			} while (div_val);
    1b9a:	61 15       	cp	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	61 f7       	brne	.-40     	; 0x1b78 <rprintf1RamRom+0xfc>
    1ba0:	74 01       	movw	r14, r8
    1ba2:	98 cf       	rjmp	.-208    	; 0x1ad4 <rprintf1RamRom+0x58>

00001ba4 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    1ba4:	84 30       	cpi	r24, 0x04	; 4
    1ba6:	40 f4       	brcc	.+16     	; 0x1bb8 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    1ba8:	e8 2f       	mov	r30, r24
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	ee 5f       	subi	r30, 0xFE	; 254
    1bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb4:	71 83       	std	Z+1, r23	; 0x01
    1bb6:	60 83       	st	Z, r22
    1bb8:	08 95       	ret

00001bba <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    1bba:	9a 01       	movw	r18, r20
    1bbc:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
    1bbe:	88 23       	and	r24, r24
    1bc0:	e1 f4       	brne	.+56     	; 0x1bfa <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	60 58       	subi	r22, 0x80	; 128
    1bc8:	7b 47       	sbci	r23, 0x7B	; 123
    1bca:	81 4e       	sbci	r24, 0xE1	; 225
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	f3 e0       	ldi	r31, 0x03	; 3
    1bd0:	66 0f       	add	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	88 1f       	adc	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	fa 95       	dec	r31
    1bda:	d1 f7       	brne	.-12     	; 0x1bd0 <uartSetBaudRate+0x16>
    1bdc:	e4 e0       	ldi	r30, 0x04	; 4
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	44 1f       	adc	r20, r20
    1be4:	55 1f       	adc	r21, r21
    1be6:	ea 95       	dec	r30
    1be8:	d1 f7       	brne	.-12     	; 0x1bde <uartSetBaudRate+0x24>
    1bea:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    1bee:	21 50       	subi	r18, 0x01	; 1
    1bf0:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
    1bf2:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    1bf6:	30 93 c5 00 	sts	0x00C5, r19
    1bfa:	08 95       	ret

00001bfc <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	a3 e0       	ldi	r26, 0x03	; 3
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	aa 95       	dec	r26
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <uartGetRxBuffer+0x6>
    1c0a:	2a 51       	subi	r18, 0x1A	; 26
    1c0c:	3d 4f       	sbci	r19, 0xFD	; 253
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    1c0e:	c9 01       	movw	r24, r18
    1c10:	08 95       	ret

00001c12 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	b3 e0       	ldi	r27, 0x03	; 3
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	ba 95       	dec	r27
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <uartGetTxBuffer+0x6>
    1c20:	26 5f       	subi	r18, 0xF6	; 246
    1c22:	3c 4f       	sbci	r19, 0xFC	; 252
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    1c24:	c9 01       	movw	r24, r18
    1c26:	08 95       	ret

00001c28 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    1c28:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1c2a:	88 23       	and	r24, r24
    1c2c:	31 f4       	brne	.+12     	; 0x1c3a <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1c2e:	80 91 c0 00 	lds	r24, 0x00C0
    1c32:	85 ff       	sbrs	r24, 5
    1c34:	fc cf       	rjmp	.-8      	; 0x1c2e <uartSendByte+0x6>
		outb(UDR0, txData);
    1c36:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	ee 51       	subi	r30, 0x1E	; 30
    1c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c40:	10 82       	st	Z, r1
}
    1c42:	08 95       	ret

00001c44 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    1c44:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1c46:	80 91 c0 00 	lds	r24, 0x00C0
    1c4a:	85 ff       	sbrs	r24, 5
    1c4c:	fc cf       	rjmp	.-8      	; 0x1c46 <uart0SendByte+0x2>
		outb(UDR0, txData);
    1c4e:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1c52:	10 92 e2 02 	sts	0x02E2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
    1c56:	08 95       	ret

00001c58 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	e8 2f       	mov	r30, r24
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	8a 95       	dec	r24
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <uartReceiveBufferIsEmpty+0x8>
    1c68:	e6 51       	subi	r30, 0x16	; 22
    1c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	89 2b       	or	r24, r25
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <uartReceiveBufferIsEmpty+0x1e>
    1c74:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    1c76:	82 2f       	mov	r24, r18
    1c78:	08 95       	ret

00001c7a <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
    1c7e:	88 23       	and	r24, r24
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <uartReceiveService+0xc>
		c = inb(UDR0);
    1c82:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	e9 01       	movw	r28, r18
    1c8c:	cc 0f       	add	r28, r28
    1c8e:	dd 1f       	adc	r29, r29
    1c90:	fe 01       	movw	r30, r28
    1c92:	ee 5f       	subi	r30, 0xFE	; 254
    1c94:	fd 4f       	sbci	r31, 0xFD	; 253
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	89 2b       	or	r24, r25
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1c9e:	01 90       	ld	r0, Z+
    1ca0:	f0 81       	ld	r31, Z
    1ca2:	e0 2d       	mov	r30, r0
    1ca4:	86 2f       	mov	r24, r22
    1ca6:	09 95       	icall
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	9a 95       	dec	r25
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <uartReceiveService+0x32>
    1cb4:	c9 01       	movw	r24, r18
    1cb6:	8a 51       	subi	r24, 0x1A	; 26
    1cb8:	9d 4f       	sbci	r25, 0xFD	; 253
    1cba:	0e 94 77 10 	call	0x20ee	; 0x20ee <bufferAddToEnd>
    1cbe:	88 23       	and	r24, r24
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e6 5d       	subi	r30, 0xD6	; 214
    1cc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
		}
	}
}
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <__vector_18>:
	uartTransmitService(0);
}
	// service UART receive interrupt
//UART_INTERRUPT_HANDLER(_VECTOR(25))      
ISR(USART_RX_vect)      
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
	uartReceiveService(0);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <uartReceiveService>
}
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	bf 91       	pop	r27
    1d06:	af 91       	pop	r26
    1d08:	9f 91       	pop	r25
    1d0a:	8f 91       	pop	r24
    1d0c:	7f 91       	pop	r23
    1d0e:	6f 91       	pop	r22
    1d10:	5f 91       	pop	r21
    1d12:	4f 91       	pop	r20
    1d14:	3f 91       	pop	r19
    1d16:	2f 91       	pop	r18
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	af 92       	push	r10
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	88 2e       	mov	r8, r24
    1d3c:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    1d3e:	e8 2e       	mov	r14, r24
    1d40:	ff 24       	eor	r15, r15
    1d42:	f7 01       	movw	r30, r14
    1d44:	13 e0       	ldi	r17, 0x03	; 3
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	1a 95       	dec	r17
    1d4c:	e1 f7       	brne	.-8      	; 0x1d46 <uartSendBuffer+0x24>
    1d4e:	e2 5f       	subi	r30, 0xF2	; 242
    1d50:	fc 4f       	sbci	r31, 0xFC	; 252
    1d52:	20 81       	ld	r18, Z
    1d54:	31 81       	ldd	r19, Z+1	; 0x01
    1d56:	24 0f       	add	r18, r20
    1d58:	35 1f       	adc	r19, r21
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	73 e0       	ldi	r23, 0x03	; 3
    1d5e:	ee 0f       	add	r30, r30
    1d60:	ff 1f       	adc	r31, r31
    1d62:	7a 95       	dec	r23
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <uartSendBuffer+0x3c>
    1d66:	e4 5f       	subi	r30, 0xF4	; 244
    1d68:	fc 4f       	sbci	r31, 0xFC	; 252
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	28 17       	cp	r18, r24
    1d70:	39 07       	cpc	r19, r25
    1d72:	b0 f5       	brcc	.+108    	; 0x1de0 <uartSendBuffer+0xbe>
    1d74:	41 15       	cp	r20, r1
    1d76:	51 05       	cpc	r21, r1
    1d78:	99 f1       	breq	.+102    	; 0x1de0 <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    1d7a:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    1d7c:	67 01       	movw	r12, r14
    1d7e:	63 e0       	ldi	r22, 0x03	; 3
    1d80:	cc 0c       	add	r12, r12
    1d82:	dd 1c       	adc	r13, r13
    1d84:	6a 95       	dec	r22
    1d86:	e1 f7       	brne	.-8      	; 0x1d80 <uartSendBuffer+0x5e>
    1d88:	8a e0       	ldi	r24, 0x0A	; 10
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	c8 0e       	add	r12, r24
    1d8e:	d9 1e       	adc	r13, r25
    1d90:	8d 01       	movw	r16, r26
    1d92:	c0 e0       	ldi	r28, 0x00	; 0
    1d94:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1d96:	5a 01       	movw	r10, r20
    1d98:	08 94       	sec
    1d9a:	a1 08       	sbc	r10, r1
    1d9c:	b1 08       	sbc	r11, r1
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <uartSendBuffer+0x8a>
    1da0:	c6 01       	movw	r24, r12
    1da2:	f8 01       	movw	r30, r16
    1da4:	60 81       	ld	r22, Z
    1da6:	0e 94 77 10 	call	0x20ee	; 0x20ee <bufferAddToEnd>
    1daa:	21 96       	adiw	r28, 0x01	; 1
    1dac:	0f 5f       	subi	r16, 0xFF	; 255
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	ca 15       	cp	r28, r10
    1db2:	db 05       	cpc	r29, r11
    1db4:	a8 f3       	brcs	.-22     	; 0x1da0 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    1db6:	f7 01       	movw	r30, r14
    1db8:	ea 5f       	subi	r30, 0xFA	; 250
    1dba:	fc 4f       	sbci	r31, 0xFC	; 252
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1dc0:	88 20       	and	r8, r8
    1dc2:	31 f4       	brne	.+12     	; 0x1dd0 <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1dc4:	80 91 c0 00 	lds	r24, 0x00C0
    1dc8:	85 ff       	sbrs	r24, 5
    1dca:	fc cf       	rjmp	.-8      	; 0x1dc4 <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    1dcc:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1dd0:	82 ee       	ldi	r24, 0xE2	; 226
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	e8 0e       	add	r14, r24
    1dd6:	f9 1e       	adc	r15, r25
    1dd8:	f7 01       	movw	r30, r14
    1dda:	10 82       	st	Z, r1
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    1de0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	08 95       	ret

00001dfc <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	23 e0       	ldi	r18, 0x03	; 3
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	2a 95       	dec	r18
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <uartAddToTxBuffer+0x4>
    1e08:	86 5f       	subi	r24, 0xF6	; 246
    1e0a:	9c 4f       	sbci	r25, 0xFC	; 252
    1e0c:	0e 94 77 10 	call	0x20ee	; 0x20ee <bufferAddToEnd>
}
    1e10:	08 95       	ret

00001e12 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    1e12:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	0e 94 77 10 	call	0x20ee	; 0x20ee <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    1e1c:	08 95       	ret

00001e1e <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    1e24:	a8 2f       	mov	r26, r24
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	ed 01       	movw	r28, r26
    1e2a:	ca 5f       	subi	r28, 0xFA	; 250
    1e2c:	dc 4f       	sbci	r29, 0xFC	; 252
    1e2e:	88 81       	ld	r24, Y
    1e30:	88 23       	and	r24, r24
    1e32:	b1 f0       	breq	.+44     	; 0x1e60 <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    1e34:	fd 01       	movw	r30, r26
    1e36:	33 e0       	ldi	r19, 0x03	; 3
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	3a 95       	dec	r19
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <uartTransmitService+0x1a>
    1e40:	e2 5f       	subi	r30, 0xF2	; 242
    1e42:	fc 4f       	sbci	r31, 0xFC	; 252
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	89 2b       	or	r24, r25
    1e4a:	49 f0       	breq	.+18     	; 0x1e5e <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    1e4c:	23 30       	cpi	r18, 0x03	; 3
    1e4e:	61 f4       	brne	.+24     	; 0x1e68 <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1e50:	8a e0       	ldi	r24, 0x0A	; 10
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	0e 94 0e 10 	call	0x201c	; 0x201c <bufferGetFromFront>
    1e58:	80 93 c6 00 	sts	0x00C6, r24
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    1e5e:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    1e60:	ae 51       	subi	r26, 0x1E	; 30
    1e62:	bd 4f       	sbci	r27, 0xFD	; 253
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	8c 93       	st	X, r24
	}
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <__vector_20>:
}

	// service UART transmit interrupt
//UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
ISR(USART_TX_vect)  
{
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
	uartTransmitService(0);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <uartTransmitService>
}
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    1ec0:	c8 2f       	mov	r28, r24
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ea 5f       	subi	r30, 0xFA	; 250
    1ec8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    1ece:	ce 01       	movw	r24, r28
    1ed0:	43 e0       	ldi	r20, 0x03	; 3
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	4a 95       	dec	r20
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <uartSendTxBuffer+0x1a>
    1eda:	86 5f       	subi	r24, 0xF6	; 246
    1edc:	9c 4f       	sbci	r25, 0xFC	; 252
    1ede:	0e 94 0e 10 	call	0x201c	; 0x201c <bufferGetFromFront>
    1ee2:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1ee4:	11 23       	and	r17, r17
    1ee6:	31 f4       	brne	.+12     	; 0x1ef4 <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1ee8:	80 91 c0 00 	lds	r24, 0x00C0
    1eec:	85 ff       	sbrs	r24, 5
    1eee:	fc cf       	rjmp	.-8      	; 0x1ee8 <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    1ef0:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1ef4:	ce 51       	subi	r28, 0x1E	; 30
    1ef6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ef8:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	08 95       	ret

00001f02 <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	73 e0       	ldi	r23, 0x03	; 3
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	7a 95       	dec	r23
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <uartReceiveByte+0xe>
    1f18:	e8 51       	subi	r30, 0x18	; 24
    1f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	89 2b       	or	r24, r25
    1f22:	c9 f0       	breq	.+50     	; 0x1f56 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    1f24:	f9 01       	movw	r30, r18
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	6a 95       	dec	r22
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <uartReceiveByte+0x26>
    1f30:	e6 51       	subi	r30, 0x16	; 22
    1f32:	fd 4f       	sbci	r31, 0xFD	; 253
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	89 2b       	or	r24, r25
    1f3a:	69 f0       	breq	.+26     	; 0x1f56 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    1f3c:	53 e0       	ldi	r21, 0x03	; 3
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	5a 95       	dec	r21
    1f44:	e1 f7       	brne	.-8      	; 0x1f3e <uartReceiveByte+0x3c>
    1f46:	c9 01       	movw	r24, r18
    1f48:	8a 51       	subi	r24, 0x1A	; 26
    1f4a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f4c:	0e 94 0e 10 	call	0x201c	; 0x201c <bufferGetFromFront>
    1f50:	88 83       	st	Y, r24
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <uartReceiveByte+0x56>
			return TRUE;
    1f56:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret

00001f5e <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	0f 92       	push	r0
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	be 01       	movw	r22, r28
    1f6c:	6f 5f       	subi	r22, 0xFF	; 255
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <uartReceiveByte>
    1f74:	88 23       	and	r24, r24
    1f76:	19 f4       	brne	.+6      	; 0x1f7e <uart0GetByte+0x20>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <uart0GetByte+0x26>
		return c;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1f84:	c9 01       	movw	r24, r18
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	e3 e0       	ldi	r30, 0x03	; 3
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	ea 95       	dec	r30
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <uartFlushReceiveBuffer+0x4>
    1f9a:	8a 51       	subi	r24, 0x1A	; 26
    1f9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1f9e:	0e 94 aa 10 	call	0x2154	; 0x2154 <bufferFlush>
}
    1fa2:	08 95       	ret

00001fa4 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    1fa4:	86 ee       	ldi	r24, 0xE6	; 230
    1fa6:	92 e0       	ldi	r25, 0x02	; 2
    1fa8:	62 e7       	ldi	r22, 0x72	; 114
    1faa:	71 e0       	ldi	r23, 0x01	; 1
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	0e 94 01 10 	call	0x2002	; 0x2002 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    1fb4:	8a e0       	ldi	r24, 0x0A	; 10
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	62 ef       	ldi	r22, 0xF2	; 242
    1fba:	71 e0       	ldi	r23, 0x01	; 1
    1fbc:	40 e1       	ldi	r20, 0x10	; 16
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	0e 94 01 10 	call	0x2002	; 0x2002 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    1fc4:	08 95       	ret

00001fc6 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    1fc6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    1fca:	10 92 03 02 	sts	0x0203, r1
    1fce:	10 92 02 02 	sts	0x0202, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1fd2:	88 ed       	ldi	r24, 0xD8	; 216
    1fd4:	80 93 c1 00 	sts	0x00C1, r24
	//outb(UCSR0B, BV(RXEN)|BV(TXEN));
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	55 e2       	ldi	r21, 0x25	; 37
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	80 93 e2 02 	sts	0x02E2, r24
	uartBufferedTx[0] = FALSE;
    1fec:	10 92 06 03 	sts	0x0306, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1ff0:	10 92 2b 03 	sts	0x032B, r1
    1ff4:	10 92 2a 03 	sts	0x032A, r1
	// enable interrupts
	sei();
    1ff8:	78 94       	sei
}
    1ffa:	08 95       	ret

00001ffc <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    1ffc:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <uart0Init>
}
    2000:	08 95       	ret

00002002 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    2002:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2004:	8f b7       	in	r24, 0x3f	; 63
    2006:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    2008:	71 83       	std	Z+1, r23	; 0x01
    200a:	60 83       	st	Z, r22
	buffer->size = size;
    200c:	53 83       	std	Z+3, r21	; 0x03
    200e:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    2010:	17 82       	std	Z+7, r1	; 0x07
    2012:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    2014:	15 82       	std	Z+5, r1	; 0x05
    2016:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    2018:	8f bf       	out	0x3f, r24	; 63
}
    201a:	08 95       	ret

0000201c <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    201c:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    201e:	4f b7       	in	r20, 0x3f	; 63
    2020:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    2022:	14 96       	adiw	r26, 0x04	; 4
    2024:	8d 91       	ld	r24, X+
    2026:	9c 91       	ld	r25, X
    2028:	15 97       	sbiw	r26, 0x05	; 5
    202a:	89 2b       	or	r24, r25
    202c:	11 f4       	brne	.+4      	; 0x2032 <bufferGetFromFront+0x16>
    202e:	e0 e0       	ldi	r30, 0x00	; 0
    2030:	25 c0       	rjmp	.+74     	; 0x207c <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    2032:	16 96       	adiw	r26, 0x06	; 6
    2034:	8d 91       	ld	r24, X+
    2036:	9c 91       	ld	r25, X
    2038:	17 97       	sbiw	r26, 0x07	; 7
    203a:	ed 91       	ld	r30, X+
    203c:	fc 91       	ld	r31, X
    203e:	11 97       	sbiw	r26, 0x01	; 1
    2040:	e8 0f       	add	r30, r24
    2042:	f9 1f       	adc	r31, r25
    2044:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	17 96       	adiw	r26, 0x07	; 7
    204a:	9c 93       	st	X, r25
    204c:	8e 93       	st	-X, r24
    204e:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    2050:	12 96       	adiw	r26, 0x02	; 2
    2052:	2d 91       	ld	r18, X+
    2054:	3c 91       	ld	r19, X
    2056:	13 97       	sbiw	r26, 0x03	; 3
    2058:	82 17       	cp	r24, r18
    205a:	93 07       	cpc	r25, r19
    205c:	30 f0       	brcs	.+12     	; 0x206a <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    205e:	82 1b       	sub	r24, r18
    2060:	93 0b       	sbc	r25, r19
    2062:	17 96       	adiw	r26, 0x07	; 7
    2064:	9c 93       	st	X, r25
    2066:	8e 93       	st	-X, r24
    2068:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    206a:	14 96       	adiw	r26, 0x04	; 4
    206c:	8d 91       	ld	r24, X+
    206e:	9c 91       	ld	r25, X
    2070:	15 97       	sbiw	r26, 0x05	; 5
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	15 96       	adiw	r26, 0x05	; 5
    2076:	9c 93       	st	X, r25
    2078:	8e 93       	st	-X, r24
    207a:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    207c:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    207e:	8e 2f       	mov	r24, r30
    2080:	08 95       	ret

00002082 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    2082:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2084:	4f b7       	in	r20, 0x3f	; 63
    2086:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    2088:	84 81       	ldd	r24, Z+4	; 0x04
    208a:	95 81       	ldd	r25, Z+5	; 0x05
    208c:	68 17       	cp	r22, r24
    208e:	79 07       	cpc	r23, r25
    2090:	b0 f4       	brcc	.+44     	; 0x20be <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    2092:	86 81       	ldd	r24, Z+6	; 0x06
    2094:	97 81       	ldd	r25, Z+7	; 0x07
    2096:	86 0f       	add	r24, r22
    2098:	97 1f       	adc	r25, r23
    209a:	97 83       	std	Z+7, r25	; 0x07
    209c:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    209e:	22 81       	ldd	r18, Z+2	; 0x02
    20a0:	33 81       	ldd	r19, Z+3	; 0x03
    20a2:	82 17       	cp	r24, r18
    20a4:	93 07       	cpc	r25, r19
    20a6:	20 f0       	brcs	.+8      	; 0x20b0 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    20a8:	82 1b       	sub	r24, r18
    20aa:	93 0b       	sbc	r25, r19
    20ac:	97 83       	std	Z+7, r25	; 0x07
    20ae:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    20b0:	84 81       	ldd	r24, Z+4	; 0x04
    20b2:	95 81       	ldd	r25, Z+5	; 0x05
    20b4:	86 1b       	sub	r24, r22
    20b6:	97 0b       	sbc	r25, r23
    20b8:	95 83       	std	Z+5, r25	; 0x05
    20ba:	84 83       	std	Z+4, r24	; 0x04
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    20be:	15 82       	std	Z+5, r1	; 0x05
    20c0:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    20c2:	4f bf       	out	0x3f, r20	; 63
}
    20c4:	08 95       	ret

000020c6 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    20c6:	fc 01       	movw	r30, r24
    20c8:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    20ca:	2f b7       	in	r18, 0x3f	; 63
    20cc:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    20ce:	2f bf       	out	0x3f, r18	; 63
    20d0:	26 81       	ldd	r18, Z+6	; 0x06
    20d2:	37 81       	ldd	r19, Z+7	; 0x07
    20d4:	62 81       	ldd	r22, Z+2	; 0x02
    20d6:	73 81       	ldd	r23, Z+3	; 0x03
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	e8 0f       	add	r30, r24
    20e8:	f9 1f       	adc	r31, r25
	return data;
}
    20ea:	80 81       	ld	r24, Z
    20ec:	08 95       	ret

000020ee <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	ec 01       	movw	r28, r24
    20f6:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    20f8:	4f b7       	in	r20, 0x3f	; 63
    20fa:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    20fc:	2c 81       	ldd	r18, Y+4	; 0x04
    20fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2100:	6a 81       	ldd	r22, Y+2	; 0x02
    2102:	7b 81       	ldd	r23, Y+3	; 0x03
    2104:	26 17       	cp	r18, r22
    2106:	37 07       	cpc	r19, r23
    2108:	98 f4       	brcc	.+38     	; 0x2130 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	9f 81       	ldd	r25, Y+7	; 0x07
    210e:	82 0f       	add	r24, r18
    2110:	93 1f       	adc	r25, r19
    2112:	0e 94 0e 14 	call	0x281c	; 0x281c <__udivmodhi4>
    2116:	e8 81       	ld	r30, Y
    2118:	f9 81       	ldd	r31, Y+1	; 0x01
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	9d 83       	std	Y+5, r25	; 0x05
    2128:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    212a:	4f bf       	out	0x3f, r20	; 63
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    2130:	4f bf       	out	0x3f, r20	; 63
    2132:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	08 95       	ret

0000213c <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    213c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    213e:	8f b7       	in	r24, 0x3f	; 63
    2140:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    2142:	8f bf       	out	0x3f, r24	; 63
    2144:	22 81       	ldd	r18, Z+2	; 0x02
    2146:	33 81       	ldd	r19, Z+3	; 0x03
    2148:	84 81       	ldd	r24, Z+4	; 0x04
    214a:	95 81       	ldd	r25, Z+5	; 0x05
    214c:	28 1b       	sub	r18, r24
    214e:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    2150:	c9 01       	movw	r24, r18
    2152:	08 95       	ret

00002154 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    2154:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2156:	8f b7       	in	r24, 0x3f	; 63
    2158:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    215a:	15 82       	std	Z+5, r1	; 0x05
    215c:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    215e:	8f bf       	out	0x3f, r24	; 63
}
    2160:	08 95       	ret

00002162 <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    2162:	60 91 0a 02 	lds	r22, 0x020A
    2166:	70 91 0b 02 	lds	r23, 0x020B
	return wheel_left_tick_counter;
}
    216a:	80 91 0c 02 	lds	r24, 0x020C
    216e:	90 91 0d 02 	lds	r25, 0x020D
    2172:	08 95       	ret

00002174 <get_right_count>:

u32 get_right_count(void){
    2174:	60 91 0e 02 	lds	r22, 0x020E
    2178:	70 91 0f 02 	lds	r23, 0x020F
	return wheel_right_tick_counter;
}
    217c:	80 91 10 02 	lds	r24, 0x0210
    2180:	90 91 11 02 	lds	r25, 0x0211
    2184:	08 95       	ret

00002186 <__vector_5>:

SIGNAL(PCINT2_vect){
    2186:	1f 92       	push	r1
    2188:	0f 92       	push	r0
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	0f 92       	push	r0
    218e:	11 24       	eor	r1, r1
    2190:	2f 93       	push	r18
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    219a:	29 b1       	in	r18, 0x09	; 9
    219c:	20 78       	andi	r18, 0x80	; 128
    219e:	20 93 18 02 	sts	0x0218, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    21a2:	80 91 19 02 	lds	r24, 0x0219
    21a6:	82 17       	cp	r24, r18
    21a8:	58 f4       	brcc	.+22     	; 0x21c0 <__vector_5+0x3a>
    21aa:	80 91 0a 02 	lds	r24, 0x020A
    21ae:	90 91 0b 02 	lds	r25, 0x020B
    21b2:	a0 91 0c 02 	lds	r26, 0x020C
    21b6:	b0 91 0d 02 	lds	r27, 0x020D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    21ba:	18 9b       	sbis	0x03, 0	; 3
    21bc:	0b c0       	rjmp	.+22     	; 0x21d4 <__vector_5+0x4e>
    21be:	0e c0       	rjmp	.+28     	; 0x21dc <__vector_5+0x56>
    21c0:	80 91 0a 02 	lds	r24, 0x020A
    21c4:	90 91 0b 02 	lds	r25, 0x020B
    21c8:	a0 91 0c 02 	lds	r26, 0x020C
    21cc:	b0 91 0d 02 	lds	r27, 0x020D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    21d0:	18 9b       	sbis	0x03, 0	; 3
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	a1 1d       	adc	r26, r1
    21d8:	b1 1d       	adc	r27, r1
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	a1 09       	sbc	r26, r1
    21e0:	b1 09       	sbc	r27, r1
    21e2:	80 93 0a 02 	sts	0x020A, r24
    21e6:	90 93 0b 02 	sts	0x020B, r25
    21ea:	a0 93 0c 02 	sts	0x020C, r26
    21ee:	b0 93 0d 02 	sts	0x020D, r27
		}
	}
	pin_level_past = pin_level_current;
    21f2:	20 93 19 02 	sts	0x0219, r18
	
}
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	2f 91       	pop	r18
    2200:	0f 90       	pop	r0
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	18 95       	reti

0000220a <__vector_3>:
SIGNAL(PCINT0_vect){
    220a:	1f 92       	push	r1
    220c:	0f 92       	push	r0
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	0f 92       	push	r0
    2212:	11 24       	eor	r1, r1
    2214:	2f 93       	push	r18
    2216:	3f 93       	push	r19
    2218:	4f 93       	push	r20
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    2222:	33 b1       	in	r19, 0x03	; 3
    2224:	31 70       	andi	r19, 0x01	; 1
    2226:	30 93 16 02 	sts	0x0216, r19
	PINB4_current = bit_is_set(PINB,4);
    222a:	23 b1       	in	r18, 0x03	; 3
    222c:	20 71       	andi	r18, 0x10	; 16
    222e:	20 93 14 02 	sts	0x0214, r18
	PINB5_current = bit_is_set(PINB,5);
    2232:	43 b1       	in	r20, 0x03	; 3
    2234:	40 72       	andi	r20, 0x20	; 32
    2236:	40 93 12 02 	sts	0x0212, r20

	if(PINB0_current != PINB0_past){
    223a:	80 91 17 02 	lds	r24, 0x0217
    223e:	38 17       	cp	r19, r24
    2240:	49 f1       	breq	.+82     	; 0x2294 <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    2242:	83 17       	cp	r24, r19
    2244:	58 f4       	brcc	.+22     	; 0x225c <__vector_3+0x52>
    2246:	80 91 0a 02 	lds	r24, 0x020A
    224a:	90 91 0b 02 	lds	r25, 0x020B
    224e:	a0 91 0c 02 	lds	r26, 0x020C
    2252:	b0 91 0d 02 	lds	r27, 0x020D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    2256:	4f 9b       	sbis	0x09, 7	; 9
    2258:	0b c0       	rjmp	.+22     	; 0x2270 <__vector_3+0x66>
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <__vector_3+0x6e>
    225c:	80 91 0a 02 	lds	r24, 0x020A
    2260:	90 91 0b 02 	lds	r25, 0x020B
    2264:	a0 91 0c 02 	lds	r26, 0x020C
    2268:	b0 91 0d 02 	lds	r27, 0x020D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    226c:	4f 9b       	sbis	0x09, 7	; 9
    226e:	04 c0       	rjmp	.+8      	; 0x2278 <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	a1 09       	sbc	r26, r1
    2274:	b1 09       	sbc	r27, r1
    2276:	03 c0       	rjmp	.+6      	; 0x227e <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	a1 1d       	adc	r26, r1
    227c:	b1 1d       	adc	r27, r1
    227e:	80 93 0a 02 	sts	0x020A, r24
    2282:	90 93 0b 02 	sts	0x020B, r25
    2286:	a0 93 0c 02 	sts	0x020C, r26
    228a:	b0 93 0d 02 	sts	0x020D, r27
			}
		}
		PINB0_past = PINB0_current;
    228e:	30 93 17 02 	sts	0x0217, r19
    2292:	57 c0       	rjmp	.+174    	; 0x2342 <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    2294:	80 91 15 02 	lds	r24, 0x0215
    2298:	28 17       	cp	r18, r24
    229a:	49 f1       	breq	.+82     	; 0x22ee <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    229c:	82 17       	cp	r24, r18
    229e:	58 f4       	brcc	.+22     	; 0x22b6 <__vector_3+0xac>
    22a0:	80 91 0e 02 	lds	r24, 0x020E
    22a4:	90 91 0f 02 	lds	r25, 0x020F
    22a8:	a0 91 10 02 	lds	r26, 0x0210
    22ac:	b0 91 11 02 	lds	r27, 0x0211
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    22b0:	1d 9b       	sbis	0x03, 5	; 3
    22b2:	0b c0       	rjmp	.+22     	; 0x22ca <__vector_3+0xc0>
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <__vector_3+0xc8>
    22b6:	80 91 0e 02 	lds	r24, 0x020E
    22ba:	90 91 0f 02 	lds	r25, 0x020F
    22be:	a0 91 10 02 	lds	r26, 0x0210
    22c2:	b0 91 11 02 	lds	r27, 0x0211
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    22c6:	1d 9b       	sbis	0x03, 5	; 3
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	a1 09       	sbc	r26, r1
    22ce:	b1 09       	sbc	r27, r1
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	a1 1d       	adc	r26, r1
    22d6:	b1 1d       	adc	r27, r1
    22d8:	80 93 0e 02 	sts	0x020E, r24
    22dc:	90 93 0f 02 	sts	0x020F, r25
    22e0:	a0 93 10 02 	sts	0x0210, r26
    22e4:	b0 93 11 02 	sts	0x0211, r27
			}
		}
		PINB4_past = PINB4_current;
    22e8:	20 93 15 02 	sts	0x0215, r18
    22ec:	2a c0       	rjmp	.+84     	; 0x2342 <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    22ee:	80 91 13 02 	lds	r24, 0x0213
    22f2:	84 17       	cp	r24, r20
    22f4:	58 f4       	brcc	.+22     	; 0x230c <__vector_3+0x102>
    22f6:	80 91 0e 02 	lds	r24, 0x020E
    22fa:	90 91 0f 02 	lds	r25, 0x020F
    22fe:	a0 91 10 02 	lds	r26, 0x0210
    2302:	b0 91 11 02 	lds	r27, 0x0211
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    2306:	1c 9b       	sbis	0x03, 4	; 3
    2308:	0b c0       	rjmp	.+22     	; 0x2320 <__vector_3+0x116>
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <__vector_3+0x11e>
    230c:	80 91 0e 02 	lds	r24, 0x020E
    2310:	90 91 0f 02 	lds	r25, 0x020F
    2314:	a0 91 10 02 	lds	r26, 0x0210
    2318:	b0 91 11 02 	lds	r27, 0x0211
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    231c:	1c 9b       	sbis	0x03, 4	; 3
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	a1 1d       	adc	r26, r1
    2324:	b1 1d       	adc	r27, r1
    2326:	03 c0       	rjmp	.+6      	; 0x232e <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	a1 09       	sbc	r26, r1
    232c:	b1 09       	sbc	r27, r1
    232e:	80 93 0e 02 	sts	0x020E, r24
    2332:	90 93 0f 02 	sts	0x020F, r25
    2336:	a0 93 10 02 	sts	0x0210, r26
    233a:	b0 93 11 02 	sts	0x0211, r27
			}
		}
		PINB5_past = PINB5_current;
    233e:	40 93 13 02 	sts	0x0213, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	4f 91       	pop	r20
    234c:	3f 91       	pop	r19
    234e:	2f 91       	pop	r18
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_default>:


ISR(BADISR_vect){
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
	
}
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <exit>:
    236e:	f8 94       	cli
    2370:	0c 94 44 14 	jmp	0x2888	; 0x2888 <_exit>

00002374 <__subsf3>:
    2374:	50 58       	subi	r21, 0x80	; 128

00002376 <__addsf3>:
    2376:	bb 27       	eor	r27, r27
    2378:	aa 27       	eor	r26, r26
    237a:	0e d0       	rcall	.+28     	; 0x2398 <__addsf3x>
    237c:	8f c1       	rjmp	.+798    	; 0x269c <__fp_round>
    237e:	80 d1       	rcall	.+768    	; 0x2680 <__fp_pscA>
    2380:	30 f0       	brcs	.+12     	; 0x238e <__addsf3+0x18>
    2382:	85 d1       	rcall	.+778    	; 0x268e <__fp_pscB>
    2384:	20 f0       	brcs	.+8      	; 0x238e <__addsf3+0x18>
    2386:	31 f4       	brne	.+12     	; 0x2394 <__addsf3+0x1e>
    2388:	9f 3f       	cpi	r25, 0xFF	; 255
    238a:	11 f4       	brne	.+4      	; 0x2390 <__addsf3+0x1a>
    238c:	1e f4       	brtc	.+6      	; 0x2394 <__addsf3+0x1e>
    238e:	75 c1       	rjmp	.+746    	; 0x267a <__fp_nan>
    2390:	0e f4       	brtc	.+2      	; 0x2394 <__addsf3+0x1e>
    2392:	e0 95       	com	r30
    2394:	e7 fb       	bst	r30, 7
    2396:	6b c1       	rjmp	.+726    	; 0x266e <__fp_inf>

00002398 <__addsf3x>:
    2398:	e9 2f       	mov	r30, r25
    239a:	91 d1       	rcall	.+802    	; 0x26be <__fp_split3>
    239c:	80 f3       	brcs	.-32     	; 0x237e <__addsf3+0x8>
    239e:	ba 17       	cp	r27, r26
    23a0:	62 07       	cpc	r22, r18
    23a2:	73 07       	cpc	r23, r19
    23a4:	84 07       	cpc	r24, r20
    23a6:	95 07       	cpc	r25, r21
    23a8:	18 f0       	brcs	.+6      	; 0x23b0 <__addsf3x+0x18>
    23aa:	71 f4       	brne	.+28     	; 0x23c8 <__addsf3x+0x30>
    23ac:	9e f5       	brtc	.+102    	; 0x2414 <__addsf3x+0x7c>
    23ae:	a9 c1       	rjmp	.+850    	; 0x2702 <__fp_zero>
    23b0:	0e f4       	brtc	.+2      	; 0x23b4 <__addsf3x+0x1c>
    23b2:	e0 95       	com	r30
    23b4:	0b 2e       	mov	r0, r27
    23b6:	ba 2f       	mov	r27, r26
    23b8:	a0 2d       	mov	r26, r0
    23ba:	0b 01       	movw	r0, r22
    23bc:	b9 01       	movw	r22, r18
    23be:	90 01       	movw	r18, r0
    23c0:	0c 01       	movw	r0, r24
    23c2:	ca 01       	movw	r24, r20
    23c4:	a0 01       	movw	r20, r0
    23c6:	11 24       	eor	r1, r1
    23c8:	ff 27       	eor	r31, r31
    23ca:	59 1b       	sub	r21, r25
    23cc:	99 f0       	breq	.+38     	; 0x23f4 <__addsf3x+0x5c>
    23ce:	59 3f       	cpi	r21, 0xF9	; 249
    23d0:	50 f4       	brcc	.+20     	; 0x23e6 <__addsf3x+0x4e>
    23d2:	50 3e       	cpi	r21, 0xE0	; 224
    23d4:	68 f1       	brcs	.+90     	; 0x2430 <__addsf3x+0x98>
    23d6:	1a 16       	cp	r1, r26
    23d8:	f0 40       	sbci	r31, 0x00	; 0
    23da:	a2 2f       	mov	r26, r18
    23dc:	23 2f       	mov	r18, r19
    23de:	34 2f       	mov	r19, r20
    23e0:	44 27       	eor	r20, r20
    23e2:	58 5f       	subi	r21, 0xF8	; 248
    23e4:	f3 cf       	rjmp	.-26     	; 0x23cc <__addsf3x+0x34>
    23e6:	46 95       	lsr	r20
    23e8:	37 95       	ror	r19
    23ea:	27 95       	ror	r18
    23ec:	a7 95       	ror	r26
    23ee:	f0 40       	sbci	r31, 0x00	; 0
    23f0:	53 95       	inc	r21
    23f2:	c9 f7       	brne	.-14     	; 0x23e6 <__addsf3x+0x4e>
    23f4:	7e f4       	brtc	.+30     	; 0x2414 <__addsf3x+0x7c>
    23f6:	1f 16       	cp	r1, r31
    23f8:	ba 0b       	sbc	r27, r26
    23fa:	62 0b       	sbc	r22, r18
    23fc:	73 0b       	sbc	r23, r19
    23fe:	84 0b       	sbc	r24, r20
    2400:	ba f0       	brmi	.+46     	; 0x2430 <__addsf3x+0x98>
    2402:	91 50       	subi	r25, 0x01	; 1
    2404:	a1 f0       	breq	.+40     	; 0x242e <__addsf3x+0x96>
    2406:	ff 0f       	add	r31, r31
    2408:	bb 1f       	adc	r27, r27
    240a:	66 1f       	adc	r22, r22
    240c:	77 1f       	adc	r23, r23
    240e:	88 1f       	adc	r24, r24
    2410:	c2 f7       	brpl	.-16     	; 0x2402 <__addsf3x+0x6a>
    2412:	0e c0       	rjmp	.+28     	; 0x2430 <__addsf3x+0x98>
    2414:	ba 0f       	add	r27, r26
    2416:	62 1f       	adc	r22, r18
    2418:	73 1f       	adc	r23, r19
    241a:	84 1f       	adc	r24, r20
    241c:	48 f4       	brcc	.+18     	; 0x2430 <__addsf3x+0x98>
    241e:	87 95       	ror	r24
    2420:	77 95       	ror	r23
    2422:	67 95       	ror	r22
    2424:	b7 95       	ror	r27
    2426:	f7 95       	ror	r31
    2428:	9e 3f       	cpi	r25, 0xFE	; 254
    242a:	08 f0       	brcs	.+2      	; 0x242e <__addsf3x+0x96>
    242c:	b3 cf       	rjmp	.-154    	; 0x2394 <__addsf3+0x1e>
    242e:	93 95       	inc	r25
    2430:	88 0f       	add	r24, r24
    2432:	08 f0       	brcs	.+2      	; 0x2436 <__addsf3x+0x9e>
    2434:	99 27       	eor	r25, r25
    2436:	ee 0f       	add	r30, r30
    2438:	97 95       	ror	r25
    243a:	87 95       	ror	r24
    243c:	08 95       	ret

0000243e <__cmpsf2>:
    243e:	f3 d0       	rcall	.+486    	; 0x2626 <__fp_cmp>
    2440:	08 f4       	brcc	.+2      	; 0x2444 <__cmpsf2+0x6>
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	08 95       	ret

00002446 <__divsf3>:
    2446:	0c d0       	rcall	.+24     	; 0x2460 <__divsf3x>
    2448:	29 c1       	rjmp	.+594    	; 0x269c <__fp_round>
    244a:	21 d1       	rcall	.+578    	; 0x268e <__fp_pscB>
    244c:	40 f0       	brcs	.+16     	; 0x245e <__divsf3+0x18>
    244e:	18 d1       	rcall	.+560    	; 0x2680 <__fp_pscA>
    2450:	30 f0       	brcs	.+12     	; 0x245e <__divsf3+0x18>
    2452:	21 f4       	brne	.+8      	; 0x245c <__divsf3+0x16>
    2454:	5f 3f       	cpi	r21, 0xFF	; 255
    2456:	19 f0       	breq	.+6      	; 0x245e <__divsf3+0x18>
    2458:	0a c1       	rjmp	.+532    	; 0x266e <__fp_inf>
    245a:	51 11       	cpse	r21, r1
    245c:	53 c1       	rjmp	.+678    	; 0x2704 <__fp_szero>
    245e:	0d c1       	rjmp	.+538    	; 0x267a <__fp_nan>

00002460 <__divsf3x>:
    2460:	2e d1       	rcall	.+604    	; 0x26be <__fp_split3>
    2462:	98 f3       	brcs	.-26     	; 0x244a <__divsf3+0x4>

00002464 <__divsf3_pse>:
    2464:	99 23       	and	r25, r25
    2466:	c9 f3       	breq	.-14     	; 0x245a <__divsf3+0x14>
    2468:	55 23       	and	r21, r21
    246a:	b1 f3       	breq	.-20     	; 0x2458 <__divsf3+0x12>
    246c:	95 1b       	sub	r25, r21
    246e:	55 0b       	sbc	r21, r21
    2470:	bb 27       	eor	r27, r27
    2472:	aa 27       	eor	r26, r26
    2474:	62 17       	cp	r22, r18
    2476:	73 07       	cpc	r23, r19
    2478:	84 07       	cpc	r24, r20
    247a:	38 f0       	brcs	.+14     	; 0x248a <__divsf3_pse+0x26>
    247c:	9f 5f       	subi	r25, 0xFF	; 255
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	44 1f       	adc	r20, r20
    2486:	aa 1f       	adc	r26, r26
    2488:	a9 f3       	breq	.-22     	; 0x2474 <__divsf3_pse+0x10>
    248a:	33 d0       	rcall	.+102    	; 0x24f2 <__divsf3_pse+0x8e>
    248c:	0e 2e       	mov	r0, r30
    248e:	3a f0       	brmi	.+14     	; 0x249e <__divsf3_pse+0x3a>
    2490:	e0 e8       	ldi	r30, 0x80	; 128
    2492:	30 d0       	rcall	.+96     	; 0x24f4 <__divsf3_pse+0x90>
    2494:	91 50       	subi	r25, 0x01	; 1
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	e6 95       	lsr	r30
    249a:	00 1c       	adc	r0, r0
    249c:	ca f7       	brpl	.-14     	; 0x2490 <__divsf3_pse+0x2c>
    249e:	29 d0       	rcall	.+82     	; 0x24f2 <__divsf3_pse+0x8e>
    24a0:	fe 2f       	mov	r31, r30
    24a2:	27 d0       	rcall	.+78     	; 0x24f2 <__divsf3_pse+0x8e>
    24a4:	66 0f       	add	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	bb 1f       	adc	r27, r27
    24ac:	26 17       	cp	r18, r22
    24ae:	37 07       	cpc	r19, r23
    24b0:	48 07       	cpc	r20, r24
    24b2:	ab 07       	cpc	r26, r27
    24b4:	b0 e8       	ldi	r27, 0x80	; 128
    24b6:	09 f0       	breq	.+2      	; 0x24ba <__divsf3_pse+0x56>
    24b8:	bb 0b       	sbc	r27, r27
    24ba:	80 2d       	mov	r24, r0
    24bc:	bf 01       	movw	r22, r30
    24be:	ff 27       	eor	r31, r31
    24c0:	93 58       	subi	r25, 0x83	; 131
    24c2:	5f 4f       	sbci	r21, 0xFF	; 255
    24c4:	2a f0       	brmi	.+10     	; 0x24d0 <__divsf3_pse+0x6c>
    24c6:	9e 3f       	cpi	r25, 0xFE	; 254
    24c8:	51 05       	cpc	r21, r1
    24ca:	68 f0       	brcs	.+26     	; 0x24e6 <__divsf3_pse+0x82>
    24cc:	d0 c0       	rjmp	.+416    	; 0x266e <__fp_inf>
    24ce:	1a c1       	rjmp	.+564    	; 0x2704 <__fp_szero>
    24d0:	5f 3f       	cpi	r21, 0xFF	; 255
    24d2:	ec f3       	brlt	.-6      	; 0x24ce <__divsf3_pse+0x6a>
    24d4:	98 3e       	cpi	r25, 0xE8	; 232
    24d6:	dc f3       	brlt	.-10     	; 0x24ce <__divsf3_pse+0x6a>
    24d8:	86 95       	lsr	r24
    24da:	77 95       	ror	r23
    24dc:	67 95       	ror	r22
    24de:	b7 95       	ror	r27
    24e0:	f7 95       	ror	r31
    24e2:	9f 5f       	subi	r25, 0xFF	; 255
    24e4:	c9 f7       	brne	.-14     	; 0x24d8 <__divsf3_pse+0x74>
    24e6:	88 0f       	add	r24, r24
    24e8:	91 1d       	adc	r25, r1
    24ea:	96 95       	lsr	r25
    24ec:	87 95       	ror	r24
    24ee:	97 f9       	bld	r25, 7
    24f0:	08 95       	ret
    24f2:	e1 e0       	ldi	r30, 0x01	; 1
    24f4:	66 0f       	add	r22, r22
    24f6:	77 1f       	adc	r23, r23
    24f8:	88 1f       	adc	r24, r24
    24fa:	bb 1f       	adc	r27, r27
    24fc:	62 17       	cp	r22, r18
    24fe:	73 07       	cpc	r23, r19
    2500:	84 07       	cpc	r24, r20
    2502:	ba 07       	cpc	r27, r26
    2504:	20 f0       	brcs	.+8      	; 0x250e <__divsf3_pse+0xaa>
    2506:	62 1b       	sub	r22, r18
    2508:	73 0b       	sbc	r23, r19
    250a:	84 0b       	sbc	r24, r20
    250c:	ba 0b       	sbc	r27, r26
    250e:	ee 1f       	adc	r30, r30
    2510:	88 f7       	brcc	.-30     	; 0x24f4 <__divsf3_pse+0x90>
    2512:	e0 95       	com	r30
    2514:	08 95       	ret

00002516 <__fixunssfsi>:
    2516:	db d0       	rcall	.+438    	; 0x26ce <__fp_splitA>
    2518:	88 f0       	brcs	.+34     	; 0x253c <__fixunssfsi+0x26>
    251a:	9f 57       	subi	r25, 0x7F	; 127
    251c:	90 f0       	brcs	.+36     	; 0x2542 <__fixunssfsi+0x2c>
    251e:	b9 2f       	mov	r27, r25
    2520:	99 27       	eor	r25, r25
    2522:	b7 51       	subi	r27, 0x17	; 23
    2524:	a0 f0       	brcs	.+40     	; 0x254e <__fixunssfsi+0x38>
    2526:	d1 f0       	breq	.+52     	; 0x255c <__fixunssfsi+0x46>
    2528:	66 0f       	add	r22, r22
    252a:	77 1f       	adc	r23, r23
    252c:	88 1f       	adc	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	1a f0       	brmi	.+6      	; 0x2538 <__fixunssfsi+0x22>
    2532:	ba 95       	dec	r27
    2534:	c9 f7       	brne	.-14     	; 0x2528 <__fixunssfsi+0x12>
    2536:	12 c0       	rjmp	.+36     	; 0x255c <__fixunssfsi+0x46>
    2538:	b1 30       	cpi	r27, 0x01	; 1
    253a:	81 f0       	breq	.+32     	; 0x255c <__fixunssfsi+0x46>
    253c:	e2 d0       	rcall	.+452    	; 0x2702 <__fp_zero>
    253e:	b1 e0       	ldi	r27, 0x01	; 1
    2540:	08 95       	ret
    2542:	df c0       	rjmp	.+446    	; 0x2702 <__fp_zero>
    2544:	67 2f       	mov	r22, r23
    2546:	78 2f       	mov	r23, r24
    2548:	88 27       	eor	r24, r24
    254a:	b8 5f       	subi	r27, 0xF8	; 248
    254c:	39 f0       	breq	.+14     	; 0x255c <__fixunssfsi+0x46>
    254e:	b9 3f       	cpi	r27, 0xF9	; 249
    2550:	cc f3       	brlt	.-14     	; 0x2544 <__fixunssfsi+0x2e>
    2552:	86 95       	lsr	r24
    2554:	77 95       	ror	r23
    2556:	67 95       	ror	r22
    2558:	b3 95       	inc	r27
    255a:	d9 f7       	brne	.-10     	; 0x2552 <__fixunssfsi+0x3c>
    255c:	3e f4       	brtc	.+14     	; 0x256c <__fixunssfsi+0x56>
    255e:	90 95       	com	r25
    2560:	80 95       	com	r24
    2562:	70 95       	com	r23
    2564:	61 95       	neg	r22
    2566:	7f 4f       	sbci	r23, 0xFF	; 255
    2568:	8f 4f       	sbci	r24, 0xFF	; 255
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	08 95       	ret

0000256e <__floatunsisf>:
    256e:	e8 94       	clt
    2570:	09 c0       	rjmp	.+18     	; 0x2584 <__floatsisf+0x12>

00002572 <__floatsisf>:
    2572:	97 fb       	bst	r25, 7
    2574:	3e f4       	brtc	.+14     	; 0x2584 <__floatsisf+0x12>
    2576:	90 95       	com	r25
    2578:	80 95       	com	r24
    257a:	70 95       	com	r23
    257c:	61 95       	neg	r22
    257e:	7f 4f       	sbci	r23, 0xFF	; 255
    2580:	8f 4f       	sbci	r24, 0xFF	; 255
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	99 23       	and	r25, r25
    2586:	a9 f0       	breq	.+42     	; 0x25b2 <__floatsisf+0x40>
    2588:	f9 2f       	mov	r31, r25
    258a:	96 e9       	ldi	r25, 0x96	; 150
    258c:	bb 27       	eor	r27, r27
    258e:	93 95       	inc	r25
    2590:	f6 95       	lsr	r31
    2592:	87 95       	ror	r24
    2594:	77 95       	ror	r23
    2596:	67 95       	ror	r22
    2598:	b7 95       	ror	r27
    259a:	f1 11       	cpse	r31, r1
    259c:	f8 cf       	rjmp	.-16     	; 0x258e <__floatsisf+0x1c>
    259e:	fa f4       	brpl	.+62     	; 0x25de <__floatsisf+0x6c>
    25a0:	bb 0f       	add	r27, r27
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <__floatsisf+0x36>
    25a4:	60 ff       	sbrs	r22, 0
    25a6:	1b c0       	rjmp	.+54     	; 0x25de <__floatsisf+0x6c>
    25a8:	6f 5f       	subi	r22, 0xFF	; 255
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8f 4f       	sbci	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	16 c0       	rjmp	.+44     	; 0x25de <__floatsisf+0x6c>
    25b2:	88 23       	and	r24, r24
    25b4:	11 f0       	breq	.+4      	; 0x25ba <__floatsisf+0x48>
    25b6:	96 e9       	ldi	r25, 0x96	; 150
    25b8:	11 c0       	rjmp	.+34     	; 0x25dc <__floatsisf+0x6a>
    25ba:	77 23       	and	r23, r23
    25bc:	21 f0       	breq	.+8      	; 0x25c6 <__floatsisf+0x54>
    25be:	9e e8       	ldi	r25, 0x8E	; 142
    25c0:	87 2f       	mov	r24, r23
    25c2:	76 2f       	mov	r23, r22
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <__floatsisf+0x5e>
    25c6:	66 23       	and	r22, r22
    25c8:	71 f0       	breq	.+28     	; 0x25e6 <__floatsisf+0x74>
    25ca:	96 e8       	ldi	r25, 0x86	; 134
    25cc:	86 2f       	mov	r24, r22
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	2a f0       	brmi	.+10     	; 0x25de <__floatsisf+0x6c>
    25d4:	9a 95       	dec	r25
    25d6:	66 0f       	add	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	88 1f       	adc	r24, r24
    25dc:	da f7       	brpl	.-10     	; 0x25d4 <__floatsisf+0x62>
    25de:	88 0f       	add	r24, r24
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	97 f9       	bld	r25, 7
    25e6:	08 95       	ret

000025e8 <fmin>:
    25e8:	99 0f       	add	r25, r25
    25ea:	bb 0b       	sbc	r27, r27
    25ec:	55 0f       	add	r21, r21
    25ee:	aa 0b       	sbc	r26, r26
    25f0:	e0 e8       	ldi	r30, 0x80	; 128
    25f2:	fe ef       	ldi	r31, 0xFE	; 254
    25f4:	16 16       	cp	r1, r22
    25f6:	17 06       	cpc	r1, r23
    25f8:	e8 07       	cpc	r30, r24
    25fa:	f9 07       	cpc	r31, r25
    25fc:	70 f0       	brcs	.+28     	; 0x261a <fmin+0x32>
    25fe:	12 16       	cp	r1, r18
    2600:	13 06       	cpc	r1, r19
    2602:	e4 07       	cpc	r30, r20
    2604:	f5 07       	cpc	r31, r21
    2606:	60 f0       	brcs	.+24     	; 0x2620 <fmin+0x38>
    2608:	ba 17       	cp	r27, r26
    260a:	54 f0       	brlt	.+20     	; 0x2620 <fmin+0x38>
    260c:	31 f4       	brne	.+12     	; 0x261a <fmin+0x32>
    260e:	26 17       	cp	r18, r22
    2610:	37 07       	cpc	r19, r23
    2612:	48 07       	cpc	r20, r24
    2614:	59 07       	cpc	r21, r25
    2616:	a7 95       	ror	r26
    2618:	1b f4       	brvc	.+6      	; 0x2620 <fmin+0x38>
    261a:	b9 01       	movw	r22, r18
    261c:	ca 01       	movw	r24, r20
    261e:	ba 2f       	mov	r27, r26
    2620:	b6 95       	lsr	r27
    2622:	97 95       	ror	r25
    2624:	08 95       	ret

00002626 <__fp_cmp>:
    2626:	99 0f       	add	r25, r25
    2628:	00 08       	sbc	r0, r0
    262a:	55 0f       	add	r21, r21
    262c:	aa 0b       	sbc	r26, r26
    262e:	e0 e8       	ldi	r30, 0x80	; 128
    2630:	fe ef       	ldi	r31, 0xFE	; 254
    2632:	16 16       	cp	r1, r22
    2634:	17 06       	cpc	r1, r23
    2636:	e8 07       	cpc	r30, r24
    2638:	f9 07       	cpc	r31, r25
    263a:	c0 f0       	brcs	.+48     	; 0x266c <__fp_cmp+0x46>
    263c:	12 16       	cp	r1, r18
    263e:	13 06       	cpc	r1, r19
    2640:	e4 07       	cpc	r30, r20
    2642:	f5 07       	cpc	r31, r21
    2644:	98 f0       	brcs	.+38     	; 0x266c <__fp_cmp+0x46>
    2646:	62 1b       	sub	r22, r18
    2648:	73 0b       	sbc	r23, r19
    264a:	84 0b       	sbc	r24, r20
    264c:	95 0b       	sbc	r25, r21
    264e:	39 f4       	brne	.+14     	; 0x265e <__fp_cmp+0x38>
    2650:	0a 26       	eor	r0, r26
    2652:	61 f0       	breq	.+24     	; 0x266c <__fp_cmp+0x46>
    2654:	23 2b       	or	r18, r19
    2656:	24 2b       	or	r18, r20
    2658:	25 2b       	or	r18, r21
    265a:	21 f4       	brne	.+8      	; 0x2664 <__fp_cmp+0x3e>
    265c:	08 95       	ret
    265e:	0a 26       	eor	r0, r26
    2660:	09 f4       	brne	.+2      	; 0x2664 <__fp_cmp+0x3e>
    2662:	a1 40       	sbci	r26, 0x01	; 1
    2664:	a6 95       	lsr	r26
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	81 1d       	adc	r24, r1
    266a:	81 1d       	adc	r24, r1
    266c:	08 95       	ret

0000266e <__fp_inf>:
    266e:	97 f9       	bld	r25, 7
    2670:	9f 67       	ori	r25, 0x7F	; 127
    2672:	80 e8       	ldi	r24, 0x80	; 128
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	08 95       	ret

0000267a <__fp_nan>:
    267a:	9f ef       	ldi	r25, 0xFF	; 255
    267c:	80 ec       	ldi	r24, 0xC0	; 192
    267e:	08 95       	ret

00002680 <__fp_pscA>:
    2680:	00 24       	eor	r0, r0
    2682:	0a 94       	dec	r0
    2684:	16 16       	cp	r1, r22
    2686:	17 06       	cpc	r1, r23
    2688:	18 06       	cpc	r1, r24
    268a:	09 06       	cpc	r0, r25
    268c:	08 95       	ret

0000268e <__fp_pscB>:
    268e:	00 24       	eor	r0, r0
    2690:	0a 94       	dec	r0
    2692:	12 16       	cp	r1, r18
    2694:	13 06       	cpc	r1, r19
    2696:	14 06       	cpc	r1, r20
    2698:	05 06       	cpc	r0, r21
    269a:	08 95       	ret

0000269c <__fp_round>:
    269c:	09 2e       	mov	r0, r25
    269e:	03 94       	inc	r0
    26a0:	00 0c       	add	r0, r0
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <__fp_round+0xc>
    26a4:	88 23       	and	r24, r24
    26a6:	52 f0       	brmi	.+20     	; 0x26bc <__fp_round+0x20>
    26a8:	bb 0f       	add	r27, r27
    26aa:	40 f4       	brcc	.+16     	; 0x26bc <__fp_round+0x20>
    26ac:	bf 2b       	or	r27, r31
    26ae:	11 f4       	brne	.+4      	; 0x26b4 <__fp_round+0x18>
    26b0:	60 ff       	sbrs	r22, 0
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <__fp_round+0x20>
    26b4:	6f 5f       	subi	r22, 0xFF	; 255
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	08 95       	ret

000026be <__fp_split3>:
    26be:	57 fd       	sbrc	r21, 7
    26c0:	90 58       	subi	r25, 0x80	; 128
    26c2:	44 0f       	add	r20, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	59 f0       	breq	.+22     	; 0x26de <__fp_splitA+0x10>
    26c8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ca:	71 f0       	breq	.+28     	; 0x26e8 <__fp_splitA+0x1a>
    26cc:	47 95       	ror	r20

000026ce <__fp_splitA>:
    26ce:	88 0f       	add	r24, r24
    26d0:	97 fb       	bst	r25, 7
    26d2:	99 1f       	adc	r25, r25
    26d4:	61 f0       	breq	.+24     	; 0x26ee <__fp_splitA+0x20>
    26d6:	9f 3f       	cpi	r25, 0xFF	; 255
    26d8:	79 f0       	breq	.+30     	; 0x26f8 <__fp_splitA+0x2a>
    26da:	87 95       	ror	r24
    26dc:	08 95       	ret
    26de:	12 16       	cp	r1, r18
    26e0:	13 06       	cpc	r1, r19
    26e2:	14 06       	cpc	r1, r20
    26e4:	55 1f       	adc	r21, r21
    26e6:	f2 cf       	rjmp	.-28     	; 0x26cc <__fp_split3+0xe>
    26e8:	46 95       	lsr	r20
    26ea:	f1 df       	rcall	.-30     	; 0x26ce <__fp_splitA>
    26ec:	08 c0       	rjmp	.+16     	; 0x26fe <__fp_splitA+0x30>
    26ee:	16 16       	cp	r1, r22
    26f0:	17 06       	cpc	r1, r23
    26f2:	18 06       	cpc	r1, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	f1 cf       	rjmp	.-30     	; 0x26da <__fp_splitA+0xc>
    26f8:	86 95       	lsr	r24
    26fa:	71 05       	cpc	r23, r1
    26fc:	61 05       	cpc	r22, r1
    26fe:	08 94       	sec
    2700:	08 95       	ret

00002702 <__fp_zero>:
    2702:	e8 94       	clt

00002704 <__fp_szero>:
    2704:	bb 27       	eor	r27, r27
    2706:	66 27       	eor	r22, r22
    2708:	77 27       	eor	r23, r23
    270a:	cb 01       	movw	r24, r22
    270c:	97 f9       	bld	r25, 7
    270e:	08 95       	ret

00002710 <__gesf2>:
    2710:	8a df       	rcall	.-236    	; 0x2626 <__fp_cmp>
    2712:	08 f4       	brcc	.+2      	; 0x2716 <__gesf2+0x6>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	08 95       	ret

00002718 <__mulsf3>:
    2718:	0b d0       	rcall	.+22     	; 0x2730 <__mulsf3x>
    271a:	c0 cf       	rjmp	.-128    	; 0x269c <__fp_round>
    271c:	b1 df       	rcall	.-158    	; 0x2680 <__fp_pscA>
    271e:	28 f0       	brcs	.+10     	; 0x272a <__mulsf3+0x12>
    2720:	b6 df       	rcall	.-148    	; 0x268e <__fp_pscB>
    2722:	18 f0       	brcs	.+6      	; 0x272a <__mulsf3+0x12>
    2724:	95 23       	and	r25, r21
    2726:	09 f0       	breq	.+2      	; 0x272a <__mulsf3+0x12>
    2728:	a2 cf       	rjmp	.-188    	; 0x266e <__fp_inf>
    272a:	a7 cf       	rjmp	.-178    	; 0x267a <__fp_nan>
    272c:	11 24       	eor	r1, r1
    272e:	ea cf       	rjmp	.-44     	; 0x2704 <__fp_szero>

00002730 <__mulsf3x>:
    2730:	c6 df       	rcall	.-116    	; 0x26be <__fp_split3>
    2732:	a0 f3       	brcs	.-24     	; 0x271c <__mulsf3+0x4>

00002734 <__mulsf3_pse>:
    2734:	95 9f       	mul	r25, r21
    2736:	d1 f3       	breq	.-12     	; 0x272c <__mulsf3+0x14>
    2738:	95 0f       	add	r25, r21
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	55 1f       	adc	r21, r21
    273e:	62 9f       	mul	r22, r18
    2740:	f0 01       	movw	r30, r0
    2742:	72 9f       	mul	r23, r18
    2744:	bb 27       	eor	r27, r27
    2746:	f0 0d       	add	r31, r0
    2748:	b1 1d       	adc	r27, r1
    274a:	63 9f       	mul	r22, r19
    274c:	aa 27       	eor	r26, r26
    274e:	f0 0d       	add	r31, r0
    2750:	b1 1d       	adc	r27, r1
    2752:	aa 1f       	adc	r26, r26
    2754:	64 9f       	mul	r22, r20
    2756:	66 27       	eor	r22, r22
    2758:	b0 0d       	add	r27, r0
    275a:	a1 1d       	adc	r26, r1
    275c:	66 1f       	adc	r22, r22
    275e:	82 9f       	mul	r24, r18
    2760:	22 27       	eor	r18, r18
    2762:	b0 0d       	add	r27, r0
    2764:	a1 1d       	adc	r26, r1
    2766:	62 1f       	adc	r22, r18
    2768:	73 9f       	mul	r23, r19
    276a:	b0 0d       	add	r27, r0
    276c:	a1 1d       	adc	r26, r1
    276e:	62 1f       	adc	r22, r18
    2770:	83 9f       	mul	r24, r19
    2772:	a0 0d       	add	r26, r0
    2774:	61 1d       	adc	r22, r1
    2776:	22 1f       	adc	r18, r18
    2778:	74 9f       	mul	r23, r20
    277a:	33 27       	eor	r19, r19
    277c:	a0 0d       	add	r26, r0
    277e:	61 1d       	adc	r22, r1
    2780:	23 1f       	adc	r18, r19
    2782:	84 9f       	mul	r24, r20
    2784:	60 0d       	add	r22, r0
    2786:	21 1d       	adc	r18, r1
    2788:	82 2f       	mov	r24, r18
    278a:	76 2f       	mov	r23, r22
    278c:	6a 2f       	mov	r22, r26
    278e:	11 24       	eor	r1, r1
    2790:	9f 57       	subi	r25, 0x7F	; 127
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	8a f0       	brmi	.+34     	; 0x27b8 <__mulsf3_pse+0x84>
    2796:	e1 f0       	breq	.+56     	; 0x27d0 <__mulsf3_pse+0x9c>
    2798:	88 23       	and	r24, r24
    279a:	4a f0       	brmi	.+18     	; 0x27ae <__mulsf3_pse+0x7a>
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	bb 1f       	adc	r27, r27
    27a2:	66 1f       	adc	r22, r22
    27a4:	77 1f       	adc	r23, r23
    27a6:	88 1f       	adc	r24, r24
    27a8:	91 50       	subi	r25, 0x01	; 1
    27aa:	50 40       	sbci	r21, 0x00	; 0
    27ac:	a9 f7       	brne	.-22     	; 0x2798 <__mulsf3_pse+0x64>
    27ae:	9e 3f       	cpi	r25, 0xFE	; 254
    27b0:	51 05       	cpc	r21, r1
    27b2:	70 f0       	brcs	.+28     	; 0x27d0 <__mulsf3_pse+0x9c>
    27b4:	5c cf       	rjmp	.-328    	; 0x266e <__fp_inf>
    27b6:	a6 cf       	rjmp	.-180    	; 0x2704 <__fp_szero>
    27b8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ba:	ec f3       	brlt	.-6      	; 0x27b6 <__mulsf3_pse+0x82>
    27bc:	98 3e       	cpi	r25, 0xE8	; 232
    27be:	dc f3       	brlt	.-10     	; 0x27b6 <__mulsf3_pse+0x82>
    27c0:	86 95       	lsr	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b7 95       	ror	r27
    27c8:	f7 95       	ror	r31
    27ca:	e7 95       	ror	r30
    27cc:	9f 5f       	subi	r25, 0xFF	; 255
    27ce:	c1 f7       	brne	.-16     	; 0x27c0 <__mulsf3_pse+0x8c>
    27d0:	fe 2b       	or	r31, r30
    27d2:	88 0f       	add	r24, r24
    27d4:	91 1d       	adc	r25, r1
    27d6:	96 95       	lsr	r25
    27d8:	87 95       	ror	r24
    27da:	97 f9       	bld	r25, 7
    27dc:	08 95       	ret

000027de <__mulsi3>:
    27de:	62 9f       	mul	r22, r18
    27e0:	d0 01       	movw	r26, r0
    27e2:	73 9f       	mul	r23, r19
    27e4:	f0 01       	movw	r30, r0
    27e6:	82 9f       	mul	r24, r18
    27e8:	e0 0d       	add	r30, r0
    27ea:	f1 1d       	adc	r31, r1
    27ec:	64 9f       	mul	r22, r20
    27ee:	e0 0d       	add	r30, r0
    27f0:	f1 1d       	adc	r31, r1
    27f2:	92 9f       	mul	r25, r18
    27f4:	f0 0d       	add	r31, r0
    27f6:	83 9f       	mul	r24, r19
    27f8:	f0 0d       	add	r31, r0
    27fa:	74 9f       	mul	r23, r20
    27fc:	f0 0d       	add	r31, r0
    27fe:	65 9f       	mul	r22, r21
    2800:	f0 0d       	add	r31, r0
    2802:	99 27       	eor	r25, r25
    2804:	72 9f       	mul	r23, r18
    2806:	b0 0d       	add	r27, r0
    2808:	e1 1d       	adc	r30, r1
    280a:	f9 1f       	adc	r31, r25
    280c:	63 9f       	mul	r22, r19
    280e:	b0 0d       	add	r27, r0
    2810:	e1 1d       	adc	r30, r1
    2812:	f9 1f       	adc	r31, r25
    2814:	bd 01       	movw	r22, r26
    2816:	cf 01       	movw	r24, r30
    2818:	11 24       	eor	r1, r1
    281a:	08 95       	ret

0000281c <__udivmodhi4>:
    281c:	aa 1b       	sub	r26, r26
    281e:	bb 1b       	sub	r27, r27
    2820:	51 e1       	ldi	r21, 0x11	; 17
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <__udivmodhi4_ep>

00002824 <__udivmodhi4_loop>:
    2824:	aa 1f       	adc	r26, r26
    2826:	bb 1f       	adc	r27, r27
    2828:	a6 17       	cp	r26, r22
    282a:	b7 07       	cpc	r27, r23
    282c:	10 f0       	brcs	.+4      	; 0x2832 <__udivmodhi4_ep>
    282e:	a6 1b       	sub	r26, r22
    2830:	b7 0b       	sbc	r27, r23

00002832 <__udivmodhi4_ep>:
    2832:	88 1f       	adc	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	5a 95       	dec	r21
    2838:	a9 f7       	brne	.-22     	; 0x2824 <__udivmodhi4_loop>
    283a:	80 95       	com	r24
    283c:	90 95       	com	r25
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	08 95       	ret

00002844 <__udivmodsi4>:
    2844:	a1 e2       	ldi	r26, 0x21	; 33
    2846:	1a 2e       	mov	r1, r26
    2848:	aa 1b       	sub	r26, r26
    284a:	bb 1b       	sub	r27, r27
    284c:	fd 01       	movw	r30, r26
    284e:	0d c0       	rjmp	.+26     	; 0x286a <__udivmodsi4_ep>

00002850 <__udivmodsi4_loop>:
    2850:	aa 1f       	adc	r26, r26
    2852:	bb 1f       	adc	r27, r27
    2854:	ee 1f       	adc	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	a2 17       	cp	r26, r18
    285a:	b3 07       	cpc	r27, r19
    285c:	e4 07       	cpc	r30, r20
    285e:	f5 07       	cpc	r31, r21
    2860:	20 f0       	brcs	.+8      	; 0x286a <__udivmodsi4_ep>
    2862:	a2 1b       	sub	r26, r18
    2864:	b3 0b       	sbc	r27, r19
    2866:	e4 0b       	sbc	r30, r20
    2868:	f5 0b       	sbc	r31, r21

0000286a <__udivmodsi4_ep>:
    286a:	66 1f       	adc	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	88 1f       	adc	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	1a 94       	dec	r1
    2874:	69 f7       	brne	.-38     	; 0x2850 <__udivmodsi4_loop>
    2876:	60 95       	com	r22
    2878:	70 95       	com	r23
    287a:	80 95       	com	r24
    287c:	90 95       	com	r25
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	bd 01       	movw	r22, r26
    2884:	cf 01       	movw	r24, r30
    2886:	08 95       	ret

00002888 <_exit>:
    2888:	f8 94       	cli

0000288a <__stop_program>:
    288a:	ff cf       	rjmp	.-2      	; 0x288a <__stop_program>

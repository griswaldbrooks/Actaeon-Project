
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001858  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  000018cc  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000006d8  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000016f2  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007ea  00000000  00000000  00003776  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000131d  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004e0  00000000  00000000  00005280  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000931  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000da9  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_3>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_5>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_16>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000068 <__c.2133>:
      68:	09 09 2c 00                                         ..,.

0000006c <HexChars>:
      6c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d4 e0       	ldi	r29, 0x04	; 4
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e8 e5       	ldi	r30, 0x58	; 88
      92:	f8 e1       	ldi	r31, 0x18	; 24
      94:	02 c0       	rjmp	.+4      	; 0x9a <.do_copy_data_start>

00000096 <.do_copy_data_loop>:
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0

0000009a <.do_copy_data_start>:
      9a:	a0 30       	cpi	r26, 0x00	; 0
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <.do_copy_data_loop>

000000a0 <__do_clear_bss>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 30       	cpi	r26, 0x02	; 2
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 a2 00 	call	0x144	; 0x144 <main>
      b4:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_default>

000000bc <pwm_setup>:

#define TICKS_PER_ROTATION		128

void pwm_setup(void){

	PWM_timer1_On_Pin9();
      bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <PWM_timer1_On_Pin9>
	PWM_timer1_On_Pin10();
      c0:	0e 94 84 02 	call	0x508	; 0x508 <PWM_timer1_On_Pin10>

	// 20 ms period
	timer1PWMInitICR(5000);
      c4:	88 e8       	ldi	r24, 0x88	; 136
      c6:	93 e1       	ldi	r25, 0x13	; 19
      c8:	0e 94 2d 02 	call	0x45a	; 0x45a <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
      cc:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
      ce:	22 9a       	sbi	0x04, 2	; 4
}
      d0:	08 95       	ret

000000d2 <setup_hardware>:

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
      d2:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
      d4:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
      d6:	0e 94 03 08 	call	0x1006	; 0x1006 <uartInit>
	uartSetBaudRate(0,115200);
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	52 ec       	ldi	r21, 0xC2	; 194
      e0:	61 e0       	ldi	r22, 0x01	; 1
      e2:	70 e0       	ldi	r23, 0x00	; 0
      e4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uartSetBaudRate>
	rprintfInit(uart0SendByte);
      e8:	87 e2       	ldi	r24, 0x27	; 39
      ea:	96 e0       	ldi	r25, 0x06	; 6
      ec:	0e 94 1f 03 	call	0x63e	; 0x63e <rprintfInit>

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
      f0:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
      f2:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
      f4:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
      f6:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
      f8:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
      fa:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
      fc:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
      fe:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	0e 94 b2 02 	call	0x564	; 0x564 <init_timer0>
	init_timer1(TIMER_CLK_64);
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 c0 02 	call	0x580	; 0x580 <init_timer1>
	pwm_setup();
     10c:	0e 94 5e 00 	call	0xbc	; 0xbc <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     110:	e8 e6       	ldi	r30, 0x68	; 104
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	84 60       	ori	r24, 0x04	; 4
     118:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     11a:	ad e6       	ldi	r26, 0x6D	; 109
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	8c 91       	ld	r24, X
     120:	80 68       	ori	r24, 0x80	; 128
     122:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     124:	80 81       	ld	r24, Z
     126:	81 60       	ori	r24, 0x01	; 1
     128:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     12a:	eb e6       	ldi	r30, 0x6B	; 107
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	81 60       	ori	r24, 0x01	; 1
     132:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     134:	80 81       	ld	r24, Z
     136:	80 61       	ori	r24, 0x10	; 16
     138:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     13a:	80 81       	ld	r24, Z
     13c:	80 62       	ori	r24, 0x20	; 32
     13e:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     140:	78 94       	sei

}
     142:	08 95       	ret

00000144 <main>:



int main(void){
     144:	2f 92       	push	r2
     146:	3f 92       	push	r3
     148:	4f 92       	push	r4
     14a:	5f 92       	push	r5
     14c:	6f 92       	push	r6
     14e:	7f 92       	push	r7
     150:	8f 92       	push	r8
     152:	9f 92       	push	r9
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	6c 97       	sbiw	r28, 0x1c	; 28
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
	float rps_lf = 0;
	float rps_lf_prev = 0;
	float Kl = 10;
	float dt_l = 0;
	
	setup_hardware();
     178:	0e 94 69 00 	call	0xd2	; 0xd2 <setup_hardware>
	PWM_timer1_Set_Pin9(0);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 91 02 	call	0x522	; 0x522 <PWM_timer1_Set_Pin9>
	PWM_timer1_Set_Pin10(0);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 96 02 	call	0x52c	; 0x52c <PWM_timer1_Set_Pin10>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	2d 87       	std	Y+13, r18	; 0x0d
     196:	3e 87       	std	Y+14, r19	; 0x0e
     198:	4f 87       	std	Y+15, r20	; 0x0f
     19a:	58 8b       	std	Y+16, r21	; 0x10
     19c:	22 24       	eor	r2, r2
     19e:	33 24       	eor	r3, r3
     1a0:	21 01       	movw	r4, r2
     1a2:	19 86       	std	Y+9, r1	; 0x09
     1a4:	1a 86       	std	Y+10, r1	; 0x0a
     1a6:	1b 86       	std	Y+11, r1	; 0x0b
     1a8:	1c 86       	std	Y+12, r1	; 0x0c
     1aa:	2d 83       	std	Y+5, r18	; 0x05
     1ac:	3e 83       	std	Y+6, r19	; 0x06
     1ae:	4f 83       	std	Y+7, r20	; 0x07
     1b0:	58 87       	std	Y+8, r21	; 0x08
     1b2:	29 83       	std	Y+1, r18	; 0x01
     1b4:	3a 83       	std	Y+2, r19	; 0x02
     1b6:	4b 83       	std	Y+3, r20	; 0x03
     1b8:	5c 83       	std	Y+4, r21	; 0x04
	
/**/
	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     1ba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <get_timer0_overflow>
     1be:	5b 01       	movw	r10, r22
     1c0:	6c 01       	movw	r12, r24
     1c2:	66 b4       	in	r6, 0x26	; 38
		
		l_count_current = get_left_count();
     1c4:	0e 94 b6 08 	call	0x116c	; 0x116c <get_left_count>
     1c8:	7b 01       	movw	r14, r22
     1ca:	8c 01       	movw	r16, r24
		r_count_current = get_right_count();
     1cc:	0e 94 bf 08 	call	0x117e	; 0x117e <get_right_count>
     1d0:	69 8f       	std	Y+25, r22	; 0x19
     1d2:	7a 8f       	std	Y+26, r23	; 0x1a
     1d4:	8b 8f       	std	Y+27, r24	; 0x1b
     1d6:	9c 8f       	std	Y+28, r25	; 0x1c
		
		if(l_count_current != l_count_previous){
     1d8:	e2 14       	cp	r14, r2
     1da:	f3 04       	cpc	r15, r3
     1dc:	04 05       	cpc	r16, r4
     1de:	15 05       	cpc	r17, r5
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0xa0>
     1e2:	c6 c0       	rjmp	.+396    	; 0x370 <main+0x22c>
	PWM_timer1_Set_Pin9(0);
	PWM_timer1_Set_Pin10(0);
	
/**/
	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     1e4:	c6 01       	movw	r24, r12
     1e6:	b5 01       	movw	r22, r10
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__mulsi3>
     1f4:	66 0d       	add	r22, r6
     1f6:	71 1d       	adc	r23, r1
     1f8:	81 1d       	adc	r24, r1
     1fa:	91 1d       	adc	r25, r1
     1fc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatunsisf>
     200:	2e e0       	ldi	r18, 0x0E	; 14
     202:	3d e2       	ldi	r19, 0x2D	; 45
     204:	42 e3       	ldi	r20, 0x32	; 50
     206:	5d e3       	ldi	r21, 0x3D	; 61
     208:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e4       	ldi	r19, 0x40	; 64
     210:	4c e1       	ldi	r20, 0x1C	; 28
     212:	56 e4       	ldi	r21, 0x46	; 70
     214:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     218:	69 8b       	std	Y+17, r22	; 0x11
     21a:	7a 8b       	std	Y+18, r23	; 0x12
     21c:	8b 8b       	std	Y+19, r24	; 0x13
     21e:	9c 8b       	std	Y+20, r25	; 0x14
		
		l_count_current = get_left_count();
		r_count_current = get_right_count();
		
		if(l_count_current != l_count_previous){
			l_count_current = get_left_count();
     220:	0e 94 b6 08 	call	0x116c	; 0x116c <get_left_count>
     224:	3b 01       	movw	r6, r22
     226:	4c 01       	movw	r8, r24
			dt_l = (elapsed_time_l - elapsed_time_l_previous);
     228:	69 89       	ldd	r22, Y+17	; 0x11
     22a:	7a 89       	ldd	r23, Y+18	; 0x12
     22c:	8b 89       	ldd	r24, Y+19	; 0x13
     22e:	9c 89       	ldd	r25, Y+20	; 0x14
     230:	2d 85       	ldd	r18, Y+13	; 0x0d
     232:	3e 85       	ldd	r19, Y+14	; 0x0e
     234:	4f 85       	ldd	r20, Y+15	; 0x0f
     236:	58 89       	ldd	r21, Y+16	; 0x10
     238:	0e 94 bf 09 	call	0x137e	; 0x137e <__subsf3>
     23c:	7b 01       	movw	r14, r22
     23e:	8c 01       	movw	r16, r24
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     240:	c4 01       	movw	r24, r8
     242:	b3 01       	movw	r22, r6
     244:	62 19       	sub	r22, r2
     246:	73 09       	sbc	r23, r3
     248:	84 09       	sbc	r24, r4
     24a:	95 09       	sbc	r25, r5
     24c:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     250:	a8 01       	movw	r20, r16
     252:	97 01       	movw	r18, r14
     254:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	5c e3       	ldi	r21, 0x3C	; 60
     260:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     264:	6d 8b       	std	Y+21, r22	; 0x15
     266:	7e 8b       	std	Y+22, r23	; 0x16
     268:	8f 8b       	std	Y+23, r24	; 0x17
     26a:	98 8f       	std	Y+24, r25	; 0x18
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     26c:	c8 01       	movw	r24, r16
     26e:	b7 01       	movw	r22, r14
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e2       	ldi	r20, 0x20	; 32
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     27c:	7b 01       	movw	r14, r22
     27e:	8c 01       	movw	r16, r24
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e4       	ldi	r21, 0x40	; 64
     288:	0e 94 c0 09 	call	0x1380	; 0x1380 <__addsf3>
     28c:	1b 01       	movw	r2, r22
     28e:	2c 01       	movw	r4, r24
     290:	c8 01       	movw	r24, r16
     292:	b7 01       	movw	r22, r14
     294:	a2 01       	movw	r20, r4
     296:	91 01       	movw	r18, r2
     298:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     29c:	5b 01       	movw	r10, r22
     29e:	6c 01       	movw	r12, r24
     2a0:	6d 89       	ldd	r22, Y+21	; 0x15
     2a2:	7e 89       	ldd	r23, Y+22	; 0x16
     2a4:	8f 89       	ldd	r24, Y+23	; 0x17
     2a6:	98 8d       	ldd	r25, Y+24	; 0x18
     2a8:	2d 81       	ldd	r18, Y+5	; 0x05
     2aa:	3e 81       	ldd	r19, Y+6	; 0x06
     2ac:	4f 81       	ldd	r20, Y+7	; 0x07
     2ae:	58 85       	ldd	r21, Y+8	; 0x08
     2b0:	0e 94 c0 09 	call	0x1380	; 0x1380 <__addsf3>
     2b4:	9b 01       	movw	r18, r22
     2b6:	ac 01       	movw	r20, r24
     2b8:	c6 01       	movw	r24, r12
     2ba:	b5 01       	movw	r22, r10
     2bc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     2c0:	5b 01       	movw	r10, r22
     2c2:	6c 01       	movw	r12, r24
     2c4:	c8 01       	movw	r24, r16
     2c6:	b7 01       	movw	r22, r14
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e4       	ldi	r21, 0x40	; 64
     2d0:	0e 94 bf 09 	call	0x137e	; 0x137e <__subsf3>
     2d4:	a2 01       	movw	r20, r4
     2d6:	91 01       	movw	r18, r2
     2d8:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     2dc:	29 81       	ldd	r18, Y+1	; 0x01
     2de:	3a 81       	ldd	r19, Y+2	; 0x02
     2e0:	4b 81       	ldd	r20, Y+3	; 0x03
     2e2:	5c 81       	ldd	r21, Y+4	; 0x04
     2e4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     2e8:	9b 01       	movw	r18, r22
     2ea:	ac 01       	movw	r20, r24
     2ec:	c6 01       	movw	r24, r12
     2ee:	b5 01       	movw	r22, r10
     2f0:	0e 94 bf 09 	call	0x137e	; 0x137e <__subsf3>
     2f4:	7b 01       	movw	r14, r22
     2f6:	8c 01       	movw	r16, r24

			rps_l_prev = rps_l;
			rps_lf_prev = rps_lf;

			//rprintf("Left: ");
			rprintfFloat(5,rps_lf);
     2f8:	85 e0       	ldi	r24, 0x05	; 5
     2fa:	4e 2d       	mov	r20, r14
     2fc:	5f 2d       	mov	r21, r15
     2fe:	60 2f       	mov	r22, r16
     300:	71 2f       	mov	r23, r17
     302:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <rprintfFloat>
			rprintf("\t\t,");
     306:	00 d0       	rcall	.+0      	; 0x308 <main+0x1c4>
     308:	0f 92       	push	r0
     30a:	e1 e0       	ldi	r30, 0x01	; 1
     30c:	ad b7       	in	r26, 0x3d	; 61
     30e:	be b7       	in	r27, 0x3e	; 62
     310:	11 96       	adiw	r26, 0x01	; 1
     312:	ec 93       	st	X, r30
     314:	11 97       	sbiw	r26, 0x01	; 1
     316:	28 e6       	ldi	r18, 0x68	; 104
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	3c 93       	st	X, r19
     31e:	2e 93       	st	-X, r18
     320:	12 97       	sbiw	r26, 0x02	; 2
     322:	0e 94 43 05 	call	0xa86	; 0xa86 <rprintf1RamRom>
			rprintfFloat(5,elapsed_time_l);
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	85 e0       	ldi	r24, 0x05	; 5
     32e:	49 89       	ldd	r20, Y+17	; 0x11
     330:	5a 89       	ldd	r21, Y+18	; 0x12
     332:	6b 89       	ldd	r22, Y+19	; 0x13
     334:	7c 89       	ldd	r23, Y+20	; 0x14
     336:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <rprintfFloat>
			rprintfCRLF();
     33a:	0e 94 83 03 	call	0x706	; 0x706 <rprintfCRLF>
     33e:	89 89       	ldd	r24, Y+17	; 0x11
     340:	9a 89       	ldd	r25, Y+18	; 0x12
     342:	ab 89       	ldd	r26, Y+19	; 0x13
     344:	bc 89       	ldd	r27, Y+20	; 0x14
     346:	8d 87       	std	Y+13, r24	; 0x0d
     348:	9e 87       	std	Y+14, r25	; 0x0e
     34a:	af 87       	std	Y+15, r26	; 0x0f
     34c:	b8 8b       	std	Y+16, r27	; 0x10
     34e:	13 01       	movw	r2, r6
     350:	24 01       	movw	r4, r8
     352:	2d 89       	ldd	r18, Y+21	; 0x15
     354:	3e 89       	ldd	r19, Y+22	; 0x16
     356:	4f 89       	ldd	r20, Y+23	; 0x17
     358:	58 8d       	ldd	r21, Y+24	; 0x18
     35a:	2d 83       	std	Y+5, r18	; 0x05
     35c:	3e 83       	std	Y+6, r19	; 0x06
     35e:	4f 83       	std	Y+7, r20	; 0x07
     360:	58 87       	std	Y+8, r21	; 0x08
     362:	a8 01       	movw	r20, r16
     364:	c7 01       	movw	r24, r14
     366:	da 01       	movw	r26, r20
     368:	89 83       	std	Y+1, r24	; 0x01
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	ab 83       	std	Y+3, r26	; 0x03
     36e:	bc 83       	std	Y+4, r27	; 0x04
			l_count_previous = l_count_current;
			
			elapsed_time_l_previous = elapsed_time_l;
		}
		
		if(r_count_current != r_count_previous){
     370:	89 8d       	ldd	r24, Y+25	; 0x19
     372:	9a 8d       	ldd	r25, Y+26	; 0x1a
     374:	ab 8d       	ldd	r26, Y+27	; 0x1b
     376:	bc 8d       	ldd	r27, Y+28	; 0x1c
     378:	29 85       	ldd	r18, Y+9	; 0x09
     37a:	3a 85       	ldd	r19, Y+10	; 0x0a
     37c:	4b 85       	ldd	r20, Y+11	; 0x0b
     37e:	5c 85       	ldd	r21, Y+12	; 0x0c
     380:	82 17       	cp	r24, r18
     382:	93 07       	cpc	r25, r19
     384:	a4 07       	cpc	r26, r20
     386:	b5 07       	cpc	r27, r21
     388:	49 f0       	breq	.+18     	; 0x39c <main+0x258>
			r_count_current = get_right_count();
     38a:	0e 94 bf 08 	call	0x117e	; 0x117e <get_right_count>
     38e:	ac 01       	movw	r20, r24
     390:	cb 01       	movw	r24, r22
     392:	da 01       	movw	r26, r20
     394:	89 87       	std	Y+9, r24	; 0x09
     396:	9a 87       	std	Y+10, r25	; 0x0a
     398:	ab 87       	std	Y+11, r26	; 0x0b
     39a:	bc 87       	std	Y+12, r27	; 0x0c
			
			elapsed_time_r_previous = elapsed_time_r;
		}
		
		
		PWM_timer1_Set_Pin9(duty);
     39c:	88 e6       	ldi	r24, 0x68	; 104
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 91 02 	call	0x522	; 0x522 <PWM_timer1_Set_Pin9>
		PWM_timer1_Set_Pin10(duty);
     3a4:	88 e6       	ldi	r24, 0x68	; 104
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 96 02 	call	0x52c	; 0x52c <PWM_timer1_Set_Pin10>
     3ac:	06 cf       	rjmp	.-500    	; 0x1ba <main+0x76>

000003ae <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
     3ae:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
     3b0:	80 91 81 00 	lds	r24, 0x0081
     3b4:	88 60       	ori	r24, 0x08	; 8
     3b6:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     3ba:	80 91 81 00 	lds	r24, 0x0081
     3be:	8f 7e       	andi	r24, 0xEF	; 239
     3c0:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     3c4:	99 30       	cpi	r25, 0x09	; 9
     3c6:	49 f4       	brne	.+18     	; 0x3da <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     3c8:	80 91 80 00 	lds	r24, 0x0080
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     3d2:	80 91 80 00 	lds	r24, 0x0080
     3d6:	8e 7f       	andi	r24, 0xFE	; 254
     3d8:	0e c0       	rjmp	.+28     	; 0x3f6 <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
     3da:	9a 30       	cpi	r25, 0x0A	; 10
     3dc:	21 f4       	brne	.+8      	; 0x3e6 <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     3de:	80 91 80 00 	lds	r24, 0x0080
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     3e6:	80 91 80 00 	lds	r24, 0x0080
     3ea:	8d 7f       	andi	r24, 0xFD	; 253
     3ec:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     3f0:	80 91 80 00 	lds	r24, 0x0080
     3f4:	81 60       	ori	r24, 0x01	; 1
     3f6:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
     3fa:	10 92 89 00 	sts	0x0089, r1
     3fe:	10 92 88 00 	sts	0x0088, r1
}
     402:	08 95       	ret

00000404 <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
     404:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
     406:	80 91 81 00 	lds	r24, 0x0081
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     410:	80 91 81 00 	lds	r24, 0x0081
     414:	8f 7e       	andi	r24, 0xEF	; 239
     416:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     41a:	99 30       	cpi	r25, 0x09	; 9
     41c:	49 f4       	brne	.+18     	; 0x430 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     41e:	80 91 80 00 	lds	r24, 0x0080
     422:	82 60       	ori	r24, 0x02	; 2
     424:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     428:	80 91 80 00 	lds	r24, 0x0080
     42c:	8e 7f       	andi	r24, 0xFE	; 254
     42e:	0e c0       	rjmp	.+28     	; 0x44c <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
     430:	9a 30       	cpi	r25, 0x0A	; 10
     432:	21 f4       	brne	.+8      	; 0x43c <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     434:	80 91 80 00 	lds	r24, 0x0080
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	03 c0       	rjmp	.+6      	; 0x442 <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     43c:	80 91 80 00 	lds	r24, 0x0080
     440:	8d 7f       	andi	r24, 0xFD	; 253
     442:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     446:	80 91 80 00 	lds	r24, 0x0080
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     450:	10 92 8b 00 	sts	0x008B, r1
     454:	10 92 8a 00 	sts	0x008A, r1
}
     458:	08 95       	ret

0000045a <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     45a:	e0 e8       	ldi	r30, 0x80	; 128
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	20 81       	ld	r18, Z
     460:	2e 7f       	andi	r18, 0xFE	; 254
     462:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     464:	20 81       	ld	r18, Z
     466:	22 60       	ori	r18, 0x02	; 2
     468:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     46a:	e1 e8       	ldi	r30, 0x81	; 129
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	20 81       	ld	r18, Z
     470:	28 60       	ori	r18, 0x08	; 8
     472:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     474:	20 81       	ld	r18, Z
     476:	20 61       	ori	r18, 0x10	; 16
     478:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     47a:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     47c:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
     47e:	90 93 87 00 	sts	0x0087, r25
     482:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
     486:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
     488:	10 92 89 00 	sts	0x0089, r1
     48c:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     490:	10 92 8b 00 	sts	0x008B, r1
     494:	10 92 8a 00 	sts	0x008A, r1
}
     498:	08 95       	ret

0000049a <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
     49a:	84 b5       	in	r24, 0x24	; 36
     49c:	8f 7d       	andi	r24, 0xDF	; 223
     49e:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     4a0:	84 b5       	in	r24, 0x24	; 36
     4a2:	8f 7e       	andi	r24, 0xEF	; 239
     4a4:	84 bd       	out	0x24, r24	; 36
}
     4a6:	08 95       	ret

000004a8 <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
     4a8:	84 b5       	in	r24, 0x24	; 36
     4aa:	8f 77       	andi	r24, 0x7F	; 127
     4ac:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     4ae:	84 b5       	in	r24, 0x24	; 36
     4b0:	8f 7b       	andi	r24, 0xBF	; 191
     4b2:	84 bd       	out	0x24, r24	; 36
}
     4b4:	08 95       	ret

000004b6 <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
     4b6:	e0 e8       	ldi	r30, 0x80	; 128
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	8f 7d       	andi	r24, 0xDF	; 223
     4be:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     4c0:	80 81       	ld	r24, Z
     4c2:	8f 7e       	andi	r24, 0xEF	; 239
     4c4:	80 83       	st	Z, r24
}
     4c6:	08 95       	ret

000004c8 <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
     4c8:	e0 e8       	ldi	r30, 0x80	; 128
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     4d2:	80 81       	ld	r24, Z
     4d4:	8f 7b       	andi	r24, 0xBF	; 191
     4d6:	80 83       	st	Z, r24
}
     4d8:	08 95       	ret

000004da <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
     4da:	84 b5       	in	r24, 0x24	; 36
     4dc:	80 62       	ori	r24, 0x20	; 32
     4de:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     4e0:	84 b5       	in	r24, 0x24	; 36
     4e2:	8f 7e       	andi	r24, 0xEF	; 239
     4e4:	84 bd       	out	0x24, r24	; 36
}
     4e6:	08 95       	ret

000004e8 <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
     4e8:	84 b5       	in	r24, 0x24	; 36
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     4ee:	84 b5       	in	r24, 0x24	; 36
     4f0:	8f 7b       	andi	r24, 0xBF	; 191
     4f2:	84 bd       	out	0x24, r24	; 36
}
     4f4:	08 95       	ret

000004f6 <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
     4f6:	e0 e8       	ldi	r30, 0x80	; 128
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	80 62       	ori	r24, 0x20	; 32
     4fe:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     500:	80 81       	ld	r24, Z
     502:	8f 7e       	andi	r24, 0xEF	; 239
     504:	80 83       	st	Z, r24
}
     506:	08 95       	ret

00000508 <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
     508:	e0 e8       	ldi	r30, 0x80	; 128
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 68       	ori	r24, 0x80	; 128
     510:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     512:	80 81       	ld	r24, Z
     514:	8f 7b       	andi	r24, 0xBF	; 191
     516:	80 83       	st	Z, r24
}
     518:	08 95       	ret

0000051a <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
     51a:	88 bd       	out	0x28, r24	; 40
}
     51c:	08 95       	ret

0000051e <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
     51e:	87 bd       	out	0x27, r24	; 39
}
     520:	08 95       	ret

00000522 <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1B = duty;
     522:	90 93 8b 00 	sts	0x008B, r25
     526:	80 93 8a 00 	sts	0x008A, r24
}
     52a:	08 95       	ret

0000052c <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1A = duty;
     52c:	90 93 89 00 	sts	0x0089, r25
     530:	80 93 88 00 	sts	0x0088, r24
}
     534:	08 95       	ret

00000536 <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     536:	10 92 ae 01 	sts	0x01AE, r1
     53a:	10 92 af 01 	sts	0x01AF, r1
     53e:	10 92 b0 01 	sts	0x01B0, r1
     542:	10 92 b1 01 	sts	0x01B1, r1
     546:	16 bc       	out	0x26, r1	; 38
}
     548:	08 95       	ret

0000054a <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     54a:	10 92 aa 01 	sts	0x01AA, r1
     54e:	10 92 ab 01 	sts	0x01AB, r1
     552:	10 92 ac 01 	sts	0x01AC, r1
     556:	10 92 ad 01 	sts	0x01AD, r1
     55a:	10 92 85 00 	sts	0x0085, r1
     55e:	10 92 84 00 	sts	0x0084, r1
}
     562:	08 95       	ret

00000564 <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
     564:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     56c:	10 92 ae 01 	sts	0x01AE, r1
     570:	10 92 af 01 	sts	0x01AF, r1
     574:	10 92 b0 01 	sts	0x01B0, r1
     578:	10 92 b1 01 	sts	0x01B1, r1
     57c:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
     57e:	08 95       	ret

00000580 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
     580:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     58a:	10 92 aa 01 	sts	0x01AA, r1
     58e:	10 92 ab 01 	sts	0x01AB, r1
     592:	10 92 ac 01 	sts	0x01AC, r1
     596:	10 92 ad 01 	sts	0x01AD, r1
     59a:	10 92 85 00 	sts	0x0085, r1
     59e:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
     5a2:	08 95       	ret

000005a4 <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
     5a4:	20 91 ae 01 	lds	r18, 0x01AE
     5a8:	30 91 af 01 	lds	r19, 0x01AF
     5ac:	40 91 b0 01 	lds	r20, 0x01B0
     5b0:	50 91 b1 01 	lds	r21, 0x01B1
}
     5b4:	b9 01       	movw	r22, r18
     5b6:	ca 01       	movw	r24, r20
     5b8:	08 95       	ret

000005ba <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	24 e0       	ldi	r18, 0x04	; 4
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	aa 1f       	adc	r26, r26
     5c6:	bb 1f       	adc	r27, r27
     5c8:	2a 95       	dec	r18
     5ca:	d1 f7       	brne	.-12     	; 0x5c0 <delay_us+0x6>
     5cc:	03 96       	adiw	r24, 0x03	; 3
     5ce:	a1 1d       	adc	r26, r1
     5d0:	b1 1d       	adc	r27, r1
     5d2:	bc 01       	movw	r22, r24
     5d4:	cd 01       	movw	r24, r26
     5d6:	2a e0       	ldi	r18, 0x0A	; 10
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
     5e8:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	82 17       	cp	r24, r18
     5ee:	93 07       	cpc	r25, r19
     5f0:	d8 f3       	brcs	.-10     	; 0x5e8 <delay_us+0x2e>
		asm("nop");
	};
}
     5f2:	08 95       	ret

000005f4 <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
     606:	80 91 ae 01 	lds	r24, 0x01AE
     60a:	90 91 af 01 	lds	r25, 0x01AF
     60e:	a0 91 b0 01 	lds	r26, 0x01B0
     612:	b0 91 b1 01 	lds	r27, 0x01B1
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	a1 1d       	adc	r26, r1
     61a:	b1 1d       	adc	r27, r1
     61c:	80 93 ae 01 	sts	0x01AE, r24
     620:	90 93 af 01 	sts	0x01AF, r25
     624:	a0 93 b0 01 	sts	0x01B0, r26
     628:	b0 93 b1 01 	sts	0x01B1, r27
}
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     63e:	90 93 01 01 	sts	0x0101, r25
     642:	80 93 00 01 	sts	0x0100, r24
}
     646:	08 95       	ret

00000648 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     648:	1f 93       	push	r17
     64a:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     64c:	8a 30       	cpi	r24, 0x0A	; 10
     64e:	31 f4       	brne	.+12     	; 0x65c <rprintfChar+0x14>
		rputchar('\r');
     650:	e0 91 00 01 	lds	r30, 0x0100
     654:	f0 91 01 01 	lds	r31, 0x0101
     658:	8d e0       	ldi	r24, 0x0D	; 13
     65a:	09 95       	icall
	// send character
	rputchar(c);
     65c:	e0 91 00 01 	lds	r30, 0x0100
     660:	f0 91 01 01 	lds	r31, 0x0101
     664:	81 2f       	mov	r24, r17
     666:	09 95       	icall
}
     668:	1f 91       	pop	r17
     66a:	08 95       	ret

0000066c <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	21 f4       	brne	.+8      	; 0x67e <rprintfStr+0x12>
     676:	06 c0       	rjmp	.+12     	; 0x684 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     67e:	88 81       	ld	r24, Y
     680:	88 23       	and	r24, r24
     682:	d1 f7       	brne	.-12     	; 0x678 <rprintfStr+0xc>
		rprintfChar(*str++);
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	8c 01       	movw	r16, r24
     698:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	e9 f0       	breq	.+58     	; 0x6d8 <rprintfStrLen+0x4e>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     6a2:	26 17       	cp	r18, r22
     6a4:	37 07       	cpc	r19, r23
     6a6:	38 f4       	brcc	.+14     	; 0x6b6 <rprintfStrLen+0x2c>
     6a8:	f8 01       	movw	r30, r16
     6aa:	81 91       	ld	r24, Z+
     6ac:	8f 01       	movw	r16, r30
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	88 23       	and	r24, r24
     6b4:	b1 f7       	brne	.-20     	; 0x6a2 <rprintfStrLen+0x18>
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     6bc:	f8 01       	movw	r30, r16
     6be:	80 81       	ld	r24, Z
     6c0:	88 23       	and	r24, r24
     6c2:	19 f0       	breq	.+6      	; 0x6ca <rprintfStrLen+0x40>
			rprintfChar(*str++);
     6c4:	0f 5f       	subi	r16, 0xFF	; 255
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     6ca:	80 e2       	ldi	r24, 0x20	; 32
     6cc:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     6d0:	21 96       	adiw	r28, 0x01	; 1
     6d2:	ce 15       	cp	r28, r14
     6d4:	df 05       	cpc	r29, r15
     6d6:	90 f3       	brcs	.-28     	; 0x6bc <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     6ec:	00 97       	sbiw	r24, 0x00	; 0
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <rprintfProgStr+0x10>
     6f0:	07 c0       	rjmp	.+14     	; 0x700 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     6f2:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     6f6:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     6f8:	21 96       	adiw	r28, 0x01	; 1
     6fa:	84 91       	lpm	r24, Z+
     6fc:	88 23       	and	r24, r24
     6fe:	c9 f7       	brne	.-14     	; 0x6f2 <rprintfProgStr+0xc>
		rprintfChar(c);
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
}
     70c:	08 95       	ret

0000070e <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     70e:	e8 2f       	mov	r30, r24
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ef 70       	andi	r30, 0x0F	; 15
     714:	f0 70       	andi	r31, 0x00	; 0
     716:	e4 59       	subi	r30, 0x94	; 148
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	e4 91       	lpm	r30, Z+
     71c:	8e 2f       	mov	r24, r30
     71e:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
}
     722:	08 95       	ret

00000724 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     724:	1f 93       	push	r17
     726:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     728:	82 95       	swap	r24
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	0e 94 87 03 	call	0x70e	; 0x70e <rprintfu04>
	rprintfu04(data);
     730:	81 2f       	mov	r24, r17
     732:	0e 94 87 03 	call	0x70e	; 0x70e <rprintfu04>
}
     736:	1f 91       	pop	r17
     738:	08 95       	ret

0000073a <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     73a:	1f 93       	push	r17
     73c:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     73e:	89 2f       	mov	r24, r25
     740:	0e 94 92 03 	call	0x724	; 0x724 <rprintfu08>
	rprintfu08(data);
     744:	81 2f       	mov	r24, r17
     746:	0e 94 92 03 	call	0x724	; 0x724 <rprintfu08>
}
     74a:	1f 91       	pop	r17
     74c:	08 95       	ret

0000074e <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	7b 01       	movw	r14, r22
     758:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     75a:	c8 01       	movw	r24, r16
     75c:	aa 27       	eor	r26, r26
     75e:	bb 27       	eor	r27, r27
     760:	0e 94 9d 03 	call	0x73a	; 0x73a <rprintfu16>
	rprintfu16(data);
     764:	c7 01       	movw	r24, r14
     766:	0e 94 9d 03 	call	0x73a	; 0x73a <rprintfu16>
}
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     774:	2f 92       	push	r2
     776:	3f 92       	push	r3
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	a3 97       	sbiw	r28, 0x23	; 35
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	6a a3       	std	Y+34, r22	; 0x22
     7aa:	24 2e       	mov	r2, r20
     7ac:	2b a3       	std	Y+35, r18	; 0x23
     7ae:	37 01       	movw	r6, r14
     7b0:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     7b2:	44 23       	and	r20, r20
     7b4:	51 f0       	breq	.+20     	; 0x7ca <rprintfNum+0x56>
     7b6:	17 ff       	sbrs	r17, 7
     7b8:	08 c0       	rjmp	.+16     	; 0x7ca <rprintfNum+0x56>
	{
		x = -n;
     7ba:	ee 24       	eor	r14, r14
     7bc:	ff 24       	eor	r15, r15
     7be:	87 01       	movw	r16, r14
     7c0:	e6 18       	sub	r14, r6
     7c2:	f7 08       	sbc	r15, r7
     7c4:	08 09       	sbc	r16, r8
     7c6:	19 09       	sbc	r17, r9
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     7ca:	84 01       	movw	r16, r8
     7cc:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     7ce:	2a a1       	ldd	r18, Y+34	; 0x22
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	21 10       	cpse	r2, r1
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	29 1b       	sub	r18, r25
     7da:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     7dc:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     7de:	a8 2e       	mov	r10, r24
     7e0:	bb 24       	eor	r11, r11
     7e2:	cc 24       	eor	r12, r12
     7e4:	dd 24       	eor	r13, r13
     7e6:	c8 01       	movw	r24, r16
     7e8:	b7 01       	movw	r22, r14
     7ea:	a6 01       	movw	r20, r12
     7ec:	95 01       	movw	r18, r10
     7ee:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     7f2:	fb 01       	movw	r30, r22
     7f4:	ef 70       	andi	r30, 0x0F	; 15
     7f6:	f0 70       	andi	r31, 0x00	; 0
     7f8:	e4 59       	subi	r30, 0x94	; 148
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	64 91       	lpm	r22, Z+
     7fe:	6f 8f       	std	Y+31, r22	; 0x1f
     800:	c8 01       	movw	r24, r16
     802:	b7 01       	movw	r22, r14
     804:	a6 01       	movw	r20, r12
     806:	95 01       	movw	r18, r10
     808:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     80c:	c9 01       	movw	r24, r18
     80e:	da 01       	movw	r26, r20
     810:	7c 01       	movw	r14, r24
     812:	8d 01       	movw	r16, r26
     814:	9e e1       	ldi	r25, 0x1E	; 30
     816:	49 2e       	mov	r4, r25
     818:	51 2c       	mov	r5, r1
     81a:	4c 0e       	add	r4, r28
     81c:	5d 1e       	adc	r5, r29
     81e:	39 a0       	ldd	r3, Y+33	; 0x21
     820:	25 c0       	rjmp	.+74     	; 0x86c <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     822:	e1 14       	cp	r14, r1
     824:	f1 04       	cpc	r15, r1
     826:	01 05       	cpc	r16, r1
     828:	11 05       	cpc	r17, r1
     82a:	c9 f0       	breq	.+50     	; 0x85e <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	a6 01       	movw	r20, r12
     832:	95 01       	movw	r18, r10
     834:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     838:	fb 01       	movw	r30, r22
     83a:	ef 70       	andi	r30, 0x0F	; 15
     83c:	f0 70       	andi	r31, 0x00	; 0
     83e:	e4 59       	subi	r30, 0x94	; 148
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	64 91       	lpm	r22, Z+
     844:	f2 01       	movw	r30, r4
     846:	60 83       	st	Z, r22
     848:	c8 01       	movw	r24, r16
     84a:	b7 01       	movw	r22, r14
     84c:	a6 01       	movw	r20, r12
     84e:	95 01       	movw	r18, r10
     850:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	7c 01       	movw	r14, r24
     85a:	8d 01       	movw	r16, r26
     85c:	03 c0       	rjmp	.+6      	; 0x864 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     85e:	2b a1       	ldd	r18, Y+35	; 0x23
     860:	f2 01       	movw	r30, r4
     862:	20 83       	st	Z, r18
     864:	3a 94       	dec	r3
     866:	08 94       	sec
     868:	41 08       	sbc	r4, r1
     86a:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     86c:	33 20       	and	r3, r3
     86e:	c9 f6       	brne	.-78     	; 0x822 <rprintfNum+0xae>
     870:	ce 01       	movw	r24, r28
     872:	4f 96       	adiw	r24, 0x1f	; 31
     874:	8c 01       	movw	r16, r24
     876:	e9 a1       	ldd	r30, Y+33	; 0x21
     878:	0e 1b       	sub	r16, r30
     87a:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
     87c:	22 20       	and	r2, r2
     87e:	f1 f0       	breq	.+60     	; 0x8bc <rprintfNum+0x148>
	{
		if(n < 0)
     880:	97 fe       	sbrs	r9, 7
     882:	05 c0       	rjmp	.+10     	; 0x88e <rprintfNum+0x11a>
		{
   			*--p = '-';
     884:	8d e2       	ldi	r24, 0x2D	; 45
     886:	f8 01       	movw	r30, r16
     888:	82 93       	st	-Z, r24
     88a:	8f 01       	movw	r16, r30
     88c:	17 c0       	rjmp	.+46     	; 0x8bc <rprintfNum+0x148>
     88e:	c8 01       	movw	r24, r16
     890:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
     892:	61 14       	cp	r6, r1
     894:	71 04       	cpc	r7, r1
     896:	81 04       	cpc	r8, r1
     898:	91 04       	cpc	r9, r1
     89a:	19 f0       	breq	.+6      	; 0x8a2 <rprintfNum+0x12e>
		{
	   		*--p = '+';
     89c:	8c 01       	movw	r16, r24
     89e:	8b e2       	ldi	r24, 0x2B	; 43
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
     8a2:	8c 01       	movw	r16, r24
     8a4:	80 e2       	ldi	r24, 0x20	; 32
     8a6:	f8 01       	movw	r30, r16
     8a8:	80 83       	st	Z, r24
     8aa:	08 c0       	rjmp	.+16     	; 0x8bc <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
     8ac:	f8 01       	movw	r30, r16
     8ae:	81 91       	ld	r24, Z+
     8b0:	8f 01       	movw	r16, r30
     8b2:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     8b6:	fa a1       	ldd	r31, Y+34	; 0x22
     8b8:	f1 50       	subi	r31, 0x01	; 1
     8ba:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     8bc:	2a a1       	ldd	r18, Y+34	; 0x22
     8be:	22 23       	and	r18, r18
     8c0:	a9 f7       	brne	.-22     	; 0x8ac <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
     8c2:	a3 96       	adiw	r28, 0x23	; 35
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	3f 90       	pop	r3
     8f0:	2f 90       	pop	r2
     8f2:	08 95       	ret

000008f4 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	48 2e       	mov	r4, r24
     916:	5a 01       	movw	r10, r20
     918:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
     91a:	cb 01       	movw	r24, r22
     91c:	ba 01       	movw	r22, r20
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__gesf2>
     92a:	18 16       	cp	r1, r24
     92c:	1c f4       	brge	.+6      	; 0x934 <rprintfFloat+0x40>
     92e:	35 01       	movw	r6, r10
     930:	46 01       	movw	r8, r12
     932:	06 c0       	rjmp	.+12     	; 0x940 <rprintfFloat+0x4c>
     934:	35 01       	movw	r6, r10
     936:	46 01       	movw	r8, r12
     938:	97 fa       	bst	r9, 7
     93a:	90 94       	com	r9
     93c:	97 f8       	bld	r9, 7
     93e:	90 94       	com	r9
     940:	0f 2e       	mov	r0, r31
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ef 2e       	mov	r14, r31
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	ff 2e       	mov	r15, r31
     94a:	f0 e8       	ldi	r31, 0x80	; 128
     94c:	0f 2f       	mov	r16, r31
     94e:	ff e3       	ldi	r31, 0x3F	; 63
     950:	1f 2f       	mov	r17, r31
     952:	f0 2d       	mov	r31, r0
     954:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
     956:	c4 01       	movw	r24, r8
     958:	b3 01       	movw	r22, r6
     95a:	a8 01       	movw	r20, r16
     95c:	97 01       	movw	r18, r14
     95e:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e2       	ldi	r20, 0x20	; 32
     968:	51 e4       	ldi	r21, 0x41	; 65
     96a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__cmpsf2>
     96e:	87 fd       	sbrc	r24, 7
     970:	0e c0       	rjmp	.+28     	; 0x98e <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
     972:	c8 01       	movw	r24, r16
     974:	b7 01       	movw	r22, r14
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	51 e4       	ldi	r21, 0x41	; 65
     97e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     982:	7b 01       	movw	r14, r22
     984:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
     986:	53 94       	inc	r5
     988:	8f e0       	ldi	r24, 0x0F	; 15
     98a:	58 16       	cp	r5, r24
     98c:	21 f7       	brne	.-56     	; 0x956 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
     98e:	c6 01       	movw	r24, r12
     990:	b5 01       	movw	r22, r10
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__cmpsf2>
     99e:	88 23       	and	r24, r24
     9a0:	14 f4       	brge	.+4      	; 0x9a6 <rprintfFloat+0xb2>
		rprintfChar('-');
     9a2:	8d e2       	ldi	r24, 0x2D	; 45
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
     9a6:	8b e2       	ldi	r24, 0x2B	; 43
     9a8:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     9ac:	dd 24       	eor	r13, r13
     9ae:	aa 24       	eor	r10, r10
     9b0:	56 c0       	rjmp	.+172    	; 0xa5e <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
     9b2:	c4 01       	movw	r24, r8
     9b4:	b3 01       	movw	r22, r6
     9b6:	a8 01       	movw	r20, r16
     9b8:	97 01       	movw	r18, r14
     9ba:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     9be:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fixunssfsi>
     9c2:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
     9c4:	d6 2a       	or	r13, r22
     9c6:	cd 2d       	mov	r28, r13
     9c8:	d0 e0       	ldi	r29, 0x00	; 0
     9ca:	cc 24       	eor	r12, r12
     9cc:	dd 24       	eor	r13, r13
     9ce:	c8 01       	movw	r24, r16
     9d0:	b7 01       	movw	r22, r14
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e8       	ldi	r20, 0x80	; 128
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	0e 94 24 0a 	call	0x1448	; 0x1448 <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <rprintfFloat+0xf4>
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	c2 2e       	mov	r12, r18
     9e6:	d1 2c       	mov	r13, r1
     9e8:	cc 29       	or	r28, r12
     9ea:	dd 29       	or	r29, r13
     9ec:	cd 2b       	or	r28, r29
     9ee:	39 f0       	breq	.+14     	; 0x9fe <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
     9f0:	8b 2d       	mov	r24, r11
     9f2:	80 5d       	subi	r24, 0xD0	; 208
     9f4:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     9f8:	dd 24       	eor	r13, r13
     9fa:	da 94       	dec	r13
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
     9fe:	80 e2       	ldi	r24, 0x20	; 32
     a00:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     a04:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
     a06:	c8 01       	movw	r24, r16
     a08:	b7 01       	movw	r22, r14
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e8       	ldi	r20, 0x80	; 128
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	0e 94 24 0a 	call	0x1448	; 0x1448 <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	19 f4       	brne	.+6      	; 0xa20 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
     a1a:	8e e2       	ldi	r24, 0x2E	; 46
     a1c:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
		}
		
		x -= (digit*place);
     a20:	6b 2d       	mov	r22, r11
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	88 27       	eor	r24, r24
     a26:	77 fd       	sbrc	r23, 7
     a28:	80 95       	com	r24
     a2a:	98 2f       	mov	r25, r24
     a2c:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     a30:	a8 01       	movw	r20, r16
     a32:	97 01       	movw	r18, r14
     a34:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
     a3c:	c4 01       	movw	r24, r8
     a3e:	b3 01       	movw	r22, r6
     a40:	0e 94 bf 09 	call	0x137e	; 0x137e <__subsf3>
     a44:	3b 01       	movw	r6, r22
     a46:	4c 01       	movw	r8, r24
		place /= 10.0;
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 e2       	ldi	r20, 0x20	; 32
     a52:	51 e4       	ldi	r21, 0x41	; 65
     a54:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
     a5c:	a3 94       	inc	r10
     a5e:	a4 14       	cp	r10, r4
     a60:	08 f4       	brcc	.+2      	; 0xa64 <rprintfFloat+0x170>
     a62:	a7 cf       	rjmp	.-178    	; 0x9b2 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	08 95       	ret

00000a86 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	78 88       	ldd	r7, Y+16	; 0x10
     aa6:	c9 88       	ldd	r12, Y+17	; 0x11
     aa8:	da 88       	ldd	r13, Y+18	; 0x12
     aaa:	63 e1       	ldi	r22, 0x13	; 19
     aac:	e6 2e       	mov	r14, r22
     aae:	f1 2c       	mov	r15, r1
     ab0:	ec 0e       	add	r14, r28
     ab2:	fd 1e       	adc	r15, r29
     ab4:	14 c0       	rjmp	.+40     	; 0xade <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
     ab6:	88 23       	and	r24, r24
     ab8:	81 f4       	brne	.+32     	; 0xada <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     ada:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     ade:	96 01       	movw	r18, r12
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     ae4:	77 20       	and	r7, r7
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <rprintf1RamRom+0x6a>
     ae8:	f6 01       	movw	r30, r12
     aea:	69 01       	movw	r12, r18
     aec:	84 91       	lpm	r24, Z+
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <rprintf1RamRom+0x70>
     af0:	f6 01       	movw	r30, r12
     af2:	80 81       	ld	r24, Z
     af4:	69 01       	movw	r12, r18
     af6:	85 32       	cpi	r24, 0x25	; 37
     af8:	f1 f6       	brne	.-68     	; 0xab6 <rprintf1RamRom+0x30>
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     afe:	77 20       	and	r7, r7
     b00:	21 f0       	breq	.+8      	; 0xb0a <rprintf1RamRom+0x84>
     b02:	f6 01       	movw	r30, r12
     b04:	69 01       	movw	r12, r18
     b06:	84 91       	lpm	r24, Z+
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <rprintf1RamRom+0x8a>
     b0a:	f6 01       	movw	r30, r12
     b0c:	80 81       	ld	r24, Z
     b0e:	69 01       	movw	r12, r18
     b10:	84 36       	cpi	r24, 0x64	; 100
     b12:	29 f0       	breq	.+10     	; 0xb1e <rprintf1RamRom+0x98>
     b14:	88 37       	cpi	r24, 0x78	; 120
     b16:	81 f0       	breq	.+32     	; 0xb38 <rprintf1RamRom+0xb2>
     b18:	83 36       	cpi	r24, 0x63	; 99
     b1a:	f9 f6       	brne	.-66     	; 0xada <rprintf1RamRom+0x54>
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <rprintf1RamRom+0xa4>
     b1e:	00 e1       	ldi	r16, 0x10	; 16
     b20:	17 e2       	ldi	r17, 0x27	; 39
     b22:	5a e0       	ldi	r21, 0x0A	; 10
     b24:	a5 2e       	mov	r10, r21
     b26:	b1 2c       	mov	r11, r1
     b28:	0c c0       	rjmp	.+24     	; 0xb42 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
     b2a:	f7 01       	movw	r30, r14
     b2c:	80 81       	ld	r24, Z
     b2e:	22 e0       	ldi	r18, 0x02	; 2
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	e2 0e       	add	r14, r18
     b34:	f3 1e       	adc	r15, r19
     b36:	d1 cf       	rjmp	.-94     	; 0xada <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
     b38:	00 e0       	ldi	r16, 0x00	; 0
     b3a:	10 e1       	ldi	r17, 0x10	; 16
     b3c:	40 e1       	ldi	r20, 0x10	; 16
     b3e:	a4 2e       	mov	r10, r20
     b40:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     b42:	32 e0       	ldi	r19, 0x02	; 2
     b44:	83 2e       	mov	r8, r19
     b46:	91 2c       	mov	r9, r1
     b48:	8e 0c       	add	r8, r14
     b4a:	9f 1c       	adc	r9, r15
     b4c:	f7 01       	movw	r30, r14
     b4e:	e0 80       	ld	r14, Z
     b50:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
     b52:	84 36       	cpi	r24, 0x64	; 100
     b54:	b1 f4       	brne	.+44     	; 0xb82 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
     b56:	f7 fe       	sbrs	r15, 7
     b58:	11 c0       	rjmp	.+34     	; 0xb7c <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
     b5a:	f0 94       	com	r15
     b5c:	e1 94       	neg	r14
     b5e:	f1 08       	sbc	r15, r1
     b60:	f3 94       	inc	r15
					rprintfChar('-');
     b62:	8d e2       	ldi	r24, 0x2D	; 45
     b64:	0e 94 24 03 	call	0x648	; 0x648 <rprintfChar>
     b68:	09 c0       	rjmp	.+18     	; 0xb7c <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     b6a:	c8 01       	movw	r24, r16
     b6c:	6a e0       	ldi	r22, 0x0A	; 10
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
     b74:	8b 01       	movw	r16, r22
     b76:	62 30       	cpi	r22, 0x02	; 2
     b78:	71 05       	cpc	r23, r1
     b7a:	18 f0       	brcs	.+6      	; 0xb82 <rprintf1RamRom+0xfc>
     b7c:	e0 16       	cp	r14, r16
     b7e:	f1 06       	cpc	r15, r17
     b80:	a0 f3       	brcs	.-24     	; 0xb6a <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     b82:	c7 01       	movw	r24, r14
     b84:	b8 01       	movw	r22, r16
     b86:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
     b8a:	86 2f       	mov	r24, r22
     b8c:	0e 94 87 03 	call	0x70e	; 0x70e <rprintfu04>
				u_val %= div_val;
     b90:	c7 01       	movw	r24, r14
     b92:	b8 01       	movw	r22, r16
     b94:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
     b98:	7c 01       	movw	r14, r24
				div_val /= base;
     b9a:	c8 01       	movw	r24, r16
     b9c:	b5 01       	movw	r22, r10
     b9e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
     ba2:	8b 01       	movw	r16, r22
			} while (div_val);
     ba4:	61 15       	cp	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	61 f7       	brne	.-40     	; 0xb82 <rprintf1RamRom+0xfc>
     baa:	74 01       	movw	r14, r8
     bac:	98 cf       	rjmp	.-208    	; 0xade <rprintf1RamRom+0x58>

00000bae <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	40 f4       	brcc	.+16     	; 0xbc2 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
     bb2:	e8 2f       	mov	r30, r24
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	ee 56       	subi	r30, 0x6E	; 110
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	71 83       	std	Z+1, r23	; 0x01
     bc0:	60 83       	st	Z, r22
     bc2:	08 95       	ret

00000bc4 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
     bc4:	9a 01       	movw	r18, r20
     bc6:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
     bc8:	88 23       	and	r24, r24
     bca:	e1 f4       	brne	.+56     	; 0xc04 <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     bcc:	ca 01       	movw	r24, r20
     bce:	b9 01       	movw	r22, r18
     bd0:	60 58       	subi	r22, 0x80	; 128
     bd2:	7b 47       	sbci	r23, 0x7B	; 123
     bd4:	81 4e       	sbci	r24, 0xE1	; 225
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	f3 e0       	ldi	r31, 0x03	; 3
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	88 1f       	adc	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	fa 95       	dec	r31
     be4:	d1 f7       	brne	.-12     	; 0xbda <uartSetBaudRate+0x16>
     be6:	e4 e0       	ldi	r30, 0x04	; 4
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	ea 95       	dec	r30
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <uartSetBaudRate+0x24>
     bf4:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
     bfc:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
     c00:	30 93 c5 00 	sts	0x00C5, r19
     c04:	08 95       	ret

00000c06 <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	a3 e0       	ldi	r26, 0x03	; 3
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	aa 95       	dec	r26
     c12:	e1 f7       	brne	.-8      	; 0xc0c <uartGetRxBuffer+0x6>
     c14:	2a 54       	subi	r18, 0x4A	; 74
     c16:	3e 4f       	sbci	r19, 0xFE	; 254
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
     c18:	c9 01       	movw	r24, r18
     c1a:	08 95       	ret

00000c1c <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	b3 e0       	ldi	r27, 0x03	; 3
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	ba 95       	dec	r27
     c28:	e1 f7       	brne	.-8      	; 0xc22 <uartGetTxBuffer+0x6>
     c2a:	26 52       	subi	r18, 0x26	; 38
     c2c:	3e 4f       	sbci	r19, 0xFE	; 254
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
     c2e:	c9 01       	movw	r24, r18
     c30:	08 95       	ret

00000c32 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
     c32:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     c34:	88 23       	and	r24, r24
     c36:	31 f4       	brne	.+12     	; 0xc44 <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c38:	80 91 c0 00 	lds	r24, 0x00C0
     c3c:	85 ff       	sbrs	r24, 5
     c3e:	fc cf       	rjmp	.-8      	; 0xc38 <uartSendByte+0x6>
		outb(UDR0, txData);
     c40:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ee 54       	subi	r30, 0x4E	; 78
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	10 82       	st	Z, r1
}
     c4c:	08 95       	ret

00000c4e <uart0SendByte>:

void uart0SendByte(u08 data)
{
     c4e:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
     c50:	80 91 c0 00 	lds	r24, 0x00C0
     c54:	85 ff       	sbrs	r24, 5
     c56:	fc cf       	rjmp	.-8      	; 0xc50 <uart0SendByte+0x2>
		outb(UDR0, txData);
     c58:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     c5c:	10 92 b2 01 	sts	0x01B2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
     c60:	08 95       	ret

00000c62 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	e8 2f       	mov	r30, r24
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	8a 95       	dec	r24
     c70:	e1 f7       	brne	.-8      	; 0xc6a <uartReceiveBufferIsEmpty+0x8>
     c72:	e6 54       	subi	r30, 0x46	; 70
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	09 f4       	brne	.+2      	; 0xc80 <uartReceiveBufferIsEmpty+0x1e>
     c7e:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
     c80:	82 2f       	mov	r24, r18
     c82:	08 95       	ret

00000c84 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
     c88:	88 23       	and	r24, r24
     c8a:	11 f4       	brne	.+4      	; 0xc90 <uartReceiveService+0xc>
		c = inb(UDR0);
     c8c:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	e9 01       	movw	r28, r18
     c96:	cc 0f       	add	r28, r28
     c98:	dd 1f       	adc	r29, r29
     c9a:	fe 01       	movw	r30, r28
     c9c:	ee 56       	subi	r30, 0x6E	; 110
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	89 2b       	or	r24, r25
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
     ca8:	01 90       	ld	r0, Z+
     caa:	f0 81       	ld	r31, Z
     cac:	e0 2d       	mov	r30, r0
     cae:	86 2f       	mov	r24, r22
     cb0:	09 95       	icall
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	9a 95       	dec	r25
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <uartReceiveService+0x32>
     cbe:	c9 01       	movw	r24, r18
     cc0:	8a 54       	subi	r24, 0x4A	; 74
     cc2:	9e 4f       	sbci	r25, 0xFE	; 254
     cc4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <bufferAddToEnd>
     cc8:	88 23       	and	r24, r24
     cca:	41 f4       	brne	.+16     	; 0xcdc <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
     ccc:	fe 01       	movw	r30, r28
     cce:	e6 50       	subi	r30, 0x06	; 6
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
		}
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
	uartReceiveService(0);
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 42 06 	call	0xc84	; 0xc84 <uartReceiveService>
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
     d2c:	8f 92       	push	r8
     d2e:	9f 92       	push	r9
     d30:	af 92       	push	r10
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	88 2e       	mov	r8, r24
     d46:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
     d48:	e8 2e       	mov	r14, r24
     d4a:	ff 24       	eor	r15, r15
     d4c:	f7 01       	movw	r30, r14
     d4e:	13 e0       	ldi	r17, 0x03	; 3
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	1a 95       	dec	r17
     d56:	e1 f7       	brne	.-8      	; 0xd50 <uartSendBuffer+0x24>
     d58:	e2 52       	subi	r30, 0x22	; 34
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	20 81       	ld	r18, Z
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	24 0f       	add	r18, r20
     d62:	35 1f       	adc	r19, r21
     d64:	f7 01       	movw	r30, r14
     d66:	73 e0       	ldi	r23, 0x03	; 3
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	7a 95       	dec	r23
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <uartSendBuffer+0x3c>
     d70:	e4 52       	subi	r30, 0x24	; 36
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	28 17       	cp	r18, r24
     d7a:	39 07       	cpc	r19, r25
     d7c:	b0 f5       	brcc	.+108    	; 0xdea <uartSendBuffer+0xbe>
     d7e:	41 15       	cp	r20, r1
     d80:	51 05       	cpc	r21, r1
     d82:	99 f1       	breq	.+102    	; 0xdea <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
     d84:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
     d86:	67 01       	movw	r12, r14
     d88:	63 e0       	ldi	r22, 0x03	; 3
     d8a:	cc 0c       	add	r12, r12
     d8c:	dd 1c       	adc	r13, r13
     d8e:	6a 95       	dec	r22
     d90:	e1 f7       	brne	.-8      	; 0xd8a <uartSendBuffer+0x5e>
     d92:	8a ed       	ldi	r24, 0xDA	; 218
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	c8 0e       	add	r12, r24
     d98:	d9 1e       	adc	r13, r25
     d9a:	8d 01       	movw	r16, r26
     d9c:	c0 e0       	ldi	r28, 0x00	; 0
     d9e:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
     da0:	5a 01       	movw	r10, r20
     da2:	08 94       	sec
     da4:	a1 08       	sbc	r10, r1
     da6:	b1 08       	sbc	r11, r1
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <uartSendBuffer+0x8a>
     daa:	c6 01       	movw	r24, r12
     dac:	f8 01       	movw	r30, r16
     dae:	60 81       	ld	r22, Z
     db0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <bufferAddToEnd>
     db4:	21 96       	adiw	r28, 0x01	; 1
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	ca 15       	cp	r28, r10
     dbc:	db 05       	cpc	r29, r11
     dbe:	a8 f3       	brcs	.-22     	; 0xdaa <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
     dc0:	f7 01       	movw	r30, r14
     dc2:	ea 52       	subi	r30, 0x2A	; 42
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     dca:	88 20       	and	r8, r8
     dcc:	31 f4       	brne	.+12     	; 0xdda <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     dce:	80 91 c0 00 	lds	r24, 0x00C0
     dd2:	85 ff       	sbrs	r24, 5
     dd4:	fc cf       	rjmp	.-8      	; 0xdce <uartSendBuffer+0xa2>
		outb(UDR0, txData);
     dd6:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     dda:	82 eb       	ldi	r24, 0xB2	; 178
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	e8 0e       	add	r14, r24
     de0:	f9 1e       	adc	r15, r25
     de2:	f7 01       	movw	r30, r14
     de4:	10 82       	st	Z, r1
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	01 c0       	rjmp	.+2      	; 0xdec <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
     dea:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	8f 90       	pop	r8
     e04:	08 95       	ret

00000e06 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	23 e0       	ldi	r18, 0x03	; 3
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	2a 95       	dec	r18
     e10:	e1 f7       	brne	.-8      	; 0xe0a <uartAddToTxBuffer+0x4>
     e12:	86 52       	subi	r24, 0x26	; 38
     e14:	9e 4f       	sbci	r25, 0xFE	; 254
     e16:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <bufferAddToEnd>
}
     e1a:	08 95       	ret

00000e1c <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
     e1c:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
     e1e:	8a ed       	ldi	r24, 0xDA	; 218
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
     e26:	08 95       	ret

00000e28 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
     e2e:	a8 2f       	mov	r26, r24
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ed 01       	movw	r28, r26
     e34:	ca 52       	subi	r28, 0x2A	; 42
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	88 81       	ld	r24, Y
     e3a:	88 23       	and	r24, r24
     e3c:	b1 f0       	breq	.+44     	; 0xe6a <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
     e3e:	fd 01       	movw	r30, r26
     e40:	33 e0       	ldi	r19, 0x03	; 3
     e42:	ee 0f       	add	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	3a 95       	dec	r19
     e48:	e1 f7       	brne	.-8      	; 0xe42 <uartTransmitService+0x1a>
     e4a:	e2 52       	subi	r30, 0x22	; 34
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	89 2b       	or	r24, r25
     e54:	49 f0       	breq	.+18     	; 0xe68 <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
     e56:	23 30       	cpi	r18, 0x03	; 3
     e58:	61 f4       	brne	.+24     	; 0xe72 <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
     e5a:	8a ed       	ldi	r24, 0xDA	; 218
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 13 08 	call	0x1026	; 0x1026 <bufferGetFromFront>
     e62:	80 93 c6 00 	sts	0x00C6, r24
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
     e68:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
     e6a:	ae 54       	subi	r26, 0x4E	; 78
     e6c:	be 4f       	sbci	r27, 0xFE	; 254
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	8c 93       	st	X, r24
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
	uartTransmitService(0);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 14 07 	call	0xe28	; 0xe28 <uartTransmitService>
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
     eca:	c8 2f       	mov	r28, r24
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
     ece:	fe 01       	movw	r30, r28
     ed0:	ea 52       	subi	r30, 0x2A	; 42
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
     ed8:	ce 01       	movw	r24, r28
     eda:	43 e0       	ldi	r20, 0x03	; 3
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	4a 95       	dec	r20
     ee2:	e1 f7       	brne	.-8      	; 0xedc <uartSendTxBuffer+0x1a>
     ee4:	86 52       	subi	r24, 0x26	; 38
     ee6:	9e 4f       	sbci	r25, 0xFE	; 254
     ee8:	0e 94 13 08 	call	0x1026	; 0x1026 <bufferGetFromFront>
     eec:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
     eee:	11 23       	and	r17, r17
     ef0:	31 f4       	brne	.+12     	; 0xefe <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
     ef2:	80 91 c0 00 	lds	r24, 0x00C0
     ef6:	85 ff       	sbrs	r24, 5
     ef8:	fc cf       	rjmp	.-8      	; 0xef2 <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
     efa:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
     efe:	ce 54       	subi	r28, 0x4E	; 78
     f00:	de 4f       	sbci	r29, 0xFE	; 254
     f02:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	08 95       	ret

00000f0c <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	73 e0       	ldi	r23, 0x03	; 3
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	7a 95       	dec	r23
     f20:	e1 f7       	brne	.-8      	; 0xf1a <uartReceiveByte+0xe>
     f22:	e8 54       	subi	r30, 0x48	; 72
     f24:	fe 4f       	sbci	r31, 0xFE	; 254
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	89 2b       	or	r24, r25
     f2c:	c9 f0       	breq	.+50     	; 0xf60 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
     f2e:	f9 01       	movw	r30, r18
     f30:	63 e0       	ldi	r22, 0x03	; 3
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	6a 95       	dec	r22
     f38:	e1 f7       	brne	.-8      	; 0xf32 <uartReceiveByte+0x26>
     f3a:	e6 54       	subi	r30, 0x46	; 70
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	89 2b       	or	r24, r25
     f44:	69 f0       	breq	.+26     	; 0xf60 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
     f46:	53 e0       	ldi	r21, 0x03	; 3
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	5a 95       	dec	r21
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <uartReceiveByte+0x3c>
     f50:	c9 01       	movw	r24, r18
     f52:	8a 54       	subi	r24, 0x4A	; 74
     f54:	9e 4f       	sbci	r25, 0xFE	; 254
     f56:	0e 94 13 08 	call	0x1026	; 0x1026 <bufferGetFromFront>
     f5a:	88 83       	st	Y, r24
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <uartReceiveByte+0x56>
			return TRUE;
     f60:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	be 01       	movw	r22, r28
     f76:	6f 5f       	subi	r22, 0xFF	; 255
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	0e 94 86 07 	call	0xf0c	; 0xf0c <uartReceiveByte>
     f7e:	88 23       	and	r24, r24
     f80:	19 f4       	brne	.+6      	; 0xf88 <uart0GetByte+0x20>
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <uart0GetByte+0x26>
		return c;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
     f8e:	c9 01       	movw	r24, r18
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	e3 e0       	ldi	r30, 0x03	; 3
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	ea 95       	dec	r30
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <uartFlushReceiveBuffer+0x4>
     fa4:	8a 54       	subi	r24, 0x4A	; 74
     fa6:	9e 4f       	sbci	r25, 0xFE	; 254
     fa8:	0e 94 af 08 	call	0x115e	; 0x115e <bufferFlush>
}
     fac:	08 95       	ret

00000fae <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
     fae:	86 eb       	ldi	r24, 0xB6	; 182
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	71 e0       	ldi	r23, 0x01	; 1
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	0e 94 06 08 	call	0x100c	; 0x100c <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
     fbe:	8a ed       	ldi	r24, 0xDA	; 218
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	62 e8       	ldi	r22, 0x82	; 130
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	40 e1       	ldi	r20, 0x10	; 16
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	0e 94 06 08 	call	0x100c	; 0x100c <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
     fce:	08 95       	ret

00000fd0 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
     fd0:	0e 94 d7 07 	call	0xfae	; 0xfae <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
     fd4:	10 92 93 01 	sts	0x0193, r1
     fd8:	10 92 92 01 	sts	0x0192, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     fdc:	88 ed       	ldi	r24, 0xD8	; 216
     fde:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	55 e2       	ldi	r21, 0x25	; 37
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	80 93 b2 01 	sts	0x01B2, r24
	uartBufferedTx[0] = FALSE;
     ff6:	10 92 d6 01 	sts	0x01D6, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
     ffa:	10 92 fb 01 	sts	0x01FB, r1
     ffe:	10 92 fa 01 	sts	0x01FA, r1
	// enable interrupts
	sei();
    1002:	78 94       	sei
}
    1004:	08 95       	ret

00001006 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    1006:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <uart0Init>
}
    100a:	08 95       	ret

0000100c <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    100c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    100e:	8f b7       	in	r24, 0x3f	; 63
    1010:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    1012:	71 83       	std	Z+1, r23	; 0x01
    1014:	60 83       	st	Z, r22
	buffer->size = size;
    1016:	53 83       	std	Z+3, r21	; 0x03
    1018:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    101a:	17 82       	std	Z+7, r1	; 0x07
    101c:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    101e:	15 82       	std	Z+5, r1	; 0x05
    1020:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1022:	8f bf       	out	0x3f, r24	; 63
}
    1024:	08 95       	ret

00001026 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    1026:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    1028:	4f b7       	in	r20, 0x3f	; 63
    102a:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	15 97       	sbiw	r26, 0x05	; 5
    1034:	89 2b       	or	r24, r25
    1036:	11 f4       	brne	.+4      	; 0x103c <bufferGetFromFront+0x16>
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	25 c0       	rjmp	.+74     	; 0x1086 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    103c:	16 96       	adiw	r26, 0x06	; 6
    103e:	8d 91       	ld	r24, X+
    1040:	9c 91       	ld	r25, X
    1042:	17 97       	sbiw	r26, 0x07	; 7
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	11 97       	sbiw	r26, 0x01	; 1
    104a:	e8 0f       	add	r30, r24
    104c:	f9 1f       	adc	r31, r25
    104e:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	17 96       	adiw	r26, 0x07	; 7
    1054:	9c 93       	st	X, r25
    1056:	8e 93       	st	-X, r24
    1058:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	2d 91       	ld	r18, X+
    105e:	3c 91       	ld	r19, X
    1060:	13 97       	sbiw	r26, 0x03	; 3
    1062:	82 17       	cp	r24, r18
    1064:	93 07       	cpc	r25, r19
    1066:	30 f0       	brcs	.+12     	; 0x1074 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    1068:	82 1b       	sub	r24, r18
    106a:	93 0b       	sbc	r25, r19
    106c:	17 96       	adiw	r26, 0x07	; 7
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
    1072:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    1074:	14 96       	adiw	r26, 0x04	; 4
    1076:	8d 91       	ld	r24, X+
    1078:	9c 91       	ld	r25, X
    107a:	15 97       	sbiw	r26, 0x05	; 5
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	15 96       	adiw	r26, 0x05	; 5
    1080:	9c 93       	st	X, r25
    1082:	8e 93       	st	-X, r24
    1084:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    1086:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    1088:	8e 2f       	mov	r24, r30
    108a:	08 95       	ret

0000108c <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    108c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    108e:	4f b7       	in	r20, 0x3f	; 63
    1090:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    1092:	84 81       	ldd	r24, Z+4	; 0x04
    1094:	95 81       	ldd	r25, Z+5	; 0x05
    1096:	68 17       	cp	r22, r24
    1098:	79 07       	cpc	r23, r25
    109a:	b0 f4       	brcc	.+44     	; 0x10c8 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    109c:	86 81       	ldd	r24, Z+6	; 0x06
    109e:	97 81       	ldd	r25, Z+7	; 0x07
    10a0:	86 0f       	add	r24, r22
    10a2:	97 1f       	adc	r25, r23
    10a4:	97 83       	std	Z+7, r25	; 0x07
    10a6:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    10a8:	22 81       	ldd	r18, Z+2	; 0x02
    10aa:	33 81       	ldd	r19, Z+3	; 0x03
    10ac:	82 17       	cp	r24, r18
    10ae:	93 07       	cpc	r25, r19
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	97 83       	std	Z+7, r25	; 0x07
    10b8:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    10ba:	84 81       	ldd	r24, Z+4	; 0x04
    10bc:	95 81       	ldd	r25, Z+5	; 0x05
    10be:	86 1b       	sub	r24, r22
    10c0:	97 0b       	sbc	r25, r23
    10c2:	95 83       	std	Z+5, r25	; 0x05
    10c4:	84 83       	std	Z+4, r24	; 0x04
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    10c8:	15 82       	std	Z+5, r1	; 0x05
    10ca:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    10cc:	4f bf       	out	0x3f, r20	; 63
}
    10ce:	08 95       	ret

000010d0 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    10d0:	fc 01       	movw	r30, r24
    10d2:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    10d4:	2f b7       	in	r18, 0x3f	; 63
    10d6:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    10d8:	2f bf       	out	0x3f, r18	; 63
    10da:	26 81       	ldd	r18, Z+6	; 0x06
    10dc:	37 81       	ldd	r19, Z+7	; 0x07
    10de:	62 81       	ldd	r22, Z+2	; 0x02
    10e0:	73 81       	ldd	r23, Z+3	; 0x03
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
    10ea:	01 90       	ld	r0, Z+
    10ec:	f0 81       	ld	r31, Z
    10ee:	e0 2d       	mov	r30, r0
    10f0:	e8 0f       	add	r30, r24
    10f2:	f9 1f       	adc	r31, r25
	return data;
}
    10f4:	80 81       	ld	r24, Z
    10f6:	08 95       	ret

000010f8 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	ec 01       	movw	r28, r24
    1100:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    1102:	4f b7       	in	r20, 0x3f	; 63
    1104:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	6a 81       	ldd	r22, Y+2	; 0x02
    110c:	7b 81       	ldd	r23, Y+3	; 0x03
    110e:	26 17       	cp	r18, r22
    1110:	37 07       	cpc	r19, r23
    1112:	98 f4       	brcc	.+38     	; 0x113a <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    1114:	8e 81       	ldd	r24, Y+6	; 0x06
    1116:	9f 81       	ldd	r25, Y+7	; 0x07
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
    1120:	e8 81       	ld	r30, Y
    1122:	f9 81       	ldd	r31, Y+1	; 0x01
    1124:	e8 0f       	add	r30, r24
    1126:	f9 1f       	adc	r31, r25
    1128:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    1134:	4f bf       	out	0x3f, r20	; 63
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	02 c0       	rjmp	.+4      	; 0x113e <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    113a:	4f bf       	out	0x3f, r20	; 63
    113c:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	08 95       	ret

00001146 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    1146:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1148:	8f b7       	in	r24, 0x3f	; 63
    114a:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    114c:	8f bf       	out	0x3f, r24	; 63
    114e:	22 81       	ldd	r18, Z+2	; 0x02
    1150:	33 81       	ldd	r19, Z+3	; 0x03
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	95 81       	ldd	r25, Z+5	; 0x05
    1156:	28 1b       	sub	r18, r24
    1158:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    115a:	c9 01       	movw	r24, r18
    115c:	08 95       	ret

0000115e <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    115e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1160:	8f b7       	in	r24, 0x3f	; 63
    1162:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    1164:	15 82       	std	Z+5, r1	; 0x05
    1166:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1168:	8f bf       	out	0x3f, r24	; 63
}
    116a:	08 95       	ret

0000116c <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    116c:	60 91 9a 01 	lds	r22, 0x019A
    1170:	70 91 9b 01 	lds	r23, 0x019B
	return wheel_left_tick_counter;
}
    1174:	80 91 9c 01 	lds	r24, 0x019C
    1178:	90 91 9d 01 	lds	r25, 0x019D
    117c:	08 95       	ret

0000117e <get_right_count>:

u32 get_right_count(void){
    117e:	60 91 9e 01 	lds	r22, 0x019E
    1182:	70 91 9f 01 	lds	r23, 0x019F
	return wheel_right_tick_counter;
}
    1186:	80 91 a0 01 	lds	r24, 0x01A0
    118a:	90 91 a1 01 	lds	r25, 0x01A1
    118e:	08 95       	ret

00001190 <__vector_5>:

SIGNAL(PCINT2_vect){
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    11a4:	29 b1       	in	r18, 0x09	; 9
    11a6:	20 78       	andi	r18, 0x80	; 128
    11a8:	20 93 a8 01 	sts	0x01A8, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    11ac:	80 91 a9 01 	lds	r24, 0x01A9
    11b0:	82 17       	cp	r24, r18
    11b2:	58 f4       	brcc	.+22     	; 0x11ca <__vector_5+0x3a>
    11b4:	80 91 9a 01 	lds	r24, 0x019A
    11b8:	90 91 9b 01 	lds	r25, 0x019B
    11bc:	a0 91 9c 01 	lds	r26, 0x019C
    11c0:	b0 91 9d 01 	lds	r27, 0x019D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    11c4:	18 9b       	sbis	0x03, 0	; 3
    11c6:	0b c0       	rjmp	.+22     	; 0x11de <__vector_5+0x4e>
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <__vector_5+0x56>
    11ca:	80 91 9a 01 	lds	r24, 0x019A
    11ce:	90 91 9b 01 	lds	r25, 0x019B
    11d2:	a0 91 9c 01 	lds	r26, 0x019C
    11d6:	b0 91 9d 01 	lds	r27, 0x019D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    11da:	18 9b       	sbis	0x03, 0	; 3
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	b1 1d       	adc	r27, r1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	a1 09       	sbc	r26, r1
    11ea:	b1 09       	sbc	r27, r1
    11ec:	80 93 9a 01 	sts	0x019A, r24
    11f0:	90 93 9b 01 	sts	0x019B, r25
    11f4:	a0 93 9c 01 	sts	0x019C, r26
    11f8:	b0 93 9d 01 	sts	0x019D, r27
		}
	}
	pin_level_past = pin_level_current;
    11fc:	20 93 a9 01 	sts	0x01A9, r18
	
}
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <__vector_3>:
SIGNAL(PCINT0_vect){
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    122c:	33 b1       	in	r19, 0x03	; 3
    122e:	31 70       	andi	r19, 0x01	; 1
    1230:	30 93 a6 01 	sts	0x01A6, r19
	PINB4_current = bit_is_set(PINB,4);
    1234:	23 b1       	in	r18, 0x03	; 3
    1236:	20 71       	andi	r18, 0x10	; 16
    1238:	20 93 a4 01 	sts	0x01A4, r18
	PINB5_current = bit_is_set(PINB,5);
    123c:	43 b1       	in	r20, 0x03	; 3
    123e:	40 72       	andi	r20, 0x20	; 32
    1240:	40 93 a2 01 	sts	0x01A2, r20

	if(PINB0_current != PINB0_past){
    1244:	80 91 a7 01 	lds	r24, 0x01A7
    1248:	38 17       	cp	r19, r24
    124a:	49 f1       	breq	.+82     	; 0x129e <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    124c:	83 17       	cp	r24, r19
    124e:	58 f4       	brcc	.+22     	; 0x1266 <__vector_3+0x52>
    1250:	80 91 9a 01 	lds	r24, 0x019A
    1254:	90 91 9b 01 	lds	r25, 0x019B
    1258:	a0 91 9c 01 	lds	r26, 0x019C
    125c:	b0 91 9d 01 	lds	r27, 0x019D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    1260:	4f 9b       	sbis	0x09, 7	; 9
    1262:	0b c0       	rjmp	.+22     	; 0x127a <__vector_3+0x66>
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <__vector_3+0x6e>
    1266:	80 91 9a 01 	lds	r24, 0x019A
    126a:	90 91 9b 01 	lds	r25, 0x019B
    126e:	a0 91 9c 01 	lds	r26, 0x019C
    1272:	b0 91 9d 01 	lds	r27, 0x019D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    1276:	4f 9b       	sbis	0x09, 7	; 9
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	a1 09       	sbc	r26, r1
    127e:	b1 09       	sbc	r27, r1
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	a1 1d       	adc	r26, r1
    1286:	b1 1d       	adc	r27, r1
    1288:	80 93 9a 01 	sts	0x019A, r24
    128c:	90 93 9b 01 	sts	0x019B, r25
    1290:	a0 93 9c 01 	sts	0x019C, r26
    1294:	b0 93 9d 01 	sts	0x019D, r27
			}
		}
		PINB0_past = PINB0_current;
    1298:	30 93 a7 01 	sts	0x01A7, r19
    129c:	57 c0       	rjmp	.+174    	; 0x134c <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    129e:	80 91 a5 01 	lds	r24, 0x01A5
    12a2:	28 17       	cp	r18, r24
    12a4:	49 f1       	breq	.+82     	; 0x12f8 <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    12a6:	82 17       	cp	r24, r18
    12a8:	58 f4       	brcc	.+22     	; 0x12c0 <__vector_3+0xac>
    12aa:	80 91 9e 01 	lds	r24, 0x019E
    12ae:	90 91 9f 01 	lds	r25, 0x019F
    12b2:	a0 91 a0 01 	lds	r26, 0x01A0
    12b6:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    12ba:	1d 9b       	sbis	0x03, 5	; 3
    12bc:	0b c0       	rjmp	.+22     	; 0x12d4 <__vector_3+0xc0>
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <__vector_3+0xc8>
    12c0:	80 91 9e 01 	lds	r24, 0x019E
    12c4:	90 91 9f 01 	lds	r25, 0x019F
    12c8:	a0 91 a0 01 	lds	r26, 0x01A0
    12cc:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    12d0:	1d 9b       	sbis	0x03, 5	; 3
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	a1 09       	sbc	r26, r1
    12d8:	b1 09       	sbc	r27, r1
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	a1 1d       	adc	r26, r1
    12e0:	b1 1d       	adc	r27, r1
    12e2:	80 93 9e 01 	sts	0x019E, r24
    12e6:	90 93 9f 01 	sts	0x019F, r25
    12ea:	a0 93 a0 01 	sts	0x01A0, r26
    12ee:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB4_past = PINB4_current;
    12f2:	20 93 a5 01 	sts	0x01A5, r18
    12f6:	2a c0       	rjmp	.+84     	; 0x134c <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    12f8:	80 91 a3 01 	lds	r24, 0x01A3
    12fc:	84 17       	cp	r24, r20
    12fe:	58 f4       	brcc	.+22     	; 0x1316 <__vector_3+0x102>
    1300:	80 91 9e 01 	lds	r24, 0x019E
    1304:	90 91 9f 01 	lds	r25, 0x019F
    1308:	a0 91 a0 01 	lds	r26, 0x01A0
    130c:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    1310:	1c 9b       	sbis	0x03, 4	; 3
    1312:	0b c0       	rjmp	.+22     	; 0x132a <__vector_3+0x116>
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <__vector_3+0x11e>
    1316:	80 91 9e 01 	lds	r24, 0x019E
    131a:	90 91 9f 01 	lds	r25, 0x019F
    131e:	a0 91 a0 01 	lds	r26, 0x01A0
    1322:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    1326:	1c 9b       	sbis	0x03, 4	; 3
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	a1 1d       	adc	r26, r1
    132e:	b1 1d       	adc	r27, r1
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	a1 09       	sbc	r26, r1
    1336:	b1 09       	sbc	r27, r1
    1338:	80 93 9e 01 	sts	0x019E, r24
    133c:	90 93 9f 01 	sts	0x019F, r25
    1340:	a0 93 a0 01 	sts	0x01A0, r26
    1344:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB5_past = PINB5_current;
    1348:	40 93 a3 01 	sts	0x01A3, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_default>:


ISR(BADISR_vect){
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
	
}
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <exit>:
    1378:	f8 94       	cli
    137a:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_exit>

0000137e <__subsf3>:
    137e:	50 58       	subi	r21, 0x80	; 128

00001380 <__addsf3>:
    1380:	bb 27       	eor	r27, r27
    1382:	aa 27       	eor	r26, r26
    1384:	0e d0       	rcall	.+28     	; 0x13a2 <__addsf3x>
    1386:	70 c1       	rjmp	.+736    	; 0x1668 <__fp_round>
    1388:	61 d1       	rcall	.+706    	; 0x164c <__fp_pscA>
    138a:	30 f0       	brcs	.+12     	; 0x1398 <__addsf3+0x18>
    138c:	66 d1       	rcall	.+716    	; 0x165a <__fp_pscB>
    138e:	20 f0       	brcs	.+8      	; 0x1398 <__addsf3+0x18>
    1390:	31 f4       	brne	.+12     	; 0x139e <__addsf3+0x1e>
    1392:	9f 3f       	cpi	r25, 0xFF	; 255
    1394:	11 f4       	brne	.+4      	; 0x139a <__addsf3+0x1a>
    1396:	1e f4       	brtc	.+6      	; 0x139e <__addsf3+0x1e>
    1398:	56 c1       	rjmp	.+684    	; 0x1646 <__fp_nan>
    139a:	0e f4       	brtc	.+2      	; 0x139e <__addsf3+0x1e>
    139c:	e0 95       	com	r30
    139e:	e7 fb       	bst	r30, 7
    13a0:	4c c1       	rjmp	.+664    	; 0x163a <__fp_inf>

000013a2 <__addsf3x>:
    13a2:	e9 2f       	mov	r30, r25
    13a4:	72 d1       	rcall	.+740    	; 0x168a <__fp_split3>
    13a6:	80 f3       	brcs	.-32     	; 0x1388 <__addsf3+0x8>
    13a8:	ba 17       	cp	r27, r26
    13aa:	62 07       	cpc	r22, r18
    13ac:	73 07       	cpc	r23, r19
    13ae:	84 07       	cpc	r24, r20
    13b0:	95 07       	cpc	r25, r21
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <__addsf3x+0x18>
    13b4:	71 f4       	brne	.+28     	; 0x13d2 <__addsf3x+0x30>
    13b6:	9e f5       	brtc	.+102    	; 0x141e <__addsf3x+0x7c>
    13b8:	8a c1       	rjmp	.+788    	; 0x16ce <__fp_zero>
    13ba:	0e f4       	brtc	.+2      	; 0x13be <__addsf3x+0x1c>
    13bc:	e0 95       	com	r30
    13be:	0b 2e       	mov	r0, r27
    13c0:	ba 2f       	mov	r27, r26
    13c2:	a0 2d       	mov	r26, r0
    13c4:	0b 01       	movw	r0, r22
    13c6:	b9 01       	movw	r22, r18
    13c8:	90 01       	movw	r18, r0
    13ca:	0c 01       	movw	r0, r24
    13cc:	ca 01       	movw	r24, r20
    13ce:	a0 01       	movw	r20, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	ff 27       	eor	r31, r31
    13d4:	59 1b       	sub	r21, r25
    13d6:	99 f0       	breq	.+38     	; 0x13fe <__addsf3x+0x5c>
    13d8:	59 3f       	cpi	r21, 0xF9	; 249
    13da:	50 f4       	brcc	.+20     	; 0x13f0 <__addsf3x+0x4e>
    13dc:	50 3e       	cpi	r21, 0xE0	; 224
    13de:	68 f1       	brcs	.+90     	; 0x143a <__addsf3x+0x98>
    13e0:	1a 16       	cp	r1, r26
    13e2:	f0 40       	sbci	r31, 0x00	; 0
    13e4:	a2 2f       	mov	r26, r18
    13e6:	23 2f       	mov	r18, r19
    13e8:	34 2f       	mov	r19, r20
    13ea:	44 27       	eor	r20, r20
    13ec:	58 5f       	subi	r21, 0xF8	; 248
    13ee:	f3 cf       	rjmp	.-26     	; 0x13d6 <__addsf3x+0x34>
    13f0:	46 95       	lsr	r20
    13f2:	37 95       	ror	r19
    13f4:	27 95       	ror	r18
    13f6:	a7 95       	ror	r26
    13f8:	f0 40       	sbci	r31, 0x00	; 0
    13fa:	53 95       	inc	r21
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__addsf3x+0x4e>
    13fe:	7e f4       	brtc	.+30     	; 0x141e <__addsf3x+0x7c>
    1400:	1f 16       	cp	r1, r31
    1402:	ba 0b       	sbc	r27, r26
    1404:	62 0b       	sbc	r22, r18
    1406:	73 0b       	sbc	r23, r19
    1408:	84 0b       	sbc	r24, r20
    140a:	ba f0       	brmi	.+46     	; 0x143a <__addsf3x+0x98>
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	a1 f0       	breq	.+40     	; 0x1438 <__addsf3x+0x96>
    1410:	ff 0f       	add	r31, r31
    1412:	bb 1f       	adc	r27, r27
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	c2 f7       	brpl	.-16     	; 0x140c <__addsf3x+0x6a>
    141c:	0e c0       	rjmp	.+28     	; 0x143a <__addsf3x+0x98>
    141e:	ba 0f       	add	r27, r26
    1420:	62 1f       	adc	r22, r18
    1422:	73 1f       	adc	r23, r19
    1424:	84 1f       	adc	r24, r20
    1426:	48 f4       	brcc	.+18     	; 0x143a <__addsf3x+0x98>
    1428:	87 95       	ror	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	f7 95       	ror	r31
    1432:	9e 3f       	cpi	r25, 0xFE	; 254
    1434:	08 f0       	brcs	.+2      	; 0x1438 <__addsf3x+0x96>
    1436:	b3 cf       	rjmp	.-154    	; 0x139e <__addsf3+0x1e>
    1438:	93 95       	inc	r25
    143a:	88 0f       	add	r24, r24
    143c:	08 f0       	brcs	.+2      	; 0x1440 <__addsf3x+0x9e>
    143e:	99 27       	eor	r25, r25
    1440:	ee 0f       	add	r30, r30
    1442:	97 95       	ror	r25
    1444:	87 95       	ror	r24
    1446:	08 95       	ret

00001448 <__cmpsf2>:
    1448:	d4 d0       	rcall	.+424    	; 0x15f2 <__fp_cmp>
    144a:	08 f4       	brcc	.+2      	; 0x144e <__cmpsf2+0x6>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	08 95       	ret

00001450 <__divsf3>:
    1450:	0c d0       	rcall	.+24     	; 0x146a <__divsf3x>
    1452:	0a c1       	rjmp	.+532    	; 0x1668 <__fp_round>
    1454:	02 d1       	rcall	.+516    	; 0x165a <__fp_pscB>
    1456:	40 f0       	brcs	.+16     	; 0x1468 <__divsf3+0x18>
    1458:	f9 d0       	rcall	.+498    	; 0x164c <__fp_pscA>
    145a:	30 f0       	brcs	.+12     	; 0x1468 <__divsf3+0x18>
    145c:	21 f4       	brne	.+8      	; 0x1466 <__divsf3+0x16>
    145e:	5f 3f       	cpi	r21, 0xFF	; 255
    1460:	19 f0       	breq	.+6      	; 0x1468 <__divsf3+0x18>
    1462:	eb c0       	rjmp	.+470    	; 0x163a <__fp_inf>
    1464:	51 11       	cpse	r21, r1
    1466:	34 c1       	rjmp	.+616    	; 0x16d0 <__fp_szero>
    1468:	ee c0       	rjmp	.+476    	; 0x1646 <__fp_nan>

0000146a <__divsf3x>:
    146a:	0f d1       	rcall	.+542    	; 0x168a <__fp_split3>
    146c:	98 f3       	brcs	.-26     	; 0x1454 <__divsf3+0x4>

0000146e <__divsf3_pse>:
    146e:	99 23       	and	r25, r25
    1470:	c9 f3       	breq	.-14     	; 0x1464 <__divsf3+0x14>
    1472:	55 23       	and	r21, r21
    1474:	b1 f3       	breq	.-20     	; 0x1462 <__divsf3+0x12>
    1476:	95 1b       	sub	r25, r21
    1478:	55 0b       	sbc	r21, r21
    147a:	bb 27       	eor	r27, r27
    147c:	aa 27       	eor	r26, r26
    147e:	62 17       	cp	r22, r18
    1480:	73 07       	cpc	r23, r19
    1482:	84 07       	cpc	r24, r20
    1484:	38 f0       	brcs	.+14     	; 0x1494 <__divsf3_pse+0x26>
    1486:	9f 5f       	subi	r25, 0xFF	; 255
    1488:	5f 4f       	sbci	r21, 0xFF	; 255
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	44 1f       	adc	r20, r20
    1490:	aa 1f       	adc	r26, r26
    1492:	a9 f3       	breq	.-22     	; 0x147e <__divsf3_pse+0x10>
    1494:	33 d0       	rcall	.+102    	; 0x14fc <__divsf3_pse+0x8e>
    1496:	0e 2e       	mov	r0, r30
    1498:	3a f0       	brmi	.+14     	; 0x14a8 <__divsf3_pse+0x3a>
    149a:	e0 e8       	ldi	r30, 0x80	; 128
    149c:	30 d0       	rcall	.+96     	; 0x14fe <__divsf3_pse+0x90>
    149e:	91 50       	subi	r25, 0x01	; 1
    14a0:	50 40       	sbci	r21, 0x00	; 0
    14a2:	e6 95       	lsr	r30
    14a4:	00 1c       	adc	r0, r0
    14a6:	ca f7       	brpl	.-14     	; 0x149a <__divsf3_pse+0x2c>
    14a8:	29 d0       	rcall	.+82     	; 0x14fc <__divsf3_pse+0x8e>
    14aa:	fe 2f       	mov	r31, r30
    14ac:	27 d0       	rcall	.+78     	; 0x14fc <__divsf3_pse+0x8e>
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	bb 1f       	adc	r27, r27
    14b6:	26 17       	cp	r18, r22
    14b8:	37 07       	cpc	r19, r23
    14ba:	48 07       	cpc	r20, r24
    14bc:	ab 07       	cpc	r26, r27
    14be:	b0 e8       	ldi	r27, 0x80	; 128
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <__divsf3_pse+0x56>
    14c2:	bb 0b       	sbc	r27, r27
    14c4:	80 2d       	mov	r24, r0
    14c6:	bf 01       	movw	r22, r30
    14c8:	ff 27       	eor	r31, r31
    14ca:	93 58       	subi	r25, 0x83	; 131
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	2a f0       	brmi	.+10     	; 0x14da <__divsf3_pse+0x6c>
    14d0:	9e 3f       	cpi	r25, 0xFE	; 254
    14d2:	51 05       	cpc	r21, r1
    14d4:	68 f0       	brcs	.+26     	; 0x14f0 <__divsf3_pse+0x82>
    14d6:	b1 c0       	rjmp	.+354    	; 0x163a <__fp_inf>
    14d8:	fb c0       	rjmp	.+502    	; 0x16d0 <__fp_szero>
    14da:	5f 3f       	cpi	r21, 0xFF	; 255
    14dc:	ec f3       	brlt	.-6      	; 0x14d8 <__divsf3_pse+0x6a>
    14de:	98 3e       	cpi	r25, 0xE8	; 232
    14e0:	dc f3       	brlt	.-10     	; 0x14d8 <__divsf3_pse+0x6a>
    14e2:	86 95       	lsr	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	b7 95       	ror	r27
    14ea:	f7 95       	ror	r31
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__divsf3_pse+0x74>
    14f0:	88 0f       	add	r24, r24
    14f2:	91 1d       	adc	r25, r1
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	97 f9       	bld	r25, 7
    14fa:	08 95       	ret
    14fc:	e1 e0       	ldi	r30, 0x01	; 1
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	bb 1f       	adc	r27, r27
    1506:	62 17       	cp	r22, r18
    1508:	73 07       	cpc	r23, r19
    150a:	84 07       	cpc	r24, r20
    150c:	ba 07       	cpc	r27, r26
    150e:	20 f0       	brcs	.+8      	; 0x1518 <__divsf3_pse+0xaa>
    1510:	62 1b       	sub	r22, r18
    1512:	73 0b       	sbc	r23, r19
    1514:	84 0b       	sbc	r24, r20
    1516:	ba 0b       	sbc	r27, r26
    1518:	ee 1f       	adc	r30, r30
    151a:	88 f7       	brcc	.-30     	; 0x14fe <__divsf3_pse+0x90>
    151c:	e0 95       	com	r30
    151e:	08 95       	ret

00001520 <__fixunssfsi>:
    1520:	bc d0       	rcall	.+376    	; 0x169a <__fp_splitA>
    1522:	88 f0       	brcs	.+34     	; 0x1546 <__fixunssfsi+0x26>
    1524:	9f 57       	subi	r25, 0x7F	; 127
    1526:	90 f0       	brcs	.+36     	; 0x154c <__fixunssfsi+0x2c>
    1528:	b9 2f       	mov	r27, r25
    152a:	99 27       	eor	r25, r25
    152c:	b7 51       	subi	r27, 0x17	; 23
    152e:	a0 f0       	brcs	.+40     	; 0x1558 <__fixunssfsi+0x38>
    1530:	d1 f0       	breq	.+52     	; 0x1566 <__fixunssfsi+0x46>
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	1a f0       	brmi	.+6      	; 0x1542 <__fixunssfsi+0x22>
    153c:	ba 95       	dec	r27
    153e:	c9 f7       	brne	.-14     	; 0x1532 <__fixunssfsi+0x12>
    1540:	12 c0       	rjmp	.+36     	; 0x1566 <__fixunssfsi+0x46>
    1542:	b1 30       	cpi	r27, 0x01	; 1
    1544:	81 f0       	breq	.+32     	; 0x1566 <__fixunssfsi+0x46>
    1546:	c3 d0       	rcall	.+390    	; 0x16ce <__fp_zero>
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	08 95       	ret
    154c:	c0 c0       	rjmp	.+384    	; 0x16ce <__fp_zero>
    154e:	67 2f       	mov	r22, r23
    1550:	78 2f       	mov	r23, r24
    1552:	88 27       	eor	r24, r24
    1554:	b8 5f       	subi	r27, 0xF8	; 248
    1556:	39 f0       	breq	.+14     	; 0x1566 <__fixunssfsi+0x46>
    1558:	b9 3f       	cpi	r27, 0xF9	; 249
    155a:	cc f3       	brlt	.-14     	; 0x154e <__fixunssfsi+0x2e>
    155c:	86 95       	lsr	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	b3 95       	inc	r27
    1564:	d9 f7       	brne	.-10     	; 0x155c <__fixunssfsi+0x3c>
    1566:	3e f4       	brtc	.+14     	; 0x1576 <__fixunssfsi+0x56>
    1568:	90 95       	com	r25
    156a:	80 95       	com	r24
    156c:	70 95       	com	r23
    156e:	61 95       	neg	r22
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__floatunsisf>:
    1578:	e8 94       	clt
    157a:	09 c0       	rjmp	.+18     	; 0x158e <__floatsisf+0x12>

0000157c <__floatsisf>:
    157c:	97 fb       	bst	r25, 7
    157e:	3e f4       	brtc	.+14     	; 0x158e <__floatsisf+0x12>
    1580:	90 95       	com	r25
    1582:	80 95       	com	r24
    1584:	70 95       	com	r23
    1586:	61 95       	neg	r22
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	99 23       	and	r25, r25
    1590:	a9 f0       	breq	.+42     	; 0x15bc <__floatsisf+0x40>
    1592:	f9 2f       	mov	r31, r25
    1594:	96 e9       	ldi	r25, 0x96	; 150
    1596:	bb 27       	eor	r27, r27
    1598:	93 95       	inc	r25
    159a:	f6 95       	lsr	r31
    159c:	87 95       	ror	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f1 11       	cpse	r31, r1
    15a6:	f8 cf       	rjmp	.-16     	; 0x1598 <__floatsisf+0x1c>
    15a8:	fa f4       	brpl	.+62     	; 0x15e8 <__floatsisf+0x6c>
    15aa:	bb 0f       	add	r27, r27
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__floatsisf+0x36>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	1b c0       	rjmp	.+54     	; 0x15e8 <__floatsisf+0x6c>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <__floatsisf+0x6c>
    15bc:	88 23       	and	r24, r24
    15be:	11 f0       	breq	.+4      	; 0x15c4 <__floatsisf+0x48>
    15c0:	96 e9       	ldi	r25, 0x96	; 150
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <__floatsisf+0x6a>
    15c4:	77 23       	and	r23, r23
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <__floatsisf+0x54>
    15c8:	9e e8       	ldi	r25, 0x8E	; 142
    15ca:	87 2f       	mov	r24, r23
    15cc:	76 2f       	mov	r23, r22
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <__floatsisf+0x5e>
    15d0:	66 23       	and	r22, r22
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <__floatsisf+0x74>
    15d4:	96 e8       	ldi	r25, 0x86	; 134
    15d6:	86 2f       	mov	r24, r22
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	2a f0       	brmi	.+10     	; 0x15e8 <__floatsisf+0x6c>
    15de:	9a 95       	dec	r25
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	da f7       	brpl	.-10     	; 0x15de <__floatsisf+0x62>
    15e8:	88 0f       	add	r24, r24
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <__fp_cmp>:
    15f2:	99 0f       	add	r25, r25
    15f4:	00 08       	sbc	r0, r0
    15f6:	55 0f       	add	r21, r21
    15f8:	aa 0b       	sbc	r26, r26
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	fe ef       	ldi	r31, 0xFE	; 254
    15fe:	16 16       	cp	r1, r22
    1600:	17 06       	cpc	r1, r23
    1602:	e8 07       	cpc	r30, r24
    1604:	f9 07       	cpc	r31, r25
    1606:	c0 f0       	brcs	.+48     	; 0x1638 <__fp_cmp+0x46>
    1608:	12 16       	cp	r1, r18
    160a:	13 06       	cpc	r1, r19
    160c:	e4 07       	cpc	r30, r20
    160e:	f5 07       	cpc	r31, r21
    1610:	98 f0       	brcs	.+38     	; 0x1638 <__fp_cmp+0x46>
    1612:	62 1b       	sub	r22, r18
    1614:	73 0b       	sbc	r23, r19
    1616:	84 0b       	sbc	r24, r20
    1618:	95 0b       	sbc	r25, r21
    161a:	39 f4       	brne	.+14     	; 0x162a <__fp_cmp+0x38>
    161c:	0a 26       	eor	r0, r26
    161e:	61 f0       	breq	.+24     	; 0x1638 <__fp_cmp+0x46>
    1620:	23 2b       	or	r18, r19
    1622:	24 2b       	or	r18, r20
    1624:	25 2b       	or	r18, r21
    1626:	21 f4       	brne	.+8      	; 0x1630 <__fp_cmp+0x3e>
    1628:	08 95       	ret
    162a:	0a 26       	eor	r0, r26
    162c:	09 f4       	brne	.+2      	; 0x1630 <__fp_cmp+0x3e>
    162e:	a1 40       	sbci	r26, 0x01	; 1
    1630:	a6 95       	lsr	r26
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	81 1d       	adc	r24, r1
    1636:	81 1d       	adc	r24, r1
    1638:	08 95       	ret

0000163a <__fp_inf>:
    163a:	97 f9       	bld	r25, 7
    163c:	9f 67       	ori	r25, 0x7F	; 127
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	08 95       	ret

00001646 <__fp_nan>:
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	80 ec       	ldi	r24, 0xC0	; 192
    164a:	08 95       	ret

0000164c <__fp_pscA>:
    164c:	00 24       	eor	r0, r0
    164e:	0a 94       	dec	r0
    1650:	16 16       	cp	r1, r22
    1652:	17 06       	cpc	r1, r23
    1654:	18 06       	cpc	r1, r24
    1656:	09 06       	cpc	r0, r25
    1658:	08 95       	ret

0000165a <__fp_pscB>:
    165a:	00 24       	eor	r0, r0
    165c:	0a 94       	dec	r0
    165e:	12 16       	cp	r1, r18
    1660:	13 06       	cpc	r1, r19
    1662:	14 06       	cpc	r1, r20
    1664:	05 06       	cpc	r0, r21
    1666:	08 95       	ret

00001668 <__fp_round>:
    1668:	09 2e       	mov	r0, r25
    166a:	03 94       	inc	r0
    166c:	00 0c       	add	r0, r0
    166e:	11 f4       	brne	.+4      	; 0x1674 <__fp_round+0xc>
    1670:	88 23       	and	r24, r24
    1672:	52 f0       	brmi	.+20     	; 0x1688 <__fp_round+0x20>
    1674:	bb 0f       	add	r27, r27
    1676:	40 f4       	brcc	.+16     	; 0x1688 <__fp_round+0x20>
    1678:	bf 2b       	or	r27, r31
    167a:	11 f4       	brne	.+4      	; 0x1680 <__fp_round+0x18>
    167c:	60 ff       	sbrs	r22, 0
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__fp_round+0x20>
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__fp_split3>:
    168a:	57 fd       	sbrc	r21, 7
    168c:	90 58       	subi	r25, 0x80	; 128
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	59 f0       	breq	.+22     	; 0x16aa <__fp_splitA+0x10>
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	71 f0       	breq	.+28     	; 0x16b4 <__fp_splitA+0x1a>
    1698:	47 95       	ror	r20

0000169a <__fp_splitA>:
    169a:	88 0f       	add	r24, r24
    169c:	97 fb       	bst	r25, 7
    169e:	99 1f       	adc	r25, r25
    16a0:	61 f0       	breq	.+24     	; 0x16ba <__fp_splitA+0x20>
    16a2:	9f 3f       	cpi	r25, 0xFF	; 255
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <__fp_splitA+0x2a>
    16a6:	87 95       	ror	r24
    16a8:	08 95       	ret
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	14 06       	cpc	r1, r20
    16b0:	55 1f       	adc	r21, r21
    16b2:	f2 cf       	rjmp	.-28     	; 0x1698 <__fp_split3+0xe>
    16b4:	46 95       	lsr	r20
    16b6:	f1 df       	rcall	.-30     	; 0x169a <__fp_splitA>
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <__fp_splitA+0x30>
    16ba:	16 16       	cp	r1, r22
    16bc:	17 06       	cpc	r1, r23
    16be:	18 06       	cpc	r1, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	f1 cf       	rjmp	.-30     	; 0x16a6 <__fp_splitA+0xc>
    16c4:	86 95       	lsr	r24
    16c6:	71 05       	cpc	r23, r1
    16c8:	61 05       	cpc	r22, r1
    16ca:	08 94       	sec
    16cc:	08 95       	ret

000016ce <__fp_zero>:
    16ce:	e8 94       	clt

000016d0 <__fp_szero>:
    16d0:	bb 27       	eor	r27, r27
    16d2:	66 27       	eor	r22, r22
    16d4:	77 27       	eor	r23, r23
    16d6:	cb 01       	movw	r24, r22
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__gesf2>:
    16dc:	8a df       	rcall	.-236    	; 0x15f2 <__fp_cmp>
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <__gesf2+0x6>
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	08 95       	ret

000016e4 <__mulsf3>:
    16e4:	0b d0       	rcall	.+22     	; 0x16fc <__mulsf3x>
    16e6:	c0 cf       	rjmp	.-128    	; 0x1668 <__fp_round>
    16e8:	b1 df       	rcall	.-158    	; 0x164c <__fp_pscA>
    16ea:	28 f0       	brcs	.+10     	; 0x16f6 <__mulsf3+0x12>
    16ec:	b6 df       	rcall	.-148    	; 0x165a <__fp_pscB>
    16ee:	18 f0       	brcs	.+6      	; 0x16f6 <__mulsf3+0x12>
    16f0:	95 23       	and	r25, r21
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <__mulsf3+0x12>
    16f4:	a2 cf       	rjmp	.-188    	; 0x163a <__fp_inf>
    16f6:	a7 cf       	rjmp	.-178    	; 0x1646 <__fp_nan>
    16f8:	11 24       	eor	r1, r1
    16fa:	ea cf       	rjmp	.-44     	; 0x16d0 <__fp_szero>

000016fc <__mulsf3x>:
    16fc:	c6 df       	rcall	.-116    	; 0x168a <__fp_split3>
    16fe:	a0 f3       	brcs	.-24     	; 0x16e8 <__mulsf3+0x4>

00001700 <__mulsf3_pse>:
    1700:	95 9f       	mul	r25, r21
    1702:	d1 f3       	breq	.-12     	; 0x16f8 <__mulsf3+0x14>
    1704:	95 0f       	add	r25, r21
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	55 1f       	adc	r21, r21
    170a:	62 9f       	mul	r22, r18
    170c:	f0 01       	movw	r30, r0
    170e:	72 9f       	mul	r23, r18
    1710:	bb 27       	eor	r27, r27
    1712:	f0 0d       	add	r31, r0
    1714:	b1 1d       	adc	r27, r1
    1716:	63 9f       	mul	r22, r19
    1718:	aa 27       	eor	r26, r26
    171a:	f0 0d       	add	r31, r0
    171c:	b1 1d       	adc	r27, r1
    171e:	aa 1f       	adc	r26, r26
    1720:	64 9f       	mul	r22, r20
    1722:	66 27       	eor	r22, r22
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	66 1f       	adc	r22, r22
    172a:	82 9f       	mul	r24, r18
    172c:	22 27       	eor	r18, r18
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	62 1f       	adc	r22, r18
    1734:	73 9f       	mul	r23, r19
    1736:	b0 0d       	add	r27, r0
    1738:	a1 1d       	adc	r26, r1
    173a:	62 1f       	adc	r22, r18
    173c:	83 9f       	mul	r24, r19
    173e:	a0 0d       	add	r26, r0
    1740:	61 1d       	adc	r22, r1
    1742:	22 1f       	adc	r18, r18
    1744:	74 9f       	mul	r23, r20
    1746:	33 27       	eor	r19, r19
    1748:	a0 0d       	add	r26, r0
    174a:	61 1d       	adc	r22, r1
    174c:	23 1f       	adc	r18, r19
    174e:	84 9f       	mul	r24, r20
    1750:	60 0d       	add	r22, r0
    1752:	21 1d       	adc	r18, r1
    1754:	82 2f       	mov	r24, r18
    1756:	76 2f       	mov	r23, r22
    1758:	6a 2f       	mov	r22, r26
    175a:	11 24       	eor	r1, r1
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	8a f0       	brmi	.+34     	; 0x1784 <__mulsf3_pse+0x84>
    1762:	e1 f0       	breq	.+56     	; 0x179c <__mulsf3_pse+0x9c>
    1764:	88 23       	and	r24, r24
    1766:	4a f0       	brmi	.+18     	; 0x177a <__mulsf3_pse+0x7a>
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	bb 1f       	adc	r27, r27
    176e:	66 1f       	adc	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	91 50       	subi	r25, 0x01	; 1
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	a9 f7       	brne	.-22     	; 0x1764 <__mulsf3_pse+0x64>
    177a:	9e 3f       	cpi	r25, 0xFE	; 254
    177c:	51 05       	cpc	r21, r1
    177e:	70 f0       	brcs	.+28     	; 0x179c <__mulsf3_pse+0x9c>
    1780:	5c cf       	rjmp	.-328    	; 0x163a <__fp_inf>
    1782:	a6 cf       	rjmp	.-180    	; 0x16d0 <__fp_szero>
    1784:	5f 3f       	cpi	r21, 0xFF	; 255
    1786:	ec f3       	brlt	.-6      	; 0x1782 <__mulsf3_pse+0x82>
    1788:	98 3e       	cpi	r25, 0xE8	; 232
    178a:	dc f3       	brlt	.-10     	; 0x1782 <__mulsf3_pse+0x82>
    178c:	86 95       	lsr	r24
    178e:	77 95       	ror	r23
    1790:	67 95       	ror	r22
    1792:	b7 95       	ror	r27
    1794:	f7 95       	ror	r31
    1796:	e7 95       	ror	r30
    1798:	9f 5f       	subi	r25, 0xFF	; 255
    179a:	c1 f7       	brne	.-16     	; 0x178c <__mulsf3_pse+0x8c>
    179c:	fe 2b       	or	r31, r30
    179e:	88 0f       	add	r24, r24
    17a0:	91 1d       	adc	r25, r1
    17a2:	96 95       	lsr	r25
    17a4:	87 95       	ror	r24
    17a6:	97 f9       	bld	r25, 7
    17a8:	08 95       	ret

000017aa <__mulsi3>:
    17aa:	62 9f       	mul	r22, r18
    17ac:	d0 01       	movw	r26, r0
    17ae:	73 9f       	mul	r23, r19
    17b0:	f0 01       	movw	r30, r0
    17b2:	82 9f       	mul	r24, r18
    17b4:	e0 0d       	add	r30, r0
    17b6:	f1 1d       	adc	r31, r1
    17b8:	64 9f       	mul	r22, r20
    17ba:	e0 0d       	add	r30, r0
    17bc:	f1 1d       	adc	r31, r1
    17be:	92 9f       	mul	r25, r18
    17c0:	f0 0d       	add	r31, r0
    17c2:	83 9f       	mul	r24, r19
    17c4:	f0 0d       	add	r31, r0
    17c6:	74 9f       	mul	r23, r20
    17c8:	f0 0d       	add	r31, r0
    17ca:	65 9f       	mul	r22, r21
    17cc:	f0 0d       	add	r31, r0
    17ce:	99 27       	eor	r25, r25
    17d0:	72 9f       	mul	r23, r18
    17d2:	b0 0d       	add	r27, r0
    17d4:	e1 1d       	adc	r30, r1
    17d6:	f9 1f       	adc	r31, r25
    17d8:	63 9f       	mul	r22, r19
    17da:	b0 0d       	add	r27, r0
    17dc:	e1 1d       	adc	r30, r1
    17de:	f9 1f       	adc	r31, r25
    17e0:	bd 01       	movw	r22, r26
    17e2:	cf 01       	movw	r24, r30
    17e4:	11 24       	eor	r1, r1
    17e6:	08 95       	ret

000017e8 <__udivmodhi4>:
    17e8:	aa 1b       	sub	r26, r26
    17ea:	bb 1b       	sub	r27, r27
    17ec:	51 e1       	ldi	r21, 0x11	; 17
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <__udivmodhi4_ep>

000017f0 <__udivmodhi4_loop>:
    17f0:	aa 1f       	adc	r26, r26
    17f2:	bb 1f       	adc	r27, r27
    17f4:	a6 17       	cp	r26, r22
    17f6:	b7 07       	cpc	r27, r23
    17f8:	10 f0       	brcs	.+4      	; 0x17fe <__udivmodhi4_ep>
    17fa:	a6 1b       	sub	r26, r22
    17fc:	b7 0b       	sbc	r27, r23

000017fe <__udivmodhi4_ep>:
    17fe:	88 1f       	adc	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	5a 95       	dec	r21
    1804:	a9 f7       	brne	.-22     	; 0x17f0 <__udivmodhi4_loop>
    1806:	80 95       	com	r24
    1808:	90 95       	com	r25
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	08 95       	ret

00001810 <__udivmodsi4>:
    1810:	a1 e2       	ldi	r26, 0x21	; 33
    1812:	1a 2e       	mov	r1, r26
    1814:	aa 1b       	sub	r26, r26
    1816:	bb 1b       	sub	r27, r27
    1818:	fd 01       	movw	r30, r26
    181a:	0d c0       	rjmp	.+26     	; 0x1836 <__udivmodsi4_ep>

0000181c <__udivmodsi4_loop>:
    181c:	aa 1f       	adc	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	ee 1f       	adc	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	a2 17       	cp	r26, r18
    1826:	b3 07       	cpc	r27, r19
    1828:	e4 07       	cpc	r30, r20
    182a:	f5 07       	cpc	r31, r21
    182c:	20 f0       	brcs	.+8      	; 0x1836 <__udivmodsi4_ep>
    182e:	a2 1b       	sub	r26, r18
    1830:	b3 0b       	sbc	r27, r19
    1832:	e4 0b       	sbc	r30, r20
    1834:	f5 0b       	sbc	r31, r21

00001836 <__udivmodsi4_ep>:
    1836:	66 1f       	adc	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	1a 94       	dec	r1
    1840:	69 f7       	brne	.-38     	; 0x181c <__udivmodsi4_loop>
    1842:	60 95       	com	r22
    1844:	70 95       	com	r23
    1846:	80 95       	com	r24
    1848:	90 95       	com	r25
    184a:	9b 01       	movw	r18, r22
    184c:	ac 01       	movw	r20, r24
    184e:	bd 01       	movw	r22, r26
    1850:	cf 01       	movw	r24, r30
    1852:	08 95       	ret

00001854 <_exit>:
    1854:	f8 94       	cli

00001856 <__stop_program>:
    1856:	ff cf       	rjmp	.-2      	; 0x1856 <__stop_program>

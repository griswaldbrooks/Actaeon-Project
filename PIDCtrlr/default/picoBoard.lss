
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00002872  00002906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002872  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080010c  0080010c  00002912  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00002912  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000aeb  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cf9  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d0  00000000  00000000  000051d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001747  00000000  00000000  00005aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000540  00000000  00000000  000071f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b3c  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2c  00000000  00000000  0000826c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_3>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__vector_5>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_16>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_18>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_20>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <HexChars>:
      68:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e2 e7       	ldi	r30, 0x72	; 114
      8e:	f8 e2       	ldi	r31, 0x28	; 40
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	ac 30       	cpi	r26, 0x0C	; 12
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	13 e0       	ldi	r17, 0x03	; 3
      9e:	ac e0       	ldi	r26, 0x0C	; 12
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 33       	cpi	r26, 0x32	; 50
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
      b0:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_default>

000000b8 <ubRcv>:
	sbi(DDRB,DDB1);		// Pin 9
	sbi(DDRB,DDB2);		// Pin 10
}

void ubRcv(unsigned char c){
	if(c != 0xff){
      b8:	8f 3f       	cpi	r24, 0xFF	; 255
      ba:	b9 f0       	breq	.+46     	; 0xea <ubRcv+0x32>
		*ub_buffer_write_ndx = c;
      bc:	e0 91 0c 01 	lds	r30, 0x010C
      c0:	f0 91 0d 01 	lds	r31, 0x010D
      c4:	80 83       	st	Z, r24
		ub_buffer_write_ndx++;		
      c6:	80 91 0c 01 	lds	r24, 0x010C
      ca:	90 91 0d 01 	lds	r25, 0x010D
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	90 93 0d 01 	sts	0x010D, r25
      d4:	80 93 0c 01 	sts	0x010C, r24
		if(ub_buffer_write_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
      d8:	8a 55       	subi	r24, 0x5A	; 90
      da:	92 40       	sbci	r25, 0x02	; 2
      dc:	30 f0       	brcs	.+12     	; 0xea <ubRcv+0x32>
			ub_buffer_write_ndx = ub_buffer;
      de:	82 e5       	ldi	r24, 0x52	; 82
      e0:	92 e0       	ldi	r25, 0x02	; 2
      e2:	90 93 0d 01 	sts	0x010D, r25
      e6:	80 93 0c 01 	sts	0x010C, r24
      ea:	08 95       	ret

000000ec <init_ub_buffer>:
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
      ec:	82 e5       	ldi	r24, 0x52	; 82
      ee:	92 e0       	ldi	r25, 0x02	; 2
      f0:	90 93 0f 01 	sts	0x010F, r25
      f4:	80 93 0e 01 	sts	0x010E, r24
      f8:	90 93 0d 01 	sts	0x010D, r25
      fc:	80 93 0c 01 	sts	0x010C, r24
}
     100:	08 95       	ret

00000102 <read_ub>:
			ub_buffer_write_ndx = ub_buffer;
		}
	}
}

uint8_t read_ub(){
     102:	04 c0       	rjmp	.+8      	; 0x10c <read_ub+0xa>
	while(ub_buffer_read_ndx == ub_buffer_write_ndx){ delay_us(10); };
     104:	8a e0       	ldi	r24, 0x0A	; 10
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_us>
     10c:	e0 91 0e 01 	lds	r30, 0x010E
     110:	f0 91 0f 01 	lds	r31, 0x010F
     114:	80 91 0c 01 	lds	r24, 0x010C
     118:	90 91 0d 01 	lds	r25, 0x010D
     11c:	e8 17       	cp	r30, r24
     11e:	f9 07       	cpc	r31, r25
     120:	89 f3       	breq	.-30     	; 0x104 <read_ub+0x2>
	uint8_t data = *ub_buffer_read_ndx;
     122:	21 91       	ld	r18, Z+
	ub_buffer_read_ndx++;
     124:	f0 93 0f 01 	sts	0x010F, r31
     128:	e0 93 0e 01 	sts	0x010E, r30
	if(ub_buffer_read_ndx >= (ub_buffer + UB_BUFFER_SIZE)){ 
     12c:	ea 55       	subi	r30, 0x5A	; 90
     12e:	f2 40       	sbci	r31, 0x02	; 2
     130:	30 f0       	brcs	.+12     	; 0x13e <read_ub+0x3c>
		ub_buffer_read_ndx = ub_buffer;
     132:	82 e5       	ldi	r24, 0x52	; 82
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 0f 01 	sts	0x010F, r25
     13a:	80 93 0e 01 	sts	0x010E, r24
	}
	return data;
}
     13e:	82 2f       	mov	r24, r18
     140:	08 95       	ret

00000142 <update_vw_cmd>:

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
}

void update_vw_cmd(){
     142:	af 92       	push	r10
     144:	bf 92       	push	r11
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
	union u_ome fltuint8_omega;
	uint8_t rcv_byte;
	uint8_t rcv_chk;
	uint8_t calc_chk;
	
	rcv_byte = read_ub();
     152:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
	
	if(rcv_byte == 0xFA){
     156:	8a 3f       	cpi	r24, 0xFA	; 250
     158:	e1 f5       	brne	.+120    	; 0x1d2 <update_vw_cmd+0x90>
		
		fltuint8_velocity.arr_vel[0] = read_ub();
     15a:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     15e:	e8 2e       	mov	r14, r24
		fltuint8_velocity.arr_vel[1] = read_ub();
     160:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     164:	f8 2e       	mov	r15, r24
		fltuint8_velocity.arr_vel[2] = read_ub();
     166:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     16a:	08 2f       	mov	r16, r24
		fltuint8_velocity.arr_vel[3] = read_ub();	
     16c:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     170:	18 2f       	mov	r17, r24

		fltuint8_omega.arr_ome[0] = read_ub();
     172:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     176:	a8 2e       	mov	r10, r24
		fltuint8_omega.arr_ome[1] = read_ub();
     178:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     17c:	b8 2e       	mov	r11, r24
		fltuint8_omega.arr_ome[2] = read_ub();
     17e:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     182:	c8 2e       	mov	r12, r24
		fltuint8_omega.arr_ome[3] = read_ub();
     184:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
     188:	d8 2e       	mov	r13, r24
		

		rcv_chk = read_ub();
     18a:	0e 94 81 00 	call	0x102	; 0x102 <read_ub>
		rprintfu08(fltuint8_omega.arr_ome[0]);
		rprintfu08(fltuint8_omega.arr_ome[1]);
		rprintfu08(fltuint8_omega.arr_ome[2]);
		rprintfu08(fltuint8_omega.arr_ome[3]);
*/
		if(calc_chk == rcv_chk){
     18e:	9f 2d       	mov	r25, r15
     190:	9e 0d       	add	r25, r14
     192:	90 0f       	add	r25, r16
     194:	9a 0d       	add	r25, r10
     196:	9b 0d       	add	r25, r11
     198:	9c 0d       	add	r25, r12
     19a:	91 0f       	add	r25, r17
     19c:	9d 0d       	add	r25, r13
     19e:	98 17       	cp	r25, r24
     1a0:	c1 f4       	brne	.+48     	; 0x1d2 <update_vw_cmd+0x90>
			
				cmd_lin_vel = fltuint8_velocity.f_vel;
     1a2:	97 01       	movw	r18, r14
     1a4:	a8 01       	movw	r20, r16
     1a6:	c9 01       	movw	r24, r18
     1a8:	da 01       	movw	r26, r20
     1aa:	80 93 68 01 	sts	0x0168, r24
     1ae:	90 93 69 01 	sts	0x0169, r25
     1b2:	a0 93 6a 01 	sts	0x016A, r26
     1b6:	b0 93 6b 01 	sts	0x016B, r27
				cmd_ang_vel = fltuint8_omega.f_ome;
     1ba:	95 01       	movw	r18, r10
     1bc:	a6 01       	movw	r20, r12
     1be:	c9 01       	movw	r24, r18
     1c0:	da 01       	movw	r26, r20
     1c2:	80 93 6c 01 	sts	0x016C, r24
     1c6:	90 93 6d 01 	sts	0x016D, r25
     1ca:	a0 93 6e 01 	sts	0x016E, r26
     1ce:	b0 93 6f 01 	sts	0x016F, r27
				//rprintfFloat(5,fltuint8_omega.f_ome);
				//rprintfCRLF();
		}
			
	}
}
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	df 90       	pop	r13
     1dc:	cf 90       	pop	r12
     1de:	bf 90       	pop	r11
     1e0:	af 90       	pop	r10
     1e2:	08 95       	ret

000001e4 <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	7b 01       	movw	r14, r22
     1ee:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 7cm/sec > v_dead > -9cm/sec
	if((cmd_vel_l < 9) && (cmd_vel_l > -9))  cmd_vel_l =  0;
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e1       	ldi	r20, 0x10	; 16
     1f6:	51 e4       	ldi	r21, 0x41	; 65
     1f8:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
     1fc:	88 23       	and	r24, r24
     1fe:	ac f4       	brge	.+42     	; 0x22a <wheel_l+0x46>
     200:	c8 01       	movw	r24, r16
     202:	b7 01       	movw	r22, r14
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e1       	ldi	r20, 0x10	; 16
     20a:	51 ec       	ldi	r21, 0xC1	; 193
     20c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     210:	18 16       	cp	r1, r24
     212:	5c f4       	brge	.+22     	; 0x22a <wheel_l+0x46>
     214:	0f 2e       	mov	r0, r31
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	ef 2e       	mov	r14, r31
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	0f 2f       	mov	r16, r31
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	1f 2f       	mov	r17, r31
     226:	f0 2d       	mov	r31, r0
     228:	29 c0       	rjmp	.+82     	; 0x27c <wheel_l+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
     22a:	c8 01       	movw	r24, r16
     22c:	b7 01       	movw	r22, r14
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	52 e4       	ldi	r21, 0x42	; 66
     236:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     23a:	18 16       	cp	r1, r24
     23c:	5c f4       	brge	.+22     	; 0x254 <wheel_l+0x70>
     23e:	0f 2e       	mov	r0, r31
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ef 2e       	mov	r14, r31
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	ff 2e       	mov	r15, r31
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	0f 2f       	mov	r16, r31
     24c:	f2 e4       	ldi	r31, 0x42	; 66
     24e:	1f 2f       	mov	r17, r31
     250:	f0 2d       	mov	r31, r0
     252:	14 c0       	rjmp	.+40     	; 0x27c <wheel_l+0x98>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
     254:	c8 01       	movw	r24, r16
     256:	b7 01       	movw	r22, r14
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	52 ec       	ldi	r21, 0xC2	; 194
     260:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
     264:	88 23       	and	r24, r24
     266:	54 f4       	brge	.+20     	; 0x27c <wheel_l+0x98>
     268:	0f 2e       	mov	r0, r31
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ef 2e       	mov	r14, r31
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ff 2e       	mov	r15, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	0f 2f       	mov	r16, r31
     276:	f2 ec       	ldi	r31, 0xC2	; 194
     278:	1f 2f       	mov	r17, r31
     27a:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     27c:	c8 01       	movw	r24, r16
     27e:	b7 01       	movw	r22, r14
     280:	22 e4       	ldi	r18, 0x42	; 66
     282:	3e e3       	ldi	r19, 0x3E	; 62
     284:	48 e7       	ldi	r20, 0x78	; 120
     286:	5f eb       	ldi	r21, 0xBF	; 191
     288:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     28c:	2c e8       	ldi	r18, 0x8C	; 140
     28e:	32 ed       	ldi	r19, 0xD2	; 210
     290:	48 eb       	ldi	r20, 0xB8	; 184
     292:	53 e4       	ldi	r21, 0x43	; 67
     294:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     298:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__fixunssfsi>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <PWM_timer1_Set_Pin9>
}
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	08 95       	ret

000002ae <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	7b 01       	movw	r14, r22
     2b8:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 8cm/sec > v_dead > -5cm/sec
	if((cmd_vel_r < 8) && (cmd_vel_r > -8))  cmd_vel_r = 0;
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	51 e4       	ldi	r21, 0x41	; 65
     2c2:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
     2c6:	88 23       	and	r24, r24
     2c8:	ac f4       	brge	.+42     	; 0x2f4 <wheel_r+0x46>
     2ca:	c8 01       	movw	r24, r16
     2cc:	b7 01       	movw	r22, r14
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	51 ec       	ldi	r21, 0xC1	; 193
     2d6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     2da:	18 16       	cp	r1, r24
     2dc:	5c f4       	brge	.+22     	; 0x2f4 <wheel_r+0x46>
     2de:	0f 2e       	mov	r0, r31
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ef 2e       	mov	r14, r31
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	0f 2f       	mov	r16, r31
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	1f 2f       	mov	r17, r31
     2f0:	f0 2d       	mov	r31, r0
     2f2:	29 c0       	rjmp	.+82     	; 0x346 <wheel_r+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     2f4:	c8 01       	movw	r24, r16
     2f6:	b7 01       	movw	r22, r14
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     304:	18 16       	cp	r1, r24
     306:	5c f4       	brge	.+22     	; 0x31e <wheel_r+0x70>
     308:	0f 2e       	mov	r0, r31
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ef 2e       	mov	r14, r31
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ff 2e       	mov	r15, r31
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	0f 2f       	mov	r16, r31
     316:	f2 e4       	ldi	r31, 0x42	; 66
     318:	1f 2f       	mov	r17, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	14 c0       	rjmp	.+40     	; 0x346 <wheel_r+0x98>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     31e:	c8 01       	movw	r24, r16
     320:	b7 01       	movw	r22, r14
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	52 ec       	ldi	r21, 0xC2	; 194
     32a:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
     32e:	88 23       	and	r24, r24
     330:	54 f4       	brge	.+20     	; 0x346 <wheel_r+0x98>
     332:	0f 2e       	mov	r0, r31
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	ef 2e       	mov	r14, r31
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	0f 2f       	mov	r16, r31
     340:	f2 ec       	ldi	r31, 0xC2	; 194
     342:	1f 2f       	mov	r17, r31
     344:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	24 ef       	ldi	r18, 0xF4	; 244
     34c:	3c e6       	ldi	r19, 0x6C	; 108
     34e:	4e e8       	ldi	r20, 0x8E	; 142
     350:	5f e3       	ldi	r21, 0x3F	; 63
     352:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     356:	27 e0       	ldi	r18, 0x07	; 7
     358:	3f e1       	ldi	r19, 0x1F	; 31
     35a:	4b eb       	ldi	r20, 0xBB	; 187
     35c:	53 e4       	ldi	r21, 0x43	; 67
     35e:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     362:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__fixunssfsi>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 84 0a 	call	0x1508	; 0x1508 <PWM_timer1_Set_Pin10>
}
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	08 95       	ret

00000378 <pwm_setup>:
////////////////////////////////////////

void pwm_setup(void){

	// 20 ms period
	timer1PWMInitICR(5000);
     378:	88 e8       	ldi	r24, 0x88	; 136
     37a:	93 e1       	ldi	r25, 0x13	; 19
     37c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     380:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     382:	22 9a       	sbi	0x04, 2	; 4
}
     384:	08 95       	ret

00000386 <setup_hardware>:
	}
}

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     386:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     388:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     38a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uartInit>
	uartSetBaudRate(0,38400);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	56 e9       	ldi	r21, 0x96	; 150
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     39c:	85 e1       	ldi	r24, 0x15	; 21
     39e:	9e e0       	ldi	r25, 0x0E	; 14
     3a0:	0e 94 0d 0b 	call	0x161a	; 0x161a <rprintfInit>
	}
	return data;
}

void init_ub_buffer(){
	ub_buffer_write_ndx = ub_buffer_read_ndx = ub_buffer;
     3a4:	82 e5       	ldi	r24, 0x52	; 82
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	90 93 0f 01 	sts	0x010F, r25
     3ac:	80 93 0e 01 	sts	0x010E, r24
     3b0:	90 93 0d 01 	sts	0x010D, r25
     3b4:	80 93 0c 01 	sts	0x010C, r24
	uartInit();
	uartSetBaudRate(0,38400);
	rprintfInit(uart0SendByte);
	//UART ISR *** UART ISR ***
	init_ub_buffer();
	uartSetRxHandler(0, &ubRcv);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	6c e5       	ldi	r22, 0x5C	; 92
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uartSetRxHandler>
	//UART ISR *** UART ISR ***

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     3c2:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     3c4:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     3c6:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     3c8:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     3ca:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     3cc:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     3ce:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     3d0:	2d 9a       	sbi	0x05, 5	; 5
	
	// Set test pin
	sbi(DDRD,DDD5);		// Pin 5  Digital Out
     3d2:	55 9a       	sbi	0x0a, 5	; 10
	PORT_OFF(PORTD,5);	// Set pin off
     3d4:	5d 98       	cbi	0x0b, 5	; 11

	init_timer0(TIMER_CLK_64);
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <init_timer0>
	init_timer1(TIMER_CLK_64);
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	0e 94 ae 0a 	call	0x155c	; 0x155c <init_timer1>
	pwm_setup();
     3e2:	0e 94 bc 01 	call	0x378	; 0x378 <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     3e6:	e8 e6       	ldi	r30, 0x68	; 104
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     3f0:	ad e6       	ldi	r26, 0x6D	; 109
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	8c 91       	ld	r24, X
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     3fa:	80 81       	ld	r24, Z
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     400:	eb e6       	ldi	r30, 0x6B	; 107
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	81 60       	ori	r24, 0x01	; 1
     408:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     40a:	80 81       	ld	r24, Z
     40c:	80 61       	ori	r24, 0x10	; 16
     40e:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     410:	80 81       	ld	r24, Z
     412:	80 62       	ori	r24, 0x20	; 32
     414:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     416:	78 94       	sei

}
     418:	08 95       	ret

0000041a <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     41a:	2f 92       	push	r2
     41c:	3f 92       	push	r3
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	68 97       	sbiw	r28, 0x18	; 24
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
	
	// Initialize variables ///////////////////////////////////////////////////////////
	error_l_n1 = error_l = u_l = 0;
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	20 93 c2 02 	sts	0x02C2, r18
     45a:	30 93 c3 02 	sts	0x02C3, r19
     45e:	40 93 c4 02 	sts	0x02C4, r20
     462:	50 93 c5 02 	sts	0x02C5, r21
     466:	20 93 46 02 	sts	0x0246, r18
     46a:	30 93 47 02 	sts	0x0247, r19
     46e:	40 93 48 02 	sts	0x0248, r20
     472:	50 93 49 02 	sts	0x0249, r21
     476:	20 93 b6 02 	sts	0x02B6, r18
     47a:	30 93 b7 02 	sts	0x02B7, r19
     47e:	40 93 b8 02 	sts	0x02B8, r20
     482:	50 93 b9 02 	sts	0x02B9, r21
	error_r_n1 = error_r = u_r = 0;
     486:	20 93 3a 02 	sts	0x023A, r18
     48a:	30 93 3b 02 	sts	0x023B, r19
     48e:	40 93 3c 02 	sts	0x023C, r20
     492:	50 93 3d 02 	sts	0x023D, r21
     496:	20 93 d2 02 	sts	0x02D2, r18
     49a:	30 93 d3 02 	sts	0x02D3, r19
     49e:	40 93 d4 02 	sts	0x02D4, r20
     4a2:	50 93 d5 02 	sts	0x02D5, r21
     4a6:	20 93 36 02 	sts	0x0236, r18
     4aa:	30 93 37 02 	sts	0x0237, r19
     4ae:	40 93 38 02 	sts	0x0238, r20
     4b2:	50 93 39 02 	sts	0x0239, r21

	ud_l_n1 = udf_l = udf_l_n1 = 0;
     4b6:	20 93 de 02 	sts	0x02DE, r18
     4ba:	30 93 df 02 	sts	0x02DF, r19
     4be:	40 93 e0 02 	sts	0x02E0, r20
     4c2:	50 93 e1 02 	sts	0x02E1, r21
     4c6:	20 93 66 02 	sts	0x0266, r18
     4ca:	30 93 67 02 	sts	0x0267, r19
     4ce:	40 93 68 02 	sts	0x0268, r20
     4d2:	50 93 69 02 	sts	0x0269, r21
     4d6:	20 93 a2 02 	sts	0x02A2, r18
     4da:	30 93 a3 02 	sts	0x02A3, r19
     4de:	40 93 a4 02 	sts	0x02A4, r20
     4e2:	50 93 a5 02 	sts	0x02A5, r21
	ud_r_n1 = udf_r = udf_r_n1 = 0;
     4e6:	20 93 8a 02 	sts	0x028A, r18
     4ea:	30 93 8b 02 	sts	0x028B, r19
     4ee:	40 93 8c 02 	sts	0x028C, r20
     4f2:	50 93 8d 02 	sts	0x028D, r21
     4f6:	20 93 9a 02 	sts	0x029A, r18
     4fa:	30 93 9b 02 	sts	0x029B, r19
     4fe:	40 93 9c 02 	sts	0x029C, r20
     502:	50 93 9d 02 	sts	0x029D, r21
     506:	20 93 62 02 	sts	0x0262, r18
     50a:	30 93 63 02 	sts	0x0263, r19
     50e:	40 93 64 02 	sts	0x0264, r20
     512:	50 93 65 02 	sts	0x0265, r21
	
	//K_l = 0.0008;
	K_l = 2;
     516:	0f 2e       	mov	r0, r31
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	ef 2e       	mov	r14, r31
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ff 2e       	mov	r15, r31
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	0f 2f       	mov	r16, r31
     524:	f0 e4       	ldi	r31, 0x40	; 64
     526:	1f 2f       	mov	r17, r31
     528:	f0 2d       	mov	r31, r0
     52a:	e0 92 2e 02 	sts	0x022E, r14
     52e:	f0 92 2f 02 	sts	0x022F, r15
     532:	00 93 30 02 	sts	0x0230, r16
     536:	10 93 31 02 	sts	0x0231, r17
	K_r = 0;
     53a:	20 93 be 02 	sts	0x02BE, r18
     53e:	30 93 bf 02 	sts	0x02BF, r19
     542:	40 93 c0 02 	sts	0x02C0, r20
     546:	50 93 c1 02 	sts	0x02C1, r21
	//K_r = 0.0006;

	Ti_l = 1.1945;
     54a:	80 e6       	ldi	r24, 0x60	; 96
     54c:	95 ee       	ldi	r25, 0xE5	; 229
     54e:	a8 e9       	ldi	r26, 0x98	; 152
     550:	bf e3       	ldi	r27, 0x3F	; 63
     552:	80 93 26 02 	sts	0x0226, r24
     556:	90 93 27 02 	sts	0x0227, r25
     55a:	a0 93 28 02 	sts	0x0228, r26
     55e:	b0 93 29 02 	sts	0x0229, r27
	Td_l = 0.2986;
     562:	89 e1       	ldi	r24, 0x19	; 25
     564:	92 ee       	ldi	r25, 0xE2	; 226
     566:	a8 e9       	ldi	r26, 0x98	; 152
     568:	be e3       	ldi	r27, 0x3E	; 62
     56a:	80 93 82 02 	sts	0x0282, r24
     56e:	90 93 83 02 	sts	0x0283, r25
     572:	a0 93 84 02 	sts	0x0284, r26
     576:	b0 93 85 02 	sts	0x0285, r27
	T_l = 2.3890;										// sec
     57a:	80 e6       	ldi	r24, 0x60	; 96
     57c:	95 ee       	ldi	r25, 0xE5	; 229
     57e:	a8 e1       	ldi	r26, 0x18	; 24
     580:	b0 e4       	ldi	r27, 0x40	; 64
     582:	80 93 9e 02 	sts	0x029E, r24
     586:	90 93 9f 02 	sts	0x029F, r25
     58a:	a0 93 a0 02 	sts	0x02A0, r26
     58e:	b0 93 a1 02 	sts	0x02A1, r27

	Ti_r = 0.1100;
     592:	8e ea       	ldi	r24, 0xAE	; 174
     594:	97 e4       	ldi	r25, 0x47	; 71
     596:	a1 ee       	ldi	r26, 0xE1	; 225
     598:	bd e3       	ldi	r27, 0x3D	; 61
     59a:	80 93 d6 02 	sts	0x02D6, r24
     59e:	90 93 d7 02 	sts	0x02D7, r25
     5a2:	a0 93 d8 02 	sts	0x02D8, r26
     5a6:	b0 93 d9 02 	sts	0x02D9, r27
	Td_r = 0.0275;
     5aa:	8e ea       	ldi	r24, 0xAE	; 174
     5ac:	97 e4       	ldi	r25, 0x47	; 71
     5ae:	a1 ee       	ldi	r26, 0xE1	; 225
     5b0:	bc e3       	ldi	r27, 0x3C	; 60
     5b2:	80 93 86 02 	sts	0x0286, r24
     5b6:	90 93 87 02 	sts	0x0287, r25
     5ba:	a0 93 88 02 	sts	0x0288, r26
     5be:	b0 93 89 02 	sts	0x0289, r27
	T_r = 0.2200;										// sec
     5c2:	8e ea       	ldi	r24, 0xAE	; 174
     5c4:	97 e4       	ldi	r25, 0x47	; 71
     5c6:	a1 e6       	ldi	r26, 0x61	; 97
     5c8:	be e3       	ldi	r27, 0x3E	; 62
     5ca:	80 93 8e 02 	sts	0x028E, r24
     5ce:	90 93 8f 02 	sts	0x028F, r25
     5d2:	a0 93 90 02 	sts	0x0290, r26
     5d6:	b0 93 91 02 	sts	0x0291, r27
		
	Kp_l = 0.6*K_l;											// Proportional constant
     5da:	8a e9       	ldi	r24, 0x9A	; 154
     5dc:	99 e9       	ldi	r25, 0x99	; 153
     5de:	a9 e9       	ldi	r26, 0x99	; 153
     5e0:	bf e3       	ldi	r27, 0x3F	; 63
     5e2:	80 93 1e 02 	sts	0x021E, r24
     5e6:	90 93 1f 02 	sts	0x021F, r25
     5ea:	a0 93 20 02 	sts	0x0220, r26
     5ee:	b0 93 21 02 	sts	0x0221, r27
	Ki_l = (K_l*T_l)/(2*Ti_l);							// Integral constant
     5f2:	e0 92 5e 02 	sts	0x025E, r14
     5f6:	f0 92 5f 02 	sts	0x025F, r15
     5fa:	00 93 60 02 	sts	0x0260, r16
     5fe:	10 93 61 02 	sts	0x0261, r17
	Kd_l = (2*K_l*Td_l)/T_l;							// Derivative constant
     602:	83 e8       	ldi	r24, 0x83	; 131
     604:	9a ef       	ldi	r25, 0xFA	; 250
     606:	af ef       	ldi	r26, 0xFF	; 255
     608:	be e3       	ldi	r27, 0x3E	; 62
     60a:	80 93 6a 02 	sts	0x026A, r24
     60e:	90 93 6b 02 	sts	0x026B, r25
     612:	a0 93 6c 02 	sts	0x026C, r26
     616:	b0 93 6d 02 	sts	0x026D, r27

	Kp_r = 0.6*K_r;										// Proportional constant
     61a:	20 93 6e 02 	sts	0x026E, r18
     61e:	30 93 6f 02 	sts	0x026F, r19
     622:	40 93 70 02 	sts	0x0270, r20
     626:	50 93 71 02 	sts	0x0271, r21
	Ki_r = (K_r*T_r)/(2*Ti_r);							// Integral constant
     62a:	20 93 b2 02 	sts	0x02B2, r18
     62e:	30 93 b3 02 	sts	0x02B3, r19
     632:	40 93 b4 02 	sts	0x02B4, r20
     636:	50 93 b5 02 	sts	0x02B5, r21
	Kd_r = (2*K_r*Td_r)/T_r;							// Derivative constant
     63a:	20 93 ae 02 	sts	0x02AE, r18
     63e:	30 93 af 02 	sts	0x02AF, r19
     642:	40 93 b0 02 	sts	0x02B0, r20
     646:	50 93 b1 02 	sts	0x02B1, r21
	
	lpf1_l = (wb*T_l)/(2 + wb*T_l);
     64a:	60 91 08 01 	lds	r22, 0x0108
     64e:	70 91 09 01 	lds	r23, 0x0109
     652:	80 91 0a 01 	lds	r24, 0x010A
     656:	90 91 0b 01 	lds	r25, 0x010B
     65a:	20 e6       	ldi	r18, 0x60	; 96
     65c:	35 ee       	ldi	r19, 0xE5	; 229
     65e:	48 e1       	ldi	r20, 0x18	; 24
     660:	50 e4       	ldi	r21, 0x40	; 64
     662:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     666:	7b 01       	movw	r14, r22
     668:	8c 01       	movw	r16, r24
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e4       	ldi	r21, 0x40	; 64
     672:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     676:	5b 01       	movw	r10, r22
     678:	6c 01       	movw	r12, r24
     67a:	c8 01       	movw	r24, r16
     67c:	b7 01       	movw	r22, r14
     67e:	a6 01       	movw	r20, r12
     680:	95 01       	movw	r18, r10
     682:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     686:	dc 01       	movw	r26, r24
     688:	9b 01       	movw	r18, r22
     68a:	ac 01       	movw	r20, r24
     68c:	20 93 ce 02 	sts	0x02CE, r18
     690:	30 93 cf 02 	sts	0x02CF, r19
     694:	40 93 d0 02 	sts	0x02D0, r20
     698:	50 93 d1 02 	sts	0x02D1, r21
	lpf2_l = lpf1_l;
     69c:	cb 01       	movw	r24, r22
     69e:	80 93 92 02 	sts	0x0292, r24
     6a2:	90 93 93 02 	sts	0x0293, r25
     6a6:	a0 93 94 02 	sts	0x0294, r26
     6aa:	b0 93 95 02 	sts	0x0295, r27
	lpf3_l = (wb*T_l - 2)/(wb*T_l + 2);
     6ae:	c8 01       	movw	r24, r16
     6b0:	b7 01       	movw	r22, r14
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e4       	ldi	r21, 0x40	; 64
     6ba:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     6be:	a6 01       	movw	r20, r12
     6c0:	95 01       	movw	r18, r10
     6c2:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     6c6:	60 93 a6 02 	sts	0x02A6, r22
     6ca:	70 93 a7 02 	sts	0x02A7, r23
     6ce:	80 93 a8 02 	sts	0x02A8, r24
     6d2:	90 93 a9 02 	sts	0x02A9, r25

	lpf1_r = (wb*T_r)/(2 + wb*T_r);
     6d6:	60 91 08 01 	lds	r22, 0x0108
     6da:	70 91 09 01 	lds	r23, 0x0109
     6de:	80 91 0a 01 	lds	r24, 0x010A
     6e2:	90 91 0b 01 	lds	r25, 0x010B
     6e6:	2e ea       	ldi	r18, 0xAE	; 174
     6e8:	37 e4       	ldi	r19, 0x47	; 71
     6ea:	41 e6       	ldi	r20, 0x61	; 97
     6ec:	5e e3       	ldi	r21, 0x3E	; 62
     6ee:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     6f2:	7b 01       	movw	r14, r22
     6f4:	8c 01       	movw	r16, r24
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e4       	ldi	r21, 0x40	; 64
     6fe:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     702:	5b 01       	movw	r10, r22
     704:	6c 01       	movw	r12, r24
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	a6 01       	movw	r20, r12
     70c:	95 01       	movw	r18, r10
     70e:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     712:	dc 01       	movw	r26, r24
     714:	9b 01       	movw	r18, r22
     716:	ac 01       	movw	r20, r24
     718:	20 93 da 02 	sts	0x02DA, r18
     71c:	30 93 db 02 	sts	0x02DB, r19
     720:	40 93 dc 02 	sts	0x02DC, r20
     724:	50 93 dd 02 	sts	0x02DD, r21
	lpf2_r = lpf1_r;
     728:	cb 01       	movw	r24, r22
     72a:	80 93 aa 02 	sts	0x02AA, r24
     72e:	90 93 ab 02 	sts	0x02AB, r25
     732:	a0 93 ac 02 	sts	0x02AC, r26
     736:	b0 93 ad 02 	sts	0x02AD, r27
	lpf3_r = (wb*T_r - 2)/(wb*T_r + 2);
     73a:	c8 01       	movw	r24, r16
     73c:	b7 01       	movw	r22, r14
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e4       	ldi	r21, 0x40	; 64
     746:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     74a:	a6 01       	movw	r20, r12
     74c:	95 01       	movw	r18, r10
     74e:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     752:	60 93 96 02 	sts	0x0296, r22
     756:	70 93 97 02 	sts	0x0297, r23
     75a:	80 93 98 02 	sts	0x0298, r24
     75e:	90 93 99 02 	sts	0x0299, r25
	///////////////////////////////////////////////////////////////////////////////////////
	
	setup_hardware();
     762:	0e 94 c3 01 	call	0x386	; 0x386 <setup_hardware>
	
	
/**/
	wheel_l(0);
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <wheel_l>
	wheel_r(0);
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 57 01 	call	0x2ae	; 0x2ae <wheel_r>
	wheel_l_on();
     77e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <PWM_timer1_On_Pin9>
	wheel_r_on();
     782:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <PWM_timer1_On_Pin10>
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	1f c0       	rjmp	.+62     	; 0x7c8 <__stack+0x2c9>
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_ON(PORTD,5);	// Set pin off
     78a:	5d 9a       	sbi	0x0b, 5	; 11
			delay_us(200);
     78c:	88 ec       	ldi	r24, 0xC8	; 200
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_us>
	wheel_l_on();
	wheel_r_on();
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
     794:	08 94       	sec
     796:	e1 1c       	adc	r14, r1
     798:	f1 1c       	adc	r15, r1
     79a:	22 ee       	ldi	r18, 0xE2	; 226
     79c:	e2 16       	cp	r14, r18
     79e:	24 e0       	ldi	r18, 0x04	; 4
     7a0:	f2 06       	cpc	r15, r18
     7a2:	99 f7       	brne	.-26     	; 0x78a <__stack+0x28b>
     7a4:	ee 24       	eor	r14, r14
     7a6:	ff 24       	eor	r15, r15
			PORT_ON(PORTD,5);	// Set pin off
			delay_us(200);
		}
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_OFF(PORTD,5);	// Set pin off
     7a8:	5d 98       	cbi	0x0b, 5	; 11
			delay_us(200);
     7aa:	88 ec       	ldi	r24, 0xC8	; 200
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_us>
	for(u08 iter = 0; iter < 5; iter++){
		for(u16 ndx = 0; ndx < 1250; ndx++){
			PORT_ON(PORTD,5);	// Set pin off
			delay_us(200);
		}
		for(u16 ndx = 0; ndx < 1250; ndx++){
     7b2:	08 94       	sec
     7b4:	e1 1c       	adc	r14, r1
     7b6:	f1 1c       	adc	r15, r1
     7b8:	32 ee       	ldi	r19, 0xE2	; 226
     7ba:	e3 16       	cp	r14, r19
     7bc:	34 e0       	ldi	r19, 0x04	; 4
     7be:	f3 06       	cpc	r15, r19
     7c0:	99 f7       	brne	.-26     	; 0x7a8 <__stack+0x2a9>
	wheel_r(0);
	wheel_l_on();
	wheel_r_on();
	
	// Wait two seconds
	for(u08 iter = 0; iter < 5; iter++){
     7c2:	1f 5f       	subi	r17, 0xFF	; 255
     7c4:	15 30       	cpi	r17, 0x05	; 5
     7c6:	19 f0       	breq	.+6      	; 0x7ce <__stack+0x2cf>
     7c8:	ee 24       	eor	r14, r14
     7ca:	ff 24       	eor	r15, r15
     7cc:	de cf       	rjmp	.-68     	; 0x78a <__stack+0x28b>
	}
	//cmd_lin_vel = 15;
	while(1){
		
	// Velocity Encoding //////////////////////////////////////////////////////////////////////
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     7ce:	0e 94 c0 0a 	call	0x1580	; 0x1580 <get_timer0_overflow>
     7d2:	16 b5       	in	r17, 0x26	; 38
     7d4:	2f ef       	ldi	r18, 0xFF	; 255
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__mulsi3>
     7e0:	61 0f       	add	r22, r17
     7e2:	71 1d       	adc	r23, r1
     7e4:	81 1d       	adc	r24, r1
     7e6:	91 1d       	adc	r25, r1
     7e8:	0e 94 aa 12 	call	0x2554	; 0x2554 <__floatunsisf>
     7ec:	2e e0       	ldi	r18, 0x0E	; 14
     7ee:	3d e2       	ldi	r19, 0x2D	; 45
     7f0:	42 e3       	ldi	r20, 0x32	; 50
     7f2:	5d e3       	ldi	r21, 0x3D	; 61
     7f4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e4       	ldi	r19, 0x40	; 64
     7fc:	4c e1       	ldi	r20, 0x1C	; 28
     7fe:	56 e4       	ldi	r21, 0x46	; 70
     800:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     804:	dc 01       	movw	r26, r24
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	20 93 14 01 	sts	0x0114, r18
     80e:	30 93 15 01 	sts	0x0115, r19
     812:	40 93 16 01 	sts	0x0116, r20
     816:	50 93 17 01 	sts	0x0117, r21
     81a:	cb 01       	movw	r24, r22
     81c:	80 93 10 01 	sts	0x0110, r24
     820:	90 93 11 01 	sts	0x0111, r25
     824:	a0 93 12 01 	sts	0x0112, r26
     828:	b0 93 13 01 	sts	0x0113, r27
		
		l_count_current = get_left_count();
     82c:	0e 94 a4 10 	call	0x2148	; 0x2148 <get_left_count>
     830:	60 93 28 01 	sts	0x0128, r22
     834:	70 93 29 01 	sts	0x0129, r23
     838:	80 93 2a 01 	sts	0x012A, r24
     83c:	90 93 2b 01 	sts	0x012B, r25
		r_count_current = get_right_count();
     840:	0e 94 ad 10 	call	0x215a	; 0x215a <get_right_count>
     844:	60 93 30 01 	sts	0x0130, r22
     848:	70 93 31 01 	sts	0x0131, r23
     84c:	80 93 32 01 	sts	0x0132, r24
     850:	90 93 33 01 	sts	0x0133, r25

		if(l_count_current != l_count_previous){
     854:	20 91 28 01 	lds	r18, 0x0128
     858:	30 91 29 01 	lds	r19, 0x0129
     85c:	40 91 2a 01 	lds	r20, 0x012A
     860:	50 91 2b 01 	lds	r21, 0x012B
     864:	80 91 2c 01 	lds	r24, 0x012C
     868:	90 91 2d 01 	lds	r25, 0x012D
     86c:	a0 91 2e 01 	lds	r26, 0x012E
     870:	b0 91 2f 01 	lds	r27, 0x012F
     874:	28 17       	cp	r18, r24
     876:	39 07       	cpc	r19, r25
     878:	4a 07       	cpc	r20, r26
     87a:	5b 07       	cpc	r21, r27
     87c:	09 f4       	brne	.+2      	; 0x880 <__stack+0x381>
     87e:	e1 c0       	rjmp	.+450    	; 0xa42 <__stack+0x543>
			l_count_current = get_left_count();
     880:	0e 94 a4 10 	call	0x2148	; 0x2148 <get_left_count>
     884:	7b 01       	movw	r14, r22
     886:	8c 01       	movw	r16, r24
     888:	e0 92 28 01 	sts	0x0128, r14
     88c:	f0 92 29 01 	sts	0x0129, r15
     890:	00 93 2a 01 	sts	0x012A, r16
     894:	10 93 2b 01 	sts	0x012B, r17
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     898:	60 91 10 01 	lds	r22, 0x0110
     89c:	70 91 11 01 	lds	r23, 0x0111
     8a0:	80 91 12 01 	lds	r24, 0x0112
     8a4:	90 91 13 01 	lds	r25, 0x0113
     8a8:	20 91 18 01 	lds	r18, 0x0118
     8ac:	30 91 19 01 	lds	r19, 0x0119
     8b0:	40 91 1a 01 	lds	r20, 0x011A
     8b4:	50 91 1b 01 	lds	r21, 0x011B
     8b8:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     8bc:	5b 01       	movw	r10, r22
     8be:	6c 01       	movw	r12, r24
     8c0:	60 93 5c 01 	sts	0x015C, r22
     8c4:	70 93 5d 01 	sts	0x015D, r23
     8c8:	80 93 5e 01 	sts	0x015E, r24
     8cc:	90 93 5f 01 	sts	0x015F, r25
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;
     8d0:	80 91 2c 01 	lds	r24, 0x012C
     8d4:	90 91 2d 01 	lds	r25, 0x012D
     8d8:	a0 91 2e 01 	lds	r26, 0x012E
     8dc:	b0 91 2f 01 	lds	r27, 0x012F
     8e0:	e8 1a       	sub	r14, r24
     8e2:	f9 0a       	sbc	r15, r25
     8e4:	0a 0b       	sbc	r16, r26
     8e6:	1b 0b       	sbc	r17, r27
     8e8:	c8 01       	movw	r24, r16
     8ea:	b7 01       	movw	r22, r14
     8ec:	0e 94 ac 12 	call	0x2558	; 0x2558 <__floatsisf>
     8f0:	a6 01       	movw	r20, r12
     8f2:	95 01       	movw	r18, r10
     8f4:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     8f8:	60 93 20 01 	sts	0x0120, r22
     8fc:	70 93 21 01 	sts	0x0121, r23
     900:	80 93 22 01 	sts	0x0122, r24
     904:	90 93 23 01 	sts	0x0123, r25

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	5c e3       	ldi	r21, 0x3C	; 60
     910:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     914:	3b 01       	movw	r6, r22
     916:	4c 01       	movw	r8, r24
     918:	60 93 4c 01 	sts	0x014C, r22
     91c:	70 93 4d 01 	sts	0x014D, r23
     920:	80 93 4e 01 	sts	0x014E, r24
     924:	90 93 4f 01 	sts	0x014F, r25
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     928:	60 91 04 01 	lds	r22, 0x0104
     92c:	70 91 05 01 	lds	r23, 0x0105
     930:	80 91 06 01 	lds	r24, 0x0106
     934:	90 91 07 01 	lds	r25, 0x0107
     938:	a6 01       	movw	r20, r12
     93a:	95 01       	movw	r18, r10
     93c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     940:	7b 01       	movw	r14, r22
     942:	8c 01       	movw	r16, r24
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     950:	1b 01       	movw	r2, r22
     952:	2c 01       	movw	r4, r24
     954:	c8 01       	movw	r24, r16
     956:	b7 01       	movw	r22, r14
     958:	a2 01       	movw	r20, r4
     95a:	91 01       	movw	r18, r2
     95c:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     960:	5b 01       	movw	r10, r22
     962:	6c 01       	movw	r12, r24
     964:	c4 01       	movw	r24, r8
     966:	b3 01       	movw	r22, r6
     968:	20 91 50 01 	lds	r18, 0x0150
     96c:	30 91 51 01 	lds	r19, 0x0151
     970:	40 91 52 01 	lds	r20, 0x0152
     974:	50 91 53 01 	lds	r21, 0x0153
     978:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	c6 01       	movw	r24, r12
     982:	b5 01       	movw	r22, r10
     984:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     988:	5b 01       	movw	r10, r22
     98a:	6c 01       	movw	r12, r24
     98c:	c8 01       	movw	r24, r16
     98e:	b7 01       	movw	r22, r14
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e4       	ldi	r21, 0x40	; 64
     998:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     99c:	a2 01       	movw	r20, r4
     99e:	91 01       	movw	r18, r2
     9a0:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     9a4:	20 91 58 01 	lds	r18, 0x0158
     9a8:	30 91 59 01 	lds	r19, 0x0159
     9ac:	40 91 5a 01 	lds	r20, 0x015A
     9b0:	50 91 5b 01 	lds	r21, 0x015B
     9b4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	c6 01       	movw	r24, r12
     9be:	b5 01       	movw	r22, r10
     9c0:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     9c4:	60 93 54 01 	sts	0x0154, r22
     9c8:	70 93 55 01 	sts	0x0155, r23
     9cc:	80 93 56 01 	sts	0x0156, r24
     9d0:	90 93 57 01 	sts	0x0157, r25

			rps_l_prev = rps_l;
     9d4:	60 92 50 01 	sts	0x0150, r6
     9d8:	70 92 51 01 	sts	0x0151, r7
     9dc:	80 92 52 01 	sts	0x0152, r8
     9e0:	90 92 53 01 	sts	0x0153, r9
			rps_lf_prev = rps_lf;
     9e4:	60 93 58 01 	sts	0x0158, r22
     9e8:	70 93 59 01 	sts	0x0159, r23
     9ec:	80 93 5a 01 	sts	0x015A, r24
     9f0:	90 93 5b 01 	sts	0x015B, r25
			//rprintfFloat(5,rps_lf);
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_l);
			//rprintfCRLF();

			PORT_ON(PORTD,5);
     9f4:	5d 9a       	sbi	0x0b, 5	; 11
			delay_us(200);
     9f6:	88 ec       	ldi	r24, 0xC8	; 200
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <delay_us>
			PORT_OFF(PORTD,5);
     9fe:	5d 98       	cbi	0x0b, 5	; 11
			
			l_count_previous = l_count_current;
     a00:	80 91 28 01 	lds	r24, 0x0128
     a04:	90 91 29 01 	lds	r25, 0x0129
     a08:	a0 91 2a 01 	lds	r26, 0x012A
     a0c:	b0 91 2b 01 	lds	r27, 0x012B
     a10:	80 93 2c 01 	sts	0x012C, r24
     a14:	90 93 2d 01 	sts	0x012D, r25
     a18:	a0 93 2e 01 	sts	0x012E, r26
     a1c:	b0 93 2f 01 	sts	0x012F, r27
			
			elapsed_time_l_previous = elapsed_time_l;
     a20:	80 91 10 01 	lds	r24, 0x0110
     a24:	90 91 11 01 	lds	r25, 0x0111
     a28:	a0 91 12 01 	lds	r26, 0x0112
     a2c:	b0 91 13 01 	lds	r27, 0x0113
     a30:	80 93 18 01 	sts	0x0118, r24
     a34:	90 93 19 01 	sts	0x0119, r25
     a38:	a0 93 1a 01 	sts	0x011A, r26
     a3c:	b0 93 1b 01 	sts	0x011B, r27
     a40:	26 c0       	rjmp	.+76     	; 0xa8e <__stack+0x58f>
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     a42:	60 91 10 01 	lds	r22, 0x0110
     a46:	70 91 11 01 	lds	r23, 0x0111
     a4a:	80 91 12 01 	lds	r24, 0x0112
     a4e:	90 91 13 01 	lds	r25, 0x0113
     a52:	20 91 18 01 	lds	r18, 0x0118
     a56:	30 91 19 01 	lds	r19, 0x0119
     a5a:	40 91 1a 01 	lds	r20, 0x011A
     a5e:	50 91 1b 01 	lds	r21, 0x011B
     a62:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     a66:	2a e9       	ldi	r18, 0x9A	; 154
     a68:	39 e9       	ldi	r19, 0x99	; 153
     a6a:	49 e1       	ldi	r20, 0x19	; 25
     a6c:	5e e3       	ldi	r21, 0x3E	; 62
     a6e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     a72:	18 16       	cp	r1, r24
     a74:	64 f4       	brge	.+24     	; 0xa8e <__stack+0x58f>
			rps_lf = 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	80 93 54 01 	sts	0x0154, r24
     a82:	90 93 55 01 	sts	0x0155, r25
     a86:	a0 93 56 01 	sts	0x0156, r26
     a8a:	b0 93 57 01 	sts	0x0157, r27

		}
		
		if(r_count_current != r_count_previous){
     a8e:	20 91 30 01 	lds	r18, 0x0130
     a92:	30 91 31 01 	lds	r19, 0x0131
     a96:	40 91 32 01 	lds	r20, 0x0132
     a9a:	50 91 33 01 	lds	r21, 0x0133
     a9e:	80 91 34 01 	lds	r24, 0x0134
     aa2:	90 91 35 01 	lds	r25, 0x0135
     aa6:	a0 91 36 01 	lds	r26, 0x0136
     aaa:	b0 91 37 01 	lds	r27, 0x0137
     aae:	28 17       	cp	r18, r24
     ab0:	39 07       	cpc	r19, r25
     ab2:	4a 07       	cpc	r20, r26
     ab4:	5b 07       	cpc	r21, r27
     ab6:	09 f4       	brne	.+2      	; 0xaba <__stack+0x5bb>
     ab8:	dd c0       	rjmp	.+442    	; 0xc74 <__stack+0x775>
			r_count_current = get_right_count();
     aba:	0e 94 ad 10 	call	0x215a	; 0x215a <get_right_count>
     abe:	7b 01       	movw	r14, r22
     ac0:	8c 01       	movw	r16, r24
     ac2:	e0 92 30 01 	sts	0x0130, r14
     ac6:	f0 92 31 01 	sts	0x0131, r15
     aca:	00 93 32 01 	sts	0x0132, r16
     ace:	10 93 33 01 	sts	0x0133, r17
			dt_r = (elapsed_time_r - elapsed_time_r_previous);
     ad2:	20 91 14 01 	lds	r18, 0x0114
     ad6:	30 91 15 01 	lds	r19, 0x0115
     ada:	40 91 16 01 	lds	r20, 0x0116
     ade:	50 91 17 01 	lds	r21, 0x0117
     ae2:	29 87       	std	Y+9, r18	; 0x09
     ae4:	3a 87       	std	Y+10, r19	; 0x0a
     ae6:	4b 87       	std	Y+11, r20	; 0x0b
     ae8:	5c 87       	std	Y+12, r21	; 0x0c
     aea:	ca 01       	movw	r24, r20
     aec:	b9 01       	movw	r22, r18
     aee:	20 91 1c 01 	lds	r18, 0x011C
     af2:	30 91 1d 01 	lds	r19, 0x011D
     af6:	40 91 1e 01 	lds	r20, 0x011E
     afa:	50 91 1f 01 	lds	r21, 0x011F
     afe:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     b02:	5b 01       	movw	r10, r22
     b04:	6c 01       	movw	r12, r24
     b06:	60 93 48 01 	sts	0x0148, r22
     b0a:	70 93 49 01 	sts	0x0149, r23
     b0e:	80 93 4a 01 	sts	0x014A, r24
     b12:	90 93 4b 01 	sts	0x014B, r25
			ticks_per_sec_r = (r_count_current - r_count_previous)/dt_r;
     b16:	80 91 34 01 	lds	r24, 0x0134
     b1a:	90 91 35 01 	lds	r25, 0x0135
     b1e:	a0 91 36 01 	lds	r26, 0x0136
     b22:	b0 91 37 01 	lds	r27, 0x0137
     b26:	a8 01       	movw	r20, r16
     b28:	97 01       	movw	r18, r14
     b2a:	28 1b       	sub	r18, r24
     b2c:	39 0b       	sbc	r19, r25
     b2e:	4a 0b       	sbc	r20, r26
     b30:	5b 0b       	sbc	r21, r27
     b32:	ca 01       	movw	r24, r20
     b34:	b9 01       	movw	r22, r18
     b36:	0e 94 ac 12 	call	0x2558	; 0x2558 <__floatsisf>
     b3a:	a6 01       	movw	r20, r12
     b3c:	95 01       	movw	r18, r10
     b3e:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     b42:	60 93 24 01 	sts	0x0124, r22
     b46:	70 93 25 01 	sts	0x0125, r23
     b4a:	80 93 26 01 	sts	0x0126, r24
     b4e:	90 93 27 01 	sts	0x0127, r25
			
			rps_r = ticks_per_sec_r/(TICKS_PER_ROTATION);
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	5c e3       	ldi	r21, 0x3C	; 60
     b5a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     b5e:	1b 01       	movw	r2, r22
     b60:	2c 01       	movw	r4, r24
     b62:	60 93 38 01 	sts	0x0138, r22
     b66:	70 93 39 01 	sts	0x0139, r23
     b6a:	80 93 3a 01 	sts	0x013A, r24
     b6e:	90 93 3b 01 	sts	0x013B, r25
			rps_rf = ((Kr*dt_r)/(Kr*dt_r + 2))*(rps_r + rps_r_prev) - ((Kr*dt_r - 2)/(Kr*dt_r + 2))*rps_rf_prev;
     b72:	60 91 00 01 	lds	r22, 0x0100
     b76:	70 91 01 01 	lds	r23, 0x0101
     b7a:	80 91 02 01 	lds	r24, 0x0102
     b7e:	90 91 03 01 	lds	r25, 0x0103
     b82:	a6 01       	movw	r20, r12
     b84:	95 01       	movw	r18, r10
     b86:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     b8a:	5b 01       	movw	r10, r22
     b8c:	6c 01       	movw	r12, r24
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e4       	ldi	r21, 0x40	; 64
     b96:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     b9a:	6d 87       	std	Y+13, r22	; 0x0d
     b9c:	7e 87       	std	Y+14, r23	; 0x0e
     b9e:	8f 87       	std	Y+15, r24	; 0x0f
     ba0:	98 8b       	std	Y+16, r25	; 0x10
     ba2:	c6 01       	movw	r24, r12
     ba4:	b5 01       	movw	r22, r10
     ba6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ba8:	3e 85       	ldd	r19, Y+14	; 0x0e
     baa:	4f 85       	ldd	r20, Y+15	; 0x0f
     bac:	58 89       	ldd	r21, Y+16	; 0x10
     bae:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     bb2:	3b 01       	movw	r6, r22
     bb4:	4c 01       	movw	r8, r24
     bb6:	c2 01       	movw	r24, r4
     bb8:	b1 01       	movw	r22, r2
     bba:	20 91 3c 01 	lds	r18, 0x013C
     bbe:	30 91 3d 01 	lds	r19, 0x013D
     bc2:	40 91 3e 01 	lds	r20, 0x013E
     bc6:	50 91 3f 01 	lds	r21, 0x013F
     bca:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c4 01       	movw	r24, r8
     bd4:	b3 01       	movw	r22, r6
     bd6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     bda:	3b 01       	movw	r6, r22
     bdc:	4c 01       	movw	r8, r24
     bde:	c6 01       	movw	r24, r12
     be0:	b5 01       	movw	r22, r10
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     bee:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf0:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf2:	4f 85       	ldd	r20, Y+15	; 0x0f
     bf4:	58 89       	ldd	r21, Y+16	; 0x10
     bf6:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
     bfa:	20 91 44 01 	lds	r18, 0x0144
     bfe:	30 91 45 01 	lds	r19, 0x0145
     c02:	40 91 46 01 	lds	r20, 0x0146
     c06:	50 91 47 01 	lds	r21, 0x0147
     c0a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c4 01       	movw	r24, r8
     c14:	b3 01       	movw	r22, r6
     c16:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     c1a:	60 93 40 01 	sts	0x0140, r22
     c1e:	70 93 41 01 	sts	0x0141, r23
     c22:	80 93 42 01 	sts	0x0142, r24
     c26:	90 93 43 01 	sts	0x0143, r25

			rps_r_prev = rps_r;
     c2a:	20 92 3c 01 	sts	0x013C, r2
     c2e:	30 92 3d 01 	sts	0x013D, r3
     c32:	40 92 3e 01 	sts	0x013E, r4
     c36:	50 92 3f 01 	sts	0x013F, r5
			rps_rf_prev = rps_rf;
     c3a:	60 93 44 01 	sts	0x0144, r22
     c3e:	70 93 45 01 	sts	0x0145, r23
     c42:	80 93 46 01 	sts	0x0146, r24
     c46:	90 93 47 01 	sts	0x0147, r25
			//rprintf("\t\t,");
			//rprintfFloat(5,elapsed_time_r);
			//rprintfCRLF();
			
			
			r_count_previous = r_count_current;
     c4a:	e0 92 34 01 	sts	0x0134, r14
     c4e:	f0 92 35 01 	sts	0x0135, r15
     c52:	00 93 36 01 	sts	0x0136, r16
     c56:	10 93 37 01 	sts	0x0137, r17
			
			elapsed_time_r_previous = elapsed_time_r;
     c5a:	89 85       	ldd	r24, Y+9	; 0x09
     c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5e:	ab 85       	ldd	r26, Y+11	; 0x0b
     c60:	bc 85       	ldd	r27, Y+12	; 0x0c
     c62:	80 93 1c 01 	sts	0x011C, r24
     c66:	90 93 1d 01 	sts	0x011D, r25
     c6a:	a0 93 1e 01 	sts	0x011E, r26
     c6e:	b0 93 1f 01 	sts	0x011F, r27
     c72:	26 c0       	rjmp	.+76     	; 0xcc0 <__stack+0x7c1>
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
     c74:	60 91 14 01 	lds	r22, 0x0114
     c78:	70 91 15 01 	lds	r23, 0x0115
     c7c:	80 91 16 01 	lds	r24, 0x0116
     c80:	90 91 17 01 	lds	r25, 0x0117
     c84:	20 91 1c 01 	lds	r18, 0x011C
     c88:	30 91 1d 01 	lds	r19, 0x011D
     c8c:	40 91 1e 01 	lds	r20, 0x011E
     c90:	50 91 1f 01 	lds	r21, 0x011F
     c94:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     c98:	2a e9       	ldi	r18, 0x9A	; 154
     c9a:	39 e9       	ldi	r19, 0x99	; 153
     c9c:	49 e1       	ldi	r20, 0x19	; 25
     c9e:	5e e3       	ldi	r21, 0x3E	; 62
     ca0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	64 f4       	brge	.+24     	; 0xcc0 <__stack+0x7c1>
			rps_rf = 0;
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	20 93 40 01 	sts	0x0140, r18
     cb4:	30 93 41 01 	sts	0x0141, r19
     cb8:	40 93 42 01 	sts	0x0142, r20
     cbc:	50 93 43 01 	sts	0x0143, r21
		}
		
		// Convert from revolutions per second to cm/sec
		v_l = M_2PIR*rps_lf;		
     cc0:	60 91 54 01 	lds	r22, 0x0154
     cc4:	70 91 55 01 	lds	r23, 0x0155
     cc8:	80 91 56 01 	lds	r24, 0x0156
     ccc:	90 91 57 01 	lds	r25, 0x0157
     cd0:	23 ec       	ldi	r18, 0xC3	; 195
     cd2:	33 e5       	ldi	r19, 0x53	; 83
     cd4:	4b ef       	ldi	r20, 0xFB	; 251
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     cdc:	3b 01       	movw	r6, r22
     cde:	4c 01       	movw	r8, r24
     ce0:	60 93 22 02 	sts	0x0222, r22
     ce4:	70 93 23 02 	sts	0x0223, r23
     ce8:	80 93 24 02 	sts	0x0224, r24
     cec:	90 93 25 02 	sts	0x0225, r25
		v_r = M_2PIR*rps_rf;
     cf0:	60 91 40 01 	lds	r22, 0x0140
     cf4:	70 91 41 01 	lds	r23, 0x0141
     cf8:	80 91 42 01 	lds	r24, 0x0142
     cfc:	90 91 43 01 	lds	r25, 0x0143
     d00:	23 ec       	ldi	r18, 0xC3	; 195
     d02:	33 e5       	ldi	r19, 0x53	; 83
     d04:	4b ef       	ldi	r20, 0xFB	; 251
     d06:	51 e4       	ldi	r21, 0x41	; 65
     d08:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     d0c:	1b 01       	movw	r2, r22
     d0e:	2c 01       	movw	r4, r24
     d10:	60 93 7e 02 	sts	0x027E, r22
     d14:	70 93 7f 02 	sts	0x027F, r23
     d18:	80 93 80 02 	sts	0x0280, r24
     d1c:	90 93 81 02 	sts	0x0281, r25
		///////////////////////////////////////////////

		// Calculate total elapsed time ////////////////////////////
		elapsed_time = fmin(elapsed_time_r - elapsed_time_r_previous, elapsed_time_l - elapsed_time_l_previous);
     d20:	60 91 14 01 	lds	r22, 0x0114
     d24:	70 91 15 01 	lds	r23, 0x0115
     d28:	80 91 16 01 	lds	r24, 0x0116
     d2c:	90 91 17 01 	lds	r25, 0x0117
     d30:	20 91 1c 01 	lds	r18, 0x011C
     d34:	30 91 1d 01 	lds	r19, 0x011D
     d38:	40 91 1e 01 	lds	r20, 0x011E
     d3c:	50 91 1f 01 	lds	r21, 0x011F
     d40:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     d44:	7b 01       	movw	r14, r22
     d46:	8c 01       	movw	r16, r24
     d48:	60 91 10 01 	lds	r22, 0x0110
     d4c:	70 91 11 01 	lds	r23, 0x0111
     d50:	80 91 12 01 	lds	r24, 0x0112
     d54:	90 91 13 01 	lds	r25, 0x0113
     d58:	20 91 18 01 	lds	r18, 0x0118
     d5c:	30 91 19 01 	lds	r19, 0x0119
     d60:	40 91 1a 01 	lds	r20, 0x011A
     d64:	50 91 1b 01 	lds	r21, 0x011B
     d68:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	c8 01       	movw	r24, r16
     d72:	b7 01       	movw	r22, r14
     d74:	0e 94 e7 12 	call	0x25ce	; 0x25ce <fmin>
     d78:	60 93 2a 02 	sts	0x022A, r22
     d7c:	70 93 2b 02 	sts	0x022B, r23
     d80:	80 93 2c 02 	sts	0x022C, r24
     d84:	90 93 2d 02 	sts	0x022D, r25
		cmd_ang_vel = -0.5*atan2(1*(heading_robot - cmd_heading) +0,1);
		////////////////////////////////////////////////////////////
		*/

		// Velocity Commands
		v_l_cmd = (cmd_lin_vel - cmd_ang_vel*ROBOT_RADIUS);
     d88:	60 91 6c 01 	lds	r22, 0x016C
     d8c:	70 91 6d 01 	lds	r23, 0x016D
     d90:	80 91 6e 01 	lds	r24, 0x016E
     d94:	90 91 6f 01 	lds	r25, 0x016F
     d98:	26 e6       	ldi	r18, 0x66	; 102
     d9a:	36 e6       	ldi	r19, 0x66	; 102
     d9c:	46 e0       	ldi	r20, 0x06	; 6
     d9e:	51 ec       	ldi	r21, 0xC1	; 193
     da0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	60 91 68 01 	lds	r22, 0x0168
     dac:	70 91 69 01 	lds	r23, 0x0169
     db0:	80 91 6a 01 	lds	r24, 0x016A
     db4:	90 91 6b 01 	lds	r25, 0x016B
     db8:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     dbc:	5b 01       	movw	r10, r22
     dbe:	6c 01       	movw	r12, r24
     dc0:	60 93 c6 02 	sts	0x02C6, r22
     dc4:	70 93 c7 02 	sts	0x02C7, r23
     dc8:	80 93 c8 02 	sts	0x02C8, r24
     dcc:	90 93 c9 02 	sts	0x02C9, r25
		v_r_cmd = (cmd_lin_vel + cmd_ang_vel*ROBOT_RADIUS);
     dd0:	60 91 6c 01 	lds	r22, 0x016C
     dd4:	70 91 6d 01 	lds	r23, 0x016D
     dd8:	80 91 6e 01 	lds	r24, 0x016E
     ddc:	90 91 6f 01 	lds	r25, 0x016F
     de0:	26 e6       	ldi	r18, 0x66	; 102
     de2:	36 e6       	ldi	r19, 0x66	; 102
     de4:	46 e0       	ldi	r20, 0x06	; 6
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     dec:	20 91 68 01 	lds	r18, 0x0168
     df0:	30 91 69 01 	lds	r19, 0x0169
     df4:	40 91 6a 01 	lds	r20, 0x016A
     df8:	50 91 6b 01 	lds	r21, 0x016B
     dfc:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     e00:	7b 01       	movw	r14, r22
     e02:	8c 01       	movw	r16, r24
     e04:	60 93 72 02 	sts	0x0272, r22
     e08:	70 93 73 02 	sts	0x0273, r23
     e0c:	80 93 74 02 	sts	0x0274, r24
     e10:	90 93 75 02 	sts	0x0275, r25
		////////////////////////////////////////
		
		// PID calculation	/////////////////////////////////////////
		error_l = v_l_cmd - v_l;									// Current Left Wheel error
     e14:	c6 01       	movw	r24, r12
     e16:	b5 01       	movw	r22, r10
     e18:	a4 01       	movw	r20, r8
     e1a:	93 01       	movw	r18, r6
     e1c:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     e20:	6d 83       	std	Y+5, r22	; 0x05
     e22:	7e 83       	std	Y+6, r23	; 0x06
     e24:	8f 83       	std	Y+7, r24	; 0x07
     e26:	98 87       	std	Y+8, r25	; 0x08
     e28:	60 93 46 02 	sts	0x0246, r22
     e2c:	70 93 47 02 	sts	0x0247, r23
     e30:	80 93 48 02 	sts	0x0248, r24
     e34:	90 93 49 02 	sts	0x0249, r25
		error_r = v_r_cmd - v_r;									// Current Right Wheel error
     e38:	c8 01       	movw	r24, r16
     e3a:	b7 01       	movw	r22, r14
     e3c:	a2 01       	movw	r20, r4
     e3e:	91 01       	movw	r18, r2
     e40:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     e44:	69 83       	std	Y+1, r22	; 0x01
     e46:	7a 83       	std	Y+2, r23	; 0x02
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	60 93 d2 02 	sts	0x02D2, r22
     e50:	70 93 d3 02 	sts	0x02D3, r23
     e54:	80 93 d4 02 	sts	0x02D4, r24
     e58:	90 93 d5 02 	sts	0x02D5, r25
	
		// Calculate the proportion
		up_l = Kp_l*error_l;										// Left Wheel Proportion
     e5c:	60 91 1e 02 	lds	r22, 0x021E
     e60:	70 91 1f 02 	lds	r23, 0x021F
     e64:	80 91 20 02 	lds	r24, 0x0220
     e68:	90 91 21 02 	lds	r25, 0x0221
     e6c:	2d 81       	ldd	r18, Y+5	; 0x05
     e6e:	3e 81       	ldd	r19, Y+6	; 0x06
     e70:	4f 81       	ldd	r20, Y+7	; 0x07
     e72:	58 85       	ldd	r21, Y+8	; 0x08
     e74:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     e78:	69 8b       	std	Y+17, r22	; 0x11
     e7a:	7a 8b       	std	Y+18, r23	; 0x12
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
     e80:	60 93 76 02 	sts	0x0276, r22
     e84:	70 93 77 02 	sts	0x0277, r23
     e88:	80 93 78 02 	sts	0x0278, r24
     e8c:	90 93 79 02 	sts	0x0279, r25
		up_r = Kp_r*error_r;										// Right Wheel Proportion
     e90:	60 91 6e 02 	lds	r22, 0x026E
     e94:	70 91 6f 02 	lds	r23, 0x026F
     e98:	80 91 70 02 	lds	r24, 0x0270
     e9c:	90 91 71 02 	lds	r25, 0x0271
     ea0:	29 81       	ldd	r18, Y+1	; 0x01
     ea2:	3a 81       	ldd	r19, Y+2	; 0x02
     ea4:	4b 81       	ldd	r20, Y+3	; 0x03
     ea6:	5c 81       	ldd	r21, Y+4	; 0x04
     ea8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     eac:	6d 8b       	std	Y+21, r22	; 0x15
     eae:	7e 8b       	std	Y+22, r23	; 0x16
     eb0:	8f 8b       	std	Y+23, r24	; 0x17
     eb2:	98 8f       	std	Y+24, r25	; 0x18
     eb4:	60 93 42 02 	sts	0x0242, r22
     eb8:	70 93 43 02 	sts	0x0243, r23
     ebc:	80 93 44 02 	sts	0x0244, r24
     ec0:	90 93 45 02 	sts	0x0245, r25
		
		// Calculate the integral
		ui_l = Ki_l*(error_l + error_l_n1) + ui_l_n1;				// Update Left Wheel integral
     ec4:	e0 90 b6 02 	lds	r14, 0x02B6
     ec8:	f0 90 b7 02 	lds	r15, 0x02B7
     ecc:	00 91 b8 02 	lds	r16, 0x02B8
     ed0:	10 91 b9 02 	lds	r17, 0x02B9
     ed4:	6d 81       	ldd	r22, Y+5	; 0x05
     ed6:	7e 81       	ldd	r23, Y+6	; 0x06
     ed8:	8f 81       	ldd	r24, Y+7	; 0x07
     eda:	98 85       	ldd	r25, Y+8	; 0x08
     edc:	a8 01       	movw	r20, r16
     ede:	97 01       	movw	r18, r14
     ee0:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     ee4:	20 91 5e 02 	lds	r18, 0x025E
     ee8:	30 91 5f 02 	lds	r19, 0x025F
     eec:	40 91 60 02 	lds	r20, 0x0260
     ef0:	50 91 61 02 	lds	r21, 0x0261
     ef4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     ef8:	20 91 60 01 	lds	r18, 0x0160
     efc:	30 91 61 01 	lds	r19, 0x0161
     f00:	40 91 62 01 	lds	r20, 0x0162
     f04:	50 91 63 01 	lds	r21, 0x0163
     f08:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     f0c:	60 93 32 02 	sts	0x0232, r22
     f10:	70 93 33 02 	sts	0x0233, r23
     f14:	80 93 34 02 	sts	0x0234, r24
     f18:	90 93 35 02 	sts	0x0235, r25
		ui_r = Ki_r*(error_r + error_r_n1) + ui_r_n1;				// Update Right Wheel integral
     f1c:	a0 90 36 02 	lds	r10, 0x0236
     f20:	b0 90 37 02 	lds	r11, 0x0237
     f24:	c0 90 38 02 	lds	r12, 0x0238
     f28:	d0 90 39 02 	lds	r13, 0x0239
     f2c:	69 81       	ldd	r22, Y+1	; 0x01
     f2e:	7a 81       	ldd	r23, Y+2	; 0x02
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	a6 01       	movw	r20, r12
     f36:	95 01       	movw	r18, r10
     f38:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     f3c:	20 91 b2 02 	lds	r18, 0x02B2
     f40:	30 91 b3 02 	lds	r19, 0x02B3
     f44:	40 91 b4 02 	lds	r20, 0x02B4
     f48:	50 91 b5 02 	lds	r21, 0x02B5
     f4c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     f50:	20 91 64 01 	lds	r18, 0x0164
     f54:	30 91 65 01 	lds	r19, 0x0165
     f58:	40 91 66 01 	lds	r20, 0x0166
     f5c:	50 91 67 01 	lds	r21, 0x0167
     f60:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
     f64:	60 93 1a 02 	sts	0x021A, r22
     f68:	70 93 1b 02 	sts	0x021B, r23
     f6c:	80 93 1c 02 	sts	0x021C, r24
     f70:	90 93 1d 02 	sts	0x021D, r25
		Td_r = 25*(elapsed_time);
		Kd_l = (2*K_l*Td_l)/T_l;									// Update Derivative coefficient
		Kd_r = (2*K_r*Td_r)/T_r;									// Update Derivative coefficient
*/
		// Calculate the derivative		
		ud_l = Kd_l*(error_l - error_l_n1) - ud_l_n1;				// Update Left Wheel derivative
     f74:	60 90 a2 02 	lds	r6, 0x02A2
     f78:	70 90 a3 02 	lds	r7, 0x02A3
     f7c:	80 90 a4 02 	lds	r8, 0x02A4
     f80:	90 90 a5 02 	lds	r9, 0x02A5
     f84:	6d 81       	ldd	r22, Y+5	; 0x05
     f86:	7e 81       	ldd	r23, Y+6	; 0x06
     f88:	8f 81       	ldd	r24, Y+7	; 0x07
     f8a:	98 85       	ldd	r25, Y+8	; 0x08
     f8c:	a8 01       	movw	r20, r16
     f8e:	97 01       	movw	r18, r14
     f90:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     f94:	20 91 6a 02 	lds	r18, 0x026A
     f98:	30 91 6b 02 	lds	r19, 0x026B
     f9c:	40 91 6c 02 	lds	r20, 0x026C
     fa0:	50 91 6d 02 	lds	r21, 0x026D
     fa4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     fa8:	a4 01       	movw	r20, r8
     faa:	93 01       	movw	r18, r6
     fac:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     fb0:	7b 01       	movw	r14, r22
     fb2:	8c 01       	movw	r16, r24
     fb4:	60 93 ca 02 	sts	0x02CA, r22
     fb8:	70 93 cb 02 	sts	0x02CB, r23
     fbc:	80 93 cc 02 	sts	0x02CC, r24
     fc0:	90 93 cd 02 	sts	0x02CD, r25
		ud_r = Kd_r*(error_r - error_r_n1) - ud_r_n1;				// Update Right Wheel derivative
     fc4:	20 90 62 02 	lds	r2, 0x0262
     fc8:	30 90 63 02 	lds	r3, 0x0263
     fcc:	40 90 64 02 	lds	r4, 0x0264
     fd0:	50 90 65 02 	lds	r5, 0x0265
     fd4:	69 81       	ldd	r22, Y+1	; 0x01
     fd6:	7a 81       	ldd	r23, Y+2	; 0x02
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	a6 01       	movw	r20, r12
     fde:	95 01       	movw	r18, r10
     fe0:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
     fe4:	20 91 ae 02 	lds	r18, 0x02AE
     fe8:	30 91 af 02 	lds	r19, 0x02AF
     fec:	40 91 b0 02 	lds	r20, 0x02B0
     ff0:	50 91 b1 02 	lds	r21, 0x02B1
     ff4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
     ff8:	a2 01       	movw	r20, r4
     ffa:	91 01       	movw	r18, r2
     ffc:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    1000:	5b 01       	movw	r10, r22
    1002:	6c 01       	movw	r12, r24
    1004:	60 93 7a 02 	sts	0x027A, r22
    1008:	70 93 7b 02 	sts	0x027B, r23
    100c:	80 93 7c 02 	sts	0x027C, r24
    1010:	90 93 7d 02 	sts	0x027D, r25
		
		// Filter the derivative output
		udf_l = lpf1_l*ud_l + lpf2_l*ud_l_n1 - lpf3_l*udf_l_n1;		// Update filtered Left Wheel derivative
    1014:	60 91 ce 02 	lds	r22, 0x02CE
    1018:	70 91 cf 02 	lds	r23, 0x02CF
    101c:	80 91 d0 02 	lds	r24, 0x02D0
    1020:	90 91 d1 02 	lds	r25, 0x02D1
    1024:	a8 01       	movw	r20, r16
    1026:	97 01       	movw	r18, r14
    1028:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    102c:	7b 01       	movw	r14, r22
    102e:	8c 01       	movw	r16, r24
    1030:	c4 01       	movw	r24, r8
    1032:	b3 01       	movw	r22, r6
    1034:	20 91 92 02 	lds	r18, 0x0292
    1038:	30 91 93 02 	lds	r19, 0x0293
    103c:	40 91 94 02 	lds	r20, 0x0294
    1040:	50 91 95 02 	lds	r21, 0x0295
    1044:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	c8 01       	movw	r24, r16
    104e:	b7 01       	movw	r22, r14
    1050:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    1054:	7b 01       	movw	r14, r22
    1056:	8c 01       	movw	r16, r24
    1058:	60 91 a6 02 	lds	r22, 0x02A6
    105c:	70 91 a7 02 	lds	r23, 0x02A7
    1060:	80 91 a8 02 	lds	r24, 0x02A8
    1064:	90 91 a9 02 	lds	r25, 0x02A9
    1068:	20 91 de 02 	lds	r18, 0x02DE
    106c:	30 91 df 02 	lds	r19, 0x02DF
    1070:	40 91 e0 02 	lds	r20, 0x02E0
    1074:	50 91 e1 02 	lds	r21, 0x02E1
    1078:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	c8 01       	movw	r24, r16
    1082:	b7 01       	movw	r22, r14
    1084:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    1088:	60 93 66 02 	sts	0x0266, r22
    108c:	70 93 67 02 	sts	0x0267, r23
    1090:	80 93 68 02 	sts	0x0268, r24
    1094:	90 93 69 02 	sts	0x0269, r25
		udf_r = lpf1_r*ud_r + lpf2_r*ud_r_n1 - lpf3_r*udf_r_n1;		// Update filtered Right Wheel derivative
    1098:	60 91 da 02 	lds	r22, 0x02DA
    109c:	70 91 db 02 	lds	r23, 0x02DB
    10a0:	80 91 dc 02 	lds	r24, 0x02DC
    10a4:	90 91 dd 02 	lds	r25, 0x02DD
    10a8:	a6 01       	movw	r20, r12
    10aa:	95 01       	movw	r18, r10
    10ac:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    10b0:	7b 01       	movw	r14, r22
    10b2:	8c 01       	movw	r16, r24
    10b4:	c2 01       	movw	r24, r4
    10b6:	b1 01       	movw	r22, r2
    10b8:	20 91 aa 02 	lds	r18, 0x02AA
    10bc:	30 91 ab 02 	lds	r19, 0x02AB
    10c0:	40 91 ac 02 	lds	r20, 0x02AC
    10c4:	50 91 ad 02 	lds	r21, 0x02AD
    10c8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c8 01       	movw	r24, r16
    10d2:	b7 01       	movw	r22, r14
    10d4:	0e 94 ae 11 	call	0x235c	; 0x235c <__addsf3>
    10d8:	7b 01       	movw	r14, r22
    10da:	8c 01       	movw	r16, r24
    10dc:	60 91 96 02 	lds	r22, 0x0296
    10e0:	70 91 97 02 	lds	r23, 0x0297
    10e4:	80 91 98 02 	lds	r24, 0x0298
    10e8:	90 91 99 02 	lds	r25, 0x0299
    10ec:	20 91 8a 02 	lds	r18, 0x028A
    10f0:	30 91 8b 02 	lds	r19, 0x028B
    10f4:	40 91 8c 02 	lds	r20, 0x028C
    10f8:	50 91 8d 02 	lds	r21, 0x028D
    10fc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1100:	9b 01       	movw	r18, r22
    1102:	ac 01       	movw	r20, r24
    1104:	c8 01       	movw	r24, r16
    1106:	b7 01       	movw	r22, r14
    1108:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    110c:	60 93 9a 02 	sts	0x029A, r22
    1110:	70 93 9b 02 	sts	0x029B, r23
    1114:	80 93 9c 02 	sts	0x029C, r24
    1118:	90 93 9d 02 	sts	0x029D, r25
		
		u_l = up_l;									// u_l(t) to be output to the Left Wheel 
    111c:	89 89       	ldd	r24, Y+17	; 0x11
    111e:	9a 89       	ldd	r25, Y+18	; 0x12
    1120:	ab 89       	ldd	r26, Y+19	; 0x13
    1122:	bc 89       	ldd	r27, Y+20	; 0x14
    1124:	80 93 c2 02 	sts	0x02C2, r24
    1128:	90 93 c3 02 	sts	0x02C3, r25
    112c:	a0 93 c4 02 	sts	0x02C4, r26
    1130:	b0 93 c5 02 	sts	0x02C5, r27
		u_r = up_r;									// u_r(t) to be output to the Right Wheel 
    1134:	2d 89       	ldd	r18, Y+21	; 0x15
    1136:	3e 89       	ldd	r19, Y+22	; 0x16
    1138:	4f 89       	ldd	r20, Y+23	; 0x17
    113a:	58 8d       	ldd	r21, Y+24	; 0x18
    113c:	20 93 3a 02 	sts	0x023A, r18
    1140:	30 93 3b 02 	sts	0x023B, r19
    1144:	40 93 3c 02 	sts	0x023C, r20
    1148:	50 93 3d 02 	sts	0x023D, r21
		//u_l = up_l + ui_l + udf_l;									// u_l(t) to be output to the Left Wheel 
		//u_r = up_r + ui_r + udf_r;									// u_r(t) to be output to the Right Wheel 

		// Anti-windup
		if(u_l > 30){
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 ef       	ldi	r20, 0xF0	; 240
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
    115c:	18 16       	cp	r1, r24
    115e:	ac f4       	brge	.+42     	; 0x118a <__stack+0xc8b>
			ui_l = ui_l_n1;
    1160:	80 91 60 01 	lds	r24, 0x0160
    1164:	90 91 61 01 	lds	r25, 0x0161
    1168:	a0 91 62 01 	lds	r26, 0x0162
    116c:	b0 91 63 01 	lds	r27, 0x0163
    1170:	80 93 32 02 	sts	0x0232, r24
    1174:	90 93 33 02 	sts	0x0233, r25
    1178:	a0 93 34 02 	sts	0x0234, r26
    117c:	b0 93 35 02 	sts	0x0235, r27
			u_l = 30;	
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 ef       	ldi	r26, 0xF0	; 240
    1186:	b1 e4       	ldi	r27, 0x41	; 65
    1188:	20 c0       	rjmp	.+64     	; 0x11ca <__stack+0xccb>
		}
		else if(u_l < -30){
    118a:	69 89       	ldd	r22, Y+17	; 0x11
    118c:	7a 89       	ldd	r23, Y+18	; 0x12
    118e:	8b 89       	ldd	r24, Y+19	; 0x13
    1190:	9c 89       	ldd	r25, Y+20	; 0x14
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 ef       	ldi	r20, 0xF0	; 240
    1198:	51 ec       	ldi	r21, 0xC1	; 193
    119a:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    119e:	88 23       	and	r24, r24
    11a0:	e4 f4       	brge	.+56     	; 0x11da <__stack+0xcdb>
			ui_l = ui_l_n1;
    11a2:	80 91 60 01 	lds	r24, 0x0160
    11a6:	90 91 61 01 	lds	r25, 0x0161
    11aa:	a0 91 62 01 	lds	r26, 0x0162
    11ae:	b0 91 63 01 	lds	r27, 0x0163
    11b2:	80 93 32 02 	sts	0x0232, r24
    11b6:	90 93 33 02 	sts	0x0233, r25
    11ba:	a0 93 34 02 	sts	0x0234, r26
    11be:	b0 93 35 02 	sts	0x0235, r27
			u_l = -30;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 ef       	ldi	r26, 0xF0	; 240
    11c8:	b1 ec       	ldi	r27, 0xC1	; 193
    11ca:	80 93 c2 02 	sts	0x02C2, r24
    11ce:	90 93 c3 02 	sts	0x02C3, r25
    11d2:	a0 93 c4 02 	sts	0x02C4, r26
    11d6:	b0 93 c5 02 	sts	0x02C5, r27
		}

		if(u_r > 30){
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 ef       	ldi	r20, 0xF0	; 240
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	ac f4       	brge	.+42     	; 0x121c <__stack+0xd1d>
			ui_r = ui_r_n1;
    11f2:	80 91 64 01 	lds	r24, 0x0164
    11f6:	90 91 65 01 	lds	r25, 0x0165
    11fa:	a0 91 66 01 	lds	r26, 0x0166
    11fe:	b0 91 67 01 	lds	r27, 0x0167
    1202:	80 93 1a 02 	sts	0x021A, r24
    1206:	90 93 1b 02 	sts	0x021B, r25
    120a:	a0 93 1c 02 	sts	0x021C, r26
    120e:	b0 93 1d 02 	sts	0x021D, r27
			u_r = 30;	
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 ef       	ldi	r26, 0xF0	; 240
    1218:	b1 e4       	ldi	r27, 0x41	; 65
    121a:	20 c0       	rjmp	.+64     	; 0x125c <__stack+0xd5d>
		}
		else if(u_r < -30){
    121c:	6d 89       	ldd	r22, Y+21	; 0x15
    121e:	7e 89       	ldd	r23, Y+22	; 0x16
    1220:	8f 89       	ldd	r24, Y+23	; 0x17
    1222:	98 8d       	ldd	r25, Y+24	; 0x18
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 ef       	ldi	r20, 0xF0	; 240
    122a:	51 ec       	ldi	r21, 0xC1	; 193
    122c:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    1230:	88 23       	and	r24, r24
    1232:	e4 f4       	brge	.+56     	; 0x126c <__stack+0xd6d>
			ui_r = ui_r_n1;
    1234:	80 91 64 01 	lds	r24, 0x0164
    1238:	90 91 65 01 	lds	r25, 0x0165
    123c:	a0 91 66 01 	lds	r26, 0x0166
    1240:	b0 91 67 01 	lds	r27, 0x0167
    1244:	80 93 1a 02 	sts	0x021A, r24
    1248:	90 93 1b 02 	sts	0x021B, r25
    124c:	a0 93 1c 02 	sts	0x021C, r26
    1250:	b0 93 1d 02 	sts	0x021D, r27
			u_r = -30;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 ef       	ldi	r26, 0xF0	; 240
    125a:	b1 ec       	ldi	r27, 0xC1	; 193
    125c:	80 93 3a 02 	sts	0x023A, r24
    1260:	90 93 3b 02 	sts	0x023B, r25
    1264:	a0 93 3c 02 	sts	0x023C, r26
    1268:	b0 93 3d 02 	sts	0x023D, r27
		}

		error_l_n1 = error_l;						// Update previous Left Wheel proportional error
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	af 81       	ldd	r26, Y+7	; 0x07
    1272:	b8 85       	ldd	r27, Y+8	; 0x08
    1274:	80 93 b6 02 	sts	0x02B6, r24
    1278:	90 93 b7 02 	sts	0x02B7, r25
    127c:	a0 93 b8 02 	sts	0x02B8, r26
    1280:	b0 93 b9 02 	sts	0x02B9, r27
		ui_l_n1 = ui_l;								// Update previous Left Wheel integral
    1284:	80 91 32 02 	lds	r24, 0x0232
    1288:	90 91 33 02 	lds	r25, 0x0233
    128c:	a0 91 34 02 	lds	r26, 0x0234
    1290:	b0 91 35 02 	lds	r27, 0x0235
    1294:	80 93 60 01 	sts	0x0160, r24
    1298:	90 93 61 01 	sts	0x0161, r25
    129c:	a0 93 62 01 	sts	0x0162, r26
    12a0:	b0 93 63 01 	sts	0x0163, r27
		ud_l_n1 = ud_l;								// Update previous Left Wheel derivative
    12a4:	80 91 ca 02 	lds	r24, 0x02CA
    12a8:	90 91 cb 02 	lds	r25, 0x02CB
    12ac:	a0 91 cc 02 	lds	r26, 0x02CC
    12b0:	b0 91 cd 02 	lds	r27, 0x02CD
    12b4:	80 93 a2 02 	sts	0x02A2, r24
    12b8:	90 93 a3 02 	sts	0x02A3, r25
    12bc:	a0 93 a4 02 	sts	0x02A4, r26
    12c0:	b0 93 a5 02 	sts	0x02A5, r27
		udf_l_n1 = udf_l;							// Update previous Left Wheel filtered derivative
    12c4:	80 91 66 02 	lds	r24, 0x0266
    12c8:	90 91 67 02 	lds	r25, 0x0267
    12cc:	a0 91 68 02 	lds	r26, 0x0268
    12d0:	b0 91 69 02 	lds	r27, 0x0269
    12d4:	80 93 de 02 	sts	0x02DE, r24
    12d8:	90 93 df 02 	sts	0x02DF, r25
    12dc:	a0 93 e0 02 	sts	0x02E0, r26
    12e0:	b0 93 e1 02 	sts	0x02E1, r27

		error_r_n1 = error_r;						// Update previous Right Wheel proportional error
    12e4:	29 81       	ldd	r18, Y+1	; 0x01
    12e6:	3a 81       	ldd	r19, Y+2	; 0x02
    12e8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ea:	5c 81       	ldd	r21, Y+4	; 0x04
    12ec:	20 93 36 02 	sts	0x0236, r18
    12f0:	30 93 37 02 	sts	0x0237, r19
    12f4:	40 93 38 02 	sts	0x0238, r20
    12f8:	50 93 39 02 	sts	0x0239, r21
		ui_r_n1 = ui_r;								// Update previous Right Wheel integral
    12fc:	80 91 1a 02 	lds	r24, 0x021A
    1300:	90 91 1b 02 	lds	r25, 0x021B
    1304:	a0 91 1c 02 	lds	r26, 0x021C
    1308:	b0 91 1d 02 	lds	r27, 0x021D
    130c:	80 93 64 01 	sts	0x0164, r24
    1310:	90 93 65 01 	sts	0x0165, r25
    1314:	a0 93 66 01 	sts	0x0166, r26
    1318:	b0 93 67 01 	sts	0x0167, r27
		ud_r_n1 = ud_r;								// Update previous Right Wheel derivative
    131c:	80 91 7a 02 	lds	r24, 0x027A
    1320:	90 91 7b 02 	lds	r25, 0x027B
    1324:	a0 91 7c 02 	lds	r26, 0x027C
    1328:	b0 91 7d 02 	lds	r27, 0x027D
    132c:	80 93 62 02 	sts	0x0262, r24
    1330:	90 93 63 02 	sts	0x0263, r25
    1334:	a0 93 64 02 	sts	0x0264, r26
    1338:	b0 93 65 02 	sts	0x0265, r27
		udf_r_n1 = udf_r;							// Update previous Right Wheel filtered derivative
    133c:	80 91 9a 02 	lds	r24, 0x029A
    1340:	90 91 9b 02 	lds	r25, 0x029B
    1344:	a0 91 9c 02 	lds	r26, 0x029C
    1348:	b0 91 9d 02 	lds	r27, 0x029D
    134c:	80 93 8a 02 	sts	0x028A, r24
    1350:	90 93 8b 02 	sts	0x028B, r25
    1354:	a0 93 8c 02 	sts	0x028C, r26
    1358:	b0 93 8d 02 	sts	0x028D, r27
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		
		
		wheel_l(u_l);
    135c:	60 91 c2 02 	lds	r22, 0x02C2
    1360:	70 91 c3 02 	lds	r23, 0x02C3
    1364:	80 91 c4 02 	lds	r24, 0x02C4
    1368:	90 91 c5 02 	lds	r25, 0x02C5
    136c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <wheel_l>
		wheel_r(u_r);
    1370:	60 91 3a 02 	lds	r22, 0x023A
    1374:	70 91 3b 02 	lds	r23, 0x023B
    1378:	80 91 3c 02 	lds	r24, 0x023C
    137c:	90 91 3d 02 	lds	r25, 0x023D
    1380:	0e 94 57 01 	call	0x2ae	; 0x2ae <wheel_r>
		

		// Update velocity commands /////////////////////////////////
		update_vw_cmd();
    1384:	0e 94 a1 00 	call	0x142	; 0x142 <update_vw_cmd>
    1388:	22 ca       	rjmp	.-3004   	; 0x7ce <__stack+0x2cf>

0000138a <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
    138a:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
    138c:	80 91 81 00 	lds	r24, 0x0081
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    1396:	80 91 81 00 	lds	r24, 0x0081
    139a:	8f 7e       	andi	r24, 0xEF	; 239
    139c:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    13a0:	99 30       	cpi	r25, 0x09	; 9
    13a2:	49 f4       	brne	.+18     	; 0x13b6 <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    13a4:	80 91 80 00 	lds	r24, 0x0080
    13a8:	82 60       	ori	r24, 0x02	; 2
    13aa:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    13ae:	80 91 80 00 	lds	r24, 0x0080
    13b2:	8e 7f       	andi	r24, 0xFE	; 254
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
    13b6:	9a 30       	cpi	r25, 0x0A	; 10
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    13ba:	80 91 80 00 	lds	r24, 0x0080
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    13c2:	80 91 80 00 	lds	r24, 0x0080
    13c6:	8d 7f       	andi	r24, 0xFD	; 253
    13c8:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    13cc:	80 91 80 00 	lds	r24, 0x0080
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
    13d6:	10 92 89 00 	sts	0x0089, r1
    13da:	10 92 88 00 	sts	0x0088, r1
}
    13de:	08 95       	ret

000013e0 <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
    13e0:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
    13e2:	80 91 81 00 	lds	r24, 0x0081
    13e6:	87 7f       	andi	r24, 0xF7	; 247
    13e8:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
    13ec:	80 91 81 00 	lds	r24, 0x0081
    13f0:	8f 7e       	andi	r24, 0xEF	; 239
    13f2:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
    13f6:	99 30       	cpi	r25, 0x09	; 9
    13f8:	49 f4       	brne	.+18     	; 0x140c <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
    13fa:	80 91 80 00 	lds	r24, 0x0080
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
    1404:	80 91 80 00 	lds	r24, 0x0080
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
    140c:	9a 30       	cpi	r25, 0x0A	; 10
    140e:	21 f4       	brne	.+8      	; 0x1418 <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
    1410:	80 91 80 00 	lds	r24, 0x0080
    1414:	82 60       	ori	r24, 0x02	; 2
    1416:	03 c0       	rjmp	.+6      	; 0x141e <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
    1418:	80 91 80 00 	lds	r24, 0x0080
    141c:	8d 7f       	andi	r24, 0xFD	; 253
    141e:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
    1422:	80 91 80 00 	lds	r24, 0x0080
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
    142c:	10 92 8b 00 	sts	0x008B, r1
    1430:	10 92 8a 00 	sts	0x008A, r1
}
    1434:	08 95       	ret

00001436 <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    1436:	e0 e8       	ldi	r30, 0x80	; 128
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	20 81       	ld	r18, Z
    143c:	2e 7f       	andi	r18, 0xFE	; 254
    143e:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
    1440:	20 81       	ld	r18, Z
    1442:	22 60       	ori	r18, 0x02	; 2
    1444:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
    1446:	e1 e8       	ldi	r30, 0x81	; 129
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	20 81       	ld	r18, Z
    144c:	28 60       	ori	r18, 0x08	; 8
    144e:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
    1450:	20 81       	ld	r18, Z
    1452:	20 61       	ori	r18, 0x10	; 16
    1454:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
    1456:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
    1458:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
    145a:	90 93 87 00 	sts	0x0087, r25
    145e:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
    1462:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
    1464:	10 92 89 00 	sts	0x0089, r1
    1468:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
    146c:	10 92 8b 00 	sts	0x008B, r1
    1470:	10 92 8a 00 	sts	0x008A, r1
}
    1474:	08 95       	ret

00001476 <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
    1476:	84 b5       	in	r24, 0x24	; 36
    1478:	8f 7d       	andi	r24, 0xDF	; 223
    147a:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    147c:	84 b5       	in	r24, 0x24	; 36
    147e:	8f 7e       	andi	r24, 0xEF	; 239
    1480:	84 bd       	out	0x24, r24	; 36
}
    1482:	08 95       	ret

00001484 <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
    1484:	84 b5       	in	r24, 0x24	; 36
    1486:	8f 77       	andi	r24, 0x7F	; 127
    1488:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    148a:	84 b5       	in	r24, 0x24	; 36
    148c:	8f 7b       	andi	r24, 0xBF	; 191
    148e:	84 bd       	out	0x24, r24	; 36
}
    1490:	08 95       	ret

00001492 <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
    1492:	e0 e8       	ldi	r30, 0x80	; 128
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 7d       	andi	r24, 0xDF	; 223
    149a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    149c:	80 81       	ld	r24, Z
    149e:	8f 7e       	andi	r24, 0xEF	; 239
    14a0:	80 83       	st	Z, r24
}
    14a2:	08 95       	ret

000014a4 <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
    14a4:	e0 e8       	ldi	r30, 0x80	; 128
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 77       	andi	r24, 0x7F	; 127
    14ac:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 7b       	andi	r24, 0xBF	; 191
    14b2:	80 83       	st	Z, r24
}
    14b4:	08 95       	ret

000014b6 <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
    14b6:	84 b5       	in	r24, 0x24	; 36
    14b8:	80 62       	ori	r24, 0x20	; 32
    14ba:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
    14bc:	84 b5       	in	r24, 0x24	; 36
    14be:	8f 7e       	andi	r24, 0xEF	; 239
    14c0:	84 bd       	out	0x24, r24	; 36
}
    14c2:	08 95       	ret

000014c4 <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
    14c4:	84 b5       	in	r24, 0x24	; 36
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
    14ca:	84 b5       	in	r24, 0x24	; 36
    14cc:	8f 7b       	andi	r24, 0xBF	; 191
    14ce:	84 bd       	out	0x24, r24	; 36
}
    14d0:	08 95       	ret

000014d2 <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
    14d2:	e0 e8       	ldi	r30, 0x80	; 128
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 62       	ori	r24, 0x20	; 32
    14da:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
    14dc:	80 81       	ld	r24, Z
    14de:	8f 7e       	andi	r24, 0xEF	; 239
    14e0:	80 83       	st	Z, r24
}
    14e2:	08 95       	ret

000014e4 <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
    14e4:	e0 e8       	ldi	r30, 0x80	; 128
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7b       	andi	r24, 0xBF	; 191
    14f2:	80 83       	st	Z, r24
}
    14f4:	08 95       	ret

000014f6 <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
    14f6:	88 bd       	out	0x28, r24	; 40
}
    14f8:	08 95       	ret

000014fa <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
    14fa:	87 bd       	out	0x27, r24	; 39
}
    14fc:	08 95       	ret

000014fe <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
    14fe:	90 93 89 00 	sts	0x0089, r25
    1502:	80 93 88 00 	sts	0x0088, r24
}
    1506:	08 95       	ret

00001508 <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
    1508:	90 93 8b 00 	sts	0x008B, r25
    150c:	80 93 8a 00 	sts	0x008A, r24
}
    1510:	08 95       	ret

00001512 <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1512:	10 92 4a 02 	sts	0x024A, r1
    1516:	10 92 4b 02 	sts	0x024B, r1
    151a:	10 92 4c 02 	sts	0x024C, r1
    151e:	10 92 4d 02 	sts	0x024D, r1
    1522:	16 bc       	out	0x26, r1	; 38
}
    1524:	08 95       	ret

00001526 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1526:	10 92 3e 02 	sts	0x023E, r1
    152a:	10 92 3f 02 	sts	0x023F, r1
    152e:	10 92 40 02 	sts	0x0240, r1
    1532:	10 92 41 02 	sts	0x0241, r1
    1536:	10 92 85 00 	sts	0x0085, r1
    153a:	10 92 84 00 	sts	0x0084, r1
}
    153e:	08 95       	ret

00001540 <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
    1540:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1548:	10 92 4a 02 	sts	0x024A, r1
    154c:	10 92 4b 02 	sts	0x024B, r1
    1550:	10 92 4c 02 	sts	0x024C, r1
    1554:	10 92 4d 02 	sts	0x024D, r1
    1558:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    155a:	08 95       	ret

0000155c <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
    155c:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1566:	10 92 3e 02 	sts	0x023E, r1
    156a:	10 92 3f 02 	sts	0x023F, r1
    156e:	10 92 40 02 	sts	0x0240, r1
    1572:	10 92 41 02 	sts	0x0241, r1
    1576:	10 92 85 00 	sts	0x0085, r1
    157a:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    157e:	08 95       	ret

00001580 <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    1580:	20 91 4a 02 	lds	r18, 0x024A
    1584:	30 91 4b 02 	lds	r19, 0x024B
    1588:	40 91 4c 02 	lds	r20, 0x024C
    158c:	50 91 4d 02 	lds	r21, 0x024D
}
    1590:	b9 01       	movw	r22, r18
    1592:	ca 01       	movw	r24, r20
    1594:	08 95       	ret

00001596 <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	24 e0       	ldi	r18, 0x04	; 4
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	aa 1f       	adc	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	2a 95       	dec	r18
    15a6:	d1 f7       	brne	.-12     	; 0x159c <delay_us+0x6>
    15a8:	03 96       	adiw	r24, 0x03	; 3
    15aa:	a1 1d       	adc	r26, r1
    15ac:	b1 1d       	adc	r27, r1
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	2a e0       	ldi	r18, 0x0A	; 10
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
    15c4:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	82 17       	cp	r24, r18
    15ca:	93 07       	cpc	r25, r19
    15cc:	d8 f3       	brcs	.-10     	; 0x15c4 <delay_us+0x2e>
		asm("nop");
	};
}
    15ce:	08 95       	ret

000015d0 <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	0f 92       	push	r0
    15d8:	11 24       	eor	r1, r1
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
    15e2:	80 91 4a 02 	lds	r24, 0x024A
    15e6:	90 91 4b 02 	lds	r25, 0x024B
    15ea:	a0 91 4c 02 	lds	r26, 0x024C
    15ee:	b0 91 4d 02 	lds	r27, 0x024D
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	a1 1d       	adc	r26, r1
    15f6:	b1 1d       	adc	r27, r1
    15f8:	80 93 4a 02 	sts	0x024A, r24
    15fc:	90 93 4b 02 	sts	0x024B, r25
    1600:	a0 93 4c 02 	sts	0x024C, r26
    1604:	b0 93 4d 02 	sts	0x024D, r27
}
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    161a:	90 93 71 01 	sts	0x0171, r25
    161e:	80 93 70 01 	sts	0x0170, r24
}
    1622:	08 95       	ret

00001624 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    1624:	1f 93       	push	r17
    1626:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    1628:	8a 30       	cpi	r24, 0x0A	; 10
    162a:	31 f4       	brne	.+12     	; 0x1638 <rprintfChar+0x14>
		rputchar('\r');
    162c:	e0 91 70 01 	lds	r30, 0x0170
    1630:	f0 91 71 01 	lds	r31, 0x0171
    1634:	8d e0       	ldi	r24, 0x0D	; 13
    1636:	09 95       	icall
	// send character
	rputchar(c);
    1638:	e0 91 70 01 	lds	r30, 0x0170
    163c:	f0 91 71 01 	lds	r31, 0x0171
    1640:	81 2f       	mov	r24, r17
    1642:	09 95       	icall
}
    1644:	1f 91       	pop	r17
    1646:	08 95       	ret

00001648 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	21 f4       	brne	.+8      	; 0x165a <rprintfStr+0x12>
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    1654:	21 96       	adiw	r28, 0x01	; 1
    1656:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    165a:	88 81       	ld	r24, Y
    165c:	88 23       	and	r24, r24
    165e:	d1 f7       	brne	.-12     	; 0x1654 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	8c 01       	movw	r16, r24
    1674:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	e9 f0       	breq	.+58     	; 0x16b4 <rprintfStrLen+0x4e>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    167e:	26 17       	cp	r18, r22
    1680:	37 07       	cpc	r19, r23
    1682:	38 f4       	brcc	.+14     	; 0x1692 <rprintfStrLen+0x2c>
    1684:	f8 01       	movw	r30, r16
    1686:	81 91       	ld	r24, Z+
    1688:	8f 01       	movw	r16, r30
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	88 23       	and	r24, r24
    1690:	b1 f7       	brne	.-20     	; 0x167e <rprintfStrLen+0x18>
    1692:	c0 e0       	ldi	r28, 0x00	; 0
    1694:	d0 e0       	ldi	r29, 0x00	; 0
    1696:	0b c0       	rjmp	.+22     	; 0x16ae <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    1698:	f8 01       	movw	r30, r16
    169a:	80 81       	ld	r24, Z
    169c:	88 23       	and	r24, r24
    169e:	19 f0       	breq	.+6      	; 0x16a6 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    16a0:	0f 5f       	subi	r16, 0xFF	; 255
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    16ac:	21 96       	adiw	r28, 0x01	; 1
    16ae:	ce 15       	cp	r28, r14
    16b0:	df 05       	cpc	r29, r15
    16b2:	90 f3       	brcs	.-28     	; 0x1698 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <rprintfProgStr+0x10>
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    16ce:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    16d2:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    16d4:	21 96       	adiw	r28, 0x01	; 1
    16d6:	84 91       	lpm	r24, Z+
    16d8:	88 23       	and	r24, r24
    16da:	c9 f7       	brne	.-14     	; 0x16ce <rprintfProgStr+0xc>
		rprintfChar(c);
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
}
    16e8:	08 95       	ret

000016ea <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    16ea:	e8 2f       	mov	r30, r24
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	ef 70       	andi	r30, 0x0F	; 15
    16f0:	f0 70       	andi	r31, 0x00	; 0
    16f2:	e8 59       	subi	r30, 0x98	; 152
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	e4 91       	lpm	r30, Z+
    16f8:	8e 2f       	mov	r24, r30
    16fa:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
}
    16fe:	08 95       	ret

00001700 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    1700:	1f 93       	push	r17
    1702:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    1704:	82 95       	swap	r24
    1706:	8f 70       	andi	r24, 0x0F	; 15
    1708:	0e 94 75 0b 	call	0x16ea	; 0x16ea <rprintfu04>
	rprintfu04(data);
    170c:	81 2f       	mov	r24, r17
    170e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <rprintfu04>
}
    1712:	1f 91       	pop	r17
    1714:	08 95       	ret

00001716 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    1716:	1f 93       	push	r17
    1718:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    171a:	89 2f       	mov	r24, r25
    171c:	0e 94 80 0b 	call	0x1700	; 0x1700 <rprintfu08>
	rprintfu08(data);
    1720:	81 2f       	mov	r24, r17
    1722:	0e 94 80 0b 	call	0x1700	; 0x1700 <rprintfu08>
}
    1726:	1f 91       	pop	r17
    1728:	08 95       	ret

0000172a <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	7b 01       	movw	r14, r22
    1734:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    1736:	c8 01       	movw	r24, r16
    1738:	aa 27       	eor	r26, r26
    173a:	bb 27       	eor	r27, r27
    173c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <rprintfu16>
	rprintfu16(data);
    1740:	c7 01       	movw	r24, r14
    1742:	0e 94 8b 0b 	call	0x1716	; 0x1716 <rprintfu16>
}
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	08 95       	ret

00001750 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    1750:	2f 92       	push	r2
    1752:	3f 92       	push	r3
    1754:	4f 92       	push	r4
    1756:	5f 92       	push	r5
    1758:	6f 92       	push	r6
    175a:	7f 92       	push	r7
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	a3 97       	sbiw	r28, 0x23	; 35
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	6a a3       	std	Y+34, r22	; 0x22
    1786:	24 2e       	mov	r2, r20
    1788:	2b a3       	std	Y+35, r18	; 0x23
    178a:	37 01       	movw	r6, r14
    178c:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    178e:	44 23       	and	r20, r20
    1790:	51 f0       	breq	.+20     	; 0x17a6 <rprintfNum+0x56>
    1792:	17 ff       	sbrs	r17, 7
    1794:	08 c0       	rjmp	.+16     	; 0x17a6 <rprintfNum+0x56>
	{
		x = -n;
    1796:	ee 24       	eor	r14, r14
    1798:	ff 24       	eor	r15, r15
    179a:	87 01       	movw	r16, r14
    179c:	e6 18       	sub	r14, r6
    179e:	f7 08       	sbc	r15, r7
    17a0:	08 09       	sbc	r16, r8
    17a2:	19 09       	sbc	r17, r9
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    17a6:	84 01       	movw	r16, r8
    17a8:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    17aa:	2a a1       	ldd	r18, Y+34	; 0x22
    17ac:	21 50       	subi	r18, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	21 10       	cpse	r2, r1
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	29 1b       	sub	r18, r25
    17b6:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    17b8:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    17ba:	a8 2e       	mov	r10, r24
    17bc:	bb 24       	eor	r11, r11
    17be:	cc 24       	eor	r12, r12
    17c0:	dd 24       	eor	r13, r13
    17c2:	c8 01       	movw	r24, r16
    17c4:	b7 01       	movw	r22, r14
    17c6:	a6 01       	movw	r20, r12
    17c8:	95 01       	movw	r18, r10
    17ca:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    17ce:	fb 01       	movw	r30, r22
    17d0:	ef 70       	andi	r30, 0x0F	; 15
    17d2:	f0 70       	andi	r31, 0x00	; 0
    17d4:	e8 59       	subi	r30, 0x98	; 152
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	64 91       	lpm	r22, Z+
    17da:	6f 8f       	std	Y+31, r22	; 0x1f
    17dc:	c8 01       	movw	r24, r16
    17de:	b7 01       	movw	r22, r14
    17e0:	a6 01       	movw	r20, r12
    17e2:	95 01       	movw	r18, r10
    17e4:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    17e8:	c9 01       	movw	r24, r18
    17ea:	da 01       	movw	r26, r20
    17ec:	7c 01       	movw	r14, r24
    17ee:	8d 01       	movw	r16, r26
    17f0:	9e e1       	ldi	r25, 0x1E	; 30
    17f2:	49 2e       	mov	r4, r25
    17f4:	51 2c       	mov	r5, r1
    17f6:	4c 0e       	add	r4, r28
    17f8:	5d 1e       	adc	r5, r29
    17fa:	39 a0       	ldd	r3, Y+33	; 0x21
    17fc:	25 c0       	rjmp	.+74     	; 0x1848 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    17fe:	e1 14       	cp	r14, r1
    1800:	f1 04       	cpc	r15, r1
    1802:	01 05       	cpc	r16, r1
    1804:	11 05       	cpc	r17, r1
    1806:	c9 f0       	breq	.+50     	; 0x183a <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    1808:	c8 01       	movw	r24, r16
    180a:	b7 01       	movw	r22, r14
    180c:	a6 01       	movw	r20, r12
    180e:	95 01       	movw	r18, r10
    1810:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    1814:	fb 01       	movw	r30, r22
    1816:	ef 70       	andi	r30, 0x0F	; 15
    1818:	f0 70       	andi	r31, 0x00	; 0
    181a:	e8 59       	subi	r30, 0x98	; 152
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	64 91       	lpm	r22, Z+
    1820:	f2 01       	movw	r30, r4
    1822:	60 83       	st	Z, r22
    1824:	c8 01       	movw	r24, r16
    1826:	b7 01       	movw	r22, r14
    1828:	a6 01       	movw	r20, r12
    182a:	95 01       	movw	r18, r10
    182c:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    1830:	c9 01       	movw	r24, r18
    1832:	da 01       	movw	r26, r20
    1834:	7c 01       	movw	r14, r24
    1836:	8d 01       	movw	r16, r26
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    183a:	2b a1       	ldd	r18, Y+35	; 0x23
    183c:	f2 01       	movw	r30, r4
    183e:	20 83       	st	Z, r18
    1840:	3a 94       	dec	r3
    1842:	08 94       	sec
    1844:	41 08       	sbc	r4, r1
    1846:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    1848:	33 20       	and	r3, r3
    184a:	c9 f6       	brne	.-78     	; 0x17fe <rprintfNum+0xae>
    184c:	ce 01       	movw	r24, r28
    184e:	4f 96       	adiw	r24, 0x1f	; 31
    1850:	8c 01       	movw	r16, r24
    1852:	e9 a1       	ldd	r30, Y+33	; 0x21
    1854:	0e 1b       	sub	r16, r30
    1856:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    1858:	22 20       	and	r2, r2
    185a:	f1 f0       	breq	.+60     	; 0x1898 <rprintfNum+0x148>
	{
		if(n < 0)
    185c:	97 fe       	sbrs	r9, 7
    185e:	05 c0       	rjmp	.+10     	; 0x186a <rprintfNum+0x11a>
		{
   			*--p = '-';
    1860:	8d e2       	ldi	r24, 0x2D	; 45
    1862:	f8 01       	movw	r30, r16
    1864:	82 93       	st	-Z, r24
    1866:	8f 01       	movw	r16, r30
    1868:	17 c0       	rjmp	.+46     	; 0x1898 <rprintfNum+0x148>
    186a:	c8 01       	movw	r24, r16
    186c:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    186e:	61 14       	cp	r6, r1
    1870:	71 04       	cpc	r7, r1
    1872:	81 04       	cpc	r8, r1
    1874:	91 04       	cpc	r9, r1
    1876:	19 f0       	breq	.+6      	; 0x187e <rprintfNum+0x12e>
		{
	   		*--p = '+';
    1878:	8c 01       	movw	r16, r24
    187a:	8b e2       	ldi	r24, 0x2B	; 43
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    187e:	8c 01       	movw	r16, r24
    1880:	80 e2       	ldi	r24, 0x20	; 32
    1882:	f8 01       	movw	r30, r16
    1884:	80 83       	st	Z, r24
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    1888:	f8 01       	movw	r30, r16
    188a:	81 91       	ld	r24, Z+
    188c:	8f 01       	movw	r16, r30
    188e:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    1892:	fa a1       	ldd	r31, Y+34	; 0x22
    1894:	f1 50       	subi	r31, 0x01	; 1
    1896:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    1898:	2a a1       	ldd	r18, Y+34	; 0x22
    189a:	22 23       	and	r18, r18
    189c:	a9 f7       	brne	.-22     	; 0x1888 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    189e:	a3 96       	adiw	r28, 0x23	; 35
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	ef 90       	pop	r14
    18b6:	df 90       	pop	r13
    18b8:	cf 90       	pop	r12
    18ba:	bf 90       	pop	r11
    18bc:	af 90       	pop	r10
    18be:	9f 90       	pop	r9
    18c0:	8f 90       	pop	r8
    18c2:	7f 90       	pop	r7
    18c4:	6f 90       	pop	r6
    18c6:	5f 90       	pop	r5
    18c8:	4f 90       	pop	r4
    18ca:	3f 90       	pop	r3
    18cc:	2f 90       	pop	r2
    18ce:	08 95       	ret

000018d0 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    18d0:	4f 92       	push	r4
    18d2:	5f 92       	push	r5
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	48 2e       	mov	r4, r24
    18f2:	5a 01       	movw	r10, r20
    18f4:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    18f6:	cb 01       	movw	r24, r22
    18f8:	ba 01       	movw	r22, r20
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__gesf2>
    1906:	18 16       	cp	r1, r24
    1908:	1c f4       	brge	.+6      	; 0x1910 <rprintfFloat+0x40>
    190a:	35 01       	movw	r6, r10
    190c:	46 01       	movw	r8, r12
    190e:	06 c0       	rjmp	.+12     	; 0x191c <rprintfFloat+0x4c>
    1910:	35 01       	movw	r6, r10
    1912:	46 01       	movw	r8, r12
    1914:	97 fa       	bst	r9, 7
    1916:	90 94       	com	r9
    1918:	97 f8       	bld	r9, 7
    191a:	90 94       	com	r9
    191c:	0f 2e       	mov	r0, r31
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	ef 2e       	mov	r14, r31
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	ff 2e       	mov	r15, r31
    1926:	f0 e8       	ldi	r31, 0x80	; 128
    1928:	0f 2f       	mov	r16, r31
    192a:	ff e3       	ldi	r31, 0x3F	; 63
    192c:	1f 2f       	mov	r17, r31
    192e:	f0 2d       	mov	r31, r0
    1930:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    1932:	c4 01       	movw	r24, r8
    1934:	b3 01       	movw	r22, r6
    1936:	a8 01       	movw	r20, r16
    1938:	97 01       	movw	r18, r14
    193a:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    194a:	87 fd       	sbrc	r24, 7
    194c:	0e c0       	rjmp	.+28     	; 0x196a <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    194e:	c8 01       	movw	r24, r16
    1950:	b7 01       	movw	r22, r14
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    195e:	7b 01       	movw	r14, r22
    1960:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    1962:	53 94       	inc	r5
    1964:	8f e0       	ldi	r24, 0x0F	; 15
    1966:	58 16       	cp	r5, r24
    1968:	21 f7       	brne	.-56     	; 0x1932 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    196a:	c6 01       	movw	r24, r12
    196c:	b5 01       	movw	r22, r10
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    197a:	88 23       	and	r24, r24
    197c:	14 f4       	brge	.+4      	; 0x1982 <rprintfFloat+0xb2>
		rprintfChar('-');
    197e:	8d e2       	ldi	r24, 0x2D	; 45
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    1982:	8b e2       	ldi	r24, 0x2B	; 43
    1984:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    1988:	dd 24       	eor	r13, r13
    198a:	aa 24       	eor	r10, r10
    198c:	56 c0       	rjmp	.+172    	; 0x1a3a <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    198e:	c4 01       	movw	r24, r8
    1990:	b3 01       	movw	r22, r6
    1992:	a8 01       	movw	r20, r16
    1994:	97 01       	movw	r18, r14
    1996:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    199a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__fixunssfsi>
    199e:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    19a0:	d6 2a       	or	r13, r22
    19a2:	cd 2d       	mov	r28, r13
    19a4:	d0 e0       	ldi	r29, 0x00	; 0
    19a6:	cc 24       	eor	r12, r12
    19a8:	dd 24       	eor	r13, r13
    19aa:	c8 01       	movw	r24, r16
    19ac:	b7 01       	movw	r22, r14
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <rprintfFloat+0xf4>
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	c2 2e       	mov	r12, r18
    19c2:	d1 2c       	mov	r13, r1
    19c4:	cc 29       	or	r28, r12
    19c6:	dd 29       	or	r29, r13
    19c8:	cd 2b       	or	r28, r29
    19ca:	39 f0       	breq	.+14     	; 0x19da <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    19cc:	8b 2d       	mov	r24, r11
    19ce:	80 5d       	subi	r24, 0xD0	; 208
    19d0:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    19d4:	dd 24       	eor	r13, r13
    19d6:	da 94       	dec	r13
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    19da:	80 e2       	ldi	r24, 0x20	; 32
    19dc:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    19e0:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    19e2:	c8 01       	movw	r24, r16
    19e4:	b7 01       	movw	r22, r14
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 12 12 	call	0x2424	; 0x2424 <__cmpsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	19 f4       	brne	.+6      	; 0x19fc <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    19f6:	8e e2       	ldi	r24, 0x2E	; 46
    19f8:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
		}
		
		x -= (digit*place);
    19fc:	6b 2d       	mov	r22, r11
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	88 27       	eor	r24, r24
    1a02:	77 fd       	sbrc	r23, 7
    1a04:	80 95       	com	r24
    1a06:	98 2f       	mov	r25, r24
    1a08:	0e 94 ac 12 	call	0x2558	; 0x2558 <__floatsisf>
    1a0c:	a8 01       	movw	r20, r16
    1a0e:	97 01       	movw	r18, r14
    1a10:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__mulsf3>
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	c4 01       	movw	r24, r8
    1a1a:	b3 01       	movw	r22, r6
    1a1c:	0e 94 ad 11 	call	0x235a	; 0x235a <__subsf3>
    1a20:	3b 01       	movw	r6, r22
    1a22:	4c 01       	movw	r8, r24
		place /= 10.0;
    1a24:	c8 01       	movw	r24, r16
    1a26:	b7 01       	movw	r22, r14
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 16 12 	call	0x242c	; 0x242c <__divsf3>
    1a34:	7b 01       	movw	r14, r22
    1a36:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    1a38:	a3 94       	inc	r10
    1a3a:	a4 14       	cp	r10, r4
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <rprintfFloat+0x170>
    1a3e:	a7 cf       	rjmp	.-178    	; 0x198e <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	5f 90       	pop	r5
    1a5e:	4f 90       	pop	r4
    1a60:	08 95       	ret

00001a62 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	78 88       	ldd	r7, Y+16	; 0x10
    1a82:	c9 88       	ldd	r12, Y+17	; 0x11
    1a84:	da 88       	ldd	r13, Y+18	; 0x12
    1a86:	63 e1       	ldi	r22, 0x13	; 19
    1a88:	e6 2e       	mov	r14, r22
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	ec 0e       	add	r14, r28
    1a8e:	fd 1e       	adc	r15, r29
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    1a92:	88 23       	and	r24, r24
    1a94:	81 f4       	brne	.+32     	; 0x1ab6 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	bf 90       	pop	r11
    1aac:	af 90       	pop	r10
    1aae:	9f 90       	pop	r9
    1ab0:	8f 90       	pop	r8
    1ab2:	7f 90       	pop	r7
    1ab4:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    1ab6:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    1aba:	96 01       	movw	r18, r12
    1abc:	2f 5f       	subi	r18, 0xFF	; 255
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1ac0:	77 20       	and	r7, r7
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <rprintf1RamRom+0x6a>
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	69 01       	movw	r12, r18
    1ac8:	84 91       	lpm	r24, Z+
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <rprintf1RamRom+0x70>
    1acc:	f6 01       	movw	r30, r12
    1ace:	80 81       	ld	r24, Z
    1ad0:	69 01       	movw	r12, r18
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	f1 f6       	brne	.-68     	; 0x1a92 <rprintf1RamRom+0x30>
    1ad6:	2f 5f       	subi	r18, 0xFF	; 255
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1ada:	77 20       	and	r7, r7
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <rprintf1RamRom+0x84>
    1ade:	f6 01       	movw	r30, r12
    1ae0:	69 01       	movw	r12, r18
    1ae2:	84 91       	lpm	r24, Z+
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <rprintf1RamRom+0x8a>
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	80 81       	ld	r24, Z
    1aea:	69 01       	movw	r12, r18
    1aec:	84 36       	cpi	r24, 0x64	; 100
    1aee:	29 f0       	breq	.+10     	; 0x1afa <rprintf1RamRom+0x98>
    1af0:	88 37       	cpi	r24, 0x78	; 120
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <rprintf1RamRom+0xb2>
    1af4:	83 36       	cpi	r24, 0x63	; 99
    1af6:	f9 f6       	brne	.-66     	; 0x1ab6 <rprintf1RamRom+0x54>
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <rprintf1RamRom+0xa4>
    1afa:	00 e1       	ldi	r16, 0x10	; 16
    1afc:	17 e2       	ldi	r17, 0x27	; 39
    1afe:	5a e0       	ldi	r21, 0x0A	; 10
    1b00:	a5 2e       	mov	r10, r21
    1b02:	b1 2c       	mov	r11, r1
    1b04:	0c c0       	rjmp	.+24     	; 0x1b1e <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    1b06:	f7 01       	movw	r30, r14
    1b08:	80 81       	ld	r24, Z
    1b0a:	22 e0       	ldi	r18, 0x02	; 2
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	e2 0e       	add	r14, r18
    1b10:	f3 1e       	adc	r15, r19
    1b12:	d1 cf       	rjmp	.-94     	; 0x1ab6 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    1b14:	00 e0       	ldi	r16, 0x00	; 0
    1b16:	10 e1       	ldi	r17, 0x10	; 16
    1b18:	40 e1       	ldi	r20, 0x10	; 16
    1b1a:	a4 2e       	mov	r10, r20
    1b1c:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1b1e:	32 e0       	ldi	r19, 0x02	; 2
    1b20:	83 2e       	mov	r8, r19
    1b22:	91 2c       	mov	r9, r1
    1b24:	8e 0c       	add	r8, r14
    1b26:	9f 1c       	adc	r9, r15
    1b28:	f7 01       	movw	r30, r14
    1b2a:	e0 80       	ld	r14, Z
    1b2c:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    1b2e:	84 36       	cpi	r24, 0x64	; 100
    1b30:	b1 f4       	brne	.+44     	; 0x1b5e <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    1b32:	f7 fe       	sbrs	r15, 7
    1b34:	11 c0       	rjmp	.+34     	; 0x1b58 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    1b36:	f0 94       	com	r15
    1b38:	e1 94       	neg	r14
    1b3a:	f1 08       	sbc	r15, r1
    1b3c:	f3 94       	inc	r15
					rprintfChar('-');
    1b3e:	8d e2       	ldi	r24, 0x2D	; 45
    1b40:	0e 94 12 0b 	call	0x1624	; 0x1624 <rprintfChar>
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1b46:	c8 01       	movw	r24, r16
    1b48:	6a e0       	ldi	r22, 0x0A	; 10
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1b50:	8b 01       	movw	r16, r22
    1b52:	62 30       	cpi	r22, 0x02	; 2
    1b54:	71 05       	cpc	r23, r1
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <rprintf1RamRom+0xfc>
    1b58:	e0 16       	cp	r14, r16
    1b5a:	f1 06       	cpc	r15, r17
    1b5c:	a0 f3       	brcs	.-24     	; 0x1b46 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1b5e:	c7 01       	movw	r24, r14
    1b60:	b8 01       	movw	r22, r16
    1b62:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1b66:	86 2f       	mov	r24, r22
    1b68:	0e 94 75 0b 	call	0x16ea	; 0x16ea <rprintfu04>
				u_val %= div_val;
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	b8 01       	movw	r22, r16
    1b70:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1b74:	7c 01       	movw	r14, r24
				div_val /= base;
    1b76:	c8 01       	movw	r24, r16
    1b78:	b5 01       	movw	r22, r10
    1b7a:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    1b7e:	8b 01       	movw	r16, r22
			} while (div_val);
    1b80:	61 15       	cp	r22, r1
    1b82:	71 05       	cpc	r23, r1
    1b84:	61 f7       	brne	.-40     	; 0x1b5e <rprintf1RamRom+0xfc>
    1b86:	74 01       	movw	r14, r8
    1b88:	98 cf       	rjmp	.-208    	; 0x1aba <rprintf1RamRom+0x58>

00001b8a <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	40 f4       	brcc	.+16     	; 0x1b9e <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    1b8e:	e8 2f       	mov	r30, r24
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	ee 5f       	subi	r30, 0xFE	; 254
    1b98:	fd 4f       	sbci	r31, 0xFD	; 253
    1b9a:	71 83       	std	Z+1, r23	; 0x01
    1b9c:	60 83       	st	Z, r22
    1b9e:	08 95       	ret

00001ba0 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    1ba0:	9a 01       	movw	r18, r20
    1ba2:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
    1ba4:	88 23       	and	r24, r24
    1ba6:	e1 f4       	brne	.+56     	; 0x1be0 <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1ba8:	ca 01       	movw	r24, r20
    1baa:	b9 01       	movw	r22, r18
    1bac:	60 58       	subi	r22, 0x80	; 128
    1bae:	7b 47       	sbci	r23, 0x7B	; 123
    1bb0:	81 4e       	sbci	r24, 0xE1	; 225
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	f3 e0       	ldi	r31, 0x03	; 3
    1bb6:	66 0f       	add	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	88 1f       	adc	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	fa 95       	dec	r31
    1bc0:	d1 f7       	brne	.-12     	; 0x1bb6 <uartSetBaudRate+0x16>
    1bc2:	e4 e0       	ldi	r30, 0x04	; 4
    1bc4:	22 0f       	add	r18, r18
    1bc6:	33 1f       	adc	r19, r19
    1bc8:	44 1f       	adc	r20, r20
    1bca:	55 1f       	adc	r21, r21
    1bcc:	ea 95       	dec	r30
    1bce:	d1 f7       	brne	.-12     	; 0x1bc4 <uartSetBaudRate+0x24>
    1bd0:	0e 94 15 14 	call	0x282a	; 0x282a <__udivmodsi4>
    1bd4:	21 50       	subi	r18, 0x01	; 1
    1bd6:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
    1bd8:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    1bdc:	30 93 c5 00 	sts	0x00C5, r19
    1be0:	08 95       	ret

00001be2 <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	a3 e0       	ldi	r26, 0x03	; 3
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	aa 95       	dec	r26
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <uartGetRxBuffer+0x6>
    1bf0:	2a 51       	subi	r18, 0x1A	; 26
    1bf2:	3d 4f       	sbci	r19, 0xFD	; 253
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	08 95       	ret

00001bf8 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	b3 e0       	ldi	r27, 0x03	; 3
    1bfe:	22 0f       	add	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	ba 95       	dec	r27
    1c04:	e1 f7       	brne	.-8      	; 0x1bfe <uartGetTxBuffer+0x6>
    1c06:	26 5f       	subi	r18, 0xF6	; 246
    1c08:	3c 4f       	sbci	r19, 0xFC	; 252
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	08 95       	ret

00001c0e <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    1c0e:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1c10:	88 23       	and	r24, r24
    1c12:	31 f4       	brne	.+12     	; 0x1c20 <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1c14:	80 91 c0 00 	lds	r24, 0x00C0
    1c18:	85 ff       	sbrs	r24, 5
    1c1a:	fc cf       	rjmp	.-8      	; 0x1c14 <uartSendByte+0x6>
		outb(UDR0, txData);
    1c1c:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	ee 51       	subi	r30, 0x1E	; 30
    1c24:	fd 4f       	sbci	r31, 0xFD	; 253
    1c26:	10 82       	st	Z, r1
}
    1c28:	08 95       	ret

00001c2a <uart0SendByte>:

void uart0SendByte(u08 data)
{
    1c2a:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1c2c:	80 91 c0 00 	lds	r24, 0x00C0
    1c30:	85 ff       	sbrs	r24, 5
    1c32:	fc cf       	rjmp	.-8      	; 0x1c2c <uart0SendByte+0x2>
		outb(UDR0, txData);
    1c34:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1c38:	10 92 e2 02 	sts	0x02E2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
    1c3c:	08 95       	ret

00001c3e <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	e8 2f       	mov	r30, r24
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	8a 95       	dec	r24
    1c4c:	e1 f7       	brne	.-8      	; 0x1c46 <uartReceiveBufferIsEmpty+0x8>
    1c4e:	e6 51       	subi	r30, 0x16	; 22
    1c50:	fd 4f       	sbci	r31, 0xFD	; 253
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	89 2b       	or	r24, r25
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <uartReceiveBufferIsEmpty+0x1e>
    1c5a:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    1c5c:	82 2f       	mov	r24, r18
    1c5e:	08 95       	ret

00001c60 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
    1c64:	88 23       	and	r24, r24
    1c66:	11 f4       	brne	.+4      	; 0x1c6c <uartReceiveService+0xc>
		c = inb(UDR0);
    1c68:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	e9 01       	movw	r28, r18
    1c72:	cc 0f       	add	r28, r28
    1c74:	dd 1f       	adc	r29, r29
    1c76:	fe 01       	movw	r30, r28
    1c78:	ee 5f       	subi	r30, 0xFE	; 254
    1c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	89 2b       	or	r24, r25
    1c82:	31 f0       	breq	.+12     	; 0x1c90 <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    1c84:	01 90       	ld	r0, Z+
    1c86:	f0 81       	ld	r31, Z
    1c88:	e0 2d       	mov	r30, r0
    1c8a:	86 2f       	mov	r24, r22
    1c8c:	09 95       	icall
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	9a 95       	dec	r25
    1c98:	e1 f7       	brne	.-8      	; 0x1c92 <uartReceiveService+0x32>
    1c9a:	c9 01       	movw	r24, r18
    1c9c:	8a 51       	subi	r24, 0x1A	; 26
    1c9e:	9d 4f       	sbci	r25, 0xFD	; 253
    1ca0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <bufferAddToEnd>
    1ca4:	88 23       	and	r24, r24
    1ca6:	41 f4       	brne	.+16     	; 0x1cb8 <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e6 5d       	subi	r30, 0xD6	; 214
    1cac:	fc 4f       	sbci	r31, 0xFC	; 252
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
		}
	}
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

00001cbe <__vector_18>:
	uartTransmitService(0);
}
	// service UART receive interrupt
//UART_INTERRUPT_HANDLER(_VECTOR(25))      
ISR(USART_RX_vect)      
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
	uartReceiveService(0);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <uartReceiveService>
}
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	7f 91       	pop	r23
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	88 2e       	mov	r8, r24
    1d22:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    1d24:	e8 2e       	mov	r14, r24
    1d26:	ff 24       	eor	r15, r15
    1d28:	f7 01       	movw	r30, r14
    1d2a:	13 e0       	ldi	r17, 0x03	; 3
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	1a 95       	dec	r17
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <uartSendBuffer+0x24>
    1d34:	e2 5f       	subi	r30, 0xF2	; 242
    1d36:	fc 4f       	sbci	r31, 0xFC	; 252
    1d38:	20 81       	ld	r18, Z
    1d3a:	31 81       	ldd	r19, Z+1	; 0x01
    1d3c:	24 0f       	add	r18, r20
    1d3e:	35 1f       	adc	r19, r21
    1d40:	f7 01       	movw	r30, r14
    1d42:	73 e0       	ldi	r23, 0x03	; 3
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	7a 95       	dec	r23
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <uartSendBuffer+0x3c>
    1d4c:	e4 5f       	subi	r30, 0xF4	; 244
    1d4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	b0 f5       	brcc	.+108    	; 0x1dc6 <uartSendBuffer+0xbe>
    1d5a:	41 15       	cp	r20, r1
    1d5c:	51 05       	cpc	r21, r1
    1d5e:	99 f1       	breq	.+102    	; 0x1dc6 <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    1d60:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    1d62:	67 01       	movw	r12, r14
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	cc 0c       	add	r12, r12
    1d68:	dd 1c       	adc	r13, r13
    1d6a:	6a 95       	dec	r22
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <uartSendBuffer+0x5e>
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	c8 0e       	add	r12, r24
    1d74:	d9 1e       	adc	r13, r25
    1d76:	8d 01       	movw	r16, r26
    1d78:	c0 e0       	ldi	r28, 0x00	; 0
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1d7c:	5a 01       	movw	r10, r20
    1d7e:	08 94       	sec
    1d80:	a1 08       	sbc	r10, r1
    1d82:	b1 08       	sbc	r11, r1
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <uartSendBuffer+0x8a>
    1d86:	c6 01       	movw	r24, r12
    1d88:	f8 01       	movw	r30, r16
    1d8a:	60 81       	ld	r22, Z
    1d8c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <bufferAddToEnd>
    1d90:	21 96       	adiw	r28, 0x01	; 1
    1d92:	0f 5f       	subi	r16, 0xFF	; 255
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	ca 15       	cp	r28, r10
    1d98:	db 05       	cpc	r29, r11
    1d9a:	a8 f3       	brcs	.-22     	; 0x1d86 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	ea 5f       	subi	r30, 0xFA	; 250
    1da0:	fc 4f       	sbci	r31, 0xFC	; 252
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1da6:	88 20       	and	r8, r8
    1da8:	31 f4       	brne	.+12     	; 0x1db6 <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1daa:	80 91 c0 00 	lds	r24, 0x00C0
    1dae:	85 ff       	sbrs	r24, 5
    1db0:	fc cf       	rjmp	.-8      	; 0x1daa <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    1db2:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1db6:	82 ee       	ldi	r24, 0xE2	; 226
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	e8 0e       	add	r14, r24
    1dbc:	f9 1e       	adc	r15, r25
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	10 82       	st	Z, r1
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	08 95       	ret

00001de2 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	23 e0       	ldi	r18, 0x03	; 3
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	2a 95       	dec	r18
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <uartAddToTxBuffer+0x4>
    1dee:	86 5f       	subi	r24, 0xF6	; 246
    1df0:	9c 4f       	sbci	r25, 0xFC	; 252
    1df2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <bufferAddToEnd>
}
    1df6:	08 95       	ret

00001df8 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    1df8:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    1dfa:	8a e0       	ldi	r24, 0x0A	; 10
    1dfc:	93 e0       	ldi	r25, 0x03	; 3
    1dfe:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    1e02:	08 95       	ret

00001e04 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    1e0a:	a8 2f       	mov	r26, r24
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ed 01       	movw	r28, r26
    1e10:	ca 5f       	subi	r28, 0xFA	; 250
    1e12:	dc 4f       	sbci	r29, 0xFC	; 252
    1e14:	88 81       	ld	r24, Y
    1e16:	88 23       	and	r24, r24
    1e18:	b1 f0       	breq	.+44     	; 0x1e46 <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    1e1a:	fd 01       	movw	r30, r26
    1e1c:	33 e0       	ldi	r19, 0x03	; 3
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	3a 95       	dec	r19
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <uartTransmitService+0x1a>
    1e26:	e2 5f       	subi	r30, 0xF2	; 242
    1e28:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	89 2b       	or	r24, r25
    1e30:	49 f0       	breq	.+18     	; 0x1e44 <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    1e32:	23 30       	cpi	r18, 0x03	; 3
    1e34:	61 f4       	brne	.+24     	; 0x1e4e <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    1e36:	8a e0       	ldi	r24, 0x0A	; 10
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	0e 94 01 10 	call	0x2002	; 0x2002 <bufferGetFromFront>
    1e3e:	80 93 c6 00 	sts	0x00C6, r24
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    1e44:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    1e46:	ae 51       	subi	r26, 0x1E	; 30
    1e48:	bd 4f       	sbci	r27, 0xFD	; 253
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	8c 93       	st	X, r24
	}
}
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <__vector_20>:
}

	// service UART transmit interrupt
//UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
ISR(USART_TX_vect)  
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	2f 93       	push	r18
    1e60:	3f 93       	push	r19
    1e62:	4f 93       	push	r20
    1e64:	5f 93       	push	r21
    1e66:	6f 93       	push	r22
    1e68:	7f 93       	push	r23
    1e6a:	8f 93       	push	r24
    1e6c:	9f 93       	push	r25
    1e6e:	af 93       	push	r26
    1e70:	bf 93       	push	r27
    1e72:	ef 93       	push	r30
    1e74:	ff 93       	push	r31
	uartTransmitService(0);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <uartTransmitService>
}
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	0f 90       	pop	r0
    1e9a:	1f 90       	pop	r1
    1e9c:	18 95       	reti

00001e9e <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    1ea6:	c8 2f       	mov	r28, r24
    1ea8:	d0 e0       	ldi	r29, 0x00	; 0
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ea 5f       	subi	r30, 0xFA	; 250
    1eae:	fc 4f       	sbci	r31, 0xFC	; 252
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	43 e0       	ldi	r20, 0x03	; 3
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	4a 95       	dec	r20
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <uartSendTxBuffer+0x1a>
    1ec0:	86 5f       	subi	r24, 0xF6	; 246
    1ec2:	9c 4f       	sbci	r25, 0xFC	; 252
    1ec4:	0e 94 01 10 	call	0x2002	; 0x2002 <bufferGetFromFront>
    1ec8:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1eca:	11 23       	and	r17, r17
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1ece:	80 91 c0 00 	lds	r24, 0x00C0
    1ed2:	85 ff       	sbrs	r24, 5
    1ed4:	fc cf       	rjmp	.-8      	; 0x1ece <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    1ed6:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1eda:	ce 51       	subi	r28, 0x1E	; 30
    1edc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ede:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	08 95       	ret

00001ee8 <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	73 e0       	ldi	r23, 0x03	; 3
    1ef6:	ee 0f       	add	r30, r30
    1ef8:	ff 1f       	adc	r31, r31
    1efa:	7a 95       	dec	r23
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <uartReceiveByte+0xe>
    1efe:	e8 51       	subi	r30, 0x18	; 24
    1f00:	fd 4f       	sbci	r31, 0xFD	; 253
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	89 2b       	or	r24, r25
    1f08:	c9 f0       	breq	.+50     	; 0x1f3c <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	63 e0       	ldi	r22, 0x03	; 3
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	6a 95       	dec	r22
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <uartReceiveByte+0x26>
    1f16:	e6 51       	subi	r30, 0x16	; 22
    1f18:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	89 2b       	or	r24, r25
    1f20:	69 f0       	breq	.+26     	; 0x1f3c <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    1f22:	53 e0       	ldi	r21, 0x03	; 3
    1f24:	22 0f       	add	r18, r18
    1f26:	33 1f       	adc	r19, r19
    1f28:	5a 95       	dec	r21
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <uartReceiveByte+0x3c>
    1f2c:	c9 01       	movw	r24, r18
    1f2e:	8a 51       	subi	r24, 0x1A	; 26
    1f30:	9d 4f       	sbci	r25, 0xFD	; 253
    1f32:	0e 94 01 10 	call	0x2002	; 0x2002 <bufferGetFromFront>
    1f36:	88 83       	st	Y, r24
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <uartReceiveByte+0x56>
			return TRUE;
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	08 95       	ret

00001f44 <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	be 01       	movw	r22, r28
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <uartReceiveByte>
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f4       	brne	.+6      	; 0x1f64 <uart0GetByte+0x20>
    1f5e:	2f ef       	ldi	r18, 0xFF	; 255
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <uart0GetByte+0x26>
		return c;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1f6a:	c9 01       	movw	r24, r18
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	e3 e0       	ldi	r30, 0x03	; 3
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	ea 95       	dec	r30
    1f7e:	e1 f7       	brne	.-8      	; 0x1f78 <uartFlushReceiveBuffer+0x4>
    1f80:	8a 51       	subi	r24, 0x1A	; 26
    1f82:	9d 4f       	sbci	r25, 0xFD	; 253
    1f84:	0e 94 9d 10 	call	0x213a	; 0x213a <bufferFlush>
}
    1f88:	08 95       	ret

00001f8a <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    1f8a:	86 ee       	ldi	r24, 0xE6	; 230
    1f8c:	92 e0       	ldi	r25, 0x02	; 2
    1f8e:	62 e7       	ldi	r22, 0x72	; 114
    1f90:	71 e0       	ldi	r23, 0x01	; 1
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    1f9a:	8a e0       	ldi	r24, 0x0A	; 10
    1f9c:	93 e0       	ldi	r25, 0x03	; 3
    1f9e:	62 ef       	ldi	r22, 0xF2	; 242
    1fa0:	71 e0       	ldi	r23, 0x01	; 1
    1fa2:	40 e1       	ldi	r20, 0x10	; 16
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    1faa:	08 95       	ret

00001fac <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    1fac:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    1fb0:	10 92 03 02 	sts	0x0203, r1
    1fb4:	10 92 02 02 	sts	0x0202, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1fb8:	88 ed       	ldi	r24, 0xD8	; 216
    1fba:	80 93 c1 00 	sts	0x00C1, r24
	//outb(UCSR0B, BV(RXEN)|BV(TXEN));
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	55 e2       	ldi	r21, 0x25	; 37
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	80 93 e2 02 	sts	0x02E2, r24
	uartBufferedTx[0] = FALSE;
    1fd2:	10 92 06 03 	sts	0x0306, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    1fd6:	10 92 2b 03 	sts	0x032B, r1
    1fda:	10 92 2a 03 	sts	0x032A, r1
	// enable interrupts
	sei();
    1fde:	78 94       	sei
}
    1fe0:	08 95       	ret

00001fe2 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    1fe2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <uart0Init>
}
    1fe6:	08 95       	ret

00001fe8 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    1fe8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1fea:	8f b7       	in	r24, 0x3f	; 63
    1fec:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    1fee:	71 83       	std	Z+1, r23	; 0x01
    1ff0:	60 83       	st	Z, r22
	buffer->size = size;
    1ff2:	53 83       	std	Z+3, r21	; 0x03
    1ff4:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    1ff6:	17 82       	std	Z+7, r1	; 0x07
    1ff8:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    1ffa:	15 82       	std	Z+5, r1	; 0x05
    1ffc:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    1ffe:	8f bf       	out	0x3f, r24	; 63
}
    2000:	08 95       	ret

00002002 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    2002:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    2004:	4f b7       	in	r20, 0x3f	; 63
    2006:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	8d 91       	ld	r24, X+
    200c:	9c 91       	ld	r25, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	89 2b       	or	r24, r25
    2012:	11 f4       	brne	.+4      	; 0x2018 <bufferGetFromFront+0x16>
    2014:	e0 e0       	ldi	r30, 0x00	; 0
    2016:	25 c0       	rjmp	.+74     	; 0x2062 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    2018:	16 96       	adiw	r26, 0x06	; 6
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	17 97       	sbiw	r26, 0x07	; 7
    2020:	ed 91       	ld	r30, X+
    2022:	fc 91       	ld	r31, X
    2024:	11 97       	sbiw	r26, 0x01	; 1
    2026:	e8 0f       	add	r30, r24
    2028:	f9 1f       	adc	r31, r25
    202a:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	17 96       	adiw	r26, 0x07	; 7
    2030:	9c 93       	st	X, r25
    2032:	8e 93       	st	-X, r24
    2034:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	2d 91       	ld	r18, X+
    203a:	3c 91       	ld	r19, X
    203c:	13 97       	sbiw	r26, 0x03	; 3
    203e:	82 17       	cp	r24, r18
    2040:	93 07       	cpc	r25, r19
    2042:	30 f0       	brcs	.+12     	; 0x2050 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    2044:	82 1b       	sub	r24, r18
    2046:	93 0b       	sbc	r25, r19
    2048:	17 96       	adiw	r26, 0x07	; 7
    204a:	9c 93       	st	X, r25
    204c:	8e 93       	st	-X, r24
    204e:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	8d 91       	ld	r24, X+
    2054:	9c 91       	ld	r25, X
    2056:	15 97       	sbiw	r26, 0x05	; 5
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	15 96       	adiw	r26, 0x05	; 5
    205c:	9c 93       	st	X, r25
    205e:	8e 93       	st	-X, r24
    2060:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    2062:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    2064:	8e 2f       	mov	r24, r30
    2066:	08 95       	ret

00002068 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    2068:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    206a:	4f b7       	in	r20, 0x3f	; 63
    206c:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    206e:	84 81       	ldd	r24, Z+4	; 0x04
    2070:	95 81       	ldd	r25, Z+5	; 0x05
    2072:	68 17       	cp	r22, r24
    2074:	79 07       	cpc	r23, r25
    2076:	b0 f4       	brcc	.+44     	; 0x20a4 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	97 81       	ldd	r25, Z+7	; 0x07
    207c:	86 0f       	add	r24, r22
    207e:	97 1f       	adc	r25, r23
    2080:	97 83       	std	Z+7, r25	; 0x07
    2082:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    2084:	22 81       	ldd	r18, Z+2	; 0x02
    2086:	33 81       	ldd	r19, Z+3	; 0x03
    2088:	82 17       	cp	r24, r18
    208a:	93 07       	cpc	r25, r19
    208c:	20 f0       	brcs	.+8      	; 0x2096 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    208e:	82 1b       	sub	r24, r18
    2090:	93 0b       	sbc	r25, r19
    2092:	97 83       	std	Z+7, r25	; 0x07
    2094:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    2096:	84 81       	ldd	r24, Z+4	; 0x04
    2098:	95 81       	ldd	r25, Z+5	; 0x05
    209a:	86 1b       	sub	r24, r22
    209c:	97 0b       	sbc	r25, r23
    209e:	95 83       	std	Z+5, r25	; 0x05
    20a0:	84 83       	std	Z+4, r24	; 0x04
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    20a4:	15 82       	std	Z+5, r1	; 0x05
    20a6:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    20a8:	4f bf       	out	0x3f, r20	; 63
}
    20aa:	08 95       	ret

000020ac <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    20ac:	fc 01       	movw	r30, r24
    20ae:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    20b0:	2f b7       	in	r18, 0x3f	; 63
    20b2:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    20b4:	2f bf       	out	0x3f, r18	; 63
    20b6:	26 81       	ldd	r18, Z+6	; 0x06
    20b8:	37 81       	ldd	r19, Z+7	; 0x07
    20ba:	62 81       	ldd	r22, Z+2	; 0x02
    20bc:	73 81       	ldd	r23, Z+3	; 0x03
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    20c6:	01 90       	ld	r0, Z+
    20c8:	f0 81       	ld	r31, Z
    20ca:	e0 2d       	mov	r30, r0
    20cc:	e8 0f       	add	r30, r24
    20ce:	f9 1f       	adc	r31, r25
	return data;
}
    20d0:	80 81       	ld	r24, Z
    20d2:	08 95       	ret

000020d4 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    20de:	4f b7       	in	r20, 0x3f	; 63
    20e0:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    20e2:	2c 81       	ldd	r18, Y+4	; 0x04
    20e4:	3d 81       	ldd	r19, Y+5	; 0x05
    20e6:	6a 81       	ldd	r22, Y+2	; 0x02
    20e8:	7b 81       	ldd	r23, Y+3	; 0x03
    20ea:	26 17       	cp	r18, r22
    20ec:	37 07       	cpc	r19, r23
    20ee:	98 f4       	brcc	.+38     	; 0x2116 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	9f 81       	ldd	r25, Y+7	; 0x07
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    20fc:	e8 81       	ld	r30, Y
    20fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2100:	e8 0f       	add	r30, r24
    2102:	f9 1f       	adc	r31, r25
    2104:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	9d 83       	std	Y+5, r25	; 0x05
    210e:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    2110:	4f bf       	out	0x3f, r20	; 63
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	02 c0       	rjmp	.+4      	; 0x211a <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    2116:	4f bf       	out	0x3f, r20	; 63
    2118:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	08 95       	ret

00002122 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    2122:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2124:	8f b7       	in	r24, 0x3f	; 63
    2126:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    2128:	8f bf       	out	0x3f, r24	; 63
    212a:	22 81       	ldd	r18, Z+2	; 0x02
    212c:	33 81       	ldd	r19, Z+3	; 0x03
    212e:	84 81       	ldd	r24, Z+4	; 0x04
    2130:	95 81       	ldd	r25, Z+5	; 0x05
    2132:	28 1b       	sub	r18, r24
    2134:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    2136:	c9 01       	movw	r24, r18
    2138:	08 95       	ret

0000213a <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    213a:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    213c:	8f b7       	in	r24, 0x3f	; 63
    213e:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    2140:	15 82       	std	Z+5, r1	; 0x05
    2142:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    2144:	8f bf       	out	0x3f, r24	; 63
}
    2146:	08 95       	ret

00002148 <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    2148:	60 91 0a 02 	lds	r22, 0x020A
    214c:	70 91 0b 02 	lds	r23, 0x020B
	return wheel_left_tick_counter;
}
    2150:	80 91 0c 02 	lds	r24, 0x020C
    2154:	90 91 0d 02 	lds	r25, 0x020D
    2158:	08 95       	ret

0000215a <get_right_count>:

u32 get_right_count(void){
    215a:	60 91 0e 02 	lds	r22, 0x020E
    215e:	70 91 0f 02 	lds	r23, 0x020F
	return wheel_right_tick_counter;
}
    2162:	80 91 10 02 	lds	r24, 0x0210
    2166:	90 91 11 02 	lds	r25, 0x0211
    216a:	08 95       	ret

0000216c <__vector_5>:

SIGNAL(PCINT2_vect){
    216c:	1f 92       	push	r1
    216e:	0f 92       	push	r0
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	0f 92       	push	r0
    2174:	11 24       	eor	r1, r1
    2176:	2f 93       	push	r18
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    2180:	29 b1       	in	r18, 0x09	; 9
    2182:	20 78       	andi	r18, 0x80	; 128
    2184:	20 93 18 02 	sts	0x0218, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    2188:	80 91 19 02 	lds	r24, 0x0219
    218c:	82 17       	cp	r24, r18
    218e:	58 f4       	brcc	.+22     	; 0x21a6 <__vector_5+0x3a>
    2190:	80 91 0a 02 	lds	r24, 0x020A
    2194:	90 91 0b 02 	lds	r25, 0x020B
    2198:	a0 91 0c 02 	lds	r26, 0x020C
    219c:	b0 91 0d 02 	lds	r27, 0x020D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    21a0:	18 9b       	sbis	0x03, 0	; 3
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <__vector_5+0x4e>
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <__vector_5+0x56>
    21a6:	80 91 0a 02 	lds	r24, 0x020A
    21aa:	90 91 0b 02 	lds	r25, 0x020B
    21ae:	a0 91 0c 02 	lds	r26, 0x020C
    21b2:	b0 91 0d 02 	lds	r27, 0x020D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    21b6:	18 9b       	sbis	0x03, 0	; 3
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	a1 1d       	adc	r26, r1
    21be:	b1 1d       	adc	r27, r1
    21c0:	03 c0       	rjmp	.+6      	; 0x21c8 <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	a1 09       	sbc	r26, r1
    21c6:	b1 09       	sbc	r27, r1
    21c8:	80 93 0a 02 	sts	0x020A, r24
    21cc:	90 93 0b 02 	sts	0x020B, r25
    21d0:	a0 93 0c 02 	sts	0x020C, r26
    21d4:	b0 93 0d 02 	sts	0x020D, r27
		}
	}
	pin_level_past = pin_level_current;
    21d8:	20 93 19 02 	sts	0x0219, r18
	
}
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	9f 91       	pop	r25
    21e2:	8f 91       	pop	r24
    21e4:	2f 91       	pop	r18
    21e6:	0f 90       	pop	r0
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	0f 90       	pop	r0
    21ec:	1f 90       	pop	r1
    21ee:	18 95       	reti

000021f0 <__vector_3>:
SIGNAL(PCINT0_vect){
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	0f 92       	push	r0
    21f8:	11 24       	eor	r1, r1
    21fa:	2f 93       	push	r18
    21fc:	3f 93       	push	r19
    21fe:	4f 93       	push	r20
    2200:	8f 93       	push	r24
    2202:	9f 93       	push	r25
    2204:	af 93       	push	r26
    2206:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    2208:	33 b1       	in	r19, 0x03	; 3
    220a:	31 70       	andi	r19, 0x01	; 1
    220c:	30 93 16 02 	sts	0x0216, r19
	PINB4_current = bit_is_set(PINB,4);
    2210:	23 b1       	in	r18, 0x03	; 3
    2212:	20 71       	andi	r18, 0x10	; 16
    2214:	20 93 14 02 	sts	0x0214, r18
	PINB5_current = bit_is_set(PINB,5);
    2218:	43 b1       	in	r20, 0x03	; 3
    221a:	40 72       	andi	r20, 0x20	; 32
    221c:	40 93 12 02 	sts	0x0212, r20

	if(PINB0_current != PINB0_past){
    2220:	80 91 17 02 	lds	r24, 0x0217
    2224:	38 17       	cp	r19, r24
    2226:	49 f1       	breq	.+82     	; 0x227a <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    2228:	83 17       	cp	r24, r19
    222a:	58 f4       	brcc	.+22     	; 0x2242 <__vector_3+0x52>
    222c:	80 91 0a 02 	lds	r24, 0x020A
    2230:	90 91 0b 02 	lds	r25, 0x020B
    2234:	a0 91 0c 02 	lds	r26, 0x020C
    2238:	b0 91 0d 02 	lds	r27, 0x020D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    223c:	4f 9b       	sbis	0x09, 7	; 9
    223e:	0b c0       	rjmp	.+22     	; 0x2256 <__vector_3+0x66>
    2240:	0e c0       	rjmp	.+28     	; 0x225e <__vector_3+0x6e>
    2242:	80 91 0a 02 	lds	r24, 0x020A
    2246:	90 91 0b 02 	lds	r25, 0x020B
    224a:	a0 91 0c 02 	lds	r26, 0x020C
    224e:	b0 91 0d 02 	lds	r27, 0x020D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    2252:	4f 9b       	sbis	0x09, 7	; 9
    2254:	04 c0       	rjmp	.+8      	; 0x225e <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	a1 09       	sbc	r26, r1
    225a:	b1 09       	sbc	r27, r1
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	a1 1d       	adc	r26, r1
    2262:	b1 1d       	adc	r27, r1
    2264:	80 93 0a 02 	sts	0x020A, r24
    2268:	90 93 0b 02 	sts	0x020B, r25
    226c:	a0 93 0c 02 	sts	0x020C, r26
    2270:	b0 93 0d 02 	sts	0x020D, r27
			}
		}
		PINB0_past = PINB0_current;
    2274:	30 93 17 02 	sts	0x0217, r19
    2278:	57 c0       	rjmp	.+174    	; 0x2328 <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    227a:	80 91 15 02 	lds	r24, 0x0215
    227e:	28 17       	cp	r18, r24
    2280:	49 f1       	breq	.+82     	; 0x22d4 <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    2282:	82 17       	cp	r24, r18
    2284:	58 f4       	brcc	.+22     	; 0x229c <__vector_3+0xac>
    2286:	80 91 0e 02 	lds	r24, 0x020E
    228a:	90 91 0f 02 	lds	r25, 0x020F
    228e:	a0 91 10 02 	lds	r26, 0x0210
    2292:	b0 91 11 02 	lds	r27, 0x0211
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    2296:	1d 9b       	sbis	0x03, 5	; 3
    2298:	0b c0       	rjmp	.+22     	; 0x22b0 <__vector_3+0xc0>
    229a:	0e c0       	rjmp	.+28     	; 0x22b8 <__vector_3+0xc8>
    229c:	80 91 0e 02 	lds	r24, 0x020E
    22a0:	90 91 0f 02 	lds	r25, 0x020F
    22a4:	a0 91 10 02 	lds	r26, 0x0210
    22a8:	b0 91 11 02 	lds	r27, 0x0211
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    22ac:	1d 9b       	sbis	0x03, 5	; 3
    22ae:	04 c0       	rjmp	.+8      	; 0x22b8 <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	a1 09       	sbc	r26, r1
    22b4:	b1 09       	sbc	r27, r1
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	a1 1d       	adc	r26, r1
    22bc:	b1 1d       	adc	r27, r1
    22be:	80 93 0e 02 	sts	0x020E, r24
    22c2:	90 93 0f 02 	sts	0x020F, r25
    22c6:	a0 93 10 02 	sts	0x0210, r26
    22ca:	b0 93 11 02 	sts	0x0211, r27
			}
		}
		PINB4_past = PINB4_current;
    22ce:	20 93 15 02 	sts	0x0215, r18
    22d2:	2a c0       	rjmp	.+84     	; 0x2328 <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    22d4:	80 91 13 02 	lds	r24, 0x0213
    22d8:	84 17       	cp	r24, r20
    22da:	58 f4       	brcc	.+22     	; 0x22f2 <__vector_3+0x102>
    22dc:	80 91 0e 02 	lds	r24, 0x020E
    22e0:	90 91 0f 02 	lds	r25, 0x020F
    22e4:	a0 91 10 02 	lds	r26, 0x0210
    22e8:	b0 91 11 02 	lds	r27, 0x0211
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    22ec:	1c 9b       	sbis	0x03, 4	; 3
    22ee:	0b c0       	rjmp	.+22     	; 0x2306 <__vector_3+0x116>
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <__vector_3+0x11e>
    22f2:	80 91 0e 02 	lds	r24, 0x020E
    22f6:	90 91 0f 02 	lds	r25, 0x020F
    22fa:	a0 91 10 02 	lds	r26, 0x0210
    22fe:	b0 91 11 02 	lds	r27, 0x0211
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    2302:	1c 9b       	sbis	0x03, 4	; 3
    2304:	04 c0       	rjmp	.+8      	; 0x230e <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	a1 1d       	adc	r26, r1
    230a:	b1 1d       	adc	r27, r1
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	a1 09       	sbc	r26, r1
    2312:	b1 09       	sbc	r27, r1
    2314:	80 93 0e 02 	sts	0x020E, r24
    2318:	90 93 0f 02 	sts	0x020F, r25
    231c:	a0 93 10 02 	sts	0x0210, r26
    2320:	b0 93 11 02 	sts	0x0211, r27
			}
		}
		PINB5_past = PINB5_current;
    2324:	40 93 13 02 	sts	0x0213, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	4f 91       	pop	r20
    2332:	3f 91       	pop	r19
    2334:	2f 91       	pop	r18
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <__vector_default>:


ISR(BADISR_vect){
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1
	
}
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <exit>:
    2354:	f8 94       	cli
    2356:	0c 94 37 14 	jmp	0x286e	; 0x286e <_exit>

0000235a <__subsf3>:
    235a:	50 58       	subi	r21, 0x80	; 128

0000235c <__addsf3>:
    235c:	bb 27       	eor	r27, r27
    235e:	aa 27       	eor	r26, r26
    2360:	0e d0       	rcall	.+28     	; 0x237e <__addsf3x>
    2362:	8f c1       	rjmp	.+798    	; 0x2682 <__fp_round>
    2364:	80 d1       	rcall	.+768    	; 0x2666 <__fp_pscA>
    2366:	30 f0       	brcs	.+12     	; 0x2374 <__addsf3+0x18>
    2368:	85 d1       	rcall	.+778    	; 0x2674 <__fp_pscB>
    236a:	20 f0       	brcs	.+8      	; 0x2374 <__addsf3+0x18>
    236c:	31 f4       	brne	.+12     	; 0x237a <__addsf3+0x1e>
    236e:	9f 3f       	cpi	r25, 0xFF	; 255
    2370:	11 f4       	brne	.+4      	; 0x2376 <__addsf3+0x1a>
    2372:	1e f4       	brtc	.+6      	; 0x237a <__addsf3+0x1e>
    2374:	75 c1       	rjmp	.+746    	; 0x2660 <__fp_nan>
    2376:	0e f4       	brtc	.+2      	; 0x237a <__addsf3+0x1e>
    2378:	e0 95       	com	r30
    237a:	e7 fb       	bst	r30, 7
    237c:	6b c1       	rjmp	.+726    	; 0x2654 <__fp_inf>

0000237e <__addsf3x>:
    237e:	e9 2f       	mov	r30, r25
    2380:	91 d1       	rcall	.+802    	; 0x26a4 <__fp_split3>
    2382:	80 f3       	brcs	.-32     	; 0x2364 <__addsf3+0x8>
    2384:	ba 17       	cp	r27, r26
    2386:	62 07       	cpc	r22, r18
    2388:	73 07       	cpc	r23, r19
    238a:	84 07       	cpc	r24, r20
    238c:	95 07       	cpc	r25, r21
    238e:	18 f0       	brcs	.+6      	; 0x2396 <__addsf3x+0x18>
    2390:	71 f4       	brne	.+28     	; 0x23ae <__addsf3x+0x30>
    2392:	9e f5       	brtc	.+102    	; 0x23fa <__addsf3x+0x7c>
    2394:	a9 c1       	rjmp	.+850    	; 0x26e8 <__fp_zero>
    2396:	0e f4       	brtc	.+2      	; 0x239a <__addsf3x+0x1c>
    2398:	e0 95       	com	r30
    239a:	0b 2e       	mov	r0, r27
    239c:	ba 2f       	mov	r27, r26
    239e:	a0 2d       	mov	r26, r0
    23a0:	0b 01       	movw	r0, r22
    23a2:	b9 01       	movw	r22, r18
    23a4:	90 01       	movw	r18, r0
    23a6:	0c 01       	movw	r0, r24
    23a8:	ca 01       	movw	r24, r20
    23aa:	a0 01       	movw	r20, r0
    23ac:	11 24       	eor	r1, r1
    23ae:	ff 27       	eor	r31, r31
    23b0:	59 1b       	sub	r21, r25
    23b2:	99 f0       	breq	.+38     	; 0x23da <__addsf3x+0x5c>
    23b4:	59 3f       	cpi	r21, 0xF9	; 249
    23b6:	50 f4       	brcc	.+20     	; 0x23cc <__addsf3x+0x4e>
    23b8:	50 3e       	cpi	r21, 0xE0	; 224
    23ba:	68 f1       	brcs	.+90     	; 0x2416 <__addsf3x+0x98>
    23bc:	1a 16       	cp	r1, r26
    23be:	f0 40       	sbci	r31, 0x00	; 0
    23c0:	a2 2f       	mov	r26, r18
    23c2:	23 2f       	mov	r18, r19
    23c4:	34 2f       	mov	r19, r20
    23c6:	44 27       	eor	r20, r20
    23c8:	58 5f       	subi	r21, 0xF8	; 248
    23ca:	f3 cf       	rjmp	.-26     	; 0x23b2 <__addsf3x+0x34>
    23cc:	46 95       	lsr	r20
    23ce:	37 95       	ror	r19
    23d0:	27 95       	ror	r18
    23d2:	a7 95       	ror	r26
    23d4:	f0 40       	sbci	r31, 0x00	; 0
    23d6:	53 95       	inc	r21
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <__addsf3x+0x4e>
    23da:	7e f4       	brtc	.+30     	; 0x23fa <__addsf3x+0x7c>
    23dc:	1f 16       	cp	r1, r31
    23de:	ba 0b       	sbc	r27, r26
    23e0:	62 0b       	sbc	r22, r18
    23e2:	73 0b       	sbc	r23, r19
    23e4:	84 0b       	sbc	r24, r20
    23e6:	ba f0       	brmi	.+46     	; 0x2416 <__addsf3x+0x98>
    23e8:	91 50       	subi	r25, 0x01	; 1
    23ea:	a1 f0       	breq	.+40     	; 0x2414 <__addsf3x+0x96>
    23ec:	ff 0f       	add	r31, r31
    23ee:	bb 1f       	adc	r27, r27
    23f0:	66 1f       	adc	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	c2 f7       	brpl	.-16     	; 0x23e8 <__addsf3x+0x6a>
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <__addsf3x+0x98>
    23fa:	ba 0f       	add	r27, r26
    23fc:	62 1f       	adc	r22, r18
    23fe:	73 1f       	adc	r23, r19
    2400:	84 1f       	adc	r24, r20
    2402:	48 f4       	brcc	.+18     	; 0x2416 <__addsf3x+0x98>
    2404:	87 95       	ror	r24
    2406:	77 95       	ror	r23
    2408:	67 95       	ror	r22
    240a:	b7 95       	ror	r27
    240c:	f7 95       	ror	r31
    240e:	9e 3f       	cpi	r25, 0xFE	; 254
    2410:	08 f0       	brcs	.+2      	; 0x2414 <__addsf3x+0x96>
    2412:	b3 cf       	rjmp	.-154    	; 0x237a <__addsf3+0x1e>
    2414:	93 95       	inc	r25
    2416:	88 0f       	add	r24, r24
    2418:	08 f0       	brcs	.+2      	; 0x241c <__addsf3x+0x9e>
    241a:	99 27       	eor	r25, r25
    241c:	ee 0f       	add	r30, r30
    241e:	97 95       	ror	r25
    2420:	87 95       	ror	r24
    2422:	08 95       	ret

00002424 <__cmpsf2>:
    2424:	f3 d0       	rcall	.+486    	; 0x260c <__fp_cmp>
    2426:	08 f4       	brcc	.+2      	; 0x242a <__cmpsf2+0x6>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	08 95       	ret

0000242c <__divsf3>:
    242c:	0c d0       	rcall	.+24     	; 0x2446 <__divsf3x>
    242e:	29 c1       	rjmp	.+594    	; 0x2682 <__fp_round>
    2430:	21 d1       	rcall	.+578    	; 0x2674 <__fp_pscB>
    2432:	40 f0       	brcs	.+16     	; 0x2444 <__divsf3+0x18>
    2434:	18 d1       	rcall	.+560    	; 0x2666 <__fp_pscA>
    2436:	30 f0       	brcs	.+12     	; 0x2444 <__divsf3+0x18>
    2438:	21 f4       	brne	.+8      	; 0x2442 <__divsf3+0x16>
    243a:	5f 3f       	cpi	r21, 0xFF	; 255
    243c:	19 f0       	breq	.+6      	; 0x2444 <__divsf3+0x18>
    243e:	0a c1       	rjmp	.+532    	; 0x2654 <__fp_inf>
    2440:	51 11       	cpse	r21, r1
    2442:	53 c1       	rjmp	.+678    	; 0x26ea <__fp_szero>
    2444:	0d c1       	rjmp	.+538    	; 0x2660 <__fp_nan>

00002446 <__divsf3x>:
    2446:	2e d1       	rcall	.+604    	; 0x26a4 <__fp_split3>
    2448:	98 f3       	brcs	.-26     	; 0x2430 <__divsf3+0x4>

0000244a <__divsf3_pse>:
    244a:	99 23       	and	r25, r25
    244c:	c9 f3       	breq	.-14     	; 0x2440 <__divsf3+0x14>
    244e:	55 23       	and	r21, r21
    2450:	b1 f3       	breq	.-20     	; 0x243e <__divsf3+0x12>
    2452:	95 1b       	sub	r25, r21
    2454:	55 0b       	sbc	r21, r21
    2456:	bb 27       	eor	r27, r27
    2458:	aa 27       	eor	r26, r26
    245a:	62 17       	cp	r22, r18
    245c:	73 07       	cpc	r23, r19
    245e:	84 07       	cpc	r24, r20
    2460:	38 f0       	brcs	.+14     	; 0x2470 <__divsf3_pse+0x26>
    2462:	9f 5f       	subi	r25, 0xFF	; 255
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	44 1f       	adc	r20, r20
    246c:	aa 1f       	adc	r26, r26
    246e:	a9 f3       	breq	.-22     	; 0x245a <__divsf3_pse+0x10>
    2470:	33 d0       	rcall	.+102    	; 0x24d8 <__divsf3_pse+0x8e>
    2472:	0e 2e       	mov	r0, r30
    2474:	3a f0       	brmi	.+14     	; 0x2484 <__divsf3_pse+0x3a>
    2476:	e0 e8       	ldi	r30, 0x80	; 128
    2478:	30 d0       	rcall	.+96     	; 0x24da <__divsf3_pse+0x90>
    247a:	91 50       	subi	r25, 0x01	; 1
    247c:	50 40       	sbci	r21, 0x00	; 0
    247e:	e6 95       	lsr	r30
    2480:	00 1c       	adc	r0, r0
    2482:	ca f7       	brpl	.-14     	; 0x2476 <__divsf3_pse+0x2c>
    2484:	29 d0       	rcall	.+82     	; 0x24d8 <__divsf3_pse+0x8e>
    2486:	fe 2f       	mov	r31, r30
    2488:	27 d0       	rcall	.+78     	; 0x24d8 <__divsf3_pse+0x8e>
    248a:	66 0f       	add	r22, r22
    248c:	77 1f       	adc	r23, r23
    248e:	88 1f       	adc	r24, r24
    2490:	bb 1f       	adc	r27, r27
    2492:	26 17       	cp	r18, r22
    2494:	37 07       	cpc	r19, r23
    2496:	48 07       	cpc	r20, r24
    2498:	ab 07       	cpc	r26, r27
    249a:	b0 e8       	ldi	r27, 0x80	; 128
    249c:	09 f0       	breq	.+2      	; 0x24a0 <__divsf3_pse+0x56>
    249e:	bb 0b       	sbc	r27, r27
    24a0:	80 2d       	mov	r24, r0
    24a2:	bf 01       	movw	r22, r30
    24a4:	ff 27       	eor	r31, r31
    24a6:	93 58       	subi	r25, 0x83	; 131
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255
    24aa:	2a f0       	brmi	.+10     	; 0x24b6 <__divsf3_pse+0x6c>
    24ac:	9e 3f       	cpi	r25, 0xFE	; 254
    24ae:	51 05       	cpc	r21, r1
    24b0:	68 f0       	brcs	.+26     	; 0x24cc <__divsf3_pse+0x82>
    24b2:	d0 c0       	rjmp	.+416    	; 0x2654 <__fp_inf>
    24b4:	1a c1       	rjmp	.+564    	; 0x26ea <__fp_szero>
    24b6:	5f 3f       	cpi	r21, 0xFF	; 255
    24b8:	ec f3       	brlt	.-6      	; 0x24b4 <__divsf3_pse+0x6a>
    24ba:	98 3e       	cpi	r25, 0xE8	; 232
    24bc:	dc f3       	brlt	.-10     	; 0x24b4 <__divsf3_pse+0x6a>
    24be:	86 95       	lsr	r24
    24c0:	77 95       	ror	r23
    24c2:	67 95       	ror	r22
    24c4:	b7 95       	ror	r27
    24c6:	f7 95       	ror	r31
    24c8:	9f 5f       	subi	r25, 0xFF	; 255
    24ca:	c9 f7       	brne	.-14     	; 0x24be <__divsf3_pse+0x74>
    24cc:	88 0f       	add	r24, r24
    24ce:	91 1d       	adc	r25, r1
    24d0:	96 95       	lsr	r25
    24d2:	87 95       	ror	r24
    24d4:	97 f9       	bld	r25, 7
    24d6:	08 95       	ret
    24d8:	e1 e0       	ldi	r30, 0x01	; 1
    24da:	66 0f       	add	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	bb 1f       	adc	r27, r27
    24e2:	62 17       	cp	r22, r18
    24e4:	73 07       	cpc	r23, r19
    24e6:	84 07       	cpc	r24, r20
    24e8:	ba 07       	cpc	r27, r26
    24ea:	20 f0       	brcs	.+8      	; 0x24f4 <__divsf3_pse+0xaa>
    24ec:	62 1b       	sub	r22, r18
    24ee:	73 0b       	sbc	r23, r19
    24f0:	84 0b       	sbc	r24, r20
    24f2:	ba 0b       	sbc	r27, r26
    24f4:	ee 1f       	adc	r30, r30
    24f6:	88 f7       	brcc	.-30     	; 0x24da <__divsf3_pse+0x90>
    24f8:	e0 95       	com	r30
    24fa:	08 95       	ret

000024fc <__fixunssfsi>:
    24fc:	db d0       	rcall	.+438    	; 0x26b4 <__fp_splitA>
    24fe:	88 f0       	brcs	.+34     	; 0x2522 <__fixunssfsi+0x26>
    2500:	9f 57       	subi	r25, 0x7F	; 127
    2502:	90 f0       	brcs	.+36     	; 0x2528 <__fixunssfsi+0x2c>
    2504:	b9 2f       	mov	r27, r25
    2506:	99 27       	eor	r25, r25
    2508:	b7 51       	subi	r27, 0x17	; 23
    250a:	a0 f0       	brcs	.+40     	; 0x2534 <__fixunssfsi+0x38>
    250c:	d1 f0       	breq	.+52     	; 0x2542 <__fixunssfsi+0x46>
    250e:	66 0f       	add	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	1a f0       	brmi	.+6      	; 0x251e <__fixunssfsi+0x22>
    2518:	ba 95       	dec	r27
    251a:	c9 f7       	brne	.-14     	; 0x250e <__fixunssfsi+0x12>
    251c:	12 c0       	rjmp	.+36     	; 0x2542 <__fixunssfsi+0x46>
    251e:	b1 30       	cpi	r27, 0x01	; 1
    2520:	81 f0       	breq	.+32     	; 0x2542 <__fixunssfsi+0x46>
    2522:	e2 d0       	rcall	.+452    	; 0x26e8 <__fp_zero>
    2524:	b1 e0       	ldi	r27, 0x01	; 1
    2526:	08 95       	ret
    2528:	df c0       	rjmp	.+446    	; 0x26e8 <__fp_zero>
    252a:	67 2f       	mov	r22, r23
    252c:	78 2f       	mov	r23, r24
    252e:	88 27       	eor	r24, r24
    2530:	b8 5f       	subi	r27, 0xF8	; 248
    2532:	39 f0       	breq	.+14     	; 0x2542 <__fixunssfsi+0x46>
    2534:	b9 3f       	cpi	r27, 0xF9	; 249
    2536:	cc f3       	brlt	.-14     	; 0x252a <__fixunssfsi+0x2e>
    2538:	86 95       	lsr	r24
    253a:	77 95       	ror	r23
    253c:	67 95       	ror	r22
    253e:	b3 95       	inc	r27
    2540:	d9 f7       	brne	.-10     	; 0x2538 <__fixunssfsi+0x3c>
    2542:	3e f4       	brtc	.+14     	; 0x2552 <__fixunssfsi+0x56>
    2544:	90 95       	com	r25
    2546:	80 95       	com	r24
    2548:	70 95       	com	r23
    254a:	61 95       	neg	r22
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	8f 4f       	sbci	r24, 0xFF	; 255
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	08 95       	ret

00002554 <__floatunsisf>:
    2554:	e8 94       	clt
    2556:	09 c0       	rjmp	.+18     	; 0x256a <__floatsisf+0x12>

00002558 <__floatsisf>:
    2558:	97 fb       	bst	r25, 7
    255a:	3e f4       	brtc	.+14     	; 0x256a <__floatsisf+0x12>
    255c:	90 95       	com	r25
    255e:	80 95       	com	r24
    2560:	70 95       	com	r23
    2562:	61 95       	neg	r22
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	99 23       	and	r25, r25
    256c:	a9 f0       	breq	.+42     	; 0x2598 <__floatsisf+0x40>
    256e:	f9 2f       	mov	r31, r25
    2570:	96 e9       	ldi	r25, 0x96	; 150
    2572:	bb 27       	eor	r27, r27
    2574:	93 95       	inc	r25
    2576:	f6 95       	lsr	r31
    2578:	87 95       	ror	r24
    257a:	77 95       	ror	r23
    257c:	67 95       	ror	r22
    257e:	b7 95       	ror	r27
    2580:	f1 11       	cpse	r31, r1
    2582:	f8 cf       	rjmp	.-16     	; 0x2574 <__floatsisf+0x1c>
    2584:	fa f4       	brpl	.+62     	; 0x25c4 <__floatsisf+0x6c>
    2586:	bb 0f       	add	r27, r27
    2588:	11 f4       	brne	.+4      	; 0x258e <__floatsisf+0x36>
    258a:	60 ff       	sbrs	r22, 0
    258c:	1b c0       	rjmp	.+54     	; 0x25c4 <__floatsisf+0x6c>
    258e:	6f 5f       	subi	r22, 0xFF	; 255
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	8f 4f       	sbci	r24, 0xFF	; 255
    2594:	9f 4f       	sbci	r25, 0xFF	; 255
    2596:	16 c0       	rjmp	.+44     	; 0x25c4 <__floatsisf+0x6c>
    2598:	88 23       	and	r24, r24
    259a:	11 f0       	breq	.+4      	; 0x25a0 <__floatsisf+0x48>
    259c:	96 e9       	ldi	r25, 0x96	; 150
    259e:	11 c0       	rjmp	.+34     	; 0x25c2 <__floatsisf+0x6a>
    25a0:	77 23       	and	r23, r23
    25a2:	21 f0       	breq	.+8      	; 0x25ac <__floatsisf+0x54>
    25a4:	9e e8       	ldi	r25, 0x8E	; 142
    25a6:	87 2f       	mov	r24, r23
    25a8:	76 2f       	mov	r23, r22
    25aa:	05 c0       	rjmp	.+10     	; 0x25b6 <__floatsisf+0x5e>
    25ac:	66 23       	and	r22, r22
    25ae:	71 f0       	breq	.+28     	; 0x25cc <__floatsisf+0x74>
    25b0:	96 e8       	ldi	r25, 0x86	; 134
    25b2:	86 2f       	mov	r24, r22
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	2a f0       	brmi	.+10     	; 0x25c4 <__floatsisf+0x6c>
    25ba:	9a 95       	dec	r25
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	88 1f       	adc	r24, r24
    25c2:	da f7       	brpl	.-10     	; 0x25ba <__floatsisf+0x62>
    25c4:	88 0f       	add	r24, r24
    25c6:	96 95       	lsr	r25
    25c8:	87 95       	ror	r24
    25ca:	97 f9       	bld	r25, 7
    25cc:	08 95       	ret

000025ce <fmin>:
    25ce:	99 0f       	add	r25, r25
    25d0:	bb 0b       	sbc	r27, r27
    25d2:	55 0f       	add	r21, r21
    25d4:	aa 0b       	sbc	r26, r26
    25d6:	e0 e8       	ldi	r30, 0x80	; 128
    25d8:	fe ef       	ldi	r31, 0xFE	; 254
    25da:	16 16       	cp	r1, r22
    25dc:	17 06       	cpc	r1, r23
    25de:	e8 07       	cpc	r30, r24
    25e0:	f9 07       	cpc	r31, r25
    25e2:	70 f0       	brcs	.+28     	; 0x2600 <fmin+0x32>
    25e4:	12 16       	cp	r1, r18
    25e6:	13 06       	cpc	r1, r19
    25e8:	e4 07       	cpc	r30, r20
    25ea:	f5 07       	cpc	r31, r21
    25ec:	60 f0       	brcs	.+24     	; 0x2606 <fmin+0x38>
    25ee:	ba 17       	cp	r27, r26
    25f0:	54 f0       	brlt	.+20     	; 0x2606 <fmin+0x38>
    25f2:	31 f4       	brne	.+12     	; 0x2600 <fmin+0x32>
    25f4:	26 17       	cp	r18, r22
    25f6:	37 07       	cpc	r19, r23
    25f8:	48 07       	cpc	r20, r24
    25fa:	59 07       	cpc	r21, r25
    25fc:	a7 95       	ror	r26
    25fe:	1b f4       	brvc	.+6      	; 0x2606 <fmin+0x38>
    2600:	b9 01       	movw	r22, r18
    2602:	ca 01       	movw	r24, r20
    2604:	ba 2f       	mov	r27, r26
    2606:	b6 95       	lsr	r27
    2608:	97 95       	ror	r25
    260a:	08 95       	ret

0000260c <__fp_cmp>:
    260c:	99 0f       	add	r25, r25
    260e:	00 08       	sbc	r0, r0
    2610:	55 0f       	add	r21, r21
    2612:	aa 0b       	sbc	r26, r26
    2614:	e0 e8       	ldi	r30, 0x80	; 128
    2616:	fe ef       	ldi	r31, 0xFE	; 254
    2618:	16 16       	cp	r1, r22
    261a:	17 06       	cpc	r1, r23
    261c:	e8 07       	cpc	r30, r24
    261e:	f9 07       	cpc	r31, r25
    2620:	c0 f0       	brcs	.+48     	; 0x2652 <__fp_cmp+0x46>
    2622:	12 16       	cp	r1, r18
    2624:	13 06       	cpc	r1, r19
    2626:	e4 07       	cpc	r30, r20
    2628:	f5 07       	cpc	r31, r21
    262a:	98 f0       	brcs	.+38     	; 0x2652 <__fp_cmp+0x46>
    262c:	62 1b       	sub	r22, r18
    262e:	73 0b       	sbc	r23, r19
    2630:	84 0b       	sbc	r24, r20
    2632:	95 0b       	sbc	r25, r21
    2634:	39 f4       	brne	.+14     	; 0x2644 <__fp_cmp+0x38>
    2636:	0a 26       	eor	r0, r26
    2638:	61 f0       	breq	.+24     	; 0x2652 <__fp_cmp+0x46>
    263a:	23 2b       	or	r18, r19
    263c:	24 2b       	or	r18, r20
    263e:	25 2b       	or	r18, r21
    2640:	21 f4       	brne	.+8      	; 0x264a <__fp_cmp+0x3e>
    2642:	08 95       	ret
    2644:	0a 26       	eor	r0, r26
    2646:	09 f4       	brne	.+2      	; 0x264a <__fp_cmp+0x3e>
    2648:	a1 40       	sbci	r26, 0x01	; 1
    264a:	a6 95       	lsr	r26
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	81 1d       	adc	r24, r1
    2650:	81 1d       	adc	r24, r1
    2652:	08 95       	ret

00002654 <__fp_inf>:
    2654:	97 f9       	bld	r25, 7
    2656:	9f 67       	ori	r25, 0x7F	; 127
    2658:	80 e8       	ldi	r24, 0x80	; 128
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	08 95       	ret

00002660 <__fp_nan>:
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	80 ec       	ldi	r24, 0xC0	; 192
    2664:	08 95       	ret

00002666 <__fp_pscA>:
    2666:	00 24       	eor	r0, r0
    2668:	0a 94       	dec	r0
    266a:	16 16       	cp	r1, r22
    266c:	17 06       	cpc	r1, r23
    266e:	18 06       	cpc	r1, r24
    2670:	09 06       	cpc	r0, r25
    2672:	08 95       	ret

00002674 <__fp_pscB>:
    2674:	00 24       	eor	r0, r0
    2676:	0a 94       	dec	r0
    2678:	12 16       	cp	r1, r18
    267a:	13 06       	cpc	r1, r19
    267c:	14 06       	cpc	r1, r20
    267e:	05 06       	cpc	r0, r21
    2680:	08 95       	ret

00002682 <__fp_round>:
    2682:	09 2e       	mov	r0, r25
    2684:	03 94       	inc	r0
    2686:	00 0c       	add	r0, r0
    2688:	11 f4       	brne	.+4      	; 0x268e <__fp_round+0xc>
    268a:	88 23       	and	r24, r24
    268c:	52 f0       	brmi	.+20     	; 0x26a2 <__fp_round+0x20>
    268e:	bb 0f       	add	r27, r27
    2690:	40 f4       	brcc	.+16     	; 0x26a2 <__fp_round+0x20>
    2692:	bf 2b       	or	r27, r31
    2694:	11 f4       	brne	.+4      	; 0x269a <__fp_round+0x18>
    2696:	60 ff       	sbrs	r22, 0
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__fp_round+0x20>
    269a:	6f 5f       	subi	r22, 0xFF	; 255
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	8f 4f       	sbci	r24, 0xFF	; 255
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	08 95       	ret

000026a4 <__fp_split3>:
    26a4:	57 fd       	sbrc	r21, 7
    26a6:	90 58       	subi	r25, 0x80	; 128
    26a8:	44 0f       	add	r20, r20
    26aa:	55 1f       	adc	r21, r21
    26ac:	59 f0       	breq	.+22     	; 0x26c4 <__fp_splitA+0x10>
    26ae:	5f 3f       	cpi	r21, 0xFF	; 255
    26b0:	71 f0       	breq	.+28     	; 0x26ce <__fp_splitA+0x1a>
    26b2:	47 95       	ror	r20

000026b4 <__fp_splitA>:
    26b4:	88 0f       	add	r24, r24
    26b6:	97 fb       	bst	r25, 7
    26b8:	99 1f       	adc	r25, r25
    26ba:	61 f0       	breq	.+24     	; 0x26d4 <__fp_splitA+0x20>
    26bc:	9f 3f       	cpi	r25, 0xFF	; 255
    26be:	79 f0       	breq	.+30     	; 0x26de <__fp_splitA+0x2a>
    26c0:	87 95       	ror	r24
    26c2:	08 95       	ret
    26c4:	12 16       	cp	r1, r18
    26c6:	13 06       	cpc	r1, r19
    26c8:	14 06       	cpc	r1, r20
    26ca:	55 1f       	adc	r21, r21
    26cc:	f2 cf       	rjmp	.-28     	; 0x26b2 <__fp_split3+0xe>
    26ce:	46 95       	lsr	r20
    26d0:	f1 df       	rcall	.-30     	; 0x26b4 <__fp_splitA>
    26d2:	08 c0       	rjmp	.+16     	; 0x26e4 <__fp_splitA+0x30>
    26d4:	16 16       	cp	r1, r22
    26d6:	17 06       	cpc	r1, r23
    26d8:	18 06       	cpc	r1, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	f1 cf       	rjmp	.-30     	; 0x26c0 <__fp_splitA+0xc>
    26de:	86 95       	lsr	r24
    26e0:	71 05       	cpc	r23, r1
    26e2:	61 05       	cpc	r22, r1
    26e4:	08 94       	sec
    26e6:	08 95       	ret

000026e8 <__fp_zero>:
    26e8:	e8 94       	clt

000026ea <__fp_szero>:
    26ea:	bb 27       	eor	r27, r27
    26ec:	66 27       	eor	r22, r22
    26ee:	77 27       	eor	r23, r23
    26f0:	cb 01       	movw	r24, r22
    26f2:	97 f9       	bld	r25, 7
    26f4:	08 95       	ret

000026f6 <__gesf2>:
    26f6:	8a df       	rcall	.-236    	; 0x260c <__fp_cmp>
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <__gesf2+0x6>
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	08 95       	ret

000026fe <__mulsf3>:
    26fe:	0b d0       	rcall	.+22     	; 0x2716 <__mulsf3x>
    2700:	c0 cf       	rjmp	.-128    	; 0x2682 <__fp_round>
    2702:	b1 df       	rcall	.-158    	; 0x2666 <__fp_pscA>
    2704:	28 f0       	brcs	.+10     	; 0x2710 <__mulsf3+0x12>
    2706:	b6 df       	rcall	.-148    	; 0x2674 <__fp_pscB>
    2708:	18 f0       	brcs	.+6      	; 0x2710 <__mulsf3+0x12>
    270a:	95 23       	and	r25, r21
    270c:	09 f0       	breq	.+2      	; 0x2710 <__mulsf3+0x12>
    270e:	a2 cf       	rjmp	.-188    	; 0x2654 <__fp_inf>
    2710:	a7 cf       	rjmp	.-178    	; 0x2660 <__fp_nan>
    2712:	11 24       	eor	r1, r1
    2714:	ea cf       	rjmp	.-44     	; 0x26ea <__fp_szero>

00002716 <__mulsf3x>:
    2716:	c6 df       	rcall	.-116    	; 0x26a4 <__fp_split3>
    2718:	a0 f3       	brcs	.-24     	; 0x2702 <__mulsf3+0x4>

0000271a <__mulsf3_pse>:
    271a:	95 9f       	mul	r25, r21
    271c:	d1 f3       	breq	.-12     	; 0x2712 <__mulsf3+0x14>
    271e:	95 0f       	add	r25, r21
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	55 1f       	adc	r21, r21
    2724:	62 9f       	mul	r22, r18
    2726:	f0 01       	movw	r30, r0
    2728:	72 9f       	mul	r23, r18
    272a:	bb 27       	eor	r27, r27
    272c:	f0 0d       	add	r31, r0
    272e:	b1 1d       	adc	r27, r1
    2730:	63 9f       	mul	r22, r19
    2732:	aa 27       	eor	r26, r26
    2734:	f0 0d       	add	r31, r0
    2736:	b1 1d       	adc	r27, r1
    2738:	aa 1f       	adc	r26, r26
    273a:	64 9f       	mul	r22, r20
    273c:	66 27       	eor	r22, r22
    273e:	b0 0d       	add	r27, r0
    2740:	a1 1d       	adc	r26, r1
    2742:	66 1f       	adc	r22, r22
    2744:	82 9f       	mul	r24, r18
    2746:	22 27       	eor	r18, r18
    2748:	b0 0d       	add	r27, r0
    274a:	a1 1d       	adc	r26, r1
    274c:	62 1f       	adc	r22, r18
    274e:	73 9f       	mul	r23, r19
    2750:	b0 0d       	add	r27, r0
    2752:	a1 1d       	adc	r26, r1
    2754:	62 1f       	adc	r22, r18
    2756:	83 9f       	mul	r24, r19
    2758:	a0 0d       	add	r26, r0
    275a:	61 1d       	adc	r22, r1
    275c:	22 1f       	adc	r18, r18
    275e:	74 9f       	mul	r23, r20
    2760:	33 27       	eor	r19, r19
    2762:	a0 0d       	add	r26, r0
    2764:	61 1d       	adc	r22, r1
    2766:	23 1f       	adc	r18, r19
    2768:	84 9f       	mul	r24, r20
    276a:	60 0d       	add	r22, r0
    276c:	21 1d       	adc	r18, r1
    276e:	82 2f       	mov	r24, r18
    2770:	76 2f       	mov	r23, r22
    2772:	6a 2f       	mov	r22, r26
    2774:	11 24       	eor	r1, r1
    2776:	9f 57       	subi	r25, 0x7F	; 127
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	8a f0       	brmi	.+34     	; 0x279e <__mulsf3_pse+0x84>
    277c:	e1 f0       	breq	.+56     	; 0x27b6 <__mulsf3_pse+0x9c>
    277e:	88 23       	and	r24, r24
    2780:	4a f0       	brmi	.+18     	; 0x2794 <__mulsf3_pse+0x7a>
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	bb 1f       	adc	r27, r27
    2788:	66 1f       	adc	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	91 50       	subi	r25, 0x01	; 1
    2790:	50 40       	sbci	r21, 0x00	; 0
    2792:	a9 f7       	brne	.-22     	; 0x277e <__mulsf3_pse+0x64>
    2794:	9e 3f       	cpi	r25, 0xFE	; 254
    2796:	51 05       	cpc	r21, r1
    2798:	70 f0       	brcs	.+28     	; 0x27b6 <__mulsf3_pse+0x9c>
    279a:	5c cf       	rjmp	.-328    	; 0x2654 <__fp_inf>
    279c:	a6 cf       	rjmp	.-180    	; 0x26ea <__fp_szero>
    279e:	5f 3f       	cpi	r21, 0xFF	; 255
    27a0:	ec f3       	brlt	.-6      	; 0x279c <__mulsf3_pse+0x82>
    27a2:	98 3e       	cpi	r25, 0xE8	; 232
    27a4:	dc f3       	brlt	.-10     	; 0x279c <__mulsf3_pse+0x82>
    27a6:	86 95       	lsr	r24
    27a8:	77 95       	ror	r23
    27aa:	67 95       	ror	r22
    27ac:	b7 95       	ror	r27
    27ae:	f7 95       	ror	r31
    27b0:	e7 95       	ror	r30
    27b2:	9f 5f       	subi	r25, 0xFF	; 255
    27b4:	c1 f7       	brne	.-16     	; 0x27a6 <__mulsf3_pse+0x8c>
    27b6:	fe 2b       	or	r31, r30
    27b8:	88 0f       	add	r24, r24
    27ba:	91 1d       	adc	r25, r1
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	97 f9       	bld	r25, 7
    27c2:	08 95       	ret

000027c4 <__mulsi3>:
    27c4:	62 9f       	mul	r22, r18
    27c6:	d0 01       	movw	r26, r0
    27c8:	73 9f       	mul	r23, r19
    27ca:	f0 01       	movw	r30, r0
    27cc:	82 9f       	mul	r24, r18
    27ce:	e0 0d       	add	r30, r0
    27d0:	f1 1d       	adc	r31, r1
    27d2:	64 9f       	mul	r22, r20
    27d4:	e0 0d       	add	r30, r0
    27d6:	f1 1d       	adc	r31, r1
    27d8:	92 9f       	mul	r25, r18
    27da:	f0 0d       	add	r31, r0
    27dc:	83 9f       	mul	r24, r19
    27de:	f0 0d       	add	r31, r0
    27e0:	74 9f       	mul	r23, r20
    27e2:	f0 0d       	add	r31, r0
    27e4:	65 9f       	mul	r22, r21
    27e6:	f0 0d       	add	r31, r0
    27e8:	99 27       	eor	r25, r25
    27ea:	72 9f       	mul	r23, r18
    27ec:	b0 0d       	add	r27, r0
    27ee:	e1 1d       	adc	r30, r1
    27f0:	f9 1f       	adc	r31, r25
    27f2:	63 9f       	mul	r22, r19
    27f4:	b0 0d       	add	r27, r0
    27f6:	e1 1d       	adc	r30, r1
    27f8:	f9 1f       	adc	r31, r25
    27fa:	bd 01       	movw	r22, r26
    27fc:	cf 01       	movw	r24, r30
    27fe:	11 24       	eor	r1, r1
    2800:	08 95       	ret

00002802 <__udivmodhi4>:
    2802:	aa 1b       	sub	r26, r26
    2804:	bb 1b       	sub	r27, r27
    2806:	51 e1       	ldi	r21, 0x11	; 17
    2808:	07 c0       	rjmp	.+14     	; 0x2818 <__udivmodhi4_ep>

0000280a <__udivmodhi4_loop>:
    280a:	aa 1f       	adc	r26, r26
    280c:	bb 1f       	adc	r27, r27
    280e:	a6 17       	cp	r26, r22
    2810:	b7 07       	cpc	r27, r23
    2812:	10 f0       	brcs	.+4      	; 0x2818 <__udivmodhi4_ep>
    2814:	a6 1b       	sub	r26, r22
    2816:	b7 0b       	sbc	r27, r23

00002818 <__udivmodhi4_ep>:
    2818:	88 1f       	adc	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	5a 95       	dec	r21
    281e:	a9 f7       	brne	.-22     	; 0x280a <__udivmodhi4_loop>
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	08 95       	ret

0000282a <__udivmodsi4>:
    282a:	a1 e2       	ldi	r26, 0x21	; 33
    282c:	1a 2e       	mov	r1, r26
    282e:	aa 1b       	sub	r26, r26
    2830:	bb 1b       	sub	r27, r27
    2832:	fd 01       	movw	r30, r26
    2834:	0d c0       	rjmp	.+26     	; 0x2850 <__udivmodsi4_ep>

00002836 <__udivmodsi4_loop>:
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	ee 1f       	adc	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	a2 17       	cp	r26, r18
    2840:	b3 07       	cpc	r27, r19
    2842:	e4 07       	cpc	r30, r20
    2844:	f5 07       	cpc	r31, r21
    2846:	20 f0       	brcs	.+8      	; 0x2850 <__udivmodsi4_ep>
    2848:	a2 1b       	sub	r26, r18
    284a:	b3 0b       	sbc	r27, r19
    284c:	e4 0b       	sbc	r30, r20
    284e:	f5 0b       	sbc	r31, r21

00002850 <__udivmodsi4_ep>:
    2850:	66 1f       	adc	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	88 1f       	adc	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	1a 94       	dec	r1
    285a:	69 f7       	brne	.-38     	; 0x2836 <__udivmodsi4_loop>
    285c:	60 95       	com	r22
    285e:	70 95       	com	r23
    2860:	80 95       	com	r24
    2862:	90 95       	com	r25
    2864:	9b 01       	movw	r18, r22
    2866:	ac 01       	movw	r20, r24
    2868:	bd 01       	movw	r22, r26
    286a:	cf 01       	movw	r24, r30
    286c:	08 95       	ret

0000286e <_exit>:
    286e:	f8 94       	cli

00002870 <__stop_program>:
    2870:	ff cf       	rjmp	.-2      	; 0x2870 <__stop_program>

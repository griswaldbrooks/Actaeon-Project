
picoBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fdc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  00002050  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000006f0  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001984  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000082a  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001419  00000000  00000000  000049ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000500  00000000  00000000  00005de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a43  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f33  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_3>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__vector_5>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000068 <__c.2191>:
      68:	09 2c 00                                            .,.

0000006b <HexChars>:
      6b:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d4 e0       	ldi	r29, 0x04	; 4
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec ed       	ldi	r30, 0xDC	; 220
      90:	ff e1       	ldi	r31, 0x1F	; 31
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 30       	cpi	r26, 0x02	; 2
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
      b2:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_default>

000000ba <wheel_l>:
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
}

void wheel_l(float cmd_vel_l){
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	7b 01       	movw	r14, r22
      c4:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 7cm/sec > v_dead > -9cm/sec
	if((cmd_vel_l < 9) && (cmd_vel_l > -9))  cmd_vel_l =  0;
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e1       	ldi	r20, 0x10	; 16
      cc:	51 e4       	ldi	r21, 0x41	; 65
      ce:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
      d2:	88 23       	and	r24, r24
      d4:	ac f4       	brge	.+42     	; 0x100 <wheel_l+0x46>
      d6:	c8 01       	movw	r24, r16
      d8:	b7 01       	movw	r22, r14
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e1       	ldi	r20, 0x10	; 16
      e0:	51 ec       	ldi	r21, 0xC1	; 193
      e2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
      e6:	18 16       	cp	r1, r24
      e8:	5c f4       	brge	.+22     	; 0x100 <wheel_l+0x46>
      ea:	0f 2e       	mov	r0, r31
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	ef 2e       	mov	r14, r31
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	ff 2e       	mov	r15, r31
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0f 2f       	mov	r16, r31
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	1f 2f       	mov	r17, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	29 c0       	rjmp	.+82     	; 0x152 <wheel_l+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_l > 32)  cmd_vel_l =  32;
     100:	c8 01       	movw	r24, r16
     102:	b7 01       	movw	r22, r14
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	52 e4       	ldi	r21, 0x42	; 66
     10c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     110:	18 16       	cp	r1, r24
     112:	5c f4       	brge	.+22     	; 0x12a <wheel_l+0x70>
     114:	0f 2e       	mov	r0, r31
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	ef 2e       	mov	r14, r31
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	0f 2f       	mov	r16, r31
     122:	f2 e4       	ldi	r31, 0x42	; 66
     124:	1f 2f       	mov	r17, r31
     126:	f0 2d       	mov	r31, r0
     128:	14 c0       	rjmp	.+40     	; 0x152 <wheel_l+0x98>
	if(cmd_vel_l < -32) cmd_vel_l = -32;
     12a:	c8 01       	movw	r24, r16
     12c:	b7 01       	movw	r22, r14
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	52 ec       	ldi	r21, 0xC2	; 194
     136:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
     13a:	88 23       	and	r24, r24
     13c:	54 f4       	brge	.+20     	; 0x152 <wheel_l+0x98>
     13e:	0f 2e       	mov	r0, r31
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	ef 2e       	mov	r14, r31
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	ff 2e       	mov	r15, r31
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	0f 2f       	mov	r16, r31
     14c:	f2 ec       	ldi	r31, 0xC2	; 194
     14e:	1f 2f       	mov	r17, r31
     150:	f0 2d       	mov	r31, r0
  
	duty = -0.9697*cmd_vel_l + 369.6449;
	
	PWM_timer1_Set_Pin9(duty);
     152:	c8 01       	movw	r24, r16
     154:	b7 01       	movw	r22, r14
     156:	22 e4       	ldi	r18, 0x42	; 66
     158:	3e e3       	ldi	r19, 0x3E	; 62
     15a:	48 e7       	ldi	r20, 0x78	; 120
     15c:	5f eb       	ldi	r21, 0xBF	; 191
     15e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     162:	2c e8       	ldi	r18, 0x8C	; 140
     164:	32 ed       	ldi	r19, 0xD2	; 210
     166:	48 eb       	ldi	r20, 0xB8	; 184
     168:	53 e4       	ldi	r21, 0x43	; 67
     16a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     16e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fixunssfsi>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	0e 94 53 06 	call	0xca6	; 0xca6 <PWM_timer1_Set_Pin9>
}
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	08 95       	ret

00000184 <wheel_r>:
	// Enable interrupts
	sei();	// Global interrupt enable

}

void wheel_r(float cmd_vel_r){
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	7b 01       	movw	r14, r22
     18e:	8c 01       	movw	r16, r24
	u16 duty;
	// Wheel deadband 8cm/sec > v_dead > -5cm/sec
	if((cmd_vel_r < 8) && (cmd_vel_r > -8))  cmd_vel_r = 0;
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	51 e4       	ldi	r21, 0x41	; 65
     198:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
     19c:	88 23       	and	r24, r24
     19e:	ac f4       	brge	.+42     	; 0x1ca <wheel_r+0x46>
     1a0:	c8 01       	movw	r24, r16
     1a2:	b7 01       	movw	r22, r14
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	51 ec       	ldi	r21, 0xC1	; 193
     1ac:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     1b0:	18 16       	cp	r1, r24
     1b2:	5c f4       	brge	.+22     	; 0x1ca <wheel_r+0x46>
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	0f 2f       	mov	r16, r31
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	1f 2f       	mov	r17, r31
     1c6:	f0 2d       	mov	r31, r0
     1c8:	29 c0       	rjmp	.+82     	; 0x21c <wheel_r+0x98>

	// Limit velocity commands, cm/sec
	if(cmd_vel_r > 32)  cmd_vel_r =  32;
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	52 e4       	ldi	r21, 0x42	; 66
     1d6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     1da:	18 16       	cp	r1, r24
     1dc:	5c f4       	brge	.+22     	; 0x1f4 <wheel_r+0x70>
     1de:	0f 2e       	mov	r0, r31
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	ef 2e       	mov	r14, r31
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	0f 2f       	mov	r16, r31
     1ec:	f2 e4       	ldi	r31, 0x42	; 66
     1ee:	1f 2f       	mov	r17, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	14 c0       	rjmp	.+40     	; 0x21c <wheel_r+0x98>
	if(cmd_vel_r < -32) cmd_vel_r = -32;
     1f4:	c8 01       	movw	r24, r16
     1f6:	b7 01       	movw	r22, r14
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	52 ec       	ldi	r21, 0xC2	; 194
     200:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
     204:	88 23       	and	r24, r24
     206:	54 f4       	brge	.+20     	; 0x21c <wheel_r+0x98>
     208:	0f 2e       	mov	r0, r31
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ef 2e       	mov	r14, r31
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	ff 2e       	mov	r15, r31
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	0f 2f       	mov	r16, r31
     216:	f2 ec       	ldi	r31, 0xC2	; 194
     218:	1f 2f       	mov	r17, r31
     21a:	f0 2d       	mov	r31, r0
  
	duty = 1.1127*cmd_vel_r + 374.2424;
	
	PWM_timer1_Set_Pin10(duty);
     21c:	c8 01       	movw	r24, r16
     21e:	b7 01       	movw	r22, r14
     220:	24 ef       	ldi	r18, 0xF4	; 244
     222:	3c e6       	ldi	r19, 0x6C	; 108
     224:	4e e8       	ldi	r20, 0x8E	; 142
     226:	5f e3       	ldi	r21, 0x3F	; 63
     228:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     22c:	27 e0       	ldi	r18, 0x07	; 7
     22e:	3f e1       	ldi	r19, 0x1F	; 31
     230:	4b eb       	ldi	r20, 0xBB	; 187
     232:	53 e4       	ldi	r21, 0x43	; 67
     234:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     238:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fixunssfsi>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	0e 94 58 06 	call	0xcb0	; 0xcb0 <PWM_timer1_Set_Pin10>
}
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	08 95       	ret

0000024e <pwm_setup>:
#define wheel_r_on()	PWM_timer1_On_Pin10();

void pwm_setup(void){

	// 20 ms period
	timer1PWMInitICR(5000);
     24e:	88 e8       	ldi	r24, 0x88	; 136
     250:	93 e1       	ldi	r25, 0x13	; 19
     252:	0e 94 ef 05 	call	0xbde	; 0xbde <timer1PWMInitICR>

	// Set pins B1 and B2 to output for PWM
	sbi(DDRB,DDB1);		// Pin 9
     256:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB,DDB2);		// Pin 10
     258:	22 9a       	sbi	0x04, 2	; 4
}
     25a:	08 95       	ret

0000025c <setup_hardware>:

void setup_hardware(void){
	// Set pins PD0 and PD1 for UART RX and TX respectively
	cbi(DDRD,DDD0);		// Pin 0 RX
     25c:	50 98       	cbi	0x0a, 0	; 10
	sbi(DDRD,DDD1);		// Pin 1 TX
     25e:	51 9a       	sbi	0x0a, 1	; 10
	uartInit();
     260:	0e 94 c5 0b 	call	0x178a	; 0x178a <uartInit>
	uartSetBaudRate(0,115200);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	52 ec       	ldi	r21, 0xC2	; 194
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	0e 94 a4 09 	call	0x1348	; 0x1348 <uartSetBaudRate>
	rprintfInit(uart0SendByte);
     272:	89 ee       	ldi	r24, 0xE9	; 233
     274:	99 e0       	ldi	r25, 0x09	; 9
     276:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rprintfInit>

	// Clear pins for encoders to input
	cbi(DDRD,DDD7);		// Pin 7  Left  Quadrature Encoder
     27a:	57 98       	cbi	0x0a, 7	; 10
	cbi(DDRB,DDB0);		// Pin 8  Left  Quadrature Encoder
     27c:	20 98       	cbi	0x04, 0	; 4
	cbi(DDRB,DDB4);		// Pin 12 Right Quadrature Encoder
     27e:	24 98       	cbi	0x04, 4	; 4
	cbi(DDRB,DDB5);		// Pin 13 Right Quadrature Encoder
     280:	25 98       	cbi	0x04, 5	; 4
	PORT_ON(PORTD,7);	// Enable pull-up resistor
     282:	5f 9a       	sbi	0x0b, 7	; 11
	PORT_ON(PORTB,0);	// Enable pull-up resistor
     284:	28 9a       	sbi	0x05, 0	; 5
	PORT_ON(PORTB,4);	// Enable pull-up resistor
     286:	2c 9a       	sbi	0x05, 4	; 5
	PORT_ON(PORTB,5);	// Enable pull-up resistor
     288:	2d 9a       	sbi	0x05, 5	; 5
	

	init_timer0(TIMER_CLK_64);
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	0e 94 74 06 	call	0xce8	; 0xce8 <init_timer0>
	init_timer1(TIMER_CLK_64);
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 82 06 	call	0xd04	; 0xd04 <init_timer1>
	pwm_setup();
     296:	0e 94 27 01 	call	0x24e	; 0x24e <pwm_setup>

	// Enable DIO Pin 7 to interrupt on change
	sbi(PCICR,PCIE2);
     29a:	e8 e6       	ldi	r30, 0x68	; 104
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	84 60       	ori	r24, 0x04	; 4
     2a2:	80 83       	st	Z, r24
	sbi(PCMSK2,PCINT23);// Pin 7
     2a4:	ad e6       	ldi	r26, 0x6D	; 109
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	8c 91       	ld	r24, X
     2aa:	80 68       	ori	r24, 0x80	; 128
     2ac:	8c 93       	st	X, r24
	
	sbi(PCICR,PCIE0);
     2ae:	80 81       	ld	r24, Z
     2b0:	81 60       	ori	r24, 0x01	; 1
     2b2:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT0);	// Pin 8
     2b4:	eb e6       	ldi	r30, 0x6B	; 107
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	81 60       	ori	r24, 0x01	; 1
     2bc:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT4);	// Pin 12
     2be:	80 81       	ld	r24, Z
     2c0:	80 61       	ori	r24, 0x10	; 16
     2c2:	80 83       	st	Z, r24
	sbi(PCMSK0,PCINT5); // Pin 13
     2c4:	80 81       	ld	r24, Z
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	80 83       	st	Z, r24


	// Enable interrupts
	sei();	// Global interrupt enable
     2ca:	78 94       	sei

}
     2cc:	08 95       	ret

000002ce <main>:
	
	PWM_timer1_Set_Pin9(duty);
}


int main(void){
     2ce:	2f 92       	push	r2
     2d0:	3f 92       	push	r3
     2d2:	4f 92       	push	r4
     2d4:	5f 92       	push	r5
     2d6:	6f 92       	push	r6
     2d8:	7f 92       	push	r7
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	df 93       	push	r29
     2f0:	cf 93       	push	r28
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	c8 56       	subi	r28, 0x68	; 104
     2f8:	d0 40       	sbci	r29, 0x00	; 0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
	lpf2_r = lpf1_r;
	lpf3_r = (wb*T_r - 2)/(wb*T_r + 2);
	///////////////////////////////////////////////////////////////////////////////////////
	
	
	setup_hardware();
     304:	0e 94 2e 01 	call	0x25c	; 0x25c <setup_hardware>
	
	
/**/
	wheel_l_on();
     308:	0e 94 3d 06 	call	0xc7a	; 0xc7a <PWM_timer1_On_Pin9>
	wheel_r_on();
     30c:	0e 94 46 06 	call	0xc8c	; 0xc8c <PWM_timer1_On_Pin10>
	wheel_l(0);
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 5d 00 	call	0xba	; 0xba <wheel_l>
	wheel_r(0);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 c2 00 	call	0x184	; 0x184 <wheel_r>
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	10 e0       	ldi	r17, 0x00	; 0
	
	for(u16 ndx = 0; ndx < 10000; ndx++){
		delay_us(200);
     32c:	88 ec       	ldi	r24, 0xC8	; 200
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 9f 06 	call	0xd3e	; 0xd3e <delay_us>
	wheel_l_on();
	wheel_r_on();
	wheel_l(0);
	wheel_r(0);
	
	for(u16 ndx = 0; ndx < 10000; ndx++){
     334:	0f 5f       	subi	r16, 0xFF	; 255
     336:	1f 4f       	sbci	r17, 0xFF	; 255
     338:	27 e2       	ldi	r18, 0x27	; 39
     33a:	00 31       	cpi	r16, 0x10	; 16
     33c:	12 07       	cpc	r17, r18
     33e:	b1 f7       	brne	.-20     	; 0x32c <main+0x5e>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	69 96       	adiw	r28, 0x19	; 25
     34a:	8c af       	std	Y+60, r24	; 0x3c
     34c:	9d af       	std	Y+61, r25	; 0x3d
     34e:	ae af       	std	Y+62, r26	; 0x3e
     350:	bf af       	std	Y+63, r27	; 0x3f
     352:	69 97       	sbiw	r28, 0x19	; 25
     354:	65 96       	adiw	r28, 0x15	; 21
     356:	8c af       	std	Y+60, r24	; 0x3c
     358:	9d af       	std	Y+61, r25	; 0x3d
     35a:	ae af       	std	Y+62, r26	; 0x3e
     35c:	bf af       	std	Y+63, r27	; 0x3f
     35e:	65 97       	sbiw	r28, 0x15	; 21
     360:	61 96       	adiw	r28, 0x11	; 17
     362:	1c ae       	std	Y+60, r1	; 0x3c
     364:	1d ae       	std	Y+61, r1	; 0x3d
     366:	1e ae       	std	Y+62, r1	; 0x3e
     368:	1f ae       	std	Y+63, r1	; 0x3f
     36a:	61 97       	sbiw	r28, 0x11	; 17
     36c:	2d 96       	adiw	r28, 0x0d	; 13
     36e:	1c ae       	std	Y+60, r1	; 0x3c
     370:	1d ae       	std	Y+61, r1	; 0x3d
     372:	1e ae       	std	Y+62, r1	; 0x3e
     374:	1f ae       	std	Y+63, r1	; 0x3f
     376:	2d 97       	sbiw	r28, 0x0d	; 13
     378:	29 96       	adiw	r28, 0x09	; 9
     37a:	8c af       	std	Y+60, r24	; 0x3c
     37c:	9d af       	std	Y+61, r25	; 0x3d
     37e:	ae af       	std	Y+62, r26	; 0x3e
     380:	bf af       	std	Y+63, r27	; 0x3f
     382:	29 97       	sbiw	r28, 0x09	; 9
     384:	25 96       	adiw	r28, 0x05	; 5
     386:	8c af       	std	Y+60, r24	; 0x3c
     388:	9d af       	std	Y+61, r25	; 0x3d
     38a:	ae af       	std	Y+62, r26	; 0x3e
     38c:	bf af       	std	Y+63, r27	; 0x3f
     38e:	25 97       	sbiw	r28, 0x05	; 5
     390:	21 96       	adiw	r28, 0x01	; 1
     392:	8c af       	std	Y+60, r24	; 0x3c
     394:	9d af       	std	Y+61, r25	; 0x3d
     396:	ae af       	std	Y+62, r26	; 0x3e
     398:	bf af       	std	Y+63, r27	; 0x3f
     39a:	21 97       	sbiw	r28, 0x01	; 1
     39c:	89 af       	std	Y+57, r24	; 0x39
     39e:	9a af       	std	Y+58, r25	; 0x3a
     3a0:	ab af       	std	Y+59, r26	; 0x3b
     3a2:	bc af       	std	Y+60, r27	; 0x3c
     3a4:	8d ab       	std	Y+53, r24	; 0x35
     3a6:	9e ab       	std	Y+54, r25	; 0x36
     3a8:	af ab       	std	Y+55, r26	; 0x37
     3aa:	b8 af       	std	Y+56, r27	; 0x38
     3ac:	89 ab       	std	Y+49, r24	; 0x31
     3ae:	9a ab       	std	Y+50, r25	; 0x32
     3b0:	ab ab       	std	Y+51, r26	; 0x33
     3b2:	bc ab       	std	Y+52, r27	; 0x34
     3b4:	8d a7       	std	Y+45, r24	; 0x2d
     3b6:	9e a7       	std	Y+46, r25	; 0x2e
     3b8:	af a7       	std	Y+47, r26	; 0x2f
     3ba:	b8 ab       	std	Y+48, r27	; 0x30
     3bc:	89 a7       	std	Y+41, r24	; 0x29
     3be:	9a a7       	std	Y+42, r25	; 0x2a
     3c0:	ab a7       	std	Y+43, r26	; 0x2b
     3c2:	bc a7       	std	Y+44, r27	; 0x2c
     3c4:	89 8f       	std	Y+25, r24	; 0x19
     3c6:	9a 8f       	std	Y+26, r25	; 0x1a
     3c8:	ab 8f       	std	Y+27, r26	; 0x1b
     3ca:	bc 8f       	std	Y+28, r27	; 0x1c
     3cc:	8d 8b       	std	Y+21, r24	; 0x15
     3ce:	9e 8b       	std	Y+22, r25	; 0x16
     3d0:	af 8b       	std	Y+23, r26	; 0x17
     3d2:	b8 8f       	std	Y+24, r27	; 0x18
     3d4:	8d 87       	std	Y+13, r24	; 0x0d
     3d6:	9e 87       	std	Y+14, r25	; 0x0e
     3d8:	af 87       	std	Y+15, r26	; 0x0f
     3da:	b8 8b       	std	Y+16, r27	; 0x10
     3dc:	89 87       	std	Y+9, r24	; 0x09
     3de:	9a 87       	std	Y+10, r25	; 0x0a
     3e0:	ab 87       	std	Y+11, r26	; 0x0b
     3e2:	bc 87       	std	Y+12, r27	; 0x0c
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	ab 83       	std	Y+3, r26	; 0x03
     3ea:	bc 83       	std	Y+4, r27	; 0x04
		delay_us(200);
	}

	while(1){
		elapsed_time_l = elapsed_time_r = ((get_timer0_overflow()*255 + TCNT0) * 0.0435) / 10000;
     3ec:	0e 94 94 06 	call	0xd28	; 0xd28 <get_timer0_overflow>
     3f0:	16 b5       	in	r17, 0x26	; 38
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__mulsi3>
     3fe:	61 0f       	add	r22, r17
     400:	71 1d       	adc	r23, r1
     402:	81 1d       	adc	r24, r1
     404:	91 1d       	adc	r25, r1
     406:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__floatunsisf>
     40a:	2e e0       	ldi	r18, 0x0E	; 14
     40c:	3d e2       	ldi	r19, 0x2D	; 45
     40e:	42 e3       	ldi	r20, 0x32	; 50
     410:	5d e3       	ldi	r21, 0x3D	; 61
     412:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e4       	ldi	r19, 0x40	; 64
     41a:	4c e1       	ldi	r20, 0x1C	; 28
     41c:	56 e4       	ldi	r21, 0x46	; 70
     41e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     422:	6d 96       	adiw	r28, 0x1d	; 29
     424:	6c af       	std	Y+60, r22	; 0x3c
     426:	7d af       	std	Y+61, r23	; 0x3d
     428:	8e af       	std	Y+62, r24	; 0x3e
     42a:	9f af       	std	Y+63, r25	; 0x3f
     42c:	6d 97       	sbiw	r28, 0x1d	; 29
		
		l_count_current = get_left_count();
     42e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <get_left_count>
     432:	7b 01       	movw	r14, r22
     434:	8c 01       	movw	r16, r24
		r_count_current = get_right_count();
     436:	0e 94 81 0c 	call	0x1902	; 0x1902 <get_right_count>
     43a:	a6 96       	adiw	r28, 0x26	; 38
     43c:	6f af       	std	Y+63, r22	; 0x3f
     43e:	a6 97       	sbiw	r28, 0x26	; 38
     440:	a7 96       	adiw	r28, 0x27	; 39
     442:	7f af       	std	Y+63, r23	; 0x3f
     444:	a7 97       	sbiw	r28, 0x27	; 39
     446:	a8 96       	adiw	r28, 0x28	; 40
     448:	8f af       	std	Y+63, r24	; 0x3f
     44a:	a8 97       	sbiw	r28, 0x28	; 40
     44c:	a9 96       	adiw	r28, 0x29	; 41
     44e:	9f af       	std	Y+63, r25	; 0x3f
     450:	a9 97       	sbiw	r28, 0x29	; 41

		if(l_count_current != l_count_previous){
     452:	61 96       	adiw	r28, 0x11	; 17
     454:	2c ad       	ldd	r18, Y+60	; 0x3c
     456:	3d ad       	ldd	r19, Y+61	; 0x3d
     458:	4e ad       	ldd	r20, Y+62	; 0x3e
     45a:	5f ad       	ldd	r21, Y+63	; 0x3f
     45c:	61 97       	sbiw	r28, 0x11	; 17
     45e:	e2 16       	cp	r14, r18
     460:	f3 06       	cpc	r15, r19
     462:	04 07       	cpc	r16, r20
     464:	15 07       	cpc	r17, r21
     466:	09 f4       	brne	.+2      	; 0x46a <main+0x19c>
     468:	a1 c0       	rjmp	.+322    	; 0x5ac <__stack+0xad>
			l_count_current = get_left_count();
     46a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <get_left_count>
     46e:	7b 01       	movw	r14, r22
     470:	8c 01       	movw	r16, r24
			dt_l = (elapsed_time_l - elapsed_time_l_previous);		
     472:	6d 96       	adiw	r28, 0x1d	; 29
     474:	6c ad       	ldd	r22, Y+60	; 0x3c
     476:	7d ad       	ldd	r23, Y+61	; 0x3d
     478:	8e ad       	ldd	r24, Y+62	; 0x3e
     47a:	9f ad       	ldd	r25, Y+63	; 0x3f
     47c:	6d 97       	sbiw	r28, 0x1d	; 29
     47e:	69 96       	adiw	r28, 0x19	; 25
     480:	2c ad       	ldd	r18, Y+60	; 0x3c
     482:	3d ad       	ldd	r19, Y+61	; 0x3d
     484:	4e ad       	ldd	r20, Y+62	; 0x3e
     486:	5f ad       	ldd	r21, Y+63	; 0x3f
     488:	69 97       	sbiw	r28, 0x19	; 25
     48a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     48e:	5b 01       	movw	r10, r22
     490:	6c 01       	movw	r12, r24
			ticks_per_sec_l = (l_count_current - l_count_previous)/dt_l;

			rps_l = ticks_per_sec_l/(TICKS_PER_ROTATION);
     492:	c8 01       	movw	r24, r16
     494:	b7 01       	movw	r22, r14
     496:	61 96       	adiw	r28, 0x11	; 17
     498:	2c ad       	ldd	r18, Y+60	; 0x3c
     49a:	3d ad       	ldd	r19, Y+61	; 0x3d
     49c:	4e ad       	ldd	r20, Y+62	; 0x3e
     49e:	5f ad       	ldd	r21, Y+63	; 0x3f
     4a0:	61 97       	sbiw	r28, 0x11	; 17
     4a2:	62 1b       	sub	r22, r18
     4a4:	73 0b       	sbc	r23, r19
     4a6:	84 0b       	sbc	r24, r20
     4a8:	95 0b       	sbc	r25, r21
     4aa:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__floatsisf>
     4ae:	a6 01       	movw	r20, r12
     4b0:	95 01       	movw	r18, r10
     4b2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	5c e3       	ldi	r21, 0x3C	; 60
     4be:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     4c2:	a1 96       	adiw	r28, 0x21	; 33
     4c4:	6c af       	std	Y+60, r22	; 0x3c
     4c6:	7d af       	std	Y+61, r23	; 0x3d
     4c8:	8e af       	std	Y+62, r24	; 0x3e
     4ca:	9f af       	std	Y+63, r25	; 0x3f
     4cc:	a1 97       	sbiw	r28, 0x21	; 33
			rps_lf = ((Kl*dt_l)/(Kl*dt_l + 2))*(rps_l + rps_l_prev) - ((Kl*dt_l - 2)/(Kl*dt_l + 2))*rps_lf_prev;
     4ce:	c6 01       	movw	r24, r12
     4d0:	b5 01       	movw	r22, r10
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e2       	ldi	r20, 0x20	; 32
     4d8:	51 e4       	ldi	r21, 0x41	; 65
     4da:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     4de:	5b 01       	movw	r10, r22
     4e0:	6c 01       	movw	r12, r24
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e4       	ldi	r21, 0x40	; 64
     4ea:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     4ee:	1b 01       	movw	r2, r22
     4f0:	2c 01       	movw	r4, r24
     4f2:	c6 01       	movw	r24, r12
     4f4:	b5 01       	movw	r22, r10
     4f6:	a2 01       	movw	r20, r4
     4f8:	91 01       	movw	r18, r2
     4fa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     4fe:	3b 01       	movw	r6, r22
     500:	4c 01       	movw	r8, r24
     502:	a1 96       	adiw	r28, 0x21	; 33
     504:	6c ad       	ldd	r22, Y+60	; 0x3c
     506:	7d ad       	ldd	r23, Y+61	; 0x3d
     508:	8e ad       	ldd	r24, Y+62	; 0x3e
     50a:	9f ad       	ldd	r25, Y+63	; 0x3f
     50c:	a1 97       	sbiw	r28, 0x21	; 33
     50e:	29 ad       	ldd	r18, Y+57	; 0x39
     510:	3a ad       	ldd	r19, Y+58	; 0x3a
     512:	4b ad       	ldd	r20, Y+59	; 0x3b
     514:	5c ad       	ldd	r21, Y+60	; 0x3c
     516:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	c4 01       	movw	r24, r8
     520:	b3 01       	movw	r22, r6
     522:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     526:	3b 01       	movw	r6, r22
     528:	4c 01       	movw	r8, r24
     52a:	c6 01       	movw	r24, r12
     52c:	b5 01       	movw	r22, r10
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e4       	ldi	r21, 0x40	; 64
     536:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     53a:	a2 01       	movw	r20, r4
     53c:	91 01       	movw	r18, r2
     53e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     542:	29 a9       	ldd	r18, Y+49	; 0x31
     544:	3a a9       	ldd	r19, Y+50	; 0x32
     546:	4b a9       	ldd	r20, Y+51	; 0x33
     548:	5c a9       	ldd	r21, Y+52	; 0x34
     54a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	c4 01       	movw	r24, r8
     554:	b3 01       	movw	r22, r6
     556:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     55a:	6d ab       	std	Y+53, r22	; 0x35
     55c:	7e ab       	std	Y+54, r23	; 0x36
     55e:	8f ab       	std	Y+55, r24	; 0x37
     560:	98 af       	std	Y+56, r25	; 0x38
     562:	6d 96       	adiw	r28, 0x1d	; 29
     564:	8c ad       	ldd	r24, Y+60	; 0x3c
     566:	9d ad       	ldd	r25, Y+61	; 0x3d
     568:	ae ad       	ldd	r26, Y+62	; 0x3e
     56a:	bf ad       	ldd	r27, Y+63	; 0x3f
     56c:	6d 97       	sbiw	r28, 0x1d	; 29
     56e:	69 96       	adiw	r28, 0x19	; 25
     570:	8c af       	std	Y+60, r24	; 0x3c
     572:	9d af       	std	Y+61, r25	; 0x3d
     574:	ae af       	std	Y+62, r26	; 0x3e
     576:	bf af       	std	Y+63, r27	; 0x3f
     578:	69 97       	sbiw	r28, 0x19	; 25
     57a:	61 96       	adiw	r28, 0x11	; 17
     57c:	ec ae       	std	Y+60, r14	; 0x3c
     57e:	fd ae       	std	Y+61, r15	; 0x3d
     580:	0e af       	std	Y+62, r16	; 0x3e
     582:	1f af       	std	Y+63, r17	; 0x3f
     584:	61 97       	sbiw	r28, 0x11	; 17
     586:	a1 96       	adiw	r28, 0x21	; 33
     588:	2c ad       	ldd	r18, Y+60	; 0x3c
     58a:	3d ad       	ldd	r19, Y+61	; 0x3d
     58c:	4e ad       	ldd	r20, Y+62	; 0x3e
     58e:	5f ad       	ldd	r21, Y+63	; 0x3f
     590:	a1 97       	sbiw	r28, 0x21	; 33
     592:	29 af       	std	Y+57, r18	; 0x39
     594:	3a af       	std	Y+58, r19	; 0x3a
     596:	4b af       	std	Y+59, r20	; 0x3b
     598:	5c af       	std	Y+60, r21	; 0x3c
     59a:	8d a9       	ldd	r24, Y+53	; 0x35
     59c:	9e a9       	ldd	r25, Y+54	; 0x36
     59e:	af a9       	ldd	r26, Y+55	; 0x37
     5a0:	b8 ad       	ldd	r27, Y+56	; 0x38
     5a2:	89 ab       	std	Y+49, r24	; 0x31
     5a4:	9a ab       	std	Y+50, r25	; 0x32
     5a6:	ab ab       	std	Y+51, r26	; 0x33
     5a8:	bc ab       	std	Y+52, r27	; 0x34
     5aa:	1e c0       	rjmp	.+60     	; 0x5e8 <__stack+0xe9>
			
			l_count_previous = l_count_current;
			
			elapsed_time_l_previous = elapsed_time_l;
		}
		else if((elapsed_time_l - elapsed_time_l_previous) > LEFT_WHEEL_TIMEOUT){
     5ac:	6d 96       	adiw	r28, 0x1d	; 29
     5ae:	6c ad       	ldd	r22, Y+60	; 0x3c
     5b0:	7d ad       	ldd	r23, Y+61	; 0x3d
     5b2:	8e ad       	ldd	r24, Y+62	; 0x3e
     5b4:	9f ad       	ldd	r25, Y+63	; 0x3f
     5b6:	6d 97       	sbiw	r28, 0x1d	; 29
     5b8:	69 96       	adiw	r28, 0x19	; 25
     5ba:	2c ad       	ldd	r18, Y+60	; 0x3c
     5bc:	3d ad       	ldd	r19, Y+61	; 0x3d
     5be:	4e ad       	ldd	r20, Y+62	; 0x3e
     5c0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5c2:	69 97       	sbiw	r28, 0x19	; 25
     5c4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     5c8:	2a e9       	ldi	r18, 0x9A	; 154
     5ca:	39 e9       	ldi	r19, 0x99	; 153
     5cc:	49 e1       	ldi	r20, 0x19	; 25
     5ce:	5e e3       	ldi	r21, 0x3E	; 62
     5d0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     5d4:	18 16       	cp	r1, r24
     5d6:	44 f4       	brge	.+16     	; 0x5e8 <__stack+0xe9>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	2d ab       	std	Y+53, r18	; 0x35
     5e2:	3e ab       	std	Y+54, r19	; 0x36
     5e4:	4f ab       	std	Y+55, r20	; 0x37
     5e6:	58 af       	std	Y+56, r21	; 0x38
			rps_lf = 0;
		}
		
		if(r_count_current != r_count_previous){
     5e8:	a9 96       	adiw	r28, 0x29	; 41
     5ea:	8c ad       	ldd	r24, Y+60	; 0x3c
     5ec:	9d ad       	ldd	r25, Y+61	; 0x3d
     5ee:	ae ad       	ldd	r26, Y+62	; 0x3e
     5f0:	bf ad       	ldd	r27, Y+63	; 0x3f
     5f2:	a9 97       	sbiw	r28, 0x29	; 41
     5f4:	2d 96       	adiw	r28, 0x0d	; 13
     5f6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5f8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5fa:	4e ad       	ldd	r20, Y+62	; 0x3e
     5fc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5fe:	2d 97       	sbiw	r28, 0x0d	; 13
     600:	82 17       	cp	r24, r18
     602:	93 07       	cpc	r25, r19
     604:	a4 07       	cpc	r26, r20
     606:	b5 07       	cpc	r27, r21
     608:	09 f4       	brne	.+2      	; 0x60c <__stack+0x10d>
     60a:	ad c0       	rjmp	.+346    	; 0x766 <__stack+0x267>
			r_count_current = get_right_count();
     60c:	0e 94 81 0c 	call	0x1902	; 0x1902 <get_right_count>
     610:	7b 01       	movw	r14, r22
     612:	8c 01       	movw	r16, r24
			dt_r = (elapsed_time_r - elapsed_time_r_previous);
     614:	6d 96       	adiw	r28, 0x1d	; 29
     616:	6c ad       	ldd	r22, Y+60	; 0x3c
     618:	7d ad       	ldd	r23, Y+61	; 0x3d
     61a:	8e ad       	ldd	r24, Y+62	; 0x3e
     61c:	9f ad       	ldd	r25, Y+63	; 0x3f
     61e:	6d 97       	sbiw	r28, 0x1d	; 29
     620:	65 96       	adiw	r28, 0x15	; 21
     622:	2c ad       	ldd	r18, Y+60	; 0x3c
     624:	3d ad       	ldd	r19, Y+61	; 0x3d
     626:	4e ad       	ldd	r20, Y+62	; 0x3e
     628:	5f ad       	ldd	r21, Y+63	; 0x3f
     62a:	65 97       	sbiw	r28, 0x15	; 21
     62c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     630:	5b 01       	movw	r10, r22
     632:	6c 01       	movw	r12, r24
			ticks_per_sec_r = (r_count_current - r_count_previous)/dt_r;
			
			rps_r = ticks_per_sec_r/(TICKS_PER_ROTATION);
     634:	c8 01       	movw	r24, r16
     636:	b7 01       	movw	r22, r14
     638:	2d 96       	adiw	r28, 0x0d	; 13
     63a:	2c ad       	ldd	r18, Y+60	; 0x3c
     63c:	3d ad       	ldd	r19, Y+61	; 0x3d
     63e:	4e ad       	ldd	r20, Y+62	; 0x3e
     640:	5f ad       	ldd	r21, Y+63	; 0x3f
     642:	2d 97       	sbiw	r28, 0x0d	; 13
     644:	62 1b       	sub	r22, r18
     646:	73 0b       	sbc	r23, r19
     648:	84 0b       	sbc	r24, r20
     64a:	95 0b       	sbc	r25, r21
     64c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__floatsisf>
     650:	a6 01       	movw	r20, r12
     652:	95 01       	movw	r18, r10
     654:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	5c e3       	ldi	r21, 0x3C	; 60
     660:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     664:	a5 96       	adiw	r28, 0x25	; 37
     666:	6c af       	std	Y+60, r22	; 0x3c
     668:	7d af       	std	Y+61, r23	; 0x3d
     66a:	8e af       	std	Y+62, r24	; 0x3e
     66c:	9f af       	std	Y+63, r25	; 0x3f
     66e:	a5 97       	sbiw	r28, 0x25	; 37
			rps_rf = ((Kr*dt_r)/(Kr*dt_r + 2))*(rps_r + rps_r_prev) - ((Kr*dt_r - 2)/(Kr*dt_r + 2))*rps_rf_prev;
     670:	c6 01       	movw	r24, r12
     672:	b5 01       	movw	r22, r10
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	48 ec       	ldi	r20, 0xC8	; 200
     67a:	51 e4       	ldi	r21, 0x41	; 65
     67c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     680:	5b 01       	movw	r10, r22
     682:	6c 01       	movw	r12, r24
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e4       	ldi	r21, 0x40	; 64
     68c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     690:	1b 01       	movw	r2, r22
     692:	2c 01       	movw	r4, r24
     694:	c6 01       	movw	r24, r12
     696:	b5 01       	movw	r22, r10
     698:	a2 01       	movw	r20, r4
     69a:	91 01       	movw	r18, r2
     69c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     6a0:	3b 01       	movw	r6, r22
     6a2:	4c 01       	movw	r8, r24
     6a4:	a5 96       	adiw	r28, 0x25	; 37
     6a6:	6c ad       	ldd	r22, Y+60	; 0x3c
     6a8:	7d ad       	ldd	r23, Y+61	; 0x3d
     6aa:	8e ad       	ldd	r24, Y+62	; 0x3e
     6ac:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ae:	a5 97       	sbiw	r28, 0x25	; 37
     6b0:	29 96       	adiw	r28, 0x09	; 9
     6b2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6b4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6b6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6b8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6ba:	29 97       	sbiw	r28, 0x09	; 9
     6bc:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     6c0:	9b 01       	movw	r18, r22
     6c2:	ac 01       	movw	r20, r24
     6c4:	c4 01       	movw	r24, r8
     6c6:	b3 01       	movw	r22, r6
     6c8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     6cc:	3b 01       	movw	r6, r22
     6ce:	4c 01       	movw	r8, r24
     6d0:	c6 01       	movw	r24, r12
     6d2:	b5 01       	movw	r22, r10
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e4       	ldi	r21, 0x40	; 64
     6dc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     6e0:	a2 01       	movw	r20, r4
     6e2:	91 01       	movw	r18, r2
     6e4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
     6e8:	21 96       	adiw	r28, 0x01	; 1
     6ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     6ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     6ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     6f2:	21 97       	sbiw	r28, 0x01	; 1
     6f4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     6f8:	9b 01       	movw	r18, r22
     6fa:	ac 01       	movw	r20, r24
     6fc:	c4 01       	movw	r24, r8
     6fe:	b3 01       	movw	r22, r6
     700:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	6d 96       	adiw	r28, 0x1d	; 29
     712:	8c ad       	ldd	r24, Y+60	; 0x3c
     714:	9d ad       	ldd	r25, Y+61	; 0x3d
     716:	ae ad       	ldd	r26, Y+62	; 0x3e
     718:	bf ad       	ldd	r27, Y+63	; 0x3f
     71a:	6d 97       	sbiw	r28, 0x1d	; 29
     71c:	65 96       	adiw	r28, 0x15	; 21
     71e:	8c af       	std	Y+60, r24	; 0x3c
     720:	9d af       	std	Y+61, r25	; 0x3d
     722:	ae af       	std	Y+62, r26	; 0x3e
     724:	bf af       	std	Y+63, r27	; 0x3f
     726:	65 97       	sbiw	r28, 0x15	; 21
     728:	2d 96       	adiw	r28, 0x0d	; 13
     72a:	ec ae       	std	Y+60, r14	; 0x3c
     72c:	fd ae       	std	Y+61, r15	; 0x3d
     72e:	0e af       	std	Y+62, r16	; 0x3e
     730:	1f af       	std	Y+63, r17	; 0x3f
     732:	2d 97       	sbiw	r28, 0x0d	; 13
     734:	a5 96       	adiw	r28, 0x25	; 37
     736:	2c ad       	ldd	r18, Y+60	; 0x3c
     738:	3d ad       	ldd	r19, Y+61	; 0x3d
     73a:	4e ad       	ldd	r20, Y+62	; 0x3e
     73c:	5f ad       	ldd	r21, Y+63	; 0x3f
     73e:	a5 97       	sbiw	r28, 0x25	; 37
     740:	29 96       	adiw	r28, 0x09	; 9
     742:	2c af       	std	Y+60, r18	; 0x3c
     744:	3d af       	std	Y+61, r19	; 0x3d
     746:	4e af       	std	Y+62, r20	; 0x3e
     748:	5f af       	std	Y+63, r21	; 0x3f
     74a:	29 97       	sbiw	r28, 0x09	; 9
     74c:	25 96       	adiw	r28, 0x05	; 5
     74e:	8c ad       	ldd	r24, Y+60	; 0x3c
     750:	9d ad       	ldd	r25, Y+61	; 0x3d
     752:	ae ad       	ldd	r26, Y+62	; 0x3e
     754:	bf ad       	ldd	r27, Y+63	; 0x3f
     756:	25 97       	sbiw	r28, 0x05	; 5
     758:	21 96       	adiw	r28, 0x01	; 1
     75a:	8c af       	std	Y+60, r24	; 0x3c
     75c:	9d af       	std	Y+61, r25	; 0x3d
     75e:	ae af       	std	Y+62, r26	; 0x3e
     760:	bf af       	std	Y+63, r27	; 0x3f
     762:	21 97       	sbiw	r28, 0x01	; 1
     764:	20 c0       	rjmp	.+64     	; 0x7a6 <__stack+0x2a7>
			
			r_count_previous = r_count_current;
			
			elapsed_time_r_previous = elapsed_time_r;
		}
		else if(((elapsed_time_r - elapsed_time_r_previous)) > RIGHT_WHEEL_TIMEOUT){
     766:	6d 96       	adiw	r28, 0x1d	; 29
     768:	6c ad       	ldd	r22, Y+60	; 0x3c
     76a:	7d ad       	ldd	r23, Y+61	; 0x3d
     76c:	8e ad       	ldd	r24, Y+62	; 0x3e
     76e:	9f ad       	ldd	r25, Y+63	; 0x3f
     770:	6d 97       	sbiw	r28, 0x1d	; 29
     772:	65 96       	adiw	r28, 0x15	; 21
     774:	2c ad       	ldd	r18, Y+60	; 0x3c
     776:	3d ad       	ldd	r19, Y+61	; 0x3d
     778:	4e ad       	ldd	r20, Y+62	; 0x3e
     77a:	5f ad       	ldd	r21, Y+63	; 0x3f
     77c:	65 97       	sbiw	r28, 0x15	; 21
     77e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     782:	2a e9       	ldi	r18, 0x9A	; 154
     784:	39 e9       	ldi	r19, 0x99	; 153
     786:	49 e1       	ldi	r20, 0x19	; 25
     788:	5e e3       	ldi	r21, 0x3E	; 62
     78a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     78e:	18 16       	cp	r1, r24
     790:	54 f4       	brge	.+20     	; 0x7a6 <__stack+0x2a7>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	25 96       	adiw	r28, 0x05	; 5
     79c:	2c af       	std	Y+60, r18	; 0x3c
     79e:	3d af       	std	Y+61, r19	; 0x3d
     7a0:	4e af       	std	Y+62, r20	; 0x3e
     7a2:	5f af       	std	Y+63, r21	; 0x3f
     7a4:	25 97       	sbiw	r28, 0x05	; 5
		
		// PID calculation	/////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////

		error_l = v_l_cmd - v_l;									// Current Left Wheel error
     7a6:	6d a9       	ldd	r22, Y+53	; 0x35
     7a8:	7e a9       	ldd	r23, Y+54	; 0x36
     7aa:	8f a9       	ldd	r24, Y+55	; 0x37
     7ac:	98 ad       	ldd	r25, Y+56	; 0x38
     7ae:	23 ec       	ldi	r18, 0xC3	; 195
     7b0:	33 e5       	ldi	r19, 0x53	; 83
     7b2:	4b ef       	ldi	r20, 0xFB	; 251
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     7ca:	1b 01       	movw	r2, r22
     7cc:	2c 01       	movw	r4, r24
		error_r = v_r_cmd - v_r;									// Current Right Wheel error
     7ce:	25 96       	adiw	r28, 0x05	; 5
     7d0:	6c ad       	ldd	r22, Y+60	; 0x3c
     7d2:	7d ad       	ldd	r23, Y+61	; 0x3d
     7d4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d8:	25 97       	sbiw	r28, 0x05	; 5
     7da:	23 ec       	ldi	r18, 0xC3	; 195
     7dc:	33 e5       	ldi	r19, 0x53	; 83
     7de:	4b ef       	ldi	r20, 0xFB	; 251
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e9       	ldi	r24, 0x90	; 144
     7f0:	91 e4       	ldi	r25, 0x41	; 65
     7f2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     7f6:	6d a3       	std	Y+37, r22	; 0x25
     7f8:	7e a3       	std	Y+38, r23	; 0x26
     7fa:	8f a3       	std	Y+39, r24	; 0x27
     7fc:	98 a7       	std	Y+40, r25	; 0x28
		// Calculate the proportion
		up_l = Kp_l*error_l;										// Left Wheel Proportion
		up_r = Kp_r*error_r;										// Right Wheel Proportion
		
		// Calculate the integral
		ui_l = Ki_l*(error_l + error_l_n1) + ui_l_n1;				// Update Left Wheel integral
     7fe:	c2 01       	movw	r24, r4
     800:	b1 01       	movw	r22, r2
     802:	2d a5       	ldd	r18, Y+45	; 0x2d
     804:	3e a5       	ldd	r19, Y+46	; 0x2e
     806:	4f a5       	ldd	r20, Y+47	; 0x2f
     808:	58 a9       	ldd	r21, Y+48	; 0x30
     80a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     81e:	29 8d       	ldd	r18, Y+25	; 0x19
     820:	3a 8d       	ldd	r19, Y+26	; 0x1a
     822:	4b 8d       	ldd	r20, Y+27	; 0x1b
     824:	5c 8d       	ldd	r21, Y+28	; 0x1c
     826:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     82a:	3b 01       	movw	r6, r22
     82c:	4c 01       	movw	r8, r24
		ui_r = Ki_r*(error_r + error_r_n1) + ui_r_n1;				// Update Right Wheel integral

		// Calculate the derivative		
		ud_l = Kd_l*(error_l - error_l_n1) - ud_l_n1;				// Update Left Wheel derivative
     82e:	c2 01       	movw	r24, r4
     830:	b1 01       	movw	r22, r2
     832:	2d a5       	ldd	r18, Y+45	; 0x2d
     834:	3e a5       	ldd	r19, Y+46	; 0x2e
     836:	4f a5       	ldd	r20, Y+47	; 0x2f
     838:	58 a9       	ldd	r21, Y+48	; 0x30
     83a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     84e:	2d 89       	ldd	r18, Y+21	; 0x15
     850:	3e 89       	ldd	r19, Y+22	; 0x16
     852:	4f 89       	ldd	r20, Y+23	; 0x17
     854:	58 8d       	ldd	r21, Y+24	; 0x18
     856:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     85a:	69 a3       	std	Y+33, r22	; 0x21
     85c:	7a a3       	std	Y+34, r23	; 0x22
     85e:	8b a3       	std	Y+35, r24	; 0x23
     860:	9c a3       	std	Y+36, r25	; 0x24
		ud_r = Kd_r*(error_r - error_r_n1) - ud_r_n1;				// Update Right Wheel derivative
     862:	6d a1       	ldd	r22, Y+37	; 0x25
     864:	7e a1       	ldd	r23, Y+38	; 0x26
     866:	8f a1       	ldd	r24, Y+39	; 0x27
     868:	98 a5       	ldd	r25, Y+40	; 0x28
     86a:	29 a5       	ldd	r18, Y+41	; 0x29
     86c:	3a a5       	ldd	r19, Y+42	; 0x2a
     86e:	4b a5       	ldd	r20, Y+43	; 0x2b
     870:	5c a5       	ldd	r21, Y+44	; 0x2c
     872:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     876:	2d ec       	ldi	r18, 0xCD	; 205
     878:	3c ec       	ldi	r19, 0xCC	; 204
     87a:	4c e4       	ldi	r20, 0x4C	; 76
     87c:	5e e3       	ldi	r21, 0x3E	; 62
     87e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     882:	29 85       	ldd	r18, Y+9	; 0x09
     884:	3a 85       	ldd	r19, Y+10	; 0x0a
     886:	4b 85       	ldd	r20, Y+11	; 0x0b
     888:	5c 85       	ldd	r21, Y+12	; 0x0c
     88a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     88e:	6d 8f       	std	Y+29, r22	; 0x1d
     890:	7e 8f       	std	Y+30, r23	; 0x1e
     892:	8f 8f       	std	Y+31, r24	; 0x1f
     894:	98 a3       	std	Y+32, r25	; 0x20
		
		// Filter the derivative output
		udf_l = lpf1_l*ud_l + lpf2_l*ud_l_n1 - lpf3_l*udf_l_n1;		// Update filtered Left Wheel derivative
     896:	69 a1       	ldd	r22, Y+33	; 0x21
     898:	7a a1       	ldd	r23, Y+34	; 0x22
     89a:	8b a1       	ldd	r24, Y+35	; 0x23
     89c:	9c a1       	ldd	r25, Y+36	; 0x24
     89e:	2e e5       	ldi	r18, 0x5E	; 94
     8a0:	34 ed       	ldi	r19, 0xD4	; 212
     8a2:	4f e7       	ldi	r20, 0x7F	; 127
     8a4:	5f e3       	ldi	r21, 0x3F	; 63
     8a6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     8aa:	7b 01       	movw	r14, r22
     8ac:	8c 01       	movw	r16, r24
     8ae:	6d 89       	ldd	r22, Y+21	; 0x15
     8b0:	7e 89       	ldd	r23, Y+22	; 0x16
     8b2:	8f 89       	ldd	r24, Y+23	; 0x17
     8b4:	98 8d       	ldd	r25, Y+24	; 0x18
     8b6:	2e e5       	ldi	r18, 0x5E	; 94
     8b8:	34 ed       	ldi	r19, 0xD4	; 212
     8ba:	4f e7       	ldi	r20, 0x7F	; 127
     8bc:	5f e3       	ldi	r21, 0x3F	; 63
     8be:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	c8 01       	movw	r24, r16
     8c8:	b7 01       	movw	r22, r14
     8ca:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     8ce:	7b 01       	movw	r14, r22
     8d0:	8c 01       	movw	r16, r24
     8d2:	6d 85       	ldd	r22, Y+13	; 0x0d
     8d4:	7e 85       	ldd	r23, Y+14	; 0x0e
     8d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d8:	98 89       	ldd	r25, Y+16	; 0x10
     8da:	2c eb       	ldi	r18, 0xBC	; 188
     8dc:	38 ea       	ldi	r19, 0xA8	; 168
     8de:	4f e7       	ldi	r20, 0x7F	; 127
     8e0:	5f e3       	ldi	r21, 0x3F	; 63
     8e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     8e6:	9b 01       	movw	r18, r22
     8e8:	ac 01       	movw	r20, r24
     8ea:	c8 01       	movw	r24, r16
     8ec:	b7 01       	movw	r22, r14
     8ee:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     8f2:	69 8b       	std	Y+17, r22	; 0x11
     8f4:	7a 8b       	std	Y+18, r23	; 0x12
     8f6:	8b 8b       	std	Y+19, r24	; 0x13
     8f8:	9c 8b       	std	Y+20, r25	; 0x14
		udf_r = lpf1_r*ud_r + lpf2_r*ud_r_n1 - lpf3_r*udf_r_n1;		// Update filtered Right Wheel derivative
     8fa:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8fc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     900:	98 a1       	ldd	r25, Y+32	; 0x20
     902:	29 e4       	ldi	r18, 0x49	; 73
     904:	39 e2       	ldi	r19, 0x29	; 41
     906:	4e e7       	ldi	r20, 0x7E	; 126
     908:	5f e3       	ldi	r21, 0x3F	; 63
     90a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     90e:	7b 01       	movw	r14, r22
     910:	8c 01       	movw	r16, r24
     912:	69 85       	ldd	r22, Y+9	; 0x09
     914:	7a 85       	ldd	r23, Y+10	; 0x0a
     916:	8b 85       	ldd	r24, Y+11	; 0x0b
     918:	9c 85       	ldd	r25, Y+12	; 0x0c
     91a:	29 e4       	ldi	r18, 0x49	; 73
     91c:	39 e2       	ldi	r19, 0x29	; 41
     91e:	4e e7       	ldi	r20, 0x7E	; 126
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	c8 01       	movw	r24, r16
     92c:	b7 01       	movw	r22, r14
     92e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     932:	7b 01       	movw	r14, r22
     934:	8c 01       	movw	r16, r24
     936:	69 81       	ldd	r22, Y+1	; 0x01
     938:	7a 81       	ldd	r23, Y+2	; 0x02
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	9c 81       	ldd	r25, Y+4	; 0x04
     93e:	21 e9       	ldi	r18, 0x91	; 145
     940:	32 e5       	ldi	r19, 0x52	; 82
     942:	4c e7       	ldi	r20, 0x7C	; 124
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	c8 01       	movw	r24, r16
     950:	b7 01       	movw	r22, r14
     952:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     956:	6d 83       	std	Y+5, r22	; 0x05
     958:	7e 83       	std	Y+6, r23	; 0x06
     95a:	8f 83       	std	Y+7, r24	; 0x07
     95c:	98 87       	std	Y+8, r25	; 0x08
		
		u_l = up_l + ui_l + udf_l;									// u_l(t) to be output to the Left Wheel 
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a2 01       	movw	r20, r4
     968:	91 01       	movw	r18, r2
     96a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     96e:	a4 01       	movw	r20, r8
     970:	93 01       	movw	r18, r6
     972:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     976:	29 89       	ldd	r18, Y+17	; 0x11
     978:	3a 89       	ldd	r19, Y+18	; 0x12
     97a:	4b 89       	ldd	r20, Y+19	; 0x13
     97c:	5c 89       	ldd	r21, Y+20	; 0x14
     97e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     982:	7b 01       	movw	r14, r22
     984:	8c 01       	movw	r16, r24
		u_r = up_r + ui_l + udf_r;									// u_r(t) to be output to the Right Wheel 
     986:	6d a1       	ldd	r22, Y+37	; 0x25
     988:	7e a1       	ldd	r23, Y+38	; 0x26
     98a:	8f a1       	ldd	r24, Y+39	; 0x27
     98c:	98 a5       	ldd	r25, Y+40	; 0x28
     98e:	2d ec       	ldi	r18, 0xCD	; 205
     990:	3c ec       	ldi	r19, 0xCC	; 204
     992:	4c e4       	ldi	r20, 0x4C	; 76
     994:	5f e3       	ldi	r21, 0x3F	; 63
     996:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
     99a:	a4 01       	movw	r20, r8
     99c:	93 01       	movw	r18, r6
     99e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     9a2:	2d 81       	ldd	r18, Y+5	; 0x05
     9a4:	3e 81       	ldd	r19, Y+6	; 0x06
     9a6:	4f 81       	ldd	r20, Y+7	; 0x07
     9a8:	58 85       	ldd	r21, Y+8	; 0x08
     9aa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__addsf3>
     9ae:	5b 01       	movw	r10, r22
     9b0:	6c 01       	movw	r12, r24

		// Anti-windup
		if(u_l > 30){
     9b2:	c8 01       	movw	r24, r16
     9b4:	b7 01       	movw	r22, r14
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 ef       	ldi	r20, 0xF0	; 240
     9bc:	51 e4       	ldi	r21, 0x41	; 65
     9be:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     9c2:	18 16       	cp	r1, r24
     9c4:	7c f4       	brge	.+30     	; 0x9e4 <__stack+0x4e5>
     9c6:	69 8c       	ldd	r6, Y+25	; 0x19
     9c8:	7a 8c       	ldd	r7, Y+26	; 0x1a
     9ca:	8b 8c       	ldd	r8, Y+27	; 0x1b
     9cc:	9c 8c       	ldd	r9, Y+28	; 0x1c
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	ef 2e       	mov	r14, r31
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ff 2e       	mov	r15, r31
     9d8:	f0 ef       	ldi	r31, 0xF0	; 240
     9da:	0f 2f       	mov	r16, r31
     9dc:	f1 e4       	ldi	r31, 0x41	; 65
     9de:	1f 2f       	mov	r17, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	18 c0       	rjmp	.+48     	; 0xa14 <__stack+0x515>
			ui_l = ui_l_n1;
			u_l = 30;	
		}
		else if(u_l < -30){
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 ef       	ldi	r20, 0xF0	; 240
     9ee:	51 ec       	ldi	r21, 0xC1	; 193
     9f0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	74 f4       	brge	.+28     	; 0xa14 <__stack+0x515>
     9f8:	69 8c       	ldd	r6, Y+25	; 0x19
     9fa:	7a 8c       	ldd	r7, Y+26	; 0x1a
     9fc:	8b 8c       	ldd	r8, Y+27	; 0x1b
     9fe:	9c 8c       	ldd	r9, Y+28	; 0x1c
     a00:	0f 2e       	mov	r0, r31
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	ef 2e       	mov	r14, r31
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ff 2e       	mov	r15, r31
     a0a:	f0 ef       	ldi	r31, 0xF0	; 240
     a0c:	0f 2f       	mov	r16, r31
     a0e:	f1 ec       	ldi	r31, 0xC1	; 193
     a10:	1f 2f       	mov	r17, r31
     a12:	f0 2d       	mov	r31, r0
			ui_l = ui_l_n1;
			u_l = -30;
		}

		if(u_r > 30){
     a14:	c6 01       	movw	r24, r12
     a16:	b5 01       	movw	r22, r10
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 ef       	ldi	r20, 0xF0	; 240
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
     a24:	18 16       	cp	r1, r24
     a26:	5c f4       	brge	.+22     	; 0xa3e <__stack+0x53f>
     a28:	0f 2e       	mov	r0, r31
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	af 2e       	mov	r10, r31
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	bf 2e       	mov	r11, r31
     a32:	f0 ef       	ldi	r31, 0xF0	; 240
     a34:	cf 2e       	mov	r12, r31
     a36:	f1 e4       	ldi	r31, 0x41	; 65
     a38:	df 2e       	mov	r13, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <__stack+0x567>
			ui_r = ui_r_n1;
			u_r = 30;	
		}
		else if(u_r < -30){
     a3e:	c6 01       	movw	r24, r12
     a40:	b5 01       	movw	r22, r10
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 ef       	ldi	r20, 0xF0	; 240
     a48:	51 ec       	ldi	r21, 0xC1	; 193
     a4a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
     a4e:	88 23       	and	r24, r24
     a50:	54 f4       	brge	.+20     	; 0xa66 <__stack+0x567>
     a52:	0f 2e       	mov	r0, r31
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	af 2e       	mov	r10, r31
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	bf 2e       	mov	r11, r31
     a5c:	f0 ef       	ldi	r31, 0xF0	; 240
     a5e:	cf 2e       	mov	r12, r31
     a60:	f1 ec       	ldi	r31, 0xC1	; 193
     a62:	df 2e       	mov	r13, r31
     a64:	f0 2d       	mov	r31, r0
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////
		
		
		wheel_l(u_l);
     a66:	c8 01       	movw	r24, r16
     a68:	b7 01       	movw	r22, r14
     a6a:	0e 94 5d 00 	call	0xba	; 0xba <wheel_l>
		wheel_r(u_r);
     a6e:	c6 01       	movw	r24, r12
     a70:	b5 01       	movw	r22, r10
     a72:	0e 94 c2 00 	call	0x184	; 0x184 <wheel_r>

		rprintfFloat(5,(elapsed_time_l - elapsed_time_l_previous));
     a76:	6d 96       	adiw	r28, 0x1d	; 29
     a78:	6c ad       	ldd	r22, Y+60	; 0x3c
     a7a:	7d ad       	ldd	r23, Y+61	; 0x3d
     a7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     a7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     a80:	6d 97       	sbiw	r28, 0x1d	; 29
     a82:	69 96       	adiw	r28, 0x19	; 25
     a84:	2c ad       	ldd	r18, Y+60	; 0x3c
     a86:	3d ad       	ldd	r19, Y+61	; 0x3d
     a88:	4e ad       	ldd	r20, Y+62	; 0x3e
     a8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a8c:	69 97       	sbiw	r28, 0x19	; 25
     a8e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
     a92:	ab 01       	movw	r20, r22
     a94:	bc 01       	movw	r22, r24
     a96:	85 e0       	ldi	r24, 0x05	; 5
     a98:	0e 94 3c 08 	call	0x1078	; 0x1078 <rprintfFloat>
		rprintf("\t,");
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <__stack+0x59f>
     a9e:	0f 92       	push	r0
     aa0:	e1 e0       	ldi	r30, 0x01	; 1
     aa2:	ad b7       	in	r26, 0x3d	; 61
     aa4:	be b7       	in	r27, 0x3e	; 62
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	ec 93       	st	X, r30
     aaa:	11 97       	sbiw	r26, 0x01	; 1
     aac:	28 e6       	ldi	r18, 0x68	; 104
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	13 96       	adiw	r26, 0x03	; 3
     ab2:	3c 93       	st	X, r19
     ab4:	2e 93       	st	-X, r18
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	0e 94 05 09 	call	0x120a	; 0x120a <rprintf1RamRom>
		//rprintf("Left: ");
		//rprintfFloat(5,v_l);
		//rprintf("Right: ");
		//rprintf("\t,");
		rprintfFloat(5,u_r);
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	b6 01       	movw	r22, r12
     ac6:	a5 01       	movw	r20, r10
     ac8:	0e 94 3c 08 	call	0x1078	; 0x1078 <rprintfFloat>
		//rprintf("\t,");
		//rprintfFloat(5,(elapsed_time_l - elapsed_time_l_previous));
		rprintfCRLF();
     acc:	0e 94 45 07 	call	0xe8a	; 0xe8a <rprintfCRLF>
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	af 81       	ldd	r26, Y+7	; 0x07
     ad6:	b8 85       	ldd	r27, Y+8	; 0x08
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	ab 83       	std	Y+3, r26	; 0x03
     ade:	bc 83       	std	Y+4, r27	; 0x04
     ae0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     ae2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ae4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     ae6:	58 a1       	ldd	r21, Y+32	; 0x20
     ae8:	29 87       	std	Y+9, r18	; 0x09
     aea:	3a 87       	std	Y+10, r19	; 0x0a
     aec:	4b 87       	std	Y+11, r20	; 0x0b
     aee:	5c 87       	std	Y+12, r21	; 0x0c
     af0:	89 89       	ldd	r24, Y+17	; 0x11
     af2:	9a 89       	ldd	r25, Y+18	; 0x12
     af4:	ab 89       	ldd	r26, Y+19	; 0x13
     af6:	bc 89       	ldd	r27, Y+20	; 0x14
     af8:	8d 87       	std	Y+13, r24	; 0x0d
     afa:	9e 87       	std	Y+14, r25	; 0x0e
     afc:	af 87       	std	Y+15, r26	; 0x0f
     afe:	b8 8b       	std	Y+16, r27	; 0x10
     b00:	29 a1       	ldd	r18, Y+33	; 0x21
     b02:	3a a1       	ldd	r19, Y+34	; 0x22
     b04:	4b a1       	ldd	r20, Y+35	; 0x23
     b06:	5c a1       	ldd	r21, Y+36	; 0x24
     b08:	2d 8b       	std	Y+21, r18	; 0x15
     b0a:	3e 8b       	std	Y+22, r19	; 0x16
     b0c:	4f 8b       	std	Y+23, r20	; 0x17
     b0e:	58 8f       	std	Y+24, r21	; 0x18
     b10:	69 8e       	std	Y+25, r6	; 0x19
     b12:	7a 8e       	std	Y+26, r7	; 0x1a
     b14:	8b 8e       	std	Y+27, r8	; 0x1b
     b16:	9c 8e       	std	Y+28, r9	; 0x1c
     b18:	8d a1       	ldd	r24, Y+37	; 0x25
     b1a:	9e a1       	ldd	r25, Y+38	; 0x26
     b1c:	af a1       	ldd	r26, Y+39	; 0x27
     b1e:	b8 a5       	ldd	r27, Y+40	; 0x28
     b20:	89 a7       	std	Y+41, r24	; 0x29
     b22:	9a a7       	std	Y+42, r25	; 0x2a
     b24:	ab a7       	std	Y+43, r26	; 0x2b
     b26:	bc a7       	std	Y+44, r27	; 0x2c
     b28:	2d a6       	std	Y+45, r2	; 0x2d
     b2a:	3e a6       	std	Y+46, r3	; 0x2e
     b2c:	4f a6       	std	Y+47, r4	; 0x2f
     b2e:	58 aa       	std	Y+48, r5	; 0x30
     b30:	5d cc       	rjmp	.-1862   	; 0x3ec <main+0x11e>

00000b32 <PWM_Init_timer1_Pin9>:
#include <pwm_pico.h>

// Initialize PWM, set timer resolution

void PWM_Init_timer1_Pin9(u08 res){
     b32:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	sbi(TCCR1B,WGM12);
     b34:	80 91 81 00 	lds	r24, 0x0081
     b38:	88 60       	ori	r24, 0x08	; 8
     b3a:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     b3e:	80 91 81 00 	lds	r24, 0x0081
     b42:	8f 7e       	andi	r24, 0xEF	; 239
     b44:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     b48:	99 30       	cpi	r25, 0x09	; 9
     b4a:	49 f4       	brne	.+18     	; 0xb5e <PWM_Init_timer1_Pin9+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     b4c:	80 91 80 00 	lds	r24, 0x0080
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     b56:	80 91 80 00 	lds	r24, 0x0080
     b5a:	8e 7f       	andi	r24, 0xFE	; 254
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <PWM_Init_timer1_Pin9+0x48>
	}
	else if(res == 10 )
     b5e:	9a 30       	cpi	r25, 0x0A	; 10
     b60:	21 f4       	brne	.+8      	; 0xb6a <PWM_Init_timer1_Pin9+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     b62:	80 91 80 00 	lds	r24, 0x0080
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <PWM_Init_timer1_Pin9+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     b6a:	80 91 80 00 	lds	r24, 0x0080
     b6e:	8d 7f       	andi	r24, 0xFD	; 253
     b70:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     b74:	80 91 80 00 	lds	r24, 0x0080
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1A = 0;
     b7e:	10 92 89 00 	sts	0x0089, r1
     b82:	10 92 88 00 	sts	0x0088, r1
}
     b86:	08 95       	ret

00000b88 <PWM_Init_timer1_Pin10>:
void PWM_Init_timer1_Pin10(u08 res){
     b88:	98 2f       	mov	r25, r24
	// enable timer1 as 8,9,10bit PWM
	cbi(TCCR1B,WGM12);
     b8a:	80 91 81 00 	lds	r24, 0x0081
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	80 93 81 00 	sts	0x0081, r24
	cbi(TCCR1B,WGM13);
     b94:	80 91 81 00 	lds	r24, 0x0081
     b98:	8f 7e       	andi	r24, 0xEF	; 239
     b9a:	80 93 81 00 	sts	0x0081, r24
	if(res == 9)
     b9e:	99 30       	cpi	r25, 0x09	; 9
     ba0:	49 f4       	brne	.+18     	; 0xbb4 <PWM_Init_timer1_Pin10+0x2c>
	{	// 9bit mode
		sbi(TCCR1A,WGM11);
     ba2:	80 91 80 00 	lds	r24, 0x0080
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,WGM10);
     bac:	80 91 80 00 	lds	r24, 0x0080
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	0e c0       	rjmp	.+28     	; 0xbd0 <PWM_Init_timer1_Pin10+0x48>
	}
	else if(res == 10 )
     bb4:	9a 30       	cpi	r25, 0x0A	; 10
     bb6:	21 f4       	brne	.+8      	; 0xbc0 <PWM_Init_timer1_Pin10+0x38>
	{	// 10bit mode
		sbi(TCCR1A,WGM11);
     bb8:	80 91 80 00 	lds	r24, 0x0080
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <PWM_Init_timer1_Pin10+0x3e>
		sbi(TCCR1A,WGM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,WGM11);
     bc0:	80 91 80 00 	lds	r24, 0x0080
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,WGM10);
     bca:	80 91 80 00 	lds	r24, 0x0080
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     bd4:	10 92 8b 00 	sts	0x008B, r1
     bd8:	10 92 8a 00 	sts	0x008A, r1
}
     bdc:	08 95       	ret

00000bde <timer1PWMInitICR>:

void timer1PWMInitICR(u16 topcount)
{
	u08 sreg;
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     bde:	e0 e8       	ldi	r30, 0x80	; 128
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	20 81       	ld	r18, Z
     be4:	2e 7f       	andi	r18, 0xFE	; 254
     be6:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     be8:	20 81       	ld	r18, Z
     bea:	22 60       	ori	r18, 0x02	; 2
     bec:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     bee:	e1 e8       	ldi	r30, 0x81	; 129
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	20 81       	ld	r18, Z
     bf4:	28 60       	ori	r18, 0x08	; 8
     bf6:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     bf8:	20 81       	ld	r18, Z
     bfa:	20 61       	ori	r18, 0x10	; 16
     bfc:	20 83       	st	Z, r18
	
	// Save global interrupt flag
	sreg = SREG;
     bfe:	2f b7       	in	r18, 0x3f	; 63
	// Disable interrupts
	cli();
     c00:	f8 94       	cli
	// set top count value
	ICR1 = topcount;
     c02:	90 93 87 00 	sts	0x0087, r25
     c06:	80 93 86 00 	sts	0x0086, r24
	// Restore interrupts
	SREG = sreg;
     c0a:	2f bf       	out	0x3f, r18	; 63
	
	// clear output compare values
	OCR1A = 0;
     c0c:	10 92 89 00 	sts	0x0089, r1
     c10:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     c14:	10 92 8b 00 	sts	0x008B, r1
     c18:	10 92 8a 00 	sts	0x008A, r1
}
     c1c:	08 95       	ret

00000c1e <PWM_timer0_Off_Pin5>:

// Stop PWM
void PWM_timer0_Off_Pin5(void){
	cbi(TCCR0A,COM0B1);
     c1e:	84 b5       	in	r24, 0x24	; 36
     c20:	8f 7d       	andi	r24, 0xDF	; 223
     c22:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     c24:	84 b5       	in	r24, 0x24	; 36
     c26:	8f 7e       	andi	r24, 0xEF	; 239
     c28:	84 bd       	out	0x24, r24	; 36
}
     c2a:	08 95       	ret

00000c2c <PWM_timer0_Off_Pin6>:
void PWM_timer0_Off_Pin6(void){
	cbi(TCCR0A,COM0A1);
     c2c:	84 b5       	in	r24, 0x24	; 36
     c2e:	8f 77       	andi	r24, 0x7F	; 127
     c30:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     c32:	84 b5       	in	r24, 0x24	; 36
     c34:	8f 7b       	andi	r24, 0xBF	; 191
     c36:	84 bd       	out	0x24, r24	; 36
}
     c38:	08 95       	ret

00000c3a <PWM_timer1_Off_Pin9>:
void PWM_timer1_Off_Pin9(void){
	cbi(TCCR1A,COM1B1);
     c3a:	e0 e8       	ldi	r30, 0x80	; 128
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	8f 7d       	andi	r24, 0xDF	; 223
     c42:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     c44:	80 81       	ld	r24, Z
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	80 83       	st	Z, r24
}
     c4a:	08 95       	ret

00000c4c <PWM_timer1_Off_Pin10>:
void PWM_timer1_Off_Pin10(void){
	cbi(TCCR1A,COM1A1);
     c4c:	e0 e8       	ldi	r30, 0x80	; 128
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 77       	andi	r24, 0x7F	; 127
     c54:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     c56:	80 81       	ld	r24, Z
     c58:	8f 7b       	andi	r24, 0xBF	; 191
     c5a:	80 83       	st	Z, r24
}
     c5c:	08 95       	ret

00000c5e <PWM_timer0_On_Pin5>:

// Start PWM
void PWM_timer0_On_Pin5(void){
	sbi(TCCR0A,COM0B1);
     c5e:	84 b5       	in	r24, 0x24	; 36
     c60:	80 62       	ori	r24, 0x20	; 32
     c62:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0B0);
     c64:	84 b5       	in	r24, 0x24	; 36
     c66:	8f 7e       	andi	r24, 0xEF	; 239
     c68:	84 bd       	out	0x24, r24	; 36
}
     c6a:	08 95       	ret

00000c6c <PWM_timer0_On_Pin6>:
void PWM_timer0_On_Pin6(void){
	sbi(TCCR0A,COM0A1);
     c6c:	84 b5       	in	r24, 0x24	; 36
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	84 bd       	out	0x24, r24	; 36
	cbi(TCCR0A,COM0A0);
     c72:	84 b5       	in	r24, 0x24	; 36
     c74:	8f 7b       	andi	r24, 0xBF	; 191
     c76:	84 bd       	out	0x24, r24	; 36
}
     c78:	08 95       	ret

00000c7a <PWM_timer1_On_Pin9>:
void PWM_timer1_On_Pin9(void){
	sbi(TCCR1A,COM1B1);
     c7a:	e0 e8       	ldi	r30, 0x80	; 128
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     c84:	80 81       	ld	r24, Z
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	80 83       	st	Z, r24
}
     c8a:	08 95       	ret

00000c8c <PWM_timer1_On_Pin10>:
void PWM_timer1_On_Pin10(void){
	sbi(TCCR1A,COM1A1);
     c8c:	e0 e8       	ldi	r30, 0x80	; 128
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
     c96:	80 81       	ld	r24, Z
     c98:	8f 7b       	andi	r24, 0xBF	; 191
     c9a:	80 83       	st	Z, r24
}
     c9c:	08 95       	ret

00000c9e <PWM_timer0_Set_Pin5>:
// Set duty
void PWM_timer0_Set_Pin5(u16 duty){
	OCR0B = duty;
     c9e:	88 bd       	out	0x28, r24	; 40
}
     ca0:	08 95       	ret

00000ca2 <PWM_timer0_Set_Pin6>:
void PWM_timer0_Set_Pin6(u16 duty){
	OCR0A = duty;
     ca2:	87 bd       	out	0x27, r24	; 39
}
     ca4:	08 95       	ret

00000ca6 <PWM_timer1_Set_Pin9>:
void PWM_timer1_Set_Pin9(u16 duty){
	OCR1A = duty;
     ca6:	90 93 89 00 	sts	0x0089, r25
     caa:	80 93 88 00 	sts	0x0088, r24
}
     cae:	08 95       	ret

00000cb0 <PWM_timer1_Set_Pin10>:
void PWM_timer1_Set_Pin10(u16 duty){
	OCR1B = duty;
     cb0:	90 93 8b 00 	sts	0x008B, r25
     cb4:	80 93 8a 00 	sts	0x008A, r24
}
     cb8:	08 95       	ret

00000cba <reset_timer0>:
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     cba:	10 92 ae 01 	sts	0x01AE, r1
     cbe:	10 92 af 01 	sts	0x01AF, r1
     cc2:	10 92 b0 01 	sts	0x01B0, r1
     cc6:	10 92 b1 01 	sts	0x01B1, r1
     cca:	16 bc       	out	0x26, r1	; 38
}
     ccc:	08 95       	ret

00000cce <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     cce:	10 92 aa 01 	sts	0x01AA, r1
     cd2:	10 92 ab 01 	sts	0x01AB, r1
     cd6:	10 92 ac 01 	sts	0x01AC, r1
     cda:	10 92 ad 01 	sts	0x01AD, r1
     cde:	10 92 85 00 	sts	0x0085, r1
     ce2:	10 92 84 00 	sts	0x0084, r1
}
     ce6:	08 95       	ret

00000ce8 <init_timer0>:
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
     ce8:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 6e 00 	sts	0x006E, r24
#include <timer_pico.h>

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
     cf0:	10 92 ae 01 	sts	0x01AE, r1
     cf4:	10 92 af 01 	sts	0x01AF, r1
     cf8:	10 92 b0 01 	sts	0x01B0, r1
     cfc:	10 92 b1 01 	sts	0x01B1, r1
     d00:	16 bc       	out	0x26, r1	; 38
void init_timer0(const u08 prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
     d02:	08 95       	ret

00000d04 <init_timer1>:
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
     d04:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
     d0e:	10 92 aa 01 	sts	0x01AA, r1
     d12:	10 92 ab 01 	sts	0x01AB, r1
     d16:	10 92 ac 01 	sts	0x01AC, r1
     d1a:	10 92 ad 01 	sts	0x01AD, r1
     d1e:	10 92 85 00 	sts	0x0085, r1
     d22:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const u08 prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
     d26:	08 95       	ret

00000d28 <get_timer0_overflow>:
const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
     d28:	20 91 ae 01 	lds	r18, 0x01AE
     d2c:	30 91 af 01 	lds	r19, 0x01AF
     d30:	40 91 b0 01 	lds	r20, 0x01B0
     d34:	50 91 b1 01 	lds	r21, 0x01B1
}
     d38:	b9 01       	movw	r22, r18
     d3a:	ca 01       	movw	r24, r20
     d3c:	08 95       	ret

00000d3e <delay_us>:
void delay_us(unsigned short time_us) 
{
	unsigned short delay_loops;
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	24 e0       	ldi	r18, 0x04	; 4
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	aa 1f       	adc	r26, r26
     d4a:	bb 1f       	adc	r27, r27
     d4c:	2a 95       	dec	r18
     d4e:	d1 f7       	brne	.-12     	; 0xd44 <delay_us+0x6>
     d50:	03 96       	adiw	r24, 0x03	; 3
     d52:	a1 1d       	adc	r26, r1
     d54:	b1 1d       	adc	r27, r1
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	2a e0       	ldi	r18, 0x0A	; 10
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <delay_us+0x32>

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
		asm("nop");
     d6c:	00 00       	nop
	register unsigned short i;

	delay_loops = ((time_us * CYCLES_PER_US)+3) / (2*5); // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	82 17       	cp	r24, r18
     d72:	93 07       	cpc	r25, r19
     d74:	d8 f3       	brcs	.-10     	; 0xd6c <delay_us+0x2e>
		asm("nop");
	};
}
     d76:	08 95       	ret

00000d78 <__vector_16>:

ISR(TIMER0_OVF_vect) 
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
  timer0_ovrflow_cnt++;
     d8a:	80 91 ae 01 	lds	r24, 0x01AE
     d8e:	90 91 af 01 	lds	r25, 0x01AF
     d92:	a0 91 b0 01 	lds	r26, 0x01B0
     d96:	b0 91 b1 01 	lds	r27, 0x01B1
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	80 93 ae 01 	sts	0x01AE, r24
     da4:	90 93 af 01 	sts	0x01AF, r25
     da8:	a0 93 b0 01 	sts	0x01B0, r26
     dac:	b0 93 b1 01 	sts	0x01B1, r27
}
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     dc2:	90 93 01 01 	sts	0x0101, r25
     dc6:	80 93 00 01 	sts	0x0100, r24
}
     dca:	08 95       	ret

00000dcc <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     dcc:	1f 93       	push	r17
     dce:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     dd0:	8a 30       	cpi	r24, 0x0A	; 10
     dd2:	31 f4       	brne	.+12     	; 0xde0 <rprintfChar+0x14>
		rputchar('\r');
     dd4:	e0 91 00 01 	lds	r30, 0x0100
     dd8:	f0 91 01 01 	lds	r31, 0x0101
     ddc:	8d e0       	ldi	r24, 0x0D	; 13
     dde:	09 95       	icall
	// send character
	rputchar(c);
     de0:	e0 91 00 01 	lds	r30, 0x0100
     de4:	f0 91 01 01 	lds	r31, 0x0101
     de8:	81 2f       	mov	r24, r17
     dea:	09 95       	icall
}
     dec:	1f 91       	pop	r17
     dee:	08 95       	ret

00000df0 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	21 f4       	brne	.+8      	; 0xe02 <rprintfStr+0x12>
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
     dfc:	21 96       	adiw	r28, 0x01	; 1
     dfe:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     e02:	88 81       	ld	r24, Y
     e04:	88 23       	and	r24, r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <rprintfStr+0xc>
		rprintfChar(*str++);
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	8c 01       	movw	r16, r24
     e1c:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	e9 f0       	breq	.+58     	; 0xe5c <rprintfStrLen+0x4e>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     e26:	26 17       	cp	r18, r22
     e28:	37 07       	cpc	r19, r23
     e2a:	38 f4       	brcc	.+14     	; 0xe3a <rprintfStrLen+0x2c>
     e2c:	f8 01       	movw	r30, r16
     e2e:	81 91       	ld	r24, Z+
     e30:	8f 01       	movw	r16, r30
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	88 23       	and	r24, r24
     e38:	b1 f7       	brne	.-20     	; 0xe26 <rprintfStrLen+0x18>
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     e40:	f8 01       	movw	r30, r16
     e42:	80 81       	ld	r24, Z
     e44:	88 23       	and	r24, r24
     e46:	19 f0       	breq	.+6      	; 0xe4e <rprintfStrLen+0x40>
			rprintfChar(*str++);
     e48:	0f 5f       	subi	r16, 0xFF	; 255
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     e54:	21 96       	adiw	r28, 0x01	; 1
     e56:	ce 15       	cp	r28, r14
     e58:	df 05       	cpc	r29, r15
     e5a:	90 f3       	brcs	.-28     	; 0xe40 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	08 95       	ret

00000e6a <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	19 f4       	brne	.+6      	; 0xe7a <rprintfProgStr+0x10>
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
     e76:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
     e7a:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     e7c:	21 96       	adiw	r28, 0x01	; 1
     e7e:	84 91       	lpm	r24, Z+
     e80:	88 23       	and	r24, r24
     e82:	c9 f7       	brne	.-14     	; 0xe76 <rprintfProgStr+0xc>
		rprintfChar(c);
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
}
     e90:	08 95       	ret

00000e92 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     e92:	e8 2f       	mov	r30, r24
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	ef 70       	andi	r30, 0x0F	; 15
     e98:	f0 70       	andi	r31, 0x00	; 0
     e9a:	e5 59       	subi	r30, 0x95	; 149
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	e4 91       	lpm	r30, Z+
     ea0:	8e 2f       	mov	r24, r30
     ea2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
}
     ea6:	08 95       	ret

00000ea8 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     ea8:	1f 93       	push	r17
     eaa:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     eac:	82 95       	swap	r24
     eae:	8f 70       	andi	r24, 0x0F	; 15
     eb0:	0e 94 49 07 	call	0xe92	; 0xe92 <rprintfu04>
	rprintfu04(data);
     eb4:	81 2f       	mov	r24, r17
     eb6:	0e 94 49 07 	call	0xe92	; 0xe92 <rprintfu04>
}
     eba:	1f 91       	pop	r17
     ebc:	08 95       	ret

00000ebe <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     ebe:	1f 93       	push	r17
     ec0:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
     ec2:	89 2f       	mov	r24, r25
     ec4:	0e 94 54 07 	call	0xea8	; 0xea8 <rprintfu08>
	rprintfu08(data);
     ec8:	81 2f       	mov	r24, r17
     eca:	0e 94 54 07 	call	0xea8	; 0xea8 <rprintfu08>
}
     ece:	1f 91       	pop	r17
     ed0:	08 95       	ret

00000ed2 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	7b 01       	movw	r14, r22
     edc:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     ede:	c8 01       	movw	r24, r16
     ee0:	aa 27       	eor	r26, r26
     ee2:	bb 27       	eor	r27, r27
     ee4:	0e 94 5f 07 	call	0xebe	; 0xebe <rprintfu16>
	rprintfu16(data);
     ee8:	c7 01       	movw	r24, r14
     eea:	0e 94 5f 07 	call	0xebe	; 0xebe <rprintfu16>
}
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	08 95       	ret

00000ef8 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     ef8:	2f 92       	push	r2
     efa:	3f 92       	push	r3
     efc:	4f 92       	push	r4
     efe:	5f 92       	push	r5
     f00:	6f 92       	push	r6
     f02:	7f 92       	push	r7
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	a3 97       	sbiw	r28, 0x23	; 35
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	6a a3       	std	Y+34, r22	; 0x22
     f2e:	24 2e       	mov	r2, r20
     f30:	2b a3       	std	Y+35, r18	; 0x23
     f32:	37 01       	movw	r6, r14
     f34:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     f36:	44 23       	and	r20, r20
     f38:	51 f0       	breq	.+20     	; 0xf4e <rprintfNum+0x56>
     f3a:	17 ff       	sbrs	r17, 7
     f3c:	08 c0       	rjmp	.+16     	; 0xf4e <rprintfNum+0x56>
	{
		x = -n;
     f3e:	ee 24       	eor	r14, r14
     f40:	ff 24       	eor	r15, r15
     f42:	87 01       	movw	r16, r14
     f44:	e6 18       	sub	r14, r6
     f46:	f7 08       	sbc	r15, r7
     f48:	08 09       	sbc	r16, r8
     f4a:	19 09       	sbc	r17, r9
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
     f4e:	84 01       	movw	r16, r8
     f50:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     f52:	2a a1       	ldd	r18, Y+34	; 0x22
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	21 10       	cpse	r2, r1
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	29 1b       	sub	r18, r25
     f5e:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
     f60:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     f62:	a8 2e       	mov	r10, r24
     f64:	bb 24       	eor	r11, r11
     f66:	cc 24       	eor	r12, r12
     f68:	dd 24       	eor	r13, r13
     f6a:	c8 01       	movw	r24, r16
     f6c:	b7 01       	movw	r22, r14
     f6e:	a6 01       	movw	r20, r12
     f70:	95 01       	movw	r18, r10
     f72:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
     f76:	fb 01       	movw	r30, r22
     f78:	ef 70       	andi	r30, 0x0F	; 15
     f7a:	f0 70       	andi	r31, 0x00	; 0
     f7c:	e5 59       	subi	r30, 0x95	; 149
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	64 91       	lpm	r22, Z+
     f82:	6f 8f       	std	Y+31, r22	; 0x1f
     f84:	c8 01       	movw	r24, r16
     f86:	b7 01       	movw	r22, r14
     f88:	a6 01       	movw	r20, r12
     f8a:	95 01       	movw	r18, r10
     f8c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
     f90:	c9 01       	movw	r24, r18
     f92:	da 01       	movw	r26, r20
     f94:	7c 01       	movw	r14, r24
     f96:	8d 01       	movw	r16, r26
     f98:	9e e1       	ldi	r25, 0x1E	; 30
     f9a:	49 2e       	mov	r4, r25
     f9c:	51 2c       	mov	r5, r1
     f9e:	4c 0e       	add	r4, r28
     fa0:	5d 1e       	adc	r5, r29
     fa2:	39 a0       	ldd	r3, Y+33	; 0x21
     fa4:	25 c0       	rjmp	.+74     	; 0xff0 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
     fa6:	e1 14       	cp	r14, r1
     fa8:	f1 04       	cpc	r15, r1
     faa:	01 05       	cpc	r16, r1
     fac:	11 05       	cpc	r17, r1
     fae:	c9 f0       	breq	.+50     	; 0xfe2 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	a6 01       	movw	r20, r12
     fb6:	95 01       	movw	r18, r10
     fb8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
     fbc:	fb 01       	movw	r30, r22
     fbe:	ef 70       	andi	r30, 0x0F	; 15
     fc0:	f0 70       	andi	r31, 0x00	; 0
     fc2:	e5 59       	subi	r30, 0x95	; 149
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	64 91       	lpm	r22, Z+
     fc8:	f2 01       	movw	r30, r4
     fca:	60 83       	st	Z, r22
     fcc:	c8 01       	movw	r24, r16
     fce:	b7 01       	movw	r22, r14
     fd0:	a6 01       	movw	r20, r12
     fd2:	95 01       	movw	r18, r10
     fd4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
     fd8:	c9 01       	movw	r24, r18
     fda:	da 01       	movw	r26, r20
     fdc:	7c 01       	movw	r14, r24
     fde:	8d 01       	movw	r16, r26
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     fe2:	2b a1       	ldd	r18, Y+35	; 0x23
     fe4:	f2 01       	movw	r30, r4
     fe6:	20 83       	st	Z, r18
     fe8:	3a 94       	dec	r3
     fea:	08 94       	sec
     fec:	41 08       	sbc	r4, r1
     fee:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     ff0:	33 20       	and	r3, r3
     ff2:	c9 f6       	brne	.-78     	; 0xfa6 <rprintfNum+0xae>
     ff4:	ce 01       	movw	r24, r28
     ff6:	4f 96       	adiw	r24, 0x1f	; 31
     ff8:	8c 01       	movw	r16, r24
     ffa:	e9 a1       	ldd	r30, Y+33	; 0x21
     ffc:	0e 1b       	sub	r16, r30
     ffe:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    1000:	22 20       	and	r2, r2
    1002:	f1 f0       	breq	.+60     	; 0x1040 <rprintfNum+0x148>
	{
		if(n < 0)
    1004:	97 fe       	sbrs	r9, 7
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <rprintfNum+0x11a>
		{
   			*--p = '-';
    1008:	8d e2       	ldi	r24, 0x2D	; 45
    100a:	f8 01       	movw	r30, r16
    100c:	82 93       	st	-Z, r24
    100e:	8f 01       	movw	r16, r30
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <rprintfNum+0x148>
    1012:	c8 01       	movw	r24, r16
    1014:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    1016:	61 14       	cp	r6, r1
    1018:	71 04       	cpc	r7, r1
    101a:	81 04       	cpc	r8, r1
    101c:	91 04       	cpc	r9, r1
    101e:	19 f0       	breq	.+6      	; 0x1026 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    1020:	8c 01       	movw	r16, r24
    1022:	8b e2       	ldi	r24, 0x2B	; 43
    1024:	02 c0       	rjmp	.+4      	; 0x102a <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    1026:	8c 01       	movw	r16, r24
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	f8 01       	movw	r30, r16
    102c:	80 83       	st	Z, r24
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    1030:	f8 01       	movw	r30, r16
    1032:	81 91       	ld	r24, Z+
    1034:	8f 01       	movw	r16, r30
    1036:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    103a:	fa a1       	ldd	r31, Y+34	; 0x22
    103c:	f1 50       	subi	r31, 0x01	; 1
    103e:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    1040:	2a a1       	ldd	r18, Y+34	; 0x22
    1042:	22 23       	and	r18, r18
    1044:	a9 f7       	brne	.-22     	; 0x1030 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    1046:	a3 96       	adiw	r28, 0x23	; 35
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	8f 90       	pop	r8
    106a:	7f 90       	pop	r7
    106c:	6f 90       	pop	r6
    106e:	5f 90       	pop	r5
    1070:	4f 90       	pop	r4
    1072:	3f 90       	pop	r3
    1074:	2f 90       	pop	r2
    1076:	08 95       	ret

00001078 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	48 2e       	mov	r4, r24
    109a:	5a 01       	movw	r10, r20
    109c:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    109e:	cb 01       	movw	r24, r22
    10a0:	ba 01       	movw	r22, r20
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__gesf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	1c f4       	brge	.+6      	; 0x10b8 <rprintfFloat+0x40>
    10b2:	35 01       	movw	r6, r10
    10b4:	46 01       	movw	r8, r12
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <rprintfFloat+0x4c>
    10b8:	35 01       	movw	r6, r10
    10ba:	46 01       	movw	r8, r12
    10bc:	97 fa       	bst	r9, 7
    10be:	90 94       	com	r9
    10c0:	97 f8       	bld	r9, 7
    10c2:	90 94       	com	r9
    10c4:	0f 2e       	mov	r0, r31
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	ef 2e       	mov	r14, r31
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ff 2e       	mov	r15, r31
    10ce:	f0 e8       	ldi	r31, 0x80	; 128
    10d0:	0f 2f       	mov	r16, r31
    10d2:	ff e3       	ldi	r31, 0x3F	; 63
    10d4:	1f 2f       	mov	r17, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    10da:	c4 01       	movw	r24, r8
    10dc:	b3 01       	movw	r22, r6
    10de:	a8 01       	movw	r20, r16
    10e0:	97 01       	movw	r18, r14
    10e2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
    10f2:	87 fd       	sbrc	r24, 7
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    10f6:	c8 01       	movw	r24, r16
    10f8:	b7 01       	movw	r22, r14
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
    1106:	7b 01       	movw	r14, r22
    1108:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    110a:	53 94       	inc	r5
    110c:	8f e0       	ldi	r24, 0x0F	; 15
    110e:	58 16       	cp	r5, r24
    1110:	21 f7       	brne	.-56     	; 0x10da <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    1112:	c6 01       	movw	r24, r12
    1114:	b5 01       	movw	r22, r10
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
    1122:	88 23       	and	r24, r24
    1124:	14 f4       	brge	.+4      	; 0x112a <rprintfFloat+0xb2>
		rprintfChar('-');
    1126:	8d e2       	ldi	r24, 0x2D	; 45
    1128:	01 c0       	rjmp	.+2      	; 0x112c <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    112a:	8b e2       	ldi	r24, 0x2B	; 43
    112c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    1130:	dd 24       	eor	r13, r13
    1132:	aa 24       	eor	r10, r10
    1134:	56 c0       	rjmp	.+172    	; 0x11e2 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    1136:	c4 01       	movw	r24, r8
    1138:	b3 01       	movw	r22, r6
    113a:	a8 01       	movw	r20, r16
    113c:	97 01       	movw	r18, r14
    113e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    1142:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fixunssfsi>
    1146:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    1148:	d6 2a       	or	r13, r22
    114a:	cd 2d       	mov	r28, r13
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	cc 24       	eor	r12, r12
    1150:	dd 24       	eor	r13, r13
    1152:	c8 01       	movw	r24, r16
    1154:	b7 01       	movw	r22, r14
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
    1162:	88 23       	and	r24, r24
    1164:	19 f4       	brne	.+6      	; 0x116c <rprintfFloat+0xf4>
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	c2 2e       	mov	r12, r18
    116a:	d1 2c       	mov	r13, r1
    116c:	cc 29       	or	r28, r12
    116e:	dd 29       	or	r29, r13
    1170:	cd 2b       	or	r28, r29
    1172:	39 f0       	breq	.+14     	; 0x1182 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    1174:	8b 2d       	mov	r24, r11
    1176:	80 5d       	subi	r24, 0xD0	; 208
    1178:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    117c:	dd 24       	eor	r13, r13
    117e:	da 94       	dec	r13
    1180:	04 c0       	rjmp	.+8      	; 0x118a <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    1182:	80 e2       	ldi	r24, 0x20	; 32
    1184:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    1188:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    118a:	c8 01       	movw	r24, r16
    118c:	b7 01       	movw	r22, r14
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__cmpsf2>
    119a:	88 23       	and	r24, r24
    119c:	19 f4       	brne	.+6      	; 0x11a4 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    119e:	8e e2       	ldi	r24, 0x2E	; 46
    11a0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
		}
		
		x -= (digit*place);
    11a4:	6b 2d       	mov	r22, r11
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	88 27       	eor	r24, r24
    11aa:	77 fd       	sbrc	r23, 7
    11ac:	80 95       	com	r24
    11ae:	98 2f       	mov	r25, r24
    11b0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__floatsisf>
    11b4:	a8 01       	movw	r20, r16
    11b6:	97 01       	movw	r18, r14
    11b8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__mulsf3>
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	c4 01       	movw	r24, r8
    11c2:	b3 01       	movw	r22, r6
    11c4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__subsf3>
    11c8:	3b 01       	movw	r6, r22
    11ca:	4c 01       	movw	r8, r24
		place /= 10.0;
    11cc:	c8 01       	movw	r24, r16
    11ce:	b7 01       	movw	r22, r14
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3>
    11dc:	7b 01       	movw	r14, r22
    11de:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    11e0:	a3 94       	inc	r10
    11e2:	a4 14       	cp	r10, r4
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <rprintfFloat+0x170>
    11e6:	a7 cf       	rjmp	.-178    	; 0x1136 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	8f 90       	pop	r8
    1200:	7f 90       	pop	r7
    1202:	6f 90       	pop	r6
    1204:	5f 90       	pop	r5
    1206:	4f 90       	pop	r4
    1208:	08 95       	ret

0000120a <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    120a:	7f 92       	push	r7
    120c:	8f 92       	push	r8
    120e:	9f 92       	push	r9
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	78 88       	ldd	r7, Y+16	; 0x10
    122a:	c9 88       	ldd	r12, Y+17	; 0x11
    122c:	da 88       	ldd	r13, Y+18	; 0x12
    122e:	63 e1       	ldi	r22, 0x13	; 19
    1230:	e6 2e       	mov	r14, r22
    1232:	f1 2c       	mov	r15, r1
    1234:	ec 0e       	add	r14, r28
    1236:	fd 1e       	adc	r15, r29
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    123a:	88 23       	and	r24, r24
    123c:	81 f4       	brne	.+32     	; 0x125e <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    125e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    1262:	96 01       	movw	r18, r12
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1268:	77 20       	and	r7, r7
    126a:	21 f0       	breq	.+8      	; 0x1274 <rprintf1RamRom+0x6a>
    126c:	f6 01       	movw	r30, r12
    126e:	69 01       	movw	r12, r18
    1270:	84 91       	lpm	r24, Z+
    1272:	03 c0       	rjmp	.+6      	; 0x127a <rprintf1RamRom+0x70>
    1274:	f6 01       	movw	r30, r12
    1276:	80 81       	ld	r24, Z
    1278:	69 01       	movw	r12, r18
    127a:	85 32       	cpi	r24, 0x25	; 37
    127c:	f1 f6       	brne	.-68     	; 0x123a <rprintf1RamRom+0x30>
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1282:	77 20       	and	r7, r7
    1284:	21 f0       	breq	.+8      	; 0x128e <rprintf1RamRom+0x84>
    1286:	f6 01       	movw	r30, r12
    1288:	69 01       	movw	r12, r18
    128a:	84 91       	lpm	r24, Z+
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <rprintf1RamRom+0x8a>
    128e:	f6 01       	movw	r30, r12
    1290:	80 81       	ld	r24, Z
    1292:	69 01       	movw	r12, r18
    1294:	84 36       	cpi	r24, 0x64	; 100
    1296:	29 f0       	breq	.+10     	; 0x12a2 <rprintf1RamRom+0x98>
    1298:	88 37       	cpi	r24, 0x78	; 120
    129a:	81 f0       	breq	.+32     	; 0x12bc <rprintf1RamRom+0xb2>
    129c:	83 36       	cpi	r24, 0x63	; 99
    129e:	f9 f6       	brne	.-66     	; 0x125e <rprintf1RamRom+0x54>
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <rprintf1RamRom+0xa4>
    12a2:	00 e1       	ldi	r16, 0x10	; 16
    12a4:	17 e2       	ldi	r17, 0x27	; 39
    12a6:	5a e0       	ldi	r21, 0x0A	; 10
    12a8:	a5 2e       	mov	r10, r21
    12aa:	b1 2c       	mov	r11, r1
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    12ae:	f7 01       	movw	r30, r14
    12b0:	80 81       	ld	r24, Z
    12b2:	22 e0       	ldi	r18, 0x02	; 2
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	e2 0e       	add	r14, r18
    12b8:	f3 1e       	adc	r15, r19
    12ba:	d1 cf       	rjmp	.-94     	; 0x125e <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	10 e1       	ldi	r17, 0x10	; 16
    12c0:	40 e1       	ldi	r20, 0x10	; 16
    12c2:	a4 2e       	mov	r10, r20
    12c4:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    12c6:	32 e0       	ldi	r19, 0x02	; 2
    12c8:	83 2e       	mov	r8, r19
    12ca:	91 2c       	mov	r9, r1
    12cc:	8e 0c       	add	r8, r14
    12ce:	9f 1c       	adc	r9, r15
    12d0:	f7 01       	movw	r30, r14
    12d2:	e0 80       	ld	r14, Z
    12d4:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    12d6:	84 36       	cpi	r24, 0x64	; 100
    12d8:	b1 f4       	brne	.+44     	; 0x1306 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    12da:	f7 fe       	sbrs	r15, 7
    12dc:	11 c0       	rjmp	.+34     	; 0x1300 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    12de:	f0 94       	com	r15
    12e0:	e1 94       	neg	r14
    12e2:	f1 08       	sbc	r15, r1
    12e4:	f3 94       	inc	r15
					rprintfChar('-');
    12e6:	8d e2       	ldi	r24, 0x2D	; 45
    12e8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <rprintfChar>
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    12ee:	c8 01       	movw	r24, r16
    12f0:	6a e0       	ldi	r22, 0x0A	; 10
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    12f8:	8b 01       	movw	r16, r22
    12fa:	62 30       	cpi	r22, 0x02	; 2
    12fc:	71 05       	cpc	r23, r1
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <rprintf1RamRom+0xfc>
    1300:	e0 16       	cp	r14, r16
    1302:	f1 06       	cpc	r15, r17
    1304:	a0 f3       	brcs	.-24     	; 0x12ee <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1306:	c7 01       	movw	r24, r14
    1308:	b8 01       	movw	r22, r16
    130a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    130e:	86 2f       	mov	r24, r22
    1310:	0e 94 49 07 	call	0xe92	; 0xe92 <rprintfu04>
				u_val %= div_val;
    1314:	c7 01       	movw	r24, r14
    1316:	b8 01       	movw	r22, r16
    1318:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    131c:	7c 01       	movw	r14, r24
				div_val /= base;
    131e:	c8 01       	movw	r24, r16
    1320:	b5 01       	movw	r22, r10
    1322:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    1326:	8b 01       	movw	r16, r22
			} while (div_val);
    1328:	61 15       	cp	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	61 f7       	brne	.-40     	; 0x1306 <rprintf1RamRom+0xfc>
    132e:	74 01       	movw	r14, r8
    1330:	98 cf       	rjmp	.-208    	; 0x1262 <rprintf1RamRom+0x58>

00001332 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	40 f4       	brcc	.+16     	; 0x1346 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    1336:	e8 2f       	mov	r30, r24
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	ee 56       	subi	r30, 0x6E	; 110
    1340:	fe 4f       	sbci	r31, 0xFE	; 254
    1342:	71 83       	std	Z+1, r23	; 0x01
    1344:	60 83       	st	Z, r22
    1346:	08 95       	ret

00001348 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    1348:	9a 01       	movw	r18, r20
    134a:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	if(nUart==0)
    134c:	88 23       	and	r24, r24
    134e:	e1 f4       	brne	.+56     	; 0x1388 <uartSetBaudRate+0x40>
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1350:	ca 01       	movw	r24, r20
    1352:	b9 01       	movw	r22, r18
    1354:	60 58       	subi	r22, 0x80	; 128
    1356:	7b 47       	sbci	r23, 0x7B	; 123
    1358:	81 4e       	sbci	r24, 0xE1	; 225
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	f3 e0       	ldi	r31, 0x03	; 3
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	fa 95       	dec	r31
    1368:	d1 f7       	brne	.-12     	; 0x135e <uartSetBaudRate+0x16>
    136a:	e4 e0       	ldi	r30, 0x04	; 4
    136c:	22 0f       	add	r18, r18
    136e:	33 1f       	adc	r19, r19
    1370:	44 1f       	adc	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	ea 95       	dec	r30
    1376:	d1 f7       	brne	.-12     	; 0x136c <uartSetBaudRate+0x24>
    1378:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__udivmodsi4>
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==0)
	{
		outb(UBRR0L, bauddiv);
    1380:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    1384:	30 93 c5 00 	sts	0x00C5, r19
    1388:	08 95       	ret

0000138a <uartGetRxBuffer>:
		#endif
	}
}

cBuffer* uartGetRxBuffer(u08 nUart)
{
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a3 e0       	ldi	r26, 0x03	; 3
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	aa 95       	dec	r26
    1396:	e1 f7       	brne	.-8      	; 0x1390 <uartGetRxBuffer+0x6>
    1398:	2a 54       	subi	r18, 0x4A	; 74
    139a:	3e 4f       	sbci	r19, 0xFE	; 254
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    139c:	c9 01       	movw	r24, r18
    139e:	08 95       	ret

000013a0 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	b3 e0       	ldi	r27, 0x03	; 3
    13a6:	22 0f       	add	r18, r18
    13a8:	33 1f       	adc	r19, r19
    13aa:	ba 95       	dec	r27
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <uartGetTxBuffer+0x6>
    13ae:	26 52       	subi	r18, 0x26	; 38
    13b0:	3e 4f       	sbci	r19, 0xFE	; 254
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    13b2:	c9 01       	movw	r24, r18
    13b4:	08 95       	ret

000013b6 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    13b6:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    13b8:	88 23       	and	r24, r24
    13ba:	31 f4       	brne	.+12     	; 0x13c8 <uartSendByte+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    13bc:	80 91 c0 00 	lds	r24, 0x00C0
    13c0:	85 ff       	sbrs	r24, 5
    13c2:	fc cf       	rjmp	.-8      	; 0x13bc <uartSendByte+0x6>
		outb(UDR0, txData);
    13c4:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	ee 54       	subi	r30, 0x4E	; 78
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	10 82       	st	Z, r1
}
    13d0:	08 95       	ret

000013d2 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    13d2:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
	{
		while(!(UCSR0A & (1<<UDRE0)));
    13d4:	80 91 c0 00 	lds	r24, 0x00C0
    13d8:	85 ff       	sbrs	r24, 5
    13da:	fc cf       	rjmp	.-8      	; 0x13d4 <uart0SendByte+0x2>
		outb(UDR0, txData);
    13dc:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    13e0:	10 92 b2 01 	sts	0x01B2, r1

void uart0SendByte(u08 data)
{
	// send byte on UART0
	uartSendByte(0, data);
}
    13e4:	08 95       	ret

000013e6 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	e8 2f       	mov	r30, r24
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	8a 95       	dec	r24
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <uartReceiveBufferIsEmpty+0x8>
    13f6:	e6 54       	subi	r30, 0x46	; 70
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	89 2b       	or	r24, r25
    1400:	09 f4       	brne	.+2      	; 0x1404 <uartReceiveBufferIsEmpty+0x1e>
    1402:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    1404:	82 2f       	mov	r24, r18
    1406:	08 95       	ret

00001408 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	u08 c;
	// get received char
	
	if(nUart==0){
    140c:	88 23       	and	r24, r24
    140e:	11 f4       	brne	.+4      	; 0x1414 <uartReceiveService+0xc>
		c = inb(UDR0);
    1410:	60 91 c6 00 	lds	r22, 0x00C6
	}

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	e9 01       	movw	r28, r18
    141a:	cc 0f       	add	r28, r28
    141c:	dd 1f       	adc	r29, r29
    141e:	fe 01       	movw	r30, r28
    1420:	ee 56       	subi	r30, 0x6E	; 110
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	89 2b       	or	r24, r25
    142a:	31 f0       	breq	.+12     	; 0x1438 <uartReceiveService+0x30>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    142c:	01 90       	ld	r0, Z+
    142e:	f0 81       	ld	r31, Z
    1430:	e0 2d       	mov	r30, r0
    1432:	86 2f       	mov	r24, r22
    1434:	09 95       	icall
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <uartReceiveService+0x58>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	9a 95       	dec	r25
    1440:	e1 f7       	brne	.-8      	; 0x143a <uartReceiveService+0x32>
    1442:	c9 01       	movw	r24, r18
    1444:	8a 54       	subi	r24, 0x4A	; 74
    1446:	9e 4f       	sbci	r25, 0xFE	; 254
    1448:	0e 94 3e 0c 	call	0x187c	; 0x187c <bufferAddToEnd>
    144c:	88 23       	and	r24, r24
    144e:	41 f4       	brne	.+16     	; 0x1460 <uartReceiveService+0x58>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    1450:	fe 01       	movw	r30, r28
    1452:	e6 50       	subi	r30, 0x06	; 6
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
		}
	}
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <SIG_USART0_RECV>:
{
	uartTransmitService(0);
}
	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
	uartReceiveService(0);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	0e 94 04 0a 	call	0x1408	; 0x1408 <uartReceiveService>
}
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	88 2e       	mov	r8, r24
    14ca:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    14cc:	e8 2e       	mov	r14, r24
    14ce:	ff 24       	eor	r15, r15
    14d0:	f7 01       	movw	r30, r14
    14d2:	13 e0       	ldi	r17, 0x03	; 3
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	1a 95       	dec	r17
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <uartSendBuffer+0x24>
    14dc:	e2 52       	subi	r30, 0x22	; 34
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	20 81       	ld	r18, Z
    14e2:	31 81       	ldd	r19, Z+1	; 0x01
    14e4:	24 0f       	add	r18, r20
    14e6:	35 1f       	adc	r19, r21
    14e8:	f7 01       	movw	r30, r14
    14ea:	73 e0       	ldi	r23, 0x03	; 3
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	7a 95       	dec	r23
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <uartSendBuffer+0x3c>
    14f4:	e4 52       	subi	r30, 0x24	; 36
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	28 17       	cp	r18, r24
    14fe:	39 07       	cpc	r19, r25
    1500:	b0 f5       	brcc	.+108    	; 0x156e <uartSendBuffer+0xbe>
    1502:	41 15       	cp	r20, r1
    1504:	51 05       	cpc	r21, r1
    1506:	99 f1       	breq	.+102    	; 0x156e <uartSendBuffer+0xbe>
	{
		// grab first character
		first = *buffer++;
    1508:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    150a:	67 01       	movw	r12, r14
    150c:	63 e0       	ldi	r22, 0x03	; 3
    150e:	cc 0c       	add	r12, r12
    1510:	dd 1c       	adc	r13, r13
    1512:	6a 95       	dec	r22
    1514:	e1 f7       	brne	.-8      	; 0x150e <uartSendBuffer+0x5e>
    1516:	8a ed       	ldi	r24, 0xDA	; 218
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	c8 0e       	add	r12, r24
    151c:	d9 1e       	adc	r13, r25
    151e:	8d 01       	movw	r16, r26
    1520:	c0 e0       	ldi	r28, 0x00	; 0
    1522:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    1524:	5a 01       	movw	r10, r20
    1526:	08 94       	sec
    1528:	a1 08       	sbc	r10, r1
    152a:	b1 08       	sbc	r11, r1
    152c:	06 c0       	rjmp	.+12     	; 0x153a <uartSendBuffer+0x8a>
    152e:	c6 01       	movw	r24, r12
    1530:	f8 01       	movw	r30, r16
    1532:	60 81       	ld	r22, Z
    1534:	0e 94 3e 0c 	call	0x187c	; 0x187c <bufferAddToEnd>
    1538:	21 96       	adiw	r28, 0x01	; 1
    153a:	0f 5f       	subi	r16, 0xFF	; 255
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	ca 15       	cp	r28, r10
    1540:	db 05       	cpc	r29, r11
    1542:	a8 f3       	brcs	.-22     	; 0x152e <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    1544:	f7 01       	movw	r30, r14
    1546:	ea 52       	subi	r30, 0x2A	; 42
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    154e:	88 20       	and	r8, r8
    1550:	31 f4       	brne	.+12     	; 0x155e <uartSendBuffer+0xae>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1552:	80 91 c0 00 	lds	r24, 0x00C0
    1556:	85 ff       	sbrs	r24, 5
    1558:	fc cf       	rjmp	.-8      	; 0x1552 <uartSendBuffer+0xa2>
		outb(UDR0, txData);
    155a:	90 92 c6 00 	sts	0x00C6, r9
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    155e:	82 eb       	ldi	r24, 0xB2	; 178
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	e8 0e       	add	r14, r24
    1564:	f9 1e       	adc	r15, r25
    1566:	f7 01       	movw	r30, r14
    1568:	10 82       	st	Z, r1
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <uartSendBuffer+0xc0>

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
		uartSendByte(nUart, first);
		// return success
		return TRUE;
    156e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	df 90       	pop	r13
    157e:	cf 90       	pop	r12
    1580:	bf 90       	pop	r11
    1582:	af 90       	pop	r10
    1584:	9f 90       	pop	r9
    1586:	8f 90       	pop	r8
    1588:	08 95       	ret

0000158a <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	23 e0       	ldi	r18, 0x03	; 3
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	2a 95       	dec	r18
    1594:	e1 f7       	brne	.-8      	; 0x158e <uartAddToTxBuffer+0x4>
    1596:	86 52       	subi	r24, 0x26	; 38
    1598:	9e 4f       	sbci	r25, 0xFE	; 254
    159a:	0e 94 3e 0c 	call	0x187c	; 0x187c <bufferAddToEnd>
}
    159e:	08 95       	ret

000015a0 <uart0AddToTxBuffer>:

void uart0AddToTxBuffer(u08 data)
{
    15a0:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    15a2:	8a ed       	ldi	r24, 0xDA	; 218
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 3e 0c 	call	0x187c	; 0x187c <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    15aa:	08 95       	ret

000015ac <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    15b2:	a8 2f       	mov	r26, r24
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ed 01       	movw	r28, r26
    15b8:	ca 52       	subi	r28, 0x2A	; 42
    15ba:	de 4f       	sbci	r29, 0xFE	; 254
    15bc:	88 81       	ld	r24, Y
    15be:	88 23       	and	r24, r24
    15c0:	b1 f0       	breq	.+44     	; 0x15ee <uartTransmitService+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    15c2:	fd 01       	movw	r30, r26
    15c4:	33 e0       	ldi	r19, 0x03	; 3
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	3a 95       	dec	r19
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <uartTransmitService+0x1a>
    15ce:	e2 52       	subi	r30, 0x22	; 34
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	80 81       	ld	r24, Z
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	89 2b       	or	r24, r25
    15d8:	49 f0       	breq	.+18     	; 0x15ec <uartTransmitService+0x40>
		{
			// send byte from top of buffer
			if(nUart==3)
    15da:	23 30       	cpi	r18, 0x03	; 3
    15dc:	61 f4       	brne	.+24     	; 0x15f6 <uartTransmitService+0x4a>
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    15de:	8a ed       	ldi	r24, 0xDA	; 218
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <bufferGetFromFront>
    15e6:	80 93 c6 00 	sts	0x00C6, r24
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <uartTransmitService+0x4a>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    15ec:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    15ee:	ae 54       	subi	r26, 0x4E	; 78
    15f0:	be 4f       	sbci	r27, 0xFE	; 254
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	8c 93       	st	X, r24
	}
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <SIG_USART0_TRANS>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
	uartTransmitService(0);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <uartTransmitService>
}
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uartSendTxBuffer(u08 nUart)
{
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    164e:	c8 2f       	mov	r28, r24
    1650:	d0 e0       	ldi	r29, 0x00	; 0
    1652:	fe 01       	movw	r30, r28
    1654:	ea 52       	subi	r30, 0x2A	; 42
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	80 83       	st	Z, r24
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    165c:	ce 01       	movw	r24, r28
    165e:	43 e0       	ldi	r20, 0x03	; 3
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	4a 95       	dec	r20
    1666:	e1 f7       	brne	.-8      	; 0x1660 <uartSendTxBuffer+0x1a>
    1668:	86 52       	subi	r24, 0x26	; 38
    166a:	9e 4f       	sbci	r25, 0xFE	; 254
    166c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <bufferGetFromFront>
    1670:	98 2f       	mov	r25, r24
void uartSendByte(u08 nUart, u08 txData)
{
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==0)
    1672:	11 23       	and	r17, r17
    1674:	31 f4       	brne	.+12     	; 0x1682 <uartSendTxBuffer+0x3c>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1676:	80 91 c0 00 	lds	r24, 0x00C0
    167a:	85 ff       	sbrs	r24, 5
    167c:	fc cf       	rjmp	.-8      	; 0x1676 <uartSendTxBuffer+0x30>
		outb(UDR0, txData);
    167e:	90 93 c6 00 	sts	0x00C6, r25
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1682:	ce 54       	subi	r28, 0x4E	; 78
    1684:	de 4f       	sbci	r29, 0xFE	; 254
    1686:	18 82       	st	Y, r1
{
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	08 95       	ret

00001690 <uartReceiveByte>:
	else
		return -1;
}

u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	f9 01       	movw	r30, r18
    169c:	73 e0       	ldi	r23, 0x03	; 3
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	7a 95       	dec	r23
    16a4:	e1 f7       	brne	.-8      	; 0x169e <uartReceiveByte+0xe>
    16a6:	e8 54       	subi	r30, 0x48	; 72
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	89 2b       	or	r24, r25
    16b0:	c9 f0       	breq	.+50     	; 0x16e4 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    16b2:	f9 01       	movw	r30, r18
    16b4:	63 e0       	ldi	r22, 0x03	; 3
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	6a 95       	dec	r22
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <uartReceiveByte+0x26>
    16be:	e6 54       	subi	r30, 0x46	; 70
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	89 2b       	or	r24, r25
    16c8:	69 f0       	breq	.+26     	; 0x16e4 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    16ca:	53 e0       	ldi	r21, 0x03	; 3
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	5a 95       	dec	r21
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <uartReceiveByte+0x3c>
    16d4:	c9 01       	movw	r24, r18
    16d6:	8a 54       	subi	r24, 0x4A	; 74
    16d8:	9e 4f       	sbci	r25, 0xFE	; 254
    16da:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <bufferGetFromFront>
    16de:	88 83       	st	Y, r24
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <uartReceiveByte+0x56>
			return TRUE;
    16e4:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <uart0GetByte>:
	// send byte on UART0
	uartSendByte(0, data);
}

int uart0GetByte(void)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	be 01       	movw	r22, r28
    16fa:	6f 5f       	subi	r22, 0xFF	; 255
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	0e 94 48 0b 	call	0x1690	; 0x1690 <uartReceiveByte>
    1702:	88 23       	and	r24, r24
    1704:	19 f4       	brne	.+6      	; 0x170c <uart0GetByte+0x20>
    1706:	2f ef       	ldi	r18, 0xFF	; 255
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <uart0GetByte+0x26>
		return c;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1712:	c9 01       	movw	r24, r18
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	e3 e0       	ldi	r30, 0x03	; 3
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	ea 95       	dec	r30
    1726:	e1 f7       	brne	.-8      	; 0x1720 <uartFlushReceiveBuffer+0x4>
    1728:	8a 54       	subi	r24, 0x4A	; 74
    172a:	9e 4f       	sbci	r25, 0xFE	; 254
    172c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <bufferFlush>
}
    1730:	08 95       	ret

00001732 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    1732:	86 eb       	ldi	r24, 0xB6	; 182
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	71 e0       	ldi	r23, 0x01	; 1
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    1742:	8a ed       	ldi	r24, 0xDA	; 218
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	62 e8       	ldi	r22, 0x82	; 130
    1748:	71 e0       	ldi	r23, 0x01	; 1
    174a:	40 e1       	ldi	r20, 0x10	; 16
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    1752:	08 95       	ret

00001754 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    1754:	0e 94 99 0b 	call	0x1732	; 0x1732 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    1758:	10 92 93 01 	sts	0x0193, r1
    175c:	10 92 92 01 	sts	0x0192, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1760:	88 ed       	ldi	r24, 0xD8	; 216
    1762:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	55 e2       	ldi	r21, 0x25	; 37
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	0e 94 a4 09 	call	0x1348	; 0x1348 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	80 93 b2 01 	sts	0x01B2, r24
	uartBufferedTx[0] = FALSE;
    177a:	10 92 d6 01 	sts	0x01D6, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    177e:	10 92 fb 01 	sts	0x01FB, r1
    1782:	10 92 fa 01 	sts	0x01FA, r1
	// enable interrupts
	sei();
    1786:	78 94       	sei
}
    1788:	08 95       	ret

0000178a <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    178a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uart0Init>
}
    178e:	08 95       	ret

00001790 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    1790:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1792:	8f b7       	in	r24, 0x3f	; 63
    1794:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    1796:	71 83       	std	Z+1, r23	; 0x01
    1798:	60 83       	st	Z, r22
	buffer->size = size;
    179a:	53 83       	std	Z+3, r21	; 0x03
    179c:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    179e:	17 82       	std	Z+7, r1	; 0x07
    17a0:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    17a2:	15 82       	std	Z+5, r1	; 0x05
    17a4:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    17a6:	8f bf       	out	0x3f, r24	; 63
}
    17a8:	08 95       	ret

000017aa <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    17aa:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    17ac:	4f b7       	in	r20, 0x3f	; 63
    17ae:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    17b0:	14 96       	adiw	r26, 0x04	; 4
    17b2:	8d 91       	ld	r24, X+
    17b4:	9c 91       	ld	r25, X
    17b6:	15 97       	sbiw	r26, 0x05	; 5
    17b8:	89 2b       	or	r24, r25
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <bufferGetFromFront+0x16>
    17bc:	e0 e0       	ldi	r30, 0x00	; 0
    17be:	25 c0       	rjmp	.+74     	; 0x180a <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    17c0:	16 96       	adiw	r26, 0x06	; 6
    17c2:	8d 91       	ld	r24, X+
    17c4:	9c 91       	ld	r25, X
    17c6:	17 97       	sbiw	r26, 0x07	; 7
    17c8:	ed 91       	ld	r30, X+
    17ca:	fc 91       	ld	r31, X
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	17 96       	adiw	r26, 0x07	; 7
    17d8:	9c 93       	st	X, r25
    17da:	8e 93       	st	-X, r24
    17dc:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    17de:	12 96       	adiw	r26, 0x02	; 2
    17e0:	2d 91       	ld	r18, X+
    17e2:	3c 91       	ld	r19, X
    17e4:	13 97       	sbiw	r26, 0x03	; 3
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	30 f0       	brcs	.+12     	; 0x17f8 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    17ec:	82 1b       	sub	r24, r18
    17ee:	93 0b       	sbc	r25, r19
    17f0:	17 96       	adiw	r26, 0x07	; 7
    17f2:	9c 93       	st	X, r25
    17f4:	8e 93       	st	-X, r24
    17f6:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    17f8:	14 96       	adiw	r26, 0x04	; 4
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	15 97       	sbiw	r26, 0x05	; 5
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	15 96       	adiw	r26, 0x05	; 5
    1804:	9c 93       	st	X, r25
    1806:	8e 93       	st	-X, r24
    1808:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    180a:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    180c:	8e 2f       	mov	r24, r30
    180e:	08 95       	ret

00001810 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    1810:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    1812:	4f b7       	in	r20, 0x3f	; 63
    1814:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	68 17       	cp	r22, r24
    181c:	79 07       	cpc	r23, r25
    181e:	b0 f4       	brcc	.+44     	; 0x184c <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    1820:	86 81       	ldd	r24, Z+6	; 0x06
    1822:	97 81       	ldd	r25, Z+7	; 0x07
    1824:	86 0f       	add	r24, r22
    1826:	97 1f       	adc	r25, r23
    1828:	97 83       	std	Z+7, r25	; 0x07
    182a:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    182c:	22 81       	ldd	r18, Z+2	; 0x02
    182e:	33 81       	ldd	r19, Z+3	; 0x03
    1830:	82 17       	cp	r24, r18
    1832:	93 07       	cpc	r25, r19
    1834:	20 f0       	brcs	.+8      	; 0x183e <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    1836:	82 1b       	sub	r24, r18
    1838:	93 0b       	sbc	r25, r19
    183a:	97 83       	std	Z+7, r25	; 0x07
    183c:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    183e:	84 81       	ldd	r24, Z+4	; 0x04
    1840:	95 81       	ldd	r25, Z+5	; 0x05
    1842:	86 1b       	sub	r24, r22
    1844:	97 0b       	sbc	r25, r23
    1846:	95 83       	std	Z+5, r25	; 0x05
    1848:	84 83       	std	Z+4, r24	; 0x04
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    184c:	15 82       	std	Z+5, r1	; 0x05
    184e:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    1850:	4f bf       	out	0x3f, r20	; 63
}
    1852:	08 95       	ret

00001854 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    1854:	fc 01       	movw	r30, r24
    1856:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    1858:	2f b7       	in	r18, 0x3f	; 63
    185a:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    185c:	2f bf       	out	0x3f, r18	; 63
    185e:	26 81       	ldd	r18, Z+6	; 0x06
    1860:	37 81       	ldd	r19, Z+7	; 0x07
    1862:	62 81       	ldd	r22, Z+2	; 0x02
    1864:	73 81       	ldd	r23, Z+3	; 0x03
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    186e:	01 90       	ld	r0, Z+
    1870:	f0 81       	ld	r31, Z
    1872:	e0 2d       	mov	r30, r0
    1874:	e8 0f       	add	r30, r24
    1876:	f9 1f       	adc	r31, r25
	return data;
}
    1878:	80 81       	ld	r24, Z
    187a:	08 95       	ret

0000187c <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	ec 01       	movw	r28, r24
    1884:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    1886:	4f b7       	in	r20, 0x3f	; 63
    1888:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	6a 81       	ldd	r22, Y+2	; 0x02
    1890:	7b 81       	ldd	r23, Y+3	; 0x03
    1892:	26 17       	cp	r18, r22
    1894:	37 07       	cpc	r19, r23
    1896:	98 f4       	brcc	.+38     	; 0x18be <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__udivmodhi4>
    18a4:	e8 81       	ld	r30, Y
    18a6:	f9 81       	ldd	r31, Y+1	; 0x01
    18a8:	e8 0f       	add	r30, r24
    18aa:	f9 1f       	adc	r31, r25
    18ac:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	9d 83       	std	Y+5, r25	; 0x05
    18b6:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    18b8:	4f bf       	out	0x3f, r20	; 63
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    18be:	4f bf       	out	0x3f, r20	; 63
    18c0:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	08 95       	ret

000018ca <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    18ca:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    18cc:	8f b7       	in	r24, 0x3f	; 63
    18ce:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    18d0:	8f bf       	out	0x3f, r24	; 63
    18d2:	22 81       	ldd	r18, Z+2	; 0x02
    18d4:	33 81       	ldd	r19, Z+3	; 0x03
    18d6:	84 81       	ldd	r24, Z+4	; 0x04
    18d8:	95 81       	ldd	r25, Z+5	; 0x05
    18da:	28 1b       	sub	r18, r24
    18dc:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    18de:	c9 01       	movw	r24, r18
    18e0:	08 95       	ret

000018e2 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    18e2:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    18e4:	8f b7       	in	r24, 0x3f	; 63
    18e6:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    18e8:	15 82       	std	Z+5, r1	; 0x05
    18ea:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    18ec:	8f bf       	out	0x3f, r24	; 63
}
    18ee:	08 95       	ret

000018f0 <get_left_count>:
#include <encoder_pico.h>

s32 wheel_left_tick_counter  = 0;
s32 wheel_right_tick_counter = 0;

u32 get_left_count(void){
    18f0:	60 91 9a 01 	lds	r22, 0x019A
    18f4:	70 91 9b 01 	lds	r23, 0x019B
	return wheel_left_tick_counter;
}
    18f8:	80 91 9c 01 	lds	r24, 0x019C
    18fc:	90 91 9d 01 	lds	r25, 0x019D
    1900:	08 95       	ret

00001902 <get_right_count>:

u32 get_right_count(void){
    1902:	60 91 9e 01 	lds	r22, 0x019E
    1906:	70 91 9f 01 	lds	r23, 0x019F
	return wheel_right_tick_counter;
}
    190a:	80 91 a0 01 	lds	r24, 0x01A0
    190e:	90 91 a1 01 	lds	r25, 0x01A1
    1912:	08 95       	ret

00001914 <__vector_5>:

SIGNAL(PCINT2_vect){
    1914:	1f 92       	push	r1
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	2f 93       	push	r18
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
	// Only enabled for Digital Pin 7, Encoder Left
	static u08 pin_level_past = 0;
	static u08 pin_level_current;

	// Grab current pin state
	pin_level_current = bit_is_set(PIND,7);
    1928:	29 b1       	in	r18, 0x09	; 9
    192a:	20 78       	andi	r18, 0x80	; 128
    192c:	20 93 a8 01 	sts	0x01A8, r18

	if(pin_level_current > pin_level_past){		// Positive edge trigger
    1930:	80 91 a9 01 	lds	r24, 0x01A9
    1934:	82 17       	cp	r24, r18
    1936:	58 f4       	brcc	.+22     	; 0x194e <__vector_5+0x3a>
    1938:	80 91 9a 01 	lds	r24, 0x019A
    193c:	90 91 9b 01 	lds	r25, 0x019B
    1940:	a0 91 9c 01 	lds	r26, 0x019C
    1944:	b0 91 9d 01 	lds	r27, 0x019D
		if(bit_is_set(PINB,0)){					// Robot left wheel reverse
    1948:	18 9b       	sbis	0x03, 0	; 3
    194a:	0b c0       	rjmp	.+22     	; 0x1962 <__vector_5+0x4e>
    194c:	0e c0       	rjmp	.+28     	; 0x196a <__vector_5+0x56>
    194e:	80 91 9a 01 	lds	r24, 0x019A
    1952:	90 91 9b 01 	lds	r25, 0x019B
    1956:	a0 91 9c 01 	lds	r26, 0x019C
    195a:	b0 91 9d 01 	lds	r27, 0x019D
		else{									// Robot left wheel forward
			wheel_left_tick_counter++;
		}
	}
	else{										// Negative edge trigger
		if(bit_is_set(PINB,0)){
    195e:	18 9b       	sbis	0x03, 0	; 3
    1960:	04 c0       	rjmp	.+8      	; 0x196a <__vector_5+0x56>
			wheel_left_tick_counter++;			// Robot left wheel forward
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	a1 1d       	adc	r26, r1
    1966:	b1 1d       	adc	r27, r1
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <__vector_5+0x5c>
		}
		else{
			wheel_left_tick_counter--;			// Robot left wheel reverse
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	a1 09       	sbc	r26, r1
    196e:	b1 09       	sbc	r27, r1
    1970:	80 93 9a 01 	sts	0x019A, r24
    1974:	90 93 9b 01 	sts	0x019B, r25
    1978:	a0 93 9c 01 	sts	0x019C, r26
    197c:	b0 93 9d 01 	sts	0x019D, r27
		}
	}
	pin_level_past = pin_level_current;
    1980:	20 93 a9 01 	sts	0x01A9, r18
	
}
    1984:	bf 91       	pop	r27
    1986:	af 91       	pop	r26
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <__vector_3>:
SIGNAL(PCINT0_vect){
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
	static u08 PINB4_current;
	static u08 PINB5_past = 0;
	static u08 PINB5_current;

	// Check pin statuses and determine which pin cause the interrupt
	PINB0_current = bit_is_set(PINB,0);
    19b0:	33 b1       	in	r19, 0x03	; 3
    19b2:	31 70       	andi	r19, 0x01	; 1
    19b4:	30 93 a6 01 	sts	0x01A6, r19
	PINB4_current = bit_is_set(PINB,4);
    19b8:	23 b1       	in	r18, 0x03	; 3
    19ba:	20 71       	andi	r18, 0x10	; 16
    19bc:	20 93 a4 01 	sts	0x01A4, r18
	PINB5_current = bit_is_set(PINB,5);
    19c0:	43 b1       	in	r20, 0x03	; 3
    19c2:	40 72       	andi	r20, 0x20	; 32
    19c4:	40 93 a2 01 	sts	0x01A2, r20

	if(PINB0_current != PINB0_past){
    19c8:	80 91 a7 01 	lds	r24, 0x01A7
    19cc:	38 17       	cp	r19, r24
    19ce:	49 f1       	breq	.+82     	; 0x1a22 <__vector_3+0x8a>
		if(PINB0_current > PINB0_past){		// Positive edge trigger
    19d0:	83 17       	cp	r24, r19
    19d2:	58 f4       	brcc	.+22     	; 0x19ea <__vector_3+0x52>
    19d4:	80 91 9a 01 	lds	r24, 0x019A
    19d8:	90 91 9b 01 	lds	r25, 0x019B
    19dc:	a0 91 9c 01 	lds	r26, 0x019C
    19e0:	b0 91 9d 01 	lds	r27, 0x019D
			if(bit_is_set(PIND,7)){					// Robot left wheel reverse
    19e4:	4f 9b       	sbis	0x09, 7	; 9
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <__vector_3+0x66>
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <__vector_3+0x6e>
    19ea:	80 91 9a 01 	lds	r24, 0x019A
    19ee:	90 91 9b 01 	lds	r25, 0x019B
    19f2:	a0 91 9c 01 	lds	r26, 0x019C
    19f6:	b0 91 9d 01 	lds	r27, 0x019D
			else{									// Robot left wheel forward
				wheel_left_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PIND,7)){
    19fa:	4f 9b       	sbis	0x09, 7	; 9
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <__vector_3+0x6e>
				wheel_left_tick_counter--;			// Robot left wheel forward
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	a1 09       	sbc	r26, r1
    1a02:	b1 09       	sbc	r27, r1
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <__vector_3+0x74>
			}
			else{
				wheel_left_tick_counter++;			// Robot left wheel reverse
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	80 93 9a 01 	sts	0x019A, r24
    1a10:	90 93 9b 01 	sts	0x019B, r25
    1a14:	a0 93 9c 01 	sts	0x019C, r26
    1a18:	b0 93 9d 01 	sts	0x019D, r27
			}
		}
		PINB0_past = PINB0_current;
    1a1c:	30 93 a7 01 	sts	0x01A7, r19
    1a20:	57 c0       	rjmp	.+174    	; 0x1ad0 <__vector_3+0x138>
		
	}
	else if(PINB4_current != PINB4_past){
    1a22:	80 91 a5 01 	lds	r24, 0x01A5
    1a26:	28 17       	cp	r18, r24
    1a28:	49 f1       	breq	.+82     	; 0x1a7c <__vector_3+0xe4>
		if(PINB4_current > PINB4_past){				// Positive edge trigger
    1a2a:	82 17       	cp	r24, r18
    1a2c:	58 f4       	brcc	.+22     	; 0x1a44 <__vector_3+0xac>
    1a2e:	80 91 9e 01 	lds	r24, 0x019E
    1a32:	90 91 9f 01 	lds	r25, 0x019F
    1a36:	a0 91 a0 01 	lds	r26, 0x01A0
    1a3a:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,5)){					// Robot right wheel forward
    1a3e:	1d 9b       	sbis	0x03, 5	; 3
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <__vector_3+0xc0>
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <__vector_3+0xc8>
    1a44:	80 91 9e 01 	lds	r24, 0x019E
    1a48:	90 91 9f 01 	lds	r25, 0x019F
    1a4c:	a0 91 a0 01 	lds	r26, 0x01A0
    1a50:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel reverse
				wheel_right_tick_counter--;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,5)){
    1a54:	1d 9b       	sbis	0x03, 5	; 3
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <__vector_3+0xc8>
				wheel_right_tick_counter--;			// Robot right wheel reverse
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	a1 09       	sbc	r26, r1
    1a5c:	b1 09       	sbc	r27, r1
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <__vector_3+0xce>
			}
			else{
				wheel_right_tick_counter++;			// Robot right wheel forward
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	a1 1d       	adc	r26, r1
    1a64:	b1 1d       	adc	r27, r1
    1a66:	80 93 9e 01 	sts	0x019E, r24
    1a6a:	90 93 9f 01 	sts	0x019F, r25
    1a6e:	a0 93 a0 01 	sts	0x01A0, r26
    1a72:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB4_past = PINB4_current;
    1a76:	20 93 a5 01 	sts	0x01A5, r18
    1a7a:	2a c0       	rjmp	.+84     	; 0x1ad0 <__vector_3+0x138>
		//rprintf("%d\n",wheel_right_tick_counter);
	}
	else{
		if(PINB5_current > PINB5_past){				// Positive edge trigger
    1a7c:	80 91 a3 01 	lds	r24, 0x01A3
    1a80:	84 17       	cp	r24, r20
    1a82:	58 f4       	brcc	.+22     	; 0x1a9a <__vector_3+0x102>
    1a84:	80 91 9e 01 	lds	r24, 0x019E
    1a88:	90 91 9f 01 	lds	r25, 0x019F
    1a8c:	a0 91 a0 01 	lds	r26, 0x01A0
    1a90:	b0 91 a1 01 	lds	r27, 0x01A1
			if(bit_is_set(PINB,4)){					// Robot right wheel reverse
    1a94:	1c 9b       	sbis	0x03, 4	; 3
    1a96:	0b c0       	rjmp	.+22     	; 0x1aae <__vector_3+0x116>
    1a98:	0e c0       	rjmp	.+28     	; 0x1ab6 <__vector_3+0x11e>
    1a9a:	80 91 9e 01 	lds	r24, 0x019E
    1a9e:	90 91 9f 01 	lds	r25, 0x019F
    1aa2:	a0 91 a0 01 	lds	r26, 0x01A0
    1aa6:	b0 91 a1 01 	lds	r27, 0x01A1
			else{									// Robot right wheel forward
				wheel_right_tick_counter++;
			}
		}
		else{										// Negative edge trigger
			if(bit_is_set(PINB,4)){
    1aaa:	1c 9b       	sbis	0x03, 4	; 3
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <__vector_3+0x11e>
				wheel_right_tick_counter++;			// Robot right wheel forward
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	a1 1d       	adc	r26, r1
    1ab2:	b1 1d       	adc	r27, r1
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <__vector_3+0x124>
			}
			else{
				wheel_right_tick_counter--;			// Robot right wheel reverse
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	a1 09       	sbc	r26, r1
    1aba:	b1 09       	sbc	r27, r1
    1abc:	80 93 9e 01 	sts	0x019E, r24
    1ac0:	90 93 9f 01 	sts	0x019F, r25
    1ac4:	a0 93 a0 01 	sts	0x01A0, r26
    1ac8:	b0 93 a1 01 	sts	0x01A1, r27
			}
		}
		PINB5_past = PINB5_current;
    1acc:	40 93 a3 01 	sts	0x01A3, r20
		//rprintf("%d\n",wheel_right_tick_counter);
	}
		
}
    1ad0:	bf 91       	pop	r27
    1ad2:	af 91       	pop	r26
    1ad4:	9f 91       	pop	r25
    1ad6:	8f 91       	pop	r24
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <__vector_default>:


ISR(BADISR_vect){
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
	
}
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	0f 90       	pop	r0
    1af8:	1f 90       	pop	r1
    1afa:	18 95       	reti

00001afc <exit>:
    1afc:	f8 94       	cli
    1afe:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <_exit>

00001b02 <__subsf3>:
    1b02:	50 58       	subi	r21, 0x80	; 128

00001b04 <__addsf3>:
    1b04:	bb 27       	eor	r27, r27
    1b06:	aa 27       	eor	r26, r26
    1b08:	0e d0       	rcall	.+28     	; 0x1b26 <__addsf3x>
    1b0a:	70 c1       	rjmp	.+736    	; 0x1dec <__fp_round>
    1b0c:	61 d1       	rcall	.+706    	; 0x1dd0 <__fp_pscA>
    1b0e:	30 f0       	brcs	.+12     	; 0x1b1c <__addsf3+0x18>
    1b10:	66 d1       	rcall	.+716    	; 0x1dde <__fp_pscB>
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__addsf3+0x18>
    1b14:	31 f4       	brne	.+12     	; 0x1b22 <__addsf3+0x1e>
    1b16:	9f 3f       	cpi	r25, 0xFF	; 255
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <__addsf3+0x1a>
    1b1a:	1e f4       	brtc	.+6      	; 0x1b22 <__addsf3+0x1e>
    1b1c:	56 c1       	rjmp	.+684    	; 0x1dca <__fp_nan>
    1b1e:	0e f4       	brtc	.+2      	; 0x1b22 <__addsf3+0x1e>
    1b20:	e0 95       	com	r30
    1b22:	e7 fb       	bst	r30, 7
    1b24:	4c c1       	rjmp	.+664    	; 0x1dbe <__fp_inf>

00001b26 <__addsf3x>:
    1b26:	e9 2f       	mov	r30, r25
    1b28:	72 d1       	rcall	.+740    	; 0x1e0e <__fp_split3>
    1b2a:	80 f3       	brcs	.-32     	; 0x1b0c <__addsf3+0x8>
    1b2c:	ba 17       	cp	r27, r26
    1b2e:	62 07       	cpc	r22, r18
    1b30:	73 07       	cpc	r23, r19
    1b32:	84 07       	cpc	r24, r20
    1b34:	95 07       	cpc	r25, r21
    1b36:	18 f0       	brcs	.+6      	; 0x1b3e <__addsf3x+0x18>
    1b38:	71 f4       	brne	.+28     	; 0x1b56 <__addsf3x+0x30>
    1b3a:	9e f5       	brtc	.+102    	; 0x1ba2 <__addsf3x+0x7c>
    1b3c:	8a c1       	rjmp	.+788    	; 0x1e52 <__fp_zero>
    1b3e:	0e f4       	brtc	.+2      	; 0x1b42 <__addsf3x+0x1c>
    1b40:	e0 95       	com	r30
    1b42:	0b 2e       	mov	r0, r27
    1b44:	ba 2f       	mov	r27, r26
    1b46:	a0 2d       	mov	r26, r0
    1b48:	0b 01       	movw	r0, r22
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	90 01       	movw	r18, r0
    1b4e:	0c 01       	movw	r0, r24
    1b50:	ca 01       	movw	r24, r20
    1b52:	a0 01       	movw	r20, r0
    1b54:	11 24       	eor	r1, r1
    1b56:	ff 27       	eor	r31, r31
    1b58:	59 1b       	sub	r21, r25
    1b5a:	99 f0       	breq	.+38     	; 0x1b82 <__addsf3x+0x5c>
    1b5c:	59 3f       	cpi	r21, 0xF9	; 249
    1b5e:	50 f4       	brcc	.+20     	; 0x1b74 <__addsf3x+0x4e>
    1b60:	50 3e       	cpi	r21, 0xE0	; 224
    1b62:	68 f1       	brcs	.+90     	; 0x1bbe <__addsf3x+0x98>
    1b64:	1a 16       	cp	r1, r26
    1b66:	f0 40       	sbci	r31, 0x00	; 0
    1b68:	a2 2f       	mov	r26, r18
    1b6a:	23 2f       	mov	r18, r19
    1b6c:	34 2f       	mov	r19, r20
    1b6e:	44 27       	eor	r20, r20
    1b70:	58 5f       	subi	r21, 0xF8	; 248
    1b72:	f3 cf       	rjmp	.-26     	; 0x1b5a <__addsf3x+0x34>
    1b74:	46 95       	lsr	r20
    1b76:	37 95       	ror	r19
    1b78:	27 95       	ror	r18
    1b7a:	a7 95       	ror	r26
    1b7c:	f0 40       	sbci	r31, 0x00	; 0
    1b7e:	53 95       	inc	r21
    1b80:	c9 f7       	brne	.-14     	; 0x1b74 <__addsf3x+0x4e>
    1b82:	7e f4       	brtc	.+30     	; 0x1ba2 <__addsf3x+0x7c>
    1b84:	1f 16       	cp	r1, r31
    1b86:	ba 0b       	sbc	r27, r26
    1b88:	62 0b       	sbc	r22, r18
    1b8a:	73 0b       	sbc	r23, r19
    1b8c:	84 0b       	sbc	r24, r20
    1b8e:	ba f0       	brmi	.+46     	; 0x1bbe <__addsf3x+0x98>
    1b90:	91 50       	subi	r25, 0x01	; 1
    1b92:	a1 f0       	breq	.+40     	; 0x1bbc <__addsf3x+0x96>
    1b94:	ff 0f       	add	r31, r31
    1b96:	bb 1f       	adc	r27, r27
    1b98:	66 1f       	adc	r22, r22
    1b9a:	77 1f       	adc	r23, r23
    1b9c:	88 1f       	adc	r24, r24
    1b9e:	c2 f7       	brpl	.-16     	; 0x1b90 <__addsf3x+0x6a>
    1ba0:	0e c0       	rjmp	.+28     	; 0x1bbe <__addsf3x+0x98>
    1ba2:	ba 0f       	add	r27, r26
    1ba4:	62 1f       	adc	r22, r18
    1ba6:	73 1f       	adc	r23, r19
    1ba8:	84 1f       	adc	r24, r20
    1baa:	48 f4       	brcc	.+18     	; 0x1bbe <__addsf3x+0x98>
    1bac:	87 95       	ror	r24
    1bae:	77 95       	ror	r23
    1bb0:	67 95       	ror	r22
    1bb2:	b7 95       	ror	r27
    1bb4:	f7 95       	ror	r31
    1bb6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <__addsf3x+0x96>
    1bba:	b3 cf       	rjmp	.-154    	; 0x1b22 <__addsf3+0x1e>
    1bbc:	93 95       	inc	r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <__addsf3x+0x9e>
    1bc2:	99 27       	eor	r25, r25
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	97 95       	ror	r25
    1bc8:	87 95       	ror	r24
    1bca:	08 95       	ret

00001bcc <__cmpsf2>:
    1bcc:	d4 d0       	rcall	.+424    	; 0x1d76 <__fp_cmp>
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <__cmpsf2+0x6>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	08 95       	ret

00001bd4 <__divsf3>:
    1bd4:	0c d0       	rcall	.+24     	; 0x1bee <__divsf3x>
    1bd6:	0a c1       	rjmp	.+532    	; 0x1dec <__fp_round>
    1bd8:	02 d1       	rcall	.+516    	; 0x1dde <__fp_pscB>
    1bda:	40 f0       	brcs	.+16     	; 0x1bec <__divsf3+0x18>
    1bdc:	f9 d0       	rcall	.+498    	; 0x1dd0 <__fp_pscA>
    1bde:	30 f0       	brcs	.+12     	; 0x1bec <__divsf3+0x18>
    1be0:	21 f4       	brne	.+8      	; 0x1bea <__divsf3+0x16>
    1be2:	5f 3f       	cpi	r21, 0xFF	; 255
    1be4:	19 f0       	breq	.+6      	; 0x1bec <__divsf3+0x18>
    1be6:	eb c0       	rjmp	.+470    	; 0x1dbe <__fp_inf>
    1be8:	51 11       	cpse	r21, r1
    1bea:	34 c1       	rjmp	.+616    	; 0x1e54 <__fp_szero>
    1bec:	ee c0       	rjmp	.+476    	; 0x1dca <__fp_nan>

00001bee <__divsf3x>:
    1bee:	0f d1       	rcall	.+542    	; 0x1e0e <__fp_split3>
    1bf0:	98 f3       	brcs	.-26     	; 0x1bd8 <__divsf3+0x4>

00001bf2 <__divsf3_pse>:
    1bf2:	99 23       	and	r25, r25
    1bf4:	c9 f3       	breq	.-14     	; 0x1be8 <__divsf3+0x14>
    1bf6:	55 23       	and	r21, r21
    1bf8:	b1 f3       	breq	.-20     	; 0x1be6 <__divsf3+0x12>
    1bfa:	95 1b       	sub	r25, r21
    1bfc:	55 0b       	sbc	r21, r21
    1bfe:	bb 27       	eor	r27, r27
    1c00:	aa 27       	eor	r26, r26
    1c02:	62 17       	cp	r22, r18
    1c04:	73 07       	cpc	r23, r19
    1c06:	84 07       	cpc	r24, r20
    1c08:	38 f0       	brcs	.+14     	; 0x1c18 <__divsf3_pse+0x26>
    1c0a:	9f 5f       	subi	r25, 0xFF	; 255
    1c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	44 1f       	adc	r20, r20
    1c14:	aa 1f       	adc	r26, r26
    1c16:	a9 f3       	breq	.-22     	; 0x1c02 <__divsf3_pse+0x10>
    1c18:	33 d0       	rcall	.+102    	; 0x1c80 <__divsf3_pse+0x8e>
    1c1a:	0e 2e       	mov	r0, r30
    1c1c:	3a f0       	brmi	.+14     	; 0x1c2c <__divsf3_pse+0x3a>
    1c1e:	e0 e8       	ldi	r30, 0x80	; 128
    1c20:	30 d0       	rcall	.+96     	; 0x1c82 <__divsf3_pse+0x90>
    1c22:	91 50       	subi	r25, 0x01	; 1
    1c24:	50 40       	sbci	r21, 0x00	; 0
    1c26:	e6 95       	lsr	r30
    1c28:	00 1c       	adc	r0, r0
    1c2a:	ca f7       	brpl	.-14     	; 0x1c1e <__divsf3_pse+0x2c>
    1c2c:	29 d0       	rcall	.+82     	; 0x1c80 <__divsf3_pse+0x8e>
    1c2e:	fe 2f       	mov	r31, r30
    1c30:	27 d0       	rcall	.+78     	; 0x1c80 <__divsf3_pse+0x8e>
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	26 17       	cp	r18, r22
    1c3c:	37 07       	cpc	r19, r23
    1c3e:	48 07       	cpc	r20, r24
    1c40:	ab 07       	cpc	r26, r27
    1c42:	b0 e8       	ldi	r27, 0x80	; 128
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <__divsf3_pse+0x56>
    1c46:	bb 0b       	sbc	r27, r27
    1c48:	80 2d       	mov	r24, r0
    1c4a:	bf 01       	movw	r22, r30
    1c4c:	ff 27       	eor	r31, r31
    1c4e:	93 58       	subi	r25, 0x83	; 131
    1c50:	5f 4f       	sbci	r21, 0xFF	; 255
    1c52:	2a f0       	brmi	.+10     	; 0x1c5e <__divsf3_pse+0x6c>
    1c54:	9e 3f       	cpi	r25, 0xFE	; 254
    1c56:	51 05       	cpc	r21, r1
    1c58:	68 f0       	brcs	.+26     	; 0x1c74 <__divsf3_pse+0x82>
    1c5a:	b1 c0       	rjmp	.+354    	; 0x1dbe <__fp_inf>
    1c5c:	fb c0       	rjmp	.+502    	; 0x1e54 <__fp_szero>
    1c5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c60:	ec f3       	brlt	.-6      	; 0x1c5c <__divsf3_pse+0x6a>
    1c62:	98 3e       	cpi	r25, 0xE8	; 232
    1c64:	dc f3       	brlt	.-10     	; 0x1c5c <__divsf3_pse+0x6a>
    1c66:	86 95       	lsr	r24
    1c68:	77 95       	ror	r23
    1c6a:	67 95       	ror	r22
    1c6c:	b7 95       	ror	r27
    1c6e:	f7 95       	ror	r31
    1c70:	9f 5f       	subi	r25, 0xFF	; 255
    1c72:	c9 f7       	brne	.-14     	; 0x1c66 <__divsf3_pse+0x74>
    1c74:	88 0f       	add	r24, r24
    1c76:	91 1d       	adc	r25, r1
    1c78:	96 95       	lsr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	97 f9       	bld	r25, 7
    1c7e:	08 95       	ret
    1c80:	e1 e0       	ldi	r30, 0x01	; 1
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	bb 1f       	adc	r27, r27
    1c8a:	62 17       	cp	r22, r18
    1c8c:	73 07       	cpc	r23, r19
    1c8e:	84 07       	cpc	r24, r20
    1c90:	ba 07       	cpc	r27, r26
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__divsf3_pse+0xaa>
    1c94:	62 1b       	sub	r22, r18
    1c96:	73 0b       	sbc	r23, r19
    1c98:	84 0b       	sbc	r24, r20
    1c9a:	ba 0b       	sbc	r27, r26
    1c9c:	ee 1f       	adc	r30, r30
    1c9e:	88 f7       	brcc	.-30     	; 0x1c82 <__divsf3_pse+0x90>
    1ca0:	e0 95       	com	r30
    1ca2:	08 95       	ret

00001ca4 <__fixunssfsi>:
    1ca4:	bc d0       	rcall	.+376    	; 0x1e1e <__fp_splitA>
    1ca6:	88 f0       	brcs	.+34     	; 0x1cca <__fixunssfsi+0x26>
    1ca8:	9f 57       	subi	r25, 0x7F	; 127
    1caa:	90 f0       	brcs	.+36     	; 0x1cd0 <__fixunssfsi+0x2c>
    1cac:	b9 2f       	mov	r27, r25
    1cae:	99 27       	eor	r25, r25
    1cb0:	b7 51       	subi	r27, 0x17	; 23
    1cb2:	a0 f0       	brcs	.+40     	; 0x1cdc <__fixunssfsi+0x38>
    1cb4:	d1 f0       	breq	.+52     	; 0x1cea <__fixunssfsi+0x46>
    1cb6:	66 0f       	add	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	1a f0       	brmi	.+6      	; 0x1cc6 <__fixunssfsi+0x22>
    1cc0:	ba 95       	dec	r27
    1cc2:	c9 f7       	brne	.-14     	; 0x1cb6 <__fixunssfsi+0x12>
    1cc4:	12 c0       	rjmp	.+36     	; 0x1cea <__fixunssfsi+0x46>
    1cc6:	b1 30       	cpi	r27, 0x01	; 1
    1cc8:	81 f0       	breq	.+32     	; 0x1cea <__fixunssfsi+0x46>
    1cca:	c3 d0       	rcall	.+390    	; 0x1e52 <__fp_zero>
    1ccc:	b1 e0       	ldi	r27, 0x01	; 1
    1cce:	08 95       	ret
    1cd0:	c0 c0       	rjmp	.+384    	; 0x1e52 <__fp_zero>
    1cd2:	67 2f       	mov	r22, r23
    1cd4:	78 2f       	mov	r23, r24
    1cd6:	88 27       	eor	r24, r24
    1cd8:	b8 5f       	subi	r27, 0xF8	; 248
    1cda:	39 f0       	breq	.+14     	; 0x1cea <__fixunssfsi+0x46>
    1cdc:	b9 3f       	cpi	r27, 0xF9	; 249
    1cde:	cc f3       	brlt	.-14     	; 0x1cd2 <__fixunssfsi+0x2e>
    1ce0:	86 95       	lsr	r24
    1ce2:	77 95       	ror	r23
    1ce4:	67 95       	ror	r22
    1ce6:	b3 95       	inc	r27
    1ce8:	d9 f7       	brne	.-10     	; 0x1ce0 <__fixunssfsi+0x3c>
    1cea:	3e f4       	brtc	.+14     	; 0x1cfa <__fixunssfsi+0x56>
    1cec:	90 95       	com	r25
    1cee:	80 95       	com	r24
    1cf0:	70 95       	com	r23
    1cf2:	61 95       	neg	r22
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	08 95       	ret

00001cfc <__floatunsisf>:
    1cfc:	e8 94       	clt
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <__floatsisf+0x12>

00001d00 <__floatsisf>:
    1d00:	97 fb       	bst	r25, 7
    1d02:	3e f4       	brtc	.+14     	; 0x1d12 <__floatsisf+0x12>
    1d04:	90 95       	com	r25
    1d06:	80 95       	com	r24
    1d08:	70 95       	com	r23
    1d0a:	61 95       	neg	r22
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	99 23       	and	r25, r25
    1d14:	a9 f0       	breq	.+42     	; 0x1d40 <__floatsisf+0x40>
    1d16:	f9 2f       	mov	r31, r25
    1d18:	96 e9       	ldi	r25, 0x96	; 150
    1d1a:	bb 27       	eor	r27, r27
    1d1c:	93 95       	inc	r25
    1d1e:	f6 95       	lsr	r31
    1d20:	87 95       	ror	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	b7 95       	ror	r27
    1d28:	f1 11       	cpse	r31, r1
    1d2a:	f8 cf       	rjmp	.-16     	; 0x1d1c <__floatsisf+0x1c>
    1d2c:	fa f4       	brpl	.+62     	; 0x1d6c <__floatsisf+0x6c>
    1d2e:	bb 0f       	add	r27, r27
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <__floatsisf+0x36>
    1d32:	60 ff       	sbrs	r22, 0
    1d34:	1b c0       	rjmp	.+54     	; 0x1d6c <__floatsisf+0x6c>
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	16 c0       	rjmp	.+44     	; 0x1d6c <__floatsisf+0x6c>
    1d40:	88 23       	and	r24, r24
    1d42:	11 f0       	breq	.+4      	; 0x1d48 <__floatsisf+0x48>
    1d44:	96 e9       	ldi	r25, 0x96	; 150
    1d46:	11 c0       	rjmp	.+34     	; 0x1d6a <__floatsisf+0x6a>
    1d48:	77 23       	and	r23, r23
    1d4a:	21 f0       	breq	.+8      	; 0x1d54 <__floatsisf+0x54>
    1d4c:	9e e8       	ldi	r25, 0x8E	; 142
    1d4e:	87 2f       	mov	r24, r23
    1d50:	76 2f       	mov	r23, r22
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <__floatsisf+0x5e>
    1d54:	66 23       	and	r22, r22
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <__floatsisf+0x74>
    1d58:	96 e8       	ldi	r25, 0x86	; 134
    1d5a:	86 2f       	mov	r24, r22
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	2a f0       	brmi	.+10     	; 0x1d6c <__floatsisf+0x6c>
    1d62:	9a 95       	dec	r25
    1d64:	66 0f       	add	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	88 1f       	adc	r24, r24
    1d6a:	da f7       	brpl	.-10     	; 0x1d62 <__floatsisf+0x62>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	96 95       	lsr	r25
    1d70:	87 95       	ror	r24
    1d72:	97 f9       	bld	r25, 7
    1d74:	08 95       	ret

00001d76 <__fp_cmp>:
    1d76:	99 0f       	add	r25, r25
    1d78:	00 08       	sbc	r0, r0
    1d7a:	55 0f       	add	r21, r21
    1d7c:	aa 0b       	sbc	r26, r26
    1d7e:	e0 e8       	ldi	r30, 0x80	; 128
    1d80:	fe ef       	ldi	r31, 0xFE	; 254
    1d82:	16 16       	cp	r1, r22
    1d84:	17 06       	cpc	r1, r23
    1d86:	e8 07       	cpc	r30, r24
    1d88:	f9 07       	cpc	r31, r25
    1d8a:	c0 f0       	brcs	.+48     	; 0x1dbc <__fp_cmp+0x46>
    1d8c:	12 16       	cp	r1, r18
    1d8e:	13 06       	cpc	r1, r19
    1d90:	e4 07       	cpc	r30, r20
    1d92:	f5 07       	cpc	r31, r21
    1d94:	98 f0       	brcs	.+38     	; 0x1dbc <__fp_cmp+0x46>
    1d96:	62 1b       	sub	r22, r18
    1d98:	73 0b       	sbc	r23, r19
    1d9a:	84 0b       	sbc	r24, r20
    1d9c:	95 0b       	sbc	r25, r21
    1d9e:	39 f4       	brne	.+14     	; 0x1dae <__fp_cmp+0x38>
    1da0:	0a 26       	eor	r0, r26
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <__fp_cmp+0x46>
    1da4:	23 2b       	or	r18, r19
    1da6:	24 2b       	or	r18, r20
    1da8:	25 2b       	or	r18, r21
    1daa:	21 f4       	brne	.+8      	; 0x1db4 <__fp_cmp+0x3e>
    1dac:	08 95       	ret
    1dae:	0a 26       	eor	r0, r26
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <__fp_cmp+0x3e>
    1db2:	a1 40       	sbci	r26, 0x01	; 1
    1db4:	a6 95       	lsr	r26
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	81 1d       	adc	r24, r1
    1dba:	81 1d       	adc	r24, r1
    1dbc:	08 95       	ret

00001dbe <__fp_inf>:
    1dbe:	97 f9       	bld	r25, 7
    1dc0:	9f 67       	ori	r25, 0x7F	; 127
    1dc2:	80 e8       	ldi	r24, 0x80	; 128
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	08 95       	ret

00001dca <__fp_nan>:
    1dca:	9f ef       	ldi	r25, 0xFF	; 255
    1dcc:	80 ec       	ldi	r24, 0xC0	; 192
    1dce:	08 95       	ret

00001dd0 <__fp_pscA>:
    1dd0:	00 24       	eor	r0, r0
    1dd2:	0a 94       	dec	r0
    1dd4:	16 16       	cp	r1, r22
    1dd6:	17 06       	cpc	r1, r23
    1dd8:	18 06       	cpc	r1, r24
    1dda:	09 06       	cpc	r0, r25
    1ddc:	08 95       	ret

00001dde <__fp_pscB>:
    1dde:	00 24       	eor	r0, r0
    1de0:	0a 94       	dec	r0
    1de2:	12 16       	cp	r1, r18
    1de4:	13 06       	cpc	r1, r19
    1de6:	14 06       	cpc	r1, r20
    1de8:	05 06       	cpc	r0, r21
    1dea:	08 95       	ret

00001dec <__fp_round>:
    1dec:	09 2e       	mov	r0, r25
    1dee:	03 94       	inc	r0
    1df0:	00 0c       	add	r0, r0
    1df2:	11 f4       	brne	.+4      	; 0x1df8 <__fp_round+0xc>
    1df4:	88 23       	and	r24, r24
    1df6:	52 f0       	brmi	.+20     	; 0x1e0c <__fp_round+0x20>
    1df8:	bb 0f       	add	r27, r27
    1dfa:	40 f4       	brcc	.+16     	; 0x1e0c <__fp_round+0x20>
    1dfc:	bf 2b       	or	r27, r31
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <__fp_round+0x18>
    1e00:	60 ff       	sbrs	r22, 0
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <__fp_round+0x20>
    1e04:	6f 5f       	subi	r22, 0xFF	; 255
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__fp_split3>:
    1e0e:	57 fd       	sbrc	r21, 7
    1e10:	90 58       	subi	r25, 0x80	; 128
    1e12:	44 0f       	add	r20, r20
    1e14:	55 1f       	adc	r21, r21
    1e16:	59 f0       	breq	.+22     	; 0x1e2e <__fp_splitA+0x10>
    1e18:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1a:	71 f0       	breq	.+28     	; 0x1e38 <__fp_splitA+0x1a>
    1e1c:	47 95       	ror	r20

00001e1e <__fp_splitA>:
    1e1e:	88 0f       	add	r24, r24
    1e20:	97 fb       	bst	r25, 7
    1e22:	99 1f       	adc	r25, r25
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <__fp_splitA+0x20>
    1e26:	9f 3f       	cpi	r25, 0xFF	; 255
    1e28:	79 f0       	breq	.+30     	; 0x1e48 <__fp_splitA+0x2a>
    1e2a:	87 95       	ror	r24
    1e2c:	08 95       	ret
    1e2e:	12 16       	cp	r1, r18
    1e30:	13 06       	cpc	r1, r19
    1e32:	14 06       	cpc	r1, r20
    1e34:	55 1f       	adc	r21, r21
    1e36:	f2 cf       	rjmp	.-28     	; 0x1e1c <__fp_split3+0xe>
    1e38:	46 95       	lsr	r20
    1e3a:	f1 df       	rcall	.-30     	; 0x1e1e <__fp_splitA>
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <__fp_splitA+0x30>
    1e3e:	16 16       	cp	r1, r22
    1e40:	17 06       	cpc	r1, r23
    1e42:	18 06       	cpc	r1, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	f1 cf       	rjmp	.-30     	; 0x1e2a <__fp_splitA+0xc>
    1e48:	86 95       	lsr	r24
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	61 05       	cpc	r22, r1
    1e4e:	08 94       	sec
    1e50:	08 95       	ret

00001e52 <__fp_zero>:
    1e52:	e8 94       	clt

00001e54 <__fp_szero>:
    1e54:	bb 27       	eor	r27, r27
    1e56:	66 27       	eor	r22, r22
    1e58:	77 27       	eor	r23, r23
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	97 f9       	bld	r25, 7
    1e5e:	08 95       	ret

00001e60 <__gesf2>:
    1e60:	8a df       	rcall	.-236    	; 0x1d76 <__fp_cmp>
    1e62:	08 f4       	brcc	.+2      	; 0x1e66 <__gesf2+0x6>
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	08 95       	ret

00001e68 <__mulsf3>:
    1e68:	0b d0       	rcall	.+22     	; 0x1e80 <__mulsf3x>
    1e6a:	c0 cf       	rjmp	.-128    	; 0x1dec <__fp_round>
    1e6c:	b1 df       	rcall	.-158    	; 0x1dd0 <__fp_pscA>
    1e6e:	28 f0       	brcs	.+10     	; 0x1e7a <__mulsf3+0x12>
    1e70:	b6 df       	rcall	.-148    	; 0x1dde <__fp_pscB>
    1e72:	18 f0       	brcs	.+6      	; 0x1e7a <__mulsf3+0x12>
    1e74:	95 23       	and	r25, r21
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <__mulsf3+0x12>
    1e78:	a2 cf       	rjmp	.-188    	; 0x1dbe <__fp_inf>
    1e7a:	a7 cf       	rjmp	.-178    	; 0x1dca <__fp_nan>
    1e7c:	11 24       	eor	r1, r1
    1e7e:	ea cf       	rjmp	.-44     	; 0x1e54 <__fp_szero>

00001e80 <__mulsf3x>:
    1e80:	c6 df       	rcall	.-116    	; 0x1e0e <__fp_split3>
    1e82:	a0 f3       	brcs	.-24     	; 0x1e6c <__mulsf3+0x4>

00001e84 <__mulsf3_pse>:
    1e84:	95 9f       	mul	r25, r21
    1e86:	d1 f3       	breq	.-12     	; 0x1e7c <__mulsf3+0x14>
    1e88:	95 0f       	add	r25, r21
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	55 1f       	adc	r21, r21
    1e8e:	62 9f       	mul	r22, r18
    1e90:	f0 01       	movw	r30, r0
    1e92:	72 9f       	mul	r23, r18
    1e94:	bb 27       	eor	r27, r27
    1e96:	f0 0d       	add	r31, r0
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	63 9f       	mul	r22, r19
    1e9c:	aa 27       	eor	r26, r26
    1e9e:	f0 0d       	add	r31, r0
    1ea0:	b1 1d       	adc	r27, r1
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	64 9f       	mul	r22, r20
    1ea6:	66 27       	eor	r22, r22
    1ea8:	b0 0d       	add	r27, r0
    1eaa:	a1 1d       	adc	r26, r1
    1eac:	66 1f       	adc	r22, r22
    1eae:	82 9f       	mul	r24, r18
    1eb0:	22 27       	eor	r18, r18
    1eb2:	b0 0d       	add	r27, r0
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	62 1f       	adc	r22, r18
    1eb8:	73 9f       	mul	r23, r19
    1eba:	b0 0d       	add	r27, r0
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	62 1f       	adc	r22, r18
    1ec0:	83 9f       	mul	r24, r19
    1ec2:	a0 0d       	add	r26, r0
    1ec4:	61 1d       	adc	r22, r1
    1ec6:	22 1f       	adc	r18, r18
    1ec8:	74 9f       	mul	r23, r20
    1eca:	33 27       	eor	r19, r19
    1ecc:	a0 0d       	add	r26, r0
    1ece:	61 1d       	adc	r22, r1
    1ed0:	23 1f       	adc	r18, r19
    1ed2:	84 9f       	mul	r24, r20
    1ed4:	60 0d       	add	r22, r0
    1ed6:	21 1d       	adc	r18, r1
    1ed8:	82 2f       	mov	r24, r18
    1eda:	76 2f       	mov	r23, r22
    1edc:	6a 2f       	mov	r22, r26
    1ede:	11 24       	eor	r1, r1
    1ee0:	9f 57       	subi	r25, 0x7F	; 127
    1ee2:	50 40       	sbci	r21, 0x00	; 0
    1ee4:	8a f0       	brmi	.+34     	; 0x1f08 <__mulsf3_pse+0x84>
    1ee6:	e1 f0       	breq	.+56     	; 0x1f20 <__mulsf3_pse+0x9c>
    1ee8:	88 23       	and	r24, r24
    1eea:	4a f0       	brmi	.+18     	; 0x1efe <__mulsf3_pse+0x7a>
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	66 1f       	adc	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	91 50       	subi	r25, 0x01	; 1
    1efa:	50 40       	sbci	r21, 0x00	; 0
    1efc:	a9 f7       	brne	.-22     	; 0x1ee8 <__mulsf3_pse+0x64>
    1efe:	9e 3f       	cpi	r25, 0xFE	; 254
    1f00:	51 05       	cpc	r21, r1
    1f02:	70 f0       	brcs	.+28     	; 0x1f20 <__mulsf3_pse+0x9c>
    1f04:	5c cf       	rjmp	.-328    	; 0x1dbe <__fp_inf>
    1f06:	a6 cf       	rjmp	.-180    	; 0x1e54 <__fp_szero>
    1f08:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0a:	ec f3       	brlt	.-6      	; 0x1f06 <__mulsf3_pse+0x82>
    1f0c:	98 3e       	cpi	r25, 0xE8	; 232
    1f0e:	dc f3       	brlt	.-10     	; 0x1f06 <__mulsf3_pse+0x82>
    1f10:	86 95       	lsr	r24
    1f12:	77 95       	ror	r23
    1f14:	67 95       	ror	r22
    1f16:	b7 95       	ror	r27
    1f18:	f7 95       	ror	r31
    1f1a:	e7 95       	ror	r30
    1f1c:	9f 5f       	subi	r25, 0xFF	; 255
    1f1e:	c1 f7       	brne	.-16     	; 0x1f10 <__mulsf3_pse+0x8c>
    1f20:	fe 2b       	or	r31, r30
    1f22:	88 0f       	add	r24, r24
    1f24:	91 1d       	adc	r25, r1
    1f26:	96 95       	lsr	r25
    1f28:	87 95       	ror	r24
    1f2a:	97 f9       	bld	r25, 7
    1f2c:	08 95       	ret

00001f2e <__mulsi3>:
    1f2e:	62 9f       	mul	r22, r18
    1f30:	d0 01       	movw	r26, r0
    1f32:	73 9f       	mul	r23, r19
    1f34:	f0 01       	movw	r30, r0
    1f36:	82 9f       	mul	r24, r18
    1f38:	e0 0d       	add	r30, r0
    1f3a:	f1 1d       	adc	r31, r1
    1f3c:	64 9f       	mul	r22, r20
    1f3e:	e0 0d       	add	r30, r0
    1f40:	f1 1d       	adc	r31, r1
    1f42:	92 9f       	mul	r25, r18
    1f44:	f0 0d       	add	r31, r0
    1f46:	83 9f       	mul	r24, r19
    1f48:	f0 0d       	add	r31, r0
    1f4a:	74 9f       	mul	r23, r20
    1f4c:	f0 0d       	add	r31, r0
    1f4e:	65 9f       	mul	r22, r21
    1f50:	f0 0d       	add	r31, r0
    1f52:	99 27       	eor	r25, r25
    1f54:	72 9f       	mul	r23, r18
    1f56:	b0 0d       	add	r27, r0
    1f58:	e1 1d       	adc	r30, r1
    1f5a:	f9 1f       	adc	r31, r25
    1f5c:	63 9f       	mul	r22, r19
    1f5e:	b0 0d       	add	r27, r0
    1f60:	e1 1d       	adc	r30, r1
    1f62:	f9 1f       	adc	r31, r25
    1f64:	bd 01       	movw	r22, r26
    1f66:	cf 01       	movw	r24, r30
    1f68:	11 24       	eor	r1, r1
    1f6a:	08 95       	ret

00001f6c <__udivmodhi4>:
    1f6c:	aa 1b       	sub	r26, r26
    1f6e:	bb 1b       	sub	r27, r27
    1f70:	51 e1       	ldi	r21, 0x11	; 17
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <__udivmodhi4_ep>

00001f74 <__udivmodhi4_loop>:
    1f74:	aa 1f       	adc	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	a6 17       	cp	r26, r22
    1f7a:	b7 07       	cpc	r27, r23
    1f7c:	10 f0       	brcs	.+4      	; 0x1f82 <__udivmodhi4_ep>
    1f7e:	a6 1b       	sub	r26, r22
    1f80:	b7 0b       	sbc	r27, r23

00001f82 <__udivmodhi4_ep>:
    1f82:	88 1f       	adc	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	5a 95       	dec	r21
    1f88:	a9 f7       	brne	.-22     	; 0x1f74 <__udivmodhi4_loop>
    1f8a:	80 95       	com	r24
    1f8c:	90 95       	com	r25
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	08 95       	ret

00001f94 <__udivmodsi4>:
    1f94:	a1 e2       	ldi	r26, 0x21	; 33
    1f96:	1a 2e       	mov	r1, r26
    1f98:	aa 1b       	sub	r26, r26
    1f9a:	bb 1b       	sub	r27, r27
    1f9c:	fd 01       	movw	r30, r26
    1f9e:	0d c0       	rjmp	.+26     	; 0x1fba <__udivmodsi4_ep>

00001fa0 <__udivmodsi4_loop>:
    1fa0:	aa 1f       	adc	r26, r26
    1fa2:	bb 1f       	adc	r27, r27
    1fa4:	ee 1f       	adc	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	a2 17       	cp	r26, r18
    1faa:	b3 07       	cpc	r27, r19
    1fac:	e4 07       	cpc	r30, r20
    1fae:	f5 07       	cpc	r31, r21
    1fb0:	20 f0       	brcs	.+8      	; 0x1fba <__udivmodsi4_ep>
    1fb2:	a2 1b       	sub	r26, r18
    1fb4:	b3 0b       	sbc	r27, r19
    1fb6:	e4 0b       	sbc	r30, r20
    1fb8:	f5 0b       	sbc	r31, r21

00001fba <__udivmodsi4_ep>:
    1fba:	66 1f       	adc	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	1a 94       	dec	r1
    1fc4:	69 f7       	brne	.-38     	; 0x1fa0 <__udivmodsi4_loop>
    1fc6:	60 95       	com	r22
    1fc8:	70 95       	com	r23
    1fca:	80 95       	com	r24
    1fcc:	90 95       	com	r25
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	bd 01       	movw	r22, r26
    1fd4:	cf 01       	movw	r24, r30
    1fd6:	08 95       	ret

00001fd8 <_exit>:
    1fd8:	f8 94       	cli

00001fda <__stop_program>:
    1fda:	ff cf       	rjmp	.-2      	; 0x1fda <__stop_program>

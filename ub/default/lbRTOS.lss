
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  000041fa  0000428e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000445  00800292  00800292  00004320  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001216  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003797  00000000  00000000  00005636  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ede  00000000  00000000  00008dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c9a  00000000  00000000  00009cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000df0  00000000  00000000  0000c948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000168c  00000000  00000000  0000d738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a34  00000000  00000000  0000edc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000107f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__ctors_end>
       4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      14:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      20:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      24:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      34:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_13>
      38:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_14>
      3c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_15>
      40:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__vector_16>
      44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      48:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_18>
      4c:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_19>
      50:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_20>
      54:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_21>
      58:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_22>
      5c:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_23>
      60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      64:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_25>
      68:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      6c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_27>
      70:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      74:	0c 94 17 14 	jmp	0x282e	; 0x282e <__vector_29>
      78:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      7c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_31>
      80:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__vector_32>
      84:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_33>
      88:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_34>
      8c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_35>
      90:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_36>
      94:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      98:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_38>
      9c:	0c 94 35 18 	jmp	0x306a	; 0x306a <__vector_39>
      a0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      a4:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__vector_41>
      a8:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__vector_42>
      ac:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_43>
      b0:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_44>
      b4:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_45>
      b8:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__vector_46>
      bc:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_47>
      c0:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_48>
      c4:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__vector_49>
      c8:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_50>
      cc:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__vector_51>
      d0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      d4:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__vector_53>
      d8:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__vector_54>
      dc:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      e0:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__vector_56>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <navupdate+0x6e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__c.2866>:
     166:	53 54 41 52 54 21 21 21 21 21 21 21 21 21 21 21     START!!!!!!!!!!!
     176:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
     186:	21 0a 00                                            !..

00000189 <__c.2849>:
     189:	53 74 61 72 74 69 6e 67 20 70 72 6f 67 72 61 6d     Starting program
     199:	2e 0a 00                                            ...

0000019c <__c.2818>:
     19c:	35 30 30 2c 20 00                                   500, .

000001a2 <__c.2816>:
     1a2:	34 30 30 2c 20 00                                   400, .

000001a8 <__c.2772>:
     1a8:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     1b8:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

000001c3 <__c.2767>:
     1c3:	2e 00                                               ..

000001c5 <__c.2765>:
     1c5:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     1d5:	55 70 00                                            Up.

000001d8 <TimerPrescaleFactor>:
     1d8:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

000001e4 <Timer2PrescaleFactor>:
     1e4:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

000001f4 <__c.1991>:
     1f4:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

00000205 <HexChars>:
     205:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000216 <__c.1708>:
     216:	25 64 20 00                                         %d .

0000021a <__c.1705>:
     21a:	20 44 69 73 74 61 6e 63 65 73 3a 20 00               Distances: .

00000227 <__c.1703>:
     227:	20 4d 6f 74 6f 72 20 53 70 65 65 64 3a 20 00         Motor Speed: .

00000236 <__c.1701>:
     236:	49 6e 64 65 78 3a 20 00                             Index: .

0000023e <__ctors_end>:
     23e:	11 24       	eor	r1, r1
     240:	1f be       	out	0x3f, r1	; 63
     242:	cf ef       	ldi	r28, 0xFF	; 255
     244:	d1 e2       	ldi	r29, 0x21	; 33
     246:	de bf       	out	0x3e, r29	; 62
     248:	cd bf       	out	0x3d, r28	; 61

0000024a <__do_copy_data>:
     24a:	12 e0       	ldi	r17, 0x02	; 2
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b2 e0       	ldi	r27, 0x02	; 2
     250:	ea ef       	ldi	r30, 0xFA	; 250
     252:	f1 e4       	ldi	r31, 0x41	; 65
     254:	02 c0       	rjmp	.+4      	; 0x25a <.do_copy_data_start>

00000256 <.do_copy_data_loop>:
     256:	05 90       	lpm	r0, Z+
     258:	0d 92       	st	X+, r0

0000025a <.do_copy_data_start>:
     25a:	a2 39       	cpi	r26, 0x92	; 146
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <.do_copy_data_loop>

00000260 <__do_clear_bss>:
     260:	16 e0       	ldi	r17, 0x06	; 6
     262:	a2 e9       	ldi	r26, 0x92	; 146
     264:	b2 e0       	ldi	r27, 0x02	; 2
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	a7 3d       	cpi	r26, 0xD7	; 215
     26c:	b1 07       	cpc	r27, r17
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	0e 94 a8 07 	call	0xf50	; 0xf50 <main>
     274:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <exit>

00000278 <__bad_interrupt>:
     278:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_default>

0000027c <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     27c:	89 30       	cpi	r24, 0x09	; 9
     27e:	49 f4       	brne	.+18     	; 0x292 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     280:	80 91 80 00 	lds	r24, 0x0080
     284:	82 60       	ori	r24, 0x02	; 2
     286:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     28a:	80 91 80 00 	lds	r24, 0x0080
     28e:	8e 7f       	andi	r24, 0xFE	; 254
     290:	0e c0       	rjmp	.+28     	; 0x2ae <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     292:	8a 30       	cpi	r24, 0x0A	; 10
     294:	21 f4       	brne	.+8      	; 0x29e <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     296:	80 91 80 00 	lds	r24, 0x0080
     29a:	82 60       	ori	r24, 0x02	; 2
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     29e:	80 91 80 00 	lds	r24, 0x0080
     2a2:	8d 7f       	andi	r24, 0xFD	; 253
     2a4:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     2a8:	80 91 80 00 	lds	r24, 0x0080
     2ac:	81 60       	ori	r24, 0x01	; 1
     2ae:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     2b2:	10 92 8b 00 	sts	0x008B, r1
     2b6:	10 92 8a 00 	sts	0x008A, r1
}
     2ba:	08 95       	ret

000002bc <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     2bc:	89 30       	cpi	r24, 0x09	; 9
     2be:	49 f4       	brne	.+18     	; 0x2d2 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     2c0:	80 91 b0 00 	lds	r24, 0x00B0
     2c4:	82 60       	ori	r24, 0x02	; 2
     2c6:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     2ca:	80 91 b0 00 	lds	r24, 0x00B0
     2ce:	8e 7f       	andi	r24, 0xFE	; 254
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     2d2:	8a 30       	cpi	r24, 0x0A	; 10
     2d4:	21 f4       	brne	.+8      	; 0x2de <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     2d6:	80 91 b0 00 	lds	r24, 0x00B0
     2da:	82 60       	ori	r24, 0x02	; 2
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     2de:	80 91 b0 00 	lds	r24, 0x00B0
     2e2:	8d 7f       	andi	r24, 0xFD	; 253
     2e4:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     2e8:	80 91 b0 00 	lds	r24, 0x00B0
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     2f2:	10 92 b4 00 	sts	0x00B4, r1
}
     2f6:	08 95       	ret

000002f8 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     2f8:	89 30       	cpi	r24, 0x09	; 9
     2fa:	49 f4       	brne	.+18     	; 0x30e <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     2fc:	80 91 90 00 	lds	r24, 0x0090
     300:	82 60       	ori	r24, 0x02	; 2
     302:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     306:	80 91 90 00 	lds	r24, 0x0090
     30a:	8e 7f       	andi	r24, 0xFE	; 254
     30c:	0e c0       	rjmp	.+28     	; 0x32a <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     30e:	8a 30       	cpi	r24, 0x0A	; 10
     310:	21 f4       	brne	.+8      	; 0x31a <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     312:	80 91 90 00 	lds	r24, 0x0090
     316:	82 60       	ori	r24, 0x02	; 2
     318:	03 c0       	rjmp	.+6      	; 0x320 <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     31a:	80 91 90 00 	lds	r24, 0x0090
     31e:	8d 7f       	andi	r24, 0xFD	; 253
     320:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     324:	80 91 90 00 	lds	r24, 0x0090
     328:	81 60       	ori	r24, 0x01	; 1
     32a:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     32e:	10 92 99 00 	sts	0x0099, r1
     332:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     336:	08 95       	ret

00000338 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     338:	89 30       	cpi	r24, 0x09	; 9
     33a:	49 f4       	brne	.+18     	; 0x34e <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     33c:	80 91 91 00 	lds	r24, 0x0091
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     346:	80 91 91 00 	lds	r24, 0x0091
     34a:	8e 7f       	andi	r24, 0xFE	; 254
     34c:	0e c0       	rjmp	.+28     	; 0x36a <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     34e:	8a 30       	cpi	r24, 0x0A	; 10
     350:	21 f4       	brne	.+8      	; 0x35a <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     352:	80 91 91 00 	lds	r24, 0x0091
     356:	82 60       	ori	r24, 0x02	; 2
     358:	03 c0       	rjmp	.+6      	; 0x360 <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     35a:	80 91 91 00 	lds	r24, 0x0091
     35e:	8d 7f       	andi	r24, 0xFD	; 253
     360:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     364:	80 91 91 00 	lds	r24, 0x0091
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     36e:	10 92 9b 00 	sts	0x009B, r1
     372:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     376:	08 95       	ret

00000378 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     378:	89 30       	cpi	r24, 0x09	; 9
     37a:	49 f4       	brne	.+18     	; 0x38e <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     37c:	80 91 92 00 	lds	r24, 0x0092
     380:	82 60       	ori	r24, 0x02	; 2
     382:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     386:	80 91 92 00 	lds	r24, 0x0092
     38a:	8e 7f       	andi	r24, 0xFE	; 254
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     38e:	8a 30       	cpi	r24, 0x0A	; 10
     390:	21 f4       	brne	.+8      	; 0x39a <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     392:	80 91 92 00 	lds	r24, 0x0092
     396:	82 60       	ori	r24, 0x02	; 2
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     39a:	80 91 92 00 	lds	r24, 0x0092
     39e:	8d 7f       	andi	r24, 0xFD	; 253
     3a0:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     3a4:	80 91 92 00 	lds	r24, 0x0092
     3a8:	81 60       	ori	r24, 0x01	; 1
     3aa:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     3ae:	10 92 9d 00 	sts	0x009D, r1
     3b2:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3b6:	08 95       	ret

000003b8 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3b8:	89 30       	cpi	r24, 0x09	; 9
     3ba:	49 f4       	brne	.+18     	; 0x3ce <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     3bc:	80 91 a0 00 	lds	r24, 0x00A0
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     3c6:	80 91 a0 00 	lds	r24, 0x00A0
     3ca:	8e 7f       	andi	r24, 0xFE	; 254
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	21 f4       	brne	.+8      	; 0x3da <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     3d2:	80 91 a0 00 	lds	r24, 0x00A0
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     3da:	80 91 a0 00 	lds	r24, 0x00A0
     3de:	8d 7f       	andi	r24, 0xFD	; 253
     3e0:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     3e4:	80 91 a0 00 	lds	r24, 0x00A0
     3e8:	81 60       	ori	r24, 0x01	; 1
     3ea:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     3ee:	10 92 a9 00 	sts	0x00A9, r1
     3f2:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3f6:	08 95       	ret

000003f8 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3f8:	89 30       	cpi	r24, 0x09	; 9
     3fa:	49 f4       	brne	.+18     	; 0x40e <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     3fc:	80 91 a1 00 	lds	r24, 0x00A1
     400:	82 60       	ori	r24, 0x02	; 2
     402:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     406:	80 91 a1 00 	lds	r24, 0x00A1
     40a:	8e 7f       	andi	r24, 0xFE	; 254
     40c:	0e c0       	rjmp	.+28     	; 0x42a <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     40e:	8a 30       	cpi	r24, 0x0A	; 10
     410:	21 f4       	brne	.+8      	; 0x41a <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     412:	80 91 a1 00 	lds	r24, 0x00A1
     416:	82 60       	ori	r24, 0x02	; 2
     418:	03 c0       	rjmp	.+6      	; 0x420 <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     41a:	80 91 a1 00 	lds	r24, 0x00A1
     41e:	8d 7f       	andi	r24, 0xFD	; 253
     420:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     424:	80 91 a1 00 	lds	r24, 0x00A1
     428:	81 60       	ori	r24, 0x01	; 1
     42a:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     42e:	10 92 ab 00 	sts	0x00AB, r1
     432:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     436:	08 95       	ret

00000438 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     438:	89 30       	cpi	r24, 0x09	; 9
     43a:	49 f4       	brne	.+18     	; 0x44e <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     43c:	80 91 a0 00 	lds	r24, 0x00A0
     440:	82 60       	ori	r24, 0x02	; 2
     442:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     446:	80 91 a0 00 	lds	r24, 0x00A0
     44a:	8e 7f       	andi	r24, 0xFE	; 254
     44c:	0e c0       	rjmp	.+28     	; 0x46a <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     44e:	8a 30       	cpi	r24, 0x0A	; 10
     450:	21 f4       	brne	.+8      	; 0x45a <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     452:	80 91 a0 00 	lds	r24, 0x00A0
     456:	82 60       	ori	r24, 0x02	; 2
     458:	03 c0       	rjmp	.+6      	; 0x460 <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     45a:	80 91 a0 00 	lds	r24, 0x00A0
     45e:	8d 7f       	andi	r24, 0xFD	; 253
     460:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     464:	80 91 a0 00 	lds	r24, 0x00A0
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     46e:	10 92 ad 00 	sts	0x00AD, r1
     472:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     476:	08 95       	ret

00000478 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     478:	e0 e8       	ldi	r30, 0x80	; 128
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	20 81       	ld	r18, Z
     47e:	2e 7f       	andi	r18, 0xFE	; 254
     480:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     482:	20 81       	ld	r18, Z
     484:	22 60       	ori	r18, 0x02	; 2
     486:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     488:	e1 e8       	ldi	r30, 0x81	; 129
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	20 81       	ld	r18, Z
     48e:	28 60       	ori	r18, 0x08	; 8
     490:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     492:	20 81       	ld	r18, Z
     494:	20 61       	ori	r18, 0x10	; 16
     496:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     498:	90 93 87 00 	sts	0x0087, r25
     49c:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     4a0:	10 92 89 00 	sts	0x0089, r1
     4a4:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     4a8:	10 92 8b 00 	sts	0x008B, r1
     4ac:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     4b0:	10 92 8d 00 	sts	0x008D, r1
     4b4:	10 92 8c 00 	sts	0x008C, r1
}
     4b8:	08 95       	ret

000004ba <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     4ba:	e0 e9       	ldi	r30, 0x90	; 144
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	20 81       	ld	r18, Z
     4c0:	2e 7f       	andi	r18, 0xFE	; 254
     4c2:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     4c4:	20 81       	ld	r18, Z
     4c6:	22 60       	ori	r18, 0x02	; 2
     4c8:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     4ca:	e1 e9       	ldi	r30, 0x91	; 145
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	20 81       	ld	r18, Z
     4d0:	28 60       	ori	r18, 0x08	; 8
     4d2:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     4d4:	20 81       	ld	r18, Z
     4d6:	20 61       	ori	r18, 0x10	; 16
     4d8:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     4da:	90 93 97 00 	sts	0x0097, r25
     4de:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     4e2:	10 92 99 00 	sts	0x0099, r1
     4e6:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     4ea:	10 92 9b 00 	sts	0x009B, r1
     4ee:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     4f2:	10 92 9d 00 	sts	0x009D, r1
     4f6:	10 92 9c 00 	sts	0x009C, r1
}
     4fa:	08 95       	ret

000004fc <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     4fc:	e0 ea       	ldi	r30, 0xA0	; 160
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	20 81       	ld	r18, Z
     502:	2e 7f       	andi	r18, 0xFE	; 254
     504:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     506:	20 81       	ld	r18, Z
     508:	22 60       	ori	r18, 0x02	; 2
     50a:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     50c:	e1 ea       	ldi	r30, 0xA1	; 161
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	20 81       	ld	r18, Z
     512:	28 60       	ori	r18, 0x08	; 8
     514:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     516:	20 81       	ld	r18, Z
     518:	20 61       	ori	r18, 0x10	; 16
     51a:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     51c:	90 93 a7 00 	sts	0x00A7, r25
     520:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     524:	10 92 a9 00 	sts	0x00A9, r1
     528:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     52c:	10 92 ab 00 	sts	0x00AB, r1
     530:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     534:	10 92 ad 00 	sts	0x00AD, r1
     538:	10 92 ac 00 	sts	0x00AC, r1
}
     53c:	08 95       	ret

0000053e <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     53e:	e0 e8       	ldi	r30, 0x80	; 128
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	80 62       	ori	r24, 0x20	; 32
     546:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     548:	80 81       	ld	r24, Z
     54a:	8f 7e       	andi	r24, 0xEF	; 239
     54c:	80 83       	st	Z, r24
}
     54e:	08 95       	ret

00000550 <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     550:	e0 eb       	ldi	r30, 0xB0	; 176
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	80 62       	ori	r24, 0x20	; 32
     558:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     55a:	80 81       	ld	r24, Z
     55c:	8f 7e       	andi	r24, 0xEF	; 239
     55e:	80 83       	st	Z, r24
}
     560:	08 95       	ret

00000562 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     562:	e0 e9       	ldi	r30, 0x90	; 144
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	80 68       	ori	r24, 0x80	; 128
     56a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     56c:	80 81       	ld	r24, Z
     56e:	8f 7b       	andi	r24, 0xBF	; 191
     570:	80 83       	st	Z, r24
}
     572:	08 95       	ret

00000574 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     574:	e0 e9       	ldi	r30, 0x90	; 144
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	80 62       	ori	r24, 0x20	; 32
     57c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     57e:	80 81       	ld	r24, Z
     580:	8f 7e       	andi	r24, 0xEF	; 239
     582:	80 83       	st	Z, r24
}
     584:	08 95       	ret

00000586 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     586:	e0 e9       	ldi	r30, 0x90	; 144
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     590:	80 81       	ld	r24, Z
     592:	8b 7f       	andi	r24, 0xFB	; 251
     594:	80 83       	st	Z, r24
}
     596:	08 95       	ret

00000598 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     598:	e0 ea       	ldi	r30, 0xA0	; 160
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	80 68       	ori	r24, 0x80	; 128
     5a0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 7b       	andi	r24, 0xBF	; 191
     5a6:	80 83       	st	Z, r24
}
     5a8:	08 95       	ret

000005aa <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     5aa:	e0 ea       	ldi	r30, 0xA0	; 160
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 62       	ori	r24, 0x20	; 32
     5b2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5b4:	80 81       	ld	r24, Z
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	80 83       	st	Z, r24
}
     5ba:	08 95       	ret

000005bc <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     5bc:	e0 ea       	ldi	r30, 0xA0	; 160
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	88 60       	ori	r24, 0x08	; 8
     5c4:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5c6:	80 81       	ld	r24, Z
     5c8:	8b 7f       	andi	r24, 0xFB	; 251
     5ca:	80 83       	st	Z, r24
}
     5cc:	08 95       	ret

000005ce <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     5ce:	e0 e8       	ldi	r30, 0x80	; 128
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	8f 7d       	andi	r24, 0xDF	; 223
     5d6:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     5d8:	80 81       	ld	r24, Z
     5da:	8f 7e       	andi	r24, 0xEF	; 239
     5dc:	80 83       	st	Z, r24
}
     5de:	08 95       	ret

000005e0 <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     5e0:	e0 eb       	ldi	r30, 0xB0	; 176
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 7d       	andi	r24, 0xDF	; 223
     5e8:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     5ea:	80 81       	ld	r24, Z
     5ec:	8f 7e       	andi	r24, 0xEF	; 239
     5ee:	80 83       	st	Z, r24
}
     5f0:	08 95       	ret

000005f2 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     5f2:	e0 e9       	ldi	r30, 0x90	; 144
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 77       	andi	r24, 0x7F	; 127
     5fa:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 7b       	andi	r24, 0xBF	; 191
     600:	80 83       	st	Z, r24
}
     602:	08 95       	ret

00000604 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     604:	e0 e9       	ldi	r30, 0x90	; 144
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	8f 7d       	andi	r24, 0xDF	; 223
     60c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     60e:	80 81       	ld	r24, Z
     610:	8f 7e       	andi	r24, 0xEF	; 239
     612:	80 83       	st	Z, r24
}
     614:	08 95       	ret

00000616 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     616:	e0 e9       	ldi	r30, 0x90	; 144
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	87 7f       	andi	r24, 0xF7	; 247
     61e:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     620:	80 81       	ld	r24, Z
     622:	8b 7f       	andi	r24, 0xFB	; 251
     624:	80 83       	st	Z, r24
}
     626:	08 95       	ret

00000628 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     628:	e0 ea       	ldi	r30, 0xA0	; 160
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	8f 77       	andi	r24, 0x7F	; 127
     630:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     632:	80 81       	ld	r24, Z
     634:	8f 7b       	andi	r24, 0xBF	; 191
     636:	80 83       	st	Z, r24
}
     638:	08 95       	ret

0000063a <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     63a:	e0 ea       	ldi	r30, 0xA0	; 160
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8f 7d       	andi	r24, 0xDF	; 223
     642:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     644:	80 81       	ld	r24, Z
     646:	8f 7e       	andi	r24, 0xEF	; 239
     648:	80 83       	st	Z, r24
}
     64a:	08 95       	ret

0000064c <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     64c:	e0 ea       	ldi	r30, 0xA0	; 160
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	87 7f       	andi	r24, 0xF7	; 247
     654:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     656:	80 81       	ld	r24, Z
     658:	8b 7f       	andi	r24, 0xFB	; 251
     65a:	80 83       	st	Z, r24
}
     65c:	08 95       	ret

0000065e <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     65e:	e0 e8       	ldi	r30, 0x80	; 128
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	8d 7f       	andi	r24, 0xFD	; 253
     666:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     668:	80 81       	ld	r24, Z
     66a:	8e 7f       	andi	r24, 0xFE	; 254
     66c:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     66e:	80 81       	ld	r24, Z
     670:	8f 7d       	andi	r24, 0xDF	; 223
     672:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     674:	80 81       	ld	r24, Z
     676:	8f 7e       	andi	r24, 0xEF	; 239
     678:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     67a:	08 95       	ret

0000067c <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     67c:	e0 eb       	ldi	r30, 0xB0	; 176
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	8d 7f       	andi	r24, 0xFD	; 253
     684:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     686:	80 81       	ld	r24, Z
     688:	8e 7f       	andi	r24, 0xFE	; 254
     68a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     68c:	80 81       	ld	r24, Z
     68e:	8f 7d       	andi	r24, 0xDF	; 223
     690:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     692:	80 81       	ld	r24, Z
     694:	8f 7e       	andi	r24, 0xEF	; 239
     696:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     698:	08 95       	ret

0000069a <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     69a:	e0 e9       	ldi	r30, 0x90	; 144
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	8d 7f       	andi	r24, 0xFD	; 253
     6a2:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     6a4:	80 81       	ld	r24, Z
     6a6:	8e 7f       	andi	r24, 0xFE	; 254
     6a8:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     6aa:	80 81       	ld	r24, Z
     6ac:	8f 77       	andi	r24, 0x7F	; 127
     6ae:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     6b0:	80 81       	ld	r24, Z
     6b2:	8f 7b       	andi	r24, 0xBF	; 191
     6b4:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 7d       	andi	r24, 0xDF	; 223
     6ba:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     6bc:	80 81       	ld	r24, Z
     6be:	8f 7e       	andi	r24, 0xEF	; 239
     6c0:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     6c2:	80 81       	ld	r24, Z
     6c4:	87 7f       	andi	r24, 0xF7	; 247
     6c6:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     6c8:	80 81       	ld	r24, Z
     6ca:	8b 7f       	andi	r24, 0xFB	; 251
     6cc:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     6ce:	08 95       	ret

000006d0 <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     6d0:	e0 ea       	ldi	r30, 0xA0	; 160
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	8d 7f       	andi	r24, 0xFD	; 253
     6d8:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     6da:	80 81       	ld	r24, Z
     6dc:	8e 7f       	andi	r24, 0xFE	; 254
     6de:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 77       	andi	r24, 0x7F	; 127
     6e4:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     6e6:	80 81       	ld	r24, Z
     6e8:	8f 7b       	andi	r24, 0xBF	; 191
     6ea:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     6ec:	80 81       	ld	r24, Z
     6ee:	8f 7d       	andi	r24, 0xDF	; 223
     6f0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     6f2:	80 81       	ld	r24, Z
     6f4:	8f 7e       	andi	r24, 0xEF	; 239
     6f6:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     6f8:	80 81       	ld	r24, Z
     6fa:	87 7f       	andi	r24, 0xF7	; 247
     6fc:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     6fe:	80 81       	ld	r24, Z
     700:	8b 7f       	andi	r24, 0xFB	; 251
     702:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     704:	08 95       	ret

00000706 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     706:	90 93 8b 00 	sts	0x008B, r25
     70a:	80 93 8a 00 	sts	0x008A, r24
     70e:	08 95       	ret

00000710 <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     710:	80 93 b4 00 	sts	0x00B4, r24
     714:	08 95       	ret

00000716 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     716:	90 93 99 00 	sts	0x0099, r25
     71a:	80 93 98 00 	sts	0x0098, r24
     71e:	08 95       	ret

00000720 <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     720:	90 93 9b 00 	sts	0x009B, r25
     724:	80 93 9a 00 	sts	0x009A, r24
     728:	08 95       	ret

0000072a <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     72a:	90 93 9d 00 	sts	0x009D, r25
     72e:	80 93 9c 00 	sts	0x009C, r24
     732:	08 95       	ret

00000734 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     734:	90 93 a9 00 	sts	0x00A9, r25
     738:	80 93 a8 00 	sts	0x00A8, r24
     73c:	08 95       	ret

0000073e <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     73e:	90 93 ab 00 	sts	0x00AB, r25
     742:	80 93 aa 00 	sts	0x00AA, r24
     746:	08 95       	ret

00000748 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     748:	90 93 ad 00 	sts	0x00AD, r25
     74c:	80 93 ac 00 	sts	0x00AC, r24
     750:	08 95       	ret

00000752 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     752:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     754:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     756:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     75a:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     75e:	9f ef       	ldi	r25, 0xFF	; 255
     760:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     766:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     768:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     76a:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     76c:	83 ef       	ldi	r24, 0xF3	; 243
     76e:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     770:	8e ef       	ldi	r24, 0xFE	; 254
     772:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     774:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     776:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     778:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     77c:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     780:	08 95       	ret

00000782 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     782:	08 95       	ret

00000784 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     784:	2e 9a       	sbi	0x05, 6	; 5
     786:	08 95       	ret

00000788 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     788:	2e 98       	cbi	0x05, 6	; 5
     78a:	08 95       	ret

0000078c <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     78c:	22 b3       	in	r18, 0x12	; 18
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	36 95       	lsr	r19
     794:	27 95       	ror	r18
     796:	8a 95       	dec	r24
     798:	e1 f7       	brne	.-8      	; 0x792 <button_pressed+0x6>
     79a:	20 95       	com	r18
     79c:	30 95       	com	r19
     79e:	21 70       	andi	r18, 0x01	; 1
     7a0:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     7a2:	c9 01       	movw	r24, r18
     7a4:	08 95       	ret

000007a6 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     7a6:	97 fd       	sbrc	r25, 7
     7a8:	10 c0       	rjmp	.+32     	; 0x7ca <cos_SoR+0x24>
		return angtable[degrees/5];
     7aa:	25 e0       	ldi	r18, 0x05	; 5
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__divmodsi4>
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	80 50       	subi	r24, 0x00	; 0
     7c0:	9e 4f       	sbci	r25, 0xFE	; 254
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 81       	ld	r18, Z
     7c6:	31 81       	ldd	r19, Z+1	; 0x01
     7c8:	17 c0       	rjmp	.+46     	; 0x7f8 <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     7ca:	25 e0       	ldi	r18, 0x05	; 5
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__divmodsi4>
     7d6:	da 01       	movw	r26, r20
     7d8:	c9 01       	movw	r24, r18
     7da:	88 5b       	subi	r24, 0xB8	; 184
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	af 4f       	sbci	r26, 0xFF	; 255
     7e0:	bf 4f       	sbci	r27, 0xFF	; 255
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	80 50       	subi	r24, 0x00	; 0
     7e8:	9e 4f       	sbci	r25, 0xFE	; 254
     7ea:	fc 01       	movw	r30, r24
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	22 27       	eor	r18, r18
     7f2:	33 27       	eor	r19, r19
     7f4:	28 1b       	sub	r18, r24
     7f6:	39 0b       	sbc	r19, r25
	}
     7f8:	c9 01       	movw	r24, r18
     7fa:	08 95       	ret

000007fc <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     7fc:	6a 55       	subi	r22, 0x5A	; 90
     7fe:	70 40       	sbci	r23, 0x00	; 0
     800:	80 40       	sbci	r24, 0x00	; 0
     802:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     804:	97 fd       	sbrc	r25, 7
     806:	10 c0       	rjmp	.+32     	; 0x828 <sin_SoR+0x2c>
		return angtable[degrees/5];
     808:	25 e0       	ldi	r18, 0x05	; 5
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__divmodsi4>
     814:	da 01       	movw	r26, r20
     816:	c9 01       	movw	r24, r18
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	80 50       	subi	r24, 0x00	; 0
     81e:	9e 4f       	sbci	r25, 0xFE	; 254
     820:	fc 01       	movw	r30, r24
     822:	20 81       	ld	r18, Z
     824:	31 81       	ldd	r19, Z+1	; 0x01
     826:	17 c0       	rjmp	.+46     	; 0x856 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     828:	25 e0       	ldi	r18, 0x05	; 5
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__divmodsi4>
     834:	da 01       	movw	r26, r20
     836:	c9 01       	movw	r24, r18
     838:	88 5b       	subi	r24, 0xB8	; 184
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	af 4f       	sbci	r26, 0xFF	; 255
     83e:	bf 4f       	sbci	r27, 0xFF	; 255
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	80 50       	subi	r24, 0x00	; 0
     846:	9e 4f       	sbci	r25, 0xFE	; 254
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	22 27       	eor	r18, r18
     850:	33 27       	eor	r19, r19
     852:	28 1b       	sub	r18, r24
     854:	39 0b       	sbc	r19, r25
	}
     856:	c9 01       	movw	r24, r18
     858:	08 95       	ret

0000085a <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     86a:	8a e5       	ldi	r24, 0x5A	; 90
     86c:	c8 16       	cp	r12, r24
     86e:	d1 04       	cpc	r13, r1
     870:	e1 04       	cpc	r14, r1
     872:	f1 04       	cpc	r15, r1
     874:	a1 f1       	breq	.+104    	; 0x8de <tan_SoR+0x84>
     876:	86 ea       	ldi	r24, 0xA6	; 166
     878:	c8 16       	cp	r12, r24
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	d8 06       	cpc	r13, r24
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	e8 06       	cpc	r14, r24
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	f8 06       	cpc	r15, r24
     886:	59 f1       	breq	.+86     	; 0x8de <tan_SoR+0x84>
     888:	8e e0       	ldi	r24, 0x0E	; 14
     88a:	c8 16       	cp	r12, r24
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	d8 06       	cpc	r13, r24
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	e8 06       	cpc	r14, r24
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	f8 06       	cpc	r15, r24
     898:	11 f1       	breq	.+68     	; 0x8de <tan_SoR+0x84>
     89a:	82 ef       	ldi	r24, 0xF2	; 242
     89c:	c8 16       	cp	r12, r24
     89e:	8e ef       	ldi	r24, 0xFE	; 254
     8a0:	d8 06       	cpc	r13, r24
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	e8 06       	cpc	r14, r24
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	f8 06       	cpc	r15, r24
     8aa:	c9 f0       	breq	.+50     	; 0x8de <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <sin_SoR>
     8b4:	8c 01       	movw	r16, r24
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cos_SoR>
     8be:	bc 01       	movw	r22, r24
     8c0:	c8 01       	movw	r24, r16
     8c2:	0e 94 ab 20 	call	0x4156	; 0x4156 <__divmodhi4>
     8c6:	cb 01       	movw	r24, r22
     8c8:	9b 01       	movw	r18, r22
     8ca:	73 e0       	ldi	r23, 0x03	; 3
     8cc:	22 0f       	add	r18, r18
     8ce:	33 1f       	adc	r19, r19
     8d0:	7a 95       	dec	r23
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <tan_SoR+0x72>
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	28 0f       	add	r18, r24
     8da:	39 1f       	adc	r19, r25
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <tan_SoR+0x88>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
	}
     8e2:	c9 01       	movw	r24, r18
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	08 95       	ret

000008f2 <navupdate>:

//double			_omega;
//double			_veloc;


void navupdate( unsigned int ranges[nScans], double* _veloc, double* _omega ) {
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	28 97       	sbiw	r28, 0x08	; 8
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	8c 01       	movw	r16, r24
     928:	7e 83       	std	Y+6, r23	; 0x06
     92a:	6d 83       	std	Y+5, r22	; 0x05
     92c:	3a 01       	movw	r6, r20
	//.RESET PICK-OFFS
	*_omega = 0; 
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	fa 01       	movw	r30, r20
     938:	80 83       	st	Z, r24
     93a:	91 83       	std	Z+1, r25	; 0x01
     93c:	a2 83       	std	Z+2, r26	; 0x02
     93e:	b3 83       	std	Z+3, r27	; 0x03
	*_veloc = 0;
     940:	fb 01       	movw	r30, r22
     942:	80 83       	st	Z, r24
     944:	91 83       	std	Z+1, r25	; 0x01
     946:	a2 83       	std	Z+2, r26	; 0x02
     948:	b3 83       	std	Z+3, r27	; 0x03
     94a:	ee 24       	eor	r14, r14
     94c:	ff 24       	eor	r15, r15
	double	total_pot        ,
			effective_pot 	 ;
	
	//.INITIAL RANGE-SUM
	for( int i=0; i<nScans; i++ ) {
		total_pot+=ranges[i];
     94e:	f8 01       	movw	r30, r16
     950:	ee 0d       	add	r30, r14
     952:	ff 1d       	adc	r31, r15
     954:	60 81       	ld	r22, Z
     956:	71 81       	ldd	r23, Z+1	; 0x01
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	69 81       	ldd	r22, Y+1	; 0x01
     966:	7a 81       	ldd	r23, Y+2	; 0x02
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     970:	69 83       	std	Y+1, r22	; 0x01
     972:	7a 83       	std	Y+2, r23	; 0x02
     974:	8b 83       	std	Y+3, r24	; 0x03
     976:	9c 83       	std	Y+4, r25	; 0x04
     978:	22 e0       	ldi	r18, 0x02	; 2
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	e2 0e       	add	r14, r18
     97e:	f3 1e       	adc	r15, r19
	
	double	total_pot        ,
			effective_pot 	 ;
	
	//.INITIAL RANGE-SUM
	for( int i=0; i<nScans; i++ ) {
     980:	30 ed       	ldi	r19, 0xD0	; 208
     982:	e3 16       	cp	r14, r19
     984:	32 e0       	ldi	r19, 0x02	; 2
     986:	f3 06       	cpc	r15, r19
     988:	11 f7       	brne	.-60     	; 0x94e <navupdate+0x5c>
     98a:	48 01       	movw	r8, r16
     98c:	ee ec       	ldi	r30, 0xCE	; 206
     98e:	ae 2e       	mov	r10, r30
     990:	e2 e0       	ldi	r30, 0x02	; 2
     992:	be 2e       	mov	r11, r30
     994:	a0 0e       	add	r10, r16
     996:	b1 1e       	adc	r11, r17
     998:	cc 24       	eor	r12, r12
     99a:	dd 24       	eor	r13, r13
		total_pot+=ranges[i];
	}
	for( int i=0; i<nScans; i++ ) {
		//.POTENTIAL FIELD AREA
		effective_pot = (ranges[i]-robotwidth)/total_pot;
     99c:	f4 01       	movw	r30, r8
     99e:	01 90       	ld	r0, Z+
     9a0:	f0 81       	ld	r31, Z
     9a2:	e0 2d       	mov	r30, r0
     9a4:	f8 87       	std	Y+8, r31	; 0x08
     9a6:	ef 83       	std	Y+7, r30	; 0x07
		*_omega += rel2head(i)/effective_pot;
     9a8:	f3 01       	movw	r30, r6
     9aa:	20 80       	ld	r2, Z
     9ac:	31 80       	ldd	r3, Z+1	; 0x01
     9ae:	42 80       	ldd	r4, Z+2	; 0x02
     9b0:	53 80       	ldd	r5, Z+3	; 0x03
     9b2:	b6 01       	movw	r22, r12
     9b4:	88 27       	eor	r24, r24
     9b6:	77 fd       	sbrc	r23, 7
     9b8:	80 95       	com	r24
     9ba:	98 2f       	mov	r25, r24
     9bc:	f4 eb       	ldi	r31, 0xB4	; 180
     9be:	cf 16       	cp	r12, r31
     9c0:	d1 04       	cpc	r13, r1
     9c2:	6c f4       	brge	.+26     	; 0x9de <navupdate+0xec>
     9c4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__floatsisf>
     9c8:	2b ed       	ldi	r18, 0xDB	; 219
     9ca:	3f e0       	ldi	r19, 0x0F	; 15
     9cc:	49 e4       	ldi	r20, 0x49	; 73
     9ce:	50 e4       	ldi	r21, 0x40	; 64
     9d0:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	44 e3       	ldi	r20, 0x34	; 52
     9da:	53 e4       	ldi	r21, 0x43	; 67
     9dc:	2d c0       	rjmp	.+90     	; 0xa38 <navupdate+0x146>
     9de:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__floatsisf>
     9e2:	2b ed       	ldi	r18, 0xDB	; 219
     9e4:	3f e0       	ldi	r19, 0x0F	; 15
     9e6:	49 e4       	ldi	r20, 0x49	; 73
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	44 e3       	ldi	r20, 0x34	; 52
     9f4:	53 e4       	ldi	r21, 0x43	; 67
     9f6:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     9fa:	2b ed       	ldi	r18, 0xDB	; 219
     9fc:	3f e0       	ldi	r19, 0x0F	; 15
     9fe:	49 ec       	ldi	r20, 0xC9	; 201
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__subsf3>
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	2f 81       	ldd	r18, Y+7	; 0x07
     a0c:	38 85       	ldd	r19, Y+8	; 0x08
     a0e:	24 51       	subi	r18, 0x14	; 20
     a10:	30 40       	sbci	r19, 0x00	; 0
     a12:	b9 01       	movw	r22, r18
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	2c 5e       	subi	r18, 0xEC	; 236
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	38 87       	std	Y+8, r19	; 0x08
     a1e:	2f 83       	std	Y+7, r18	; 0x07
     a20:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     a24:	29 81       	ldd	r18, Y+1	; 0x01
     a26:	3a 81       	ldd	r19, Y+2	; 0x02
     a28:	4b 81       	ldd	r20, Y+3	; 0x03
     a2a:	5c 81       	ldd	r21, Y+4	; 0x04
     a2c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c2 01       	movw	r24, r4
     a42:	b1 01       	movw	r22, r2
     a44:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	f3 01       	movw	r30, r6
     a4e:	60 83       	st	Z, r22
     a50:	71 83       	std	Z+1, r23	; 0x01
     a52:	82 83       	std	Z+2, r24	; 0x02
     a54:	93 83       	std	Z+3, r25	; 0x03
		//.SIMPLE L-R WALL FOLLOWING
		if( (i>44) && (i<135-blinder)){
     a56:	c6 01       	movw	r24, r12
     a58:	8d 97       	sbiw	r24, 0x2d	; 45
     a5a:	c2 97       	sbiw	r24, 0x32	; 50
     a5c:	e0 f4       	brcc	.+56     	; 0xa96 <navupdate+0x1a4>
			*_omega += (ranges[i]-ranges[360-i-1])/scaling;
     a5e:	f5 01       	movw	r30, r10
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	6f 81       	ldd	r22, Y+7	; 0x07
     a66:	78 85       	ldd	r23, Y+8	; 0x08
     a68:	68 1b       	sub	r22, r24
     a6a:	79 0b       	sbc	r23, r25
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e4       	ldi	r19, 0x40	; 64
     a78:	4c e1       	ldi	r20, 0x1C	; 28
     a7a:	56 e4       	ldi	r21, 0x46	; 70
     a7c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	c8 01       	movw	r24, r16
     a86:	b7 01       	movw	r22, r14
     a88:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     a8c:	f3 01       	movw	r30, r6
     a8e:	60 83       	st	Z, r22
     a90:	71 83       	std	Z+1, r23	; 0x01
     a92:	82 83       	std	Z+2, r24	; 0x02
     a94:	93 83       	std	Z+3, r25	; 0x03
		}
		//.VELOCITY RECALCULATION
		if( i>44 ){
     a96:	fd e2       	ldi	r31, 0x2D	; 45
     a98:	cf 16       	cp	r12, r31
     a9a:	d1 04       	cpc	r13, r1
     a9c:	14 f1       	brlt	.+68     	; 0xae2 <navupdate+0x1f0>
			*_veloc += ((ranges[i]      -robotwidth)
     a9e:	f5 01       	movw	r30, r10
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	2f 81       	ldd	r18, Y+7	; 0x07
     aa6:	38 85       	ldd	r19, Y+8	; 0x08
     aa8:	28 1b       	sub	r18, r24
     aaa:	39 0b       	sbc	r19, r25
     aac:	b9 01       	movw	r22, r18
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e4       	ldi	r19, 0x40	; 64
     aba:	4c e1       	ldi	r20, 0x1C	; 28
     abc:	56 e4       	ldi	r21, 0x46	; 70
     abe:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	ed 81       	ldd	r30, Y+5	; 0x05
     ac8:	fe 81       	ldd	r31, Y+6	; 0x06
     aca:	60 81       	ld	r22, Z
     acc:	71 81       	ldd	r23, Z+1	; 0x01
     ace:	82 81       	ldd	r24, Z+2	; 0x02
     ad0:	93 81       	ldd	r25, Z+3	; 0x03
     ad2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     ad6:	ed 81       	ldd	r30, Y+5	; 0x05
     ad8:	fe 81       	ldd	r31, Y+6	; 0x06
     ada:	60 83       	st	Z, r22
     adc:	71 83       	std	Z+1, r23	; 0x01
     ade:	82 83       	std	Z+2, r24	; 0x02
     ae0:	93 83       	std	Z+3, r25	; 0x03
	
	//.INITIAL RANGE-SUM
	for( int i=0; i<nScans; i++ ) {
		total_pot+=ranges[i];
	}
	for( int i=0; i<nScans; i++ ) {
     ae2:	08 94       	sec
     ae4:	c1 1c       	adc	r12, r1
     ae6:	d1 1c       	adc	r13, r1
     ae8:	22 e0       	ldi	r18, 0x02	; 2
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	82 0e       	add	r8, r18
     aee:	93 1e       	adc	r9, r19
     af0:	8e ef       	ldi	r24, 0xFE	; 254
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	a8 0e       	add	r10, r24
     af6:	b9 1e       	adc	r11, r25
     af8:	98 e6       	ldi	r25, 0x68	; 104
     afa:	c9 16       	cp	r12, r25
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	d9 06       	cpc	r13, r25
     b00:	09 f0       	breq	.+2      	; 0xb04 <navupdate+0x212>
     b02:	4c cf       	rjmp	.-360    	; 0x99c <navupdate+0xaa>
			*_veloc += ((ranges[i]      -robotwidth)
					  -(ranges[360-i-1]-robotwidth))/scaling;
		}
	}

}
     b04:	28 96       	adiw	r28, 0x08	; 8
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	5f 90       	pop	r5
     b2e:	4f 90       	pop	r4
     b30:	3f 90       	pop	r3
     b32:	2f 90       	pop	r2
     b34:	08 95       	ret

00000b36 <lbRcv>:
//-----------------------------**&&**


void lbRcv(unsigned char c){
		
}
     b36:	08 95       	ret

00000b38 <send_frame>:

/*************************************************/



void send_frame(float velocity, float omega){
     b38:	2f 92       	push	r2
     b3a:	3f 92       	push	r3
     b3c:	4f 92       	push	r4
     b3e:	5f 92       	push	r5
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	06 2f       	mov	r16, r22
     b5a:	f7 2e       	mov	r15, r23
     b5c:	e8 2e       	mov	r14, r24
     b5e:	d9 2e       	mov	r13, r25
     b60:	c2 2e       	mov	r12, r18
     b62:	b3 2e       	mov	r11, r19
     b64:	a4 2e       	mov	r10, r20
     b66:	95 2e       	mov	r9, r21
//send data frame
	
	// Break the floats into 4 bytes
	union u_vel fltuint8_velocity;
	union u_ome fltuint8_omega;
	fltuint8_velocity.f_vel = velocity;
     b68:	17 2f       	mov	r17, r23
	fltuint8_omega.f_ome = omega;
     b6a:	36 01       	movw	r6, r12
     b6c:	25 01       	movw	r4, r10
		
	// Send header
	uart0SendByte(0xFA);
     b6e:	8a ef       	ldi	r24, 0xFA	; 250
     b70:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	//rprintfu08(0xFA);

	// Send linear velocity
	uart0SendByte(fltuint8_velocity.arr_vel[0]);
     b74:	80 2f       	mov	r24, r16
     b76:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[1]);
     b7a:	8f 2d       	mov	r24, r15
     b7c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[2]);
     b80:	8e 2d       	mov	r24, r14
     b82:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[3]);
     b86:	8d 2d       	mov	r24, r13
     b88:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	//rprintfu08(fltuint8_velocity.arr_vel[1]);
	//rprintfu08(fltuint8_velocity.arr_vel[2]);
	//rprintfu08(fltuint8_velocity.arr_vel[3]);

	// Send angular velocity
	uart0SendByte(fltuint8_omega.arr_ome[0]);
     b8c:	8c 2d       	mov	r24, r12
     b8e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[1]);
     b92:	8b 2d       	mov	r24, r11
     b94:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[2]);
     b98:	8a 2d       	mov	r24, r10
     b9a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[3]);
     b9e:	89 2d       	mov	r24, r9
     ba0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	// Send checksum
	uint8_t chk = fltuint8_velocity.arr_vel[0] + fltuint8_velocity.arr_vel[1] + fltuint8_velocity.arr_vel[2]
	+ fltuint8_velocity.arr_vel[3] + fltuint8_omega.arr_ome[0] + fltuint8_omega.arr_ome[1] 
	+ fltuint8_omega.arr_ome[2] + fltuint8_omega.arr_ome[3];

	uart0SendByte(chk);
     ba4:	10 0f       	add	r17, r16
     ba6:	1e 0d       	add	r17, r14
     ba8:	17 0d       	add	r17, r7
     baa:	16 0d       	add	r17, r6
     bac:	15 0d       	add	r17, r5
     bae:	14 0d       	add	r17, r4
     bb0:	81 2f       	mov	r24, r17
     bb2:	89 0d       	add	r24, r9
     bb4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <uart0SendByte>
	//rprintfu08(chk);
}
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	5f 90       	pop	r5
     bd2:	4f 90       	pop	r4
     bd4:	3f 90       	pop	r3
     bd6:	2f 90       	pop	r2
     bd8:	08 95       	ret

00000bda <right_wall>:

void right_wall(uint16_t range[]){
     bda:	4f 92       	push	r4
     bdc:	5f 92       	push	r5
     bde:	6f 92       	push	r6
     be0:	7f 92       	push	r7
     be2:	8f 92       	push	r8
     be4:	9f 92       	push	r9
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	4c 01       	movw	r8, r24
     bfc:	ec 01       	movw	r28, r24
     bfe:	c4 53       	subi	r28, 0x34	; 52
     c00:	df 4f       	sbci	r29, 0xFF	; 255
     c02:	cc 24       	eor	r12, r12
     c04:	dd 24       	eor	r13, r13
     c06:	0f 2e       	mov	r0, r31
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	ef 2e       	mov	r14, r31
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	0f 2f       	mov	r16, r31
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	1f 2f       	mov	r17, r31
     c18:	f0 2d       	mov	r31, r0
		uint8_t f_ndx = 358 + r_ndx;
		// Accomodate wrap around
		if(f_ndx > 359){
			f_ndx -= 360;
		}
		if(range[f_ndx] > MIN_RANGE){
     c1a:	68 81       	ld	r22, Y
     c1c:	79 81       	ldd	r23, Y+1	; 0x01
     c1e:	67 39       	cpi	r22, 0x97	; 151
     c20:	71 05       	cpc	r23, r1
     c22:	68 f0       	brcs	.+26     	; 0xc3e <right_wall+0x64>
			f_rng_avg += (float)range[f_ndx];
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     c2c:	9b 01       	movw	r18, r22
     c2e:	ac 01       	movw	r20, r24
     c30:	c8 01       	movw	r24, r16
     c32:	b7 01       	movw	r22, r14
     c34:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     c38:	7b 01       	movw	r14, r22
     c3a:	8c 01       	movw	r16, r24
			f_cntr++;
     c3c:	d3 94       	inc	r13
	uint8_t r_cntr = 0;
	float f_rng_avg = 0;
	float r_rng_avg = 0;
	const uint8_t MIN_RANGE = 150; // mm
	// Calculate the average of the front 5 valid beams
	for(uint8_t r_ndx = 0; r_ndx < 5; r_ndx++){
     c3e:	c3 94       	inc	r12
     c40:	22 96       	adiw	r28, 0x02	; 2
     c42:	85 e0       	ldi	r24, 0x05	; 5
     c44:	c8 16       	cp	r12, r24
     c46:	49 f7       	brne	.-46     	; 0xc1a <right_wall+0x40>
		if(range[f_ndx] > MIN_RANGE){
			f_rng_avg += (float)range[f_ndx];
			f_cntr++;
		}
	}
	if(f_cntr != 0){
     c48:	dd 20       	and	r13, r13
     c4a:	71 f0       	breq	.+28     	; 0xc68 <right_wall+0x8e>
		f_rng_avg = f_rng_avg/(float)f_cntr;
     c4c:	6d 2d       	mov	r22, r13
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     c64:	7b 01       	movw	r14, r22
     c66:	8c 01       	movw	r16, r24
	}
//	rprintf("Front Range: ");
//	rprintfFloat(5, f_rng_avg);
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 30*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);
     c68:	c8 01       	movw	r24, r16
     c6a:	b7 01       	movw	r22, r14
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	48 ec       	ldi	r20, 0xC8	; 200
     c72:	52 e4       	ldi	r21, 0x42	; 66
     c74:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 ea       	ldi	r20, 0xA0	; 160
     c7e:	50 e4       	ldi	r21, 0x40	; 64
     c80:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__subsf3>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e4       	ldi	r25, 0x40	; 64
     c90:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <pow>
     c94:	7b 01       	movw	r14, r22
     c96:	8c 01       	movw	r16, r24
     c98:	c8 01       	movw	r24, r16
     c9a:	b7 01       	movw	r22, r14
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 ef       	ldi	r20, 0xF0	; 240
     ca2:	51 e4       	ldi	r21, 0x41	; 65
     ca4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
     ca8:	5b 01       	movw	r10, r22
     caa:	6c 01       	movw	r12, r24
     cac:	c8 01       	movw	r24, r16
     cae:	b7 01       	movw	r22, r14
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	50 e4       	ldi	r21, 0x40	; 64
     cb8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c6 01       	movw	r24, r12
     cc2:	b5 01       	movw	r22, r10
     cc4:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     cc8:	76 2e       	mov	r7, r22
     cca:	67 2e       	mov	r6, r23
     ccc:	58 2e       	mov	r5, r24
     cce:	49 2e       	mov	r4, r25
     cd0:	f0 e7       	ldi	r31, 0x70	; 112
     cd2:	cf 2e       	mov	r12, r31
     cd4:	f2 e0       	ldi	r31, 0x02	; 2
     cd6:	df 2e       	mov	r13, r31
     cd8:	c8 0c       	add	r12, r8
     cda:	d9 1c       	adc	r13, r9
     cdc:	c8 e3       	ldi	r28, 0x38	; 56
     cde:	d1 e0       	ldi	r29, 0x01	; 1
     ce0:	aa 24       	eor	r10, r10
     ce2:	0f 2e       	mov	r0, r31
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ef 2e       	mov	r14, r31
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	ff 2e       	mov	r15, r31
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	0f 2f       	mov	r16, r31
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	1f 2f       	mov	r17, r31
     cf4:	f0 2d       	mov	r31, r0

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
		
		if(range[r_ndx] > MIN_RANGE){
     cf6:	f6 01       	movw	r30, r12
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	67 39       	cpi	r22, 0x97	; 151
     cfe:	71 05       	cpc	r23, r1
     d00:	68 f0       	brcs	.+26     	; 0xd1c <right_wall+0x142>
			r_rng_avg += (float)range[r_ndx];
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	c8 01       	movw	r24, r16
     d10:	b7 01       	movw	r22, r14
     d12:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     d16:	7b 01       	movw	r14, r22
     d18:	8c 01       	movw	r16, r24
			r_cntr++;
     d1a:	a3 94       	inc	r10
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 30*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	c8 0e       	add	r12, r24
     d24:	d9 1e       	adc	r13, r25
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	cd 33       	cpi	r28, 0x3D	; 61
     d2a:	d9 07       	cpc	r29, r25
     d2c:	21 f7       	brne	.-56     	; 0xcf6 <right_wall+0x11c>
		if(range[r_ndx] > MIN_RANGE){
			r_rng_avg += (float)range[r_ndx];
			r_cntr++;
		}
	}
	if(r_cntr != 0){
     d2e:	aa 20       	and	r10, r10
     d30:	71 f0       	breq	.+28     	; 0xd4e <right_wall+0x174>
		r_rng_avg = r_rng_avg/(float)r_cntr;
     d32:	6a 2d       	mov	r22, r10
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     d3e:	9b 01       	movw	r18, r22
     d40:	ac 01       	movw	r20, r24
     d42:	c8 01       	movw	r24, r16
     d44:	b7 01       	movw	r22, r14
     d46:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     d4a:	7b 01       	movw	r14, r22
     d4c:	8c 01       	movw	r16, r24
	}
//	rprintf("Right Range: ");
//	rprintfFloat(5, r_rng_avg);
//	rprintfCRLF();

	ang_v = -0.3*(r_rng_avg-230)/sqrt(1 + square(r_rng_avg-230));
     d4e:	c8 01       	movw	r24, r16
     d50:	b7 01       	movw	r22, r14
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	46 e6       	ldi	r20, 0x66	; 102
     d58:	53 e4       	ldi	r21, 0x43	; 67
     d5a:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__subsf3>
     d5e:	5b 01       	movw	r10, r22
     d60:	6c 01       	movw	r12, r24
     d62:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <square>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e8       	ldi	r20, 0x80	; 128
     d6c:	5f e3       	ldi	r21, 0x3F	; 63
     d6e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__addsf3>
     d72:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <sqrt>
     d76:	7b 01       	movw	r14, r22
     d78:	8c 01       	movw	r16, r24
     d7a:	c6 01       	movw	r24, r12
     d7c:	b5 01       	movw	r22, r10
     d7e:	2a e9       	ldi	r18, 0x9A	; 154
     d80:	39 e9       	ldi	r19, 0x99	; 153
     d82:	49 e9       	ldi	r20, 0x99	; 153
     d84:	5e eb       	ldi	r21, 0xBE	; 190
     d86:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
     d8a:	a8 01       	movw	r20, r16
     d8c:	97 01       	movw	r18, r14
     d8e:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
     d92:	7b 01       	movw	r14, r22
     d94:	8c 01       	movw	r16, r24

	send_frame(lin_v,ang_v);
     d96:	27 2d       	mov	r18, r7
     d98:	36 2d       	mov	r19, r6
     d9a:	45 2d       	mov	r20, r5
     d9c:	54 2d       	mov	r21, r4
     d9e:	b9 01       	movw	r22, r18
     da0:	ca 01       	movw	r24, r20
     da2:	97 01       	movw	r18, r14
     da4:	a8 01       	movw	r20, r16
     da6:	0e 94 9c 05 	call	0xb38	; 0xb38 <send_frame>
	rprintf("400, ");
     daa:	00 d0       	rcall	.+0      	; 0xdac <right_wall+0x1d2>
     dac:	0f 92       	push	r0
     dae:	dd 24       	eor	r13, r13
     db0:	d3 94       	inc	r13
     db2:	ed b7       	in	r30, 0x3d	; 61
     db4:	fe b7       	in	r31, 0x3e	; 62
     db6:	d1 82       	std	Z+1, r13	; 0x01
     db8:	82 ea       	ldi	r24, 0xA2	; 162
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	93 83       	std	Z+3, r25	; 0x03
     dbe:	82 83       	std	Z+2, r24	; 0x02
     dc0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	rprintfFloat(5,ang_v);
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	85 e0       	ldi	r24, 0x05	; 5
     dcc:	4e 2d       	mov	r20, r14
     dce:	5f 2d       	mov	r21, r15
     dd0:	60 2f       	mov	r22, r16
     dd2:	71 2f       	mov	r23, r17
     dd4:	0e 94 81 15 	call	0x2b02	; 0x2b02 <rprintfFloat>
	rprintfCRLF();
     dd8:	0e 94 8a 14 	call	0x2914	; 0x2914 <rprintfCRLF>
	rprintf("500, ");
     ddc:	00 d0       	rcall	.+0      	; 0xdde <right_wall+0x204>
     dde:	0f 92       	push	r0
     de0:	ed b7       	in	r30, 0x3d	; 61
     de2:	fe b7       	in	r31, 0x3e	; 62
     de4:	d1 82       	std	Z+1, r13	; 0x01
     de6:	8c e9       	ldi	r24, 0x9C	; 156
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	93 83       	std	Z+3, r25	; 0x03
     dec:	82 83       	std	Z+2, r24	; 0x02
     dee:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	rprintfFloat(5,lin_v);
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	47 2d       	mov	r20, r7
     dfc:	56 2d       	mov	r21, r6
     dfe:	65 2d       	mov	r22, r5
     e00:	74 2d       	mov	r23, r4
     e02:	0e 94 81 15 	call	0x2b02	; 0x2b02 <rprintfFloat>
	rprintfCRLF();
     e06:	0e 94 8a 14 	call	0x2914	; 0x2914 <rprintfCRLF>

}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	9f 90       	pop	r9
     e20:	8f 90       	pop	r8
     e22:	7f 90       	pop	r7
     e24:	6f 90       	pop	r6
     e26:	5f 90       	pop	r5
     e28:	4f 90       	pop	r4
     e2a:	08 95       	ret

00000e2c <prvSetupHardware>:
}

  


void prvSetupHardware(){
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	delay_cycles(65535);
	delay_cycles(65535);
	
	

	uartInit();  // initialize the UART (serial port)
     e34:	0e 94 92 13 	call	0x2724	; 0x2724 <uartInit>
    uartSetBaudRate(0, 38400); // LB
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	56 e9       	ldi	r21, 0x96	; 150
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // USB
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	52 ec       	ldi	r21, 0xC2	; 194
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
    uartSetBaudRate(2, 115200); // XBEE
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	52 ec       	ldi	r21, 0xC2	; 194
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
    uartSetBaudRate(3, 115200); // LDS
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	52 ec       	ldi	r21, 0xC2	; 194
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
     e70:	85 ee       	ldi	r24, 0xE5	; 229
     e72:	9f e0       	ldi	r25, 0x0F	; 15
     e74:	0e 94 26 14 	call	0x284c	; 0x284c <rprintfInit>
	//rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf

	configure_ports(); // configure which ports are analog, digital, etc.
     e78:	0e 94 a9 03 	call	0x752	; 0x752 <configure_ports>
	*/

	
	//UART ISR *** UART ISR ***
	
	uartSetRxHandler(0, &lbRcv);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	6b e9       	ldi	r22, 0x9B	; 155
     e80:	75 e0       	ldi	r23, 0x05	; 5
     e82:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uartSetRxHandler>
	uartSetRxHandler(3, &LDSRcv);
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	6c e6       	ldi	r22, 0x6C	; 108
     e8a:	79 e1       	ldi	r23, 0x19	; 25
     e8c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uartSetRxHandler>
//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     e90:	2e 98       	cbi	0x05, 6	; 5

	//UART ISR *** UART ISR ***

	LED_on();

	rprintf("\r\nSystem Warmed Up");
     e92:	00 d0       	rcall	.+0      	; 0xe94 <prvSetupHardware+0x68>
     e94:	0f 92       	push	r0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	ed b7       	in	r30, 0x3d	; 61
     e9a:	fe b7       	in	r31, 0x3e	; 62
     e9c:	81 83       	std	Z+1, r24	; 0x01
     e9e:	85 ec       	ldi	r24, 0xC5	; 197
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	93 83       	std	Z+3, r25	; 0x03
     ea4:	82 83       	std	Z+2, r24	; 0x02
     ea6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	85 e0       	ldi	r24, 0x05	; 5
     eb2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <init_timer0>
 	init_timer1(TIMER_CLK_64); // Timer 1 is initialized by FreeRTOS
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	0e 94 86 09 	call	0x130c	; 0x130c <init_timer1>
 	//init_timer2(TIMER2_CLK_64);
	init_timer2(TIMER2_CLK_1024);
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	0e 94 98 09 	call	0x1330	; 0x1330 <init_timer2>
 	init_timer3(TIMER_CLK_64);
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	0e 94 a8 09 	call	0x1350	; 0x1350 <init_timer3>
 	init_timer4(TIMER_CLK_64);
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	0e 94 ba 09 	call	0x1374	; 0x1374 <init_timer4>
 	init_timer5(TIMER_CLK_64);
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	0e 94 cc 09 	call	0x1398	; 0x1398 <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
     ed4:	0e 94 9b 13 	call	0x2736	; 0x2736 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	0e 94 c0 13 	call	0x2780	; 0x2780 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 c7 13 	call	0x278e	; 0x278e <a2dSetReference>
     ee4:	10 e0       	ldi	r17, 0x00	; 0
	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
     ee6:	01 e0       	ldi	r16, 0x01	; 1
     ee8:	c3 ec       	ldi	r28, 0xC3	; 195
     eea:	d1 e0       	ldi	r29, 0x01	; 1
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
     eec:	81 2f       	mov	r24, r17
     eee:	0e 94 10 14 	call	0x2820	; 0x2820 <a2dConvert8bit>
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <prvSetupHardware+0xc8>
     ef4:	0f 92       	push	r0
     ef6:	ed b7       	in	r30, 0x3d	; 61
     ef8:	fe b7       	in	r31, 0x3e	; 62
     efa:	01 83       	std	Z+1, r16	; 0x01
     efc:	d3 83       	std	Z+3, r29	; 0x03
     efe:	c2 83       	std	Z+2, r28	; 0x02
     f00:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
     f04:	1f 5f       	subi	r17, 0xFF	; 255
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	10 31       	cpi	r17, 0x10	; 16
     f0e:	71 f7       	brne	.-36     	; 0xeec <prvSetupHardware+0xc0>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     f10:	2e 9a       	sbi	0x05, 6	; 5
		rprintf(".");
		}

	LED_off();

	rprintf("Initialization Complete \r\n");
     f12:	00 d0       	rcall	.+0      	; 0xf14 <prvSetupHardware+0xe8>
     f14:	0f 92       	push	r0
     f16:	ed b7       	in	r30, 0x3d	; 61
     f18:	fe b7       	in	r31, 0x3e	; 62
     f1a:	01 83       	std	Z+1, r16	; 0x01
     f1c:	88 ea       	ldi	r24, 0xA8	; 168
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	93 83       	std	Z+3, r25	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
     f24:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>

	//reset all timers to zero
	reset_timer0();
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0e 94 2e 09 	call	0x125c	; 0x125c <reset_timer0>
	reset_timer1();
     f32:	0e 94 38 09 	call	0x1270	; 0x1270 <reset_timer1>
	reset_timer2();
     f36:	0e 94 45 09 	call	0x128a	; 0x128a <reset_timer2>
	reset_timer3();
     f3a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <reset_timer3>
	reset_timer4();
     f3e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <reset_timer4>
	reset_timer5();
     f42:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <reset_timer5>


}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	08 95       	ret

00000f50 <main>:
	rprintfCRLF();

}

int main(void)
{
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	c8 5d       	subi	r28, 0xD8	; 216
     f66:	d2 40       	sbci	r29, 0x02	; 2
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
	//unsigned short audio_value3[1000];
	
	uint16_t audio_count = 0;

	uint16_t ranges[360];
	double ang_vel = 0;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	ab 83       	std	Y+3, r26	; 0x03
     f80:	bc 83       	std	Y+4, r27	; 0x04
	double lin_vel = 0;
     f82:	8d 83       	std	Y+5, r24	; 0x05
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	af 83       	std	Y+7, r26	; 0x07
     f88:	b8 87       	std	Y+8, r27	; 0x08
	init_LDS_buffer();
     f8a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <init_LDS_buffer>
	prvSetupHardware();
     f8e:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvSetupHardware>
	rprintf("Starting program.\n");
     f92:	00 d0       	rcall	.+0      	; 0xf94 <main+0x44>
     f94:	0f 92       	push	r0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	ed b7       	in	r30, 0x3d	; 61
     f9a:	fe b7       	in	r31, 0x3e	; 62
     f9c:	81 83       	std	Z+1, r24	; 0x01
     f9e:	89 e8       	ldi	r24, 0x89	; 137
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	93 83       	std	Z+3, r25	; 0x03
     fa4:	82 83       	std	Z+2, r24	; 0x02
     fa6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
     faa:	ee 24       	eor	r14, r14
     fac:	ff 24       	eor	r15, r15
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
	
	while(!audio_start){
		if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <a2dConvert10bit>
     fba:	89 55       	subi	r24, 0x59	; 89
     fbc:	92 40       	sbci	r25, 0x02	; 2
     fbe:	10 f4       	brcc	.+4      	; 0xfc4 <main+0x74>
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	49 c0       	rjmp	.+146    	; 0x1056 <main+0x106>
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				//audio_value1[s_ndx] = a2dConvert10bit(AUDIO_PIN);
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
     fc8:	8a e0       	ldi	r24, 0x0A	; 10
     fca:	0e 94 e7 13 	call	0x27ce	; 0x27ce <a2dConvert10bit>
     fce:	89 55       	subi	r24, 0x59	; 89
     fd0:	92 40       	sbci	r25, 0x02	; 2
     fd2:	18 f0       	brcs	.+6      	; 0xfda <main+0x8a>
					audio_count++;
     fd4:	08 94       	sec
     fd6:	e1 1c       	adc	r14, r1
     fd8:	f1 1c       	adc	r15, r1
				}
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
     fda:	8a e0       	ldi	r24, 0x0A	; 10
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 77 09 	call	0x12ee	; 0x12ee <delay_us>
	prvSetupHardware();
	rprintf("Starting program.\n");
	
	while(!audio_start){
		if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
     fe2:	0f 5f       	subi	r16, 0xFF	; 255
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	08 3e       	cpi	r16, 0xE8	; 232
     fea:	18 07       	cpc	r17, r24
     fec:	69 f7       	brne	.-38     	; 0xfc8 <main+0x78>
     fee:	00 e0       	ldi	r16, 0x00	; 0
     ff0:	10 e0       	ldi	r17, 0x00	; 0
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				//audio_value2[s_ndx] = a2dConvert10bit(AUDIO_PIN);
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <a2dConvert10bit>
     ff8:	89 55       	subi	r24, 0x59	; 89
     ffa:	92 40       	sbci	r25, 0x02	; 2
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <main+0xb4>
					audio_count++;
     ffe:	08 94       	sec
    1000:	e1 1c       	adc	r14, r1
    1002:	f1 1c       	adc	r15, r1
				}
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
    1004:	8a e0       	ldi	r24, 0x0A	; 10
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 77 09 	call	0x12ee	; 0x12ee <delay_us>
					audio_count++;
				}
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
    100c:	0f 5f       	subi	r16, 0xFF	; 255
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	f3 e0       	ldi	r31, 0x03	; 3
    1012:	08 3e       	cpi	r16, 0xE8	; 232
    1014:	1f 07       	cpc	r17, r31
    1016:	69 f7       	brne	.-38     	; 0xff2 <main+0xa2>
    1018:	00 e0       	ldi	r16, 0x00	; 0
    101a:	10 e0       	ldi	r17, 0x00	; 0
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				//audio_value3[s_ndx] = a2dConvert10bit(AUDIO_PIN);
				if(a2dConvert10bit(AUDIO_PIN) > AUDIO_THRESH){
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <a2dConvert10bit>
    1022:	89 55       	subi	r24, 0x59	; 89
    1024:	92 40       	sbci	r25, 0x02	; 2
    1026:	18 f0       	brcs	.+6      	; 0x102e <main+0xde>
					audio_count++;
    1028:	08 94       	sec
    102a:	e1 1c       	adc	r14, r1
    102c:	f1 1c       	adc	r15, r1
				}
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 77 09 	call	0x12ee	; 0x12ee <delay_us>
					audio_count++;
				}
				//rprintf("%d\n",a2dConvert10bit(AUDIO_PIN));
				delay_us(10);	// Sample every 10 us
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
    1036:	0f 5f       	subi	r16, 0xFF	; 255
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	08 3e       	cpi	r16, 0xE8	; 232
    103e:	18 07       	cpc	r17, r24
    1040:	69 f7       	brne	.-38     	; 0x101c <main+0xcc>
			}
			for(uint16_t s_ndx = 0; s_ndx < 1000; s_ndx++){
				rprintf("%d\n",audio_value3[s_ndx]);
			}
			*/
			if(audio_count > PEAKS_IN_SAMPLE){
    1042:	e1 e2       	ldi	r30, 0x21	; 33
    1044:	ee 16       	cp	r14, r30
    1046:	e3 e0       	ldi	r30, 0x03	; 3
    1048:	fe 06       	cpc	r15, r30
    104a:	10 f0       	brcs	.+4      	; 0x1050 <main+0x100>
    104c:	11 e0       	ldi	r17, 0x01	; 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <main+0x106>
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	ee 24       	eor	r14, r14
    1054:	ff 24       	eor	r15, r15
			else{
				audio_count = 0;
			}
			
		}
		delay_us(10);	// Sample every 10 us
    1056:	8a e0       	ldi	r24, 0x0A	; 10
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 77 09 	call	0x12ee	; 0x12ee <delay_us>
	double lin_vel = 0;
	init_LDS_buffer();
	prvSetupHardware();
	rprintf("Starting program.\n");
	
	while(!audio_start){
    105e:	11 23       	and	r17, r17
    1060:	09 f4       	brne	.+2      	; 0x1064 <main+0x114>
    1062:	a8 cf       	rjmp	.-176    	; 0xfb4 <main+0x64>
			
		}
		delay_us(10);	// Sample every 10 us
	}
	
	rprintf("START!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    1064:	00 d0       	rcall	.+0      	; 0x1066 <main+0x116>
    1066:	0f 92       	push	r0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	ed b7       	in	r30, 0x3d	; 61
    106c:	fe b7       	in	r31, 0x3e	; 62
    106e:	81 83       	std	Z+1, r24	; 0x01
    1070:	86 e6       	ldi	r24, 0x66	; 102
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	82 83       	std	Z+2, r24	; 0x02
    1078:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
	while(1){
		// Print ranges
		//rprintf("Scan start\n");
/**/
		get_range_scan(ranges);
    1082:	8e 01       	movw	r16, r28
    1084:	07 5f       	subi	r16, 0xF7	; 247
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
		delay_ms(1000);
		delay_ms(1000);
		delay_ms(1000);
		delay_ms(1000);
		*/
		navupdate(ranges, &lin_vel, &ang_vel);
    1088:	a5 e0       	ldi	r26, 0x05	; 5
    108a:	ca 2e       	mov	r12, r26
    108c:	d1 2c       	mov	r13, r1
    108e:	cc 0e       	add	r12, r28
    1090:	dd 1e       	adc	r13, r29
    1092:	7e 01       	movw	r14, r28
    1094:	08 94       	sec
    1096:	e1 1c       	adc	r14, r1
    1098:	f1 1c       	adc	r15, r1
	rprintf("START!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
	while(1){
		// Print ranges
		//rprintf("Scan start\n");
/**/
		get_range_scan(ranges);
    109a:	c8 01       	movw	r24, r16
    109c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <get_range_scan>
		delay_ms(1000);
		delay_ms(1000);
		delay_ms(1000);
		delay_ms(1000);
		*/
		navupdate(ranges, &lin_vel, &ang_vel);
    10a0:	c8 01       	movw	r24, r16
    10a2:	b6 01       	movw	r22, r12
    10a4:	a7 01       	movw	r20, r14
    10a6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <navupdate>
		send_frame(lin_vel,ang_vel);
    10aa:	6d 81       	ldd	r22, Y+5	; 0x05
    10ac:	7e 81       	ldd	r23, Y+6	; 0x06
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	29 81       	ldd	r18, Y+1	; 0x01
    10b4:	3a 81       	ldd	r19, Y+2	; 0x02
    10b6:	4b 81       	ldd	r20, Y+3	; 0x03
    10b8:	5c 81       	ldd	r21, Y+4	; 0x04
    10ba:	0e 94 9c 05 	call	0xb38	; 0xb38 <send_frame>
		delay_ms(10);
    10be:	8a e0       	ldi	r24, 0x0A	; 10
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <sleep>
    10c6:	e9 cf       	rjmp	.-46     	; 0x109a <main+0x14a>

000010c8 <prescaler_hex_to_value>:
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    10c8:	e8 2f       	mov	r30, r24
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	e7 70       	andi	r30, 0x07	; 7
    10ce:	f0 70       	andi	r31, 0x00	; 0
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	e8 52       	subi	r30, 0x28	; 40
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	25 91       	lpm	r18, Z+
    10da:	34 91       	lpm	r19, Z+
}
    10dc:	c9 01       	movw	r24, r18
    10de:	08 95       	ret

000010e0 <prescaler_hex_to_value_for_timer2>:
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    10e0:	e8 2f       	mov	r30, r24
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e7 70       	andi	r30, 0x07	; 7
    10e6:	f0 70       	andi	r31, 0x00	; 0
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	ec 51       	subi	r30, 0x1C	; 28
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	25 91       	lpm	r18, Z+
    10f2:	34 91       	lpm	r19, Z+
}
    10f4:	c9 01       	movw	r24, r18
    10f6:	08 95       	ret

000010f8 <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
    10f8:	85 b5       	in	r24, 0x25	; 37
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	e7 70       	andi	r30, 0x07	; 7
    1100:	f0 70       	andi	r31, 0x00	; 0
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e8 52       	subi	r30, 0x28	; 40
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	25 91       	lpm	r18, Z+
    110c:	34 91       	lpm	r19, Z+
}

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
}
    110e:	c9 01       	movw	r24, r18
    1110:	08 95       	ret

00001112 <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
    1112:	80 91 81 00 	lds	r24, 0x0081
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1116:	e8 2f       	mov	r30, r24
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	e7 70       	andi	r30, 0x07	; 7
    111c:	f0 70       	andi	r31, 0x00	; 0
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	e8 52       	subi	r30, 0x28	; 40
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	25 91       	lpm	r18, Z+
    1128:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR0B);
}
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
}
    112a:	c9 01       	movw	r24, r18
    112c:	08 95       	ret

0000112e <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    112e:	80 91 b1 00 	lds	r24, 0x00B1
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1132:	e8 2f       	mov	r30, r24
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	e7 70       	andi	r30, 0x07	; 7
    1138:	f0 70       	andi	r31, 0x00	; 0
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ec 51       	subi	r30, 0x1C	; 28
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	25 91       	lpm	r18, Z+
    1144:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR1B);
}
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
    1146:	c9 01       	movw	r24, r18
    1148:	08 95       	ret

0000114a <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
    114a:	80 91 91 00 	lds	r24, 0x0091
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    114e:	e8 2f       	mov	r30, r24
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	e7 70       	andi	r30, 0x07	; 7
    1154:	f0 70       	andi	r31, 0x00	; 0
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	e8 52       	subi	r30, 0x28	; 40
    115c:	fe 4f       	sbci	r31, 0xFE	; 254
    115e:	25 91       	lpm	r18, Z+
    1160:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
}
    1162:	c9 01       	movw	r24, r18
    1164:	08 95       	ret

00001166 <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
    1166:	80 91 a1 00 	lds	r24, 0x00A1
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    116a:	e8 2f       	mov	r30, r24
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e7 70       	andi	r30, 0x07	; 7
    1170:	f0 70       	andi	r31, 0x00	; 0
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	e8 52       	subi	r30, 0x28	; 40
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	25 91       	lpm	r18, Z+
    117c:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR3B);
}
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
}
    117e:	c9 01       	movw	r24, r18
    1180:	08 95       	ret

00001182 <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
    1182:	80 91 21 01 	lds	r24, 0x0121
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1186:	e8 2f       	mov	r30, r24
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	e7 70       	andi	r30, 0x07	; 7
    118c:	f0 70       	andi	r31, 0x00	; 0
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	e8 52       	subi	r30, 0x28	; 40
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	25 91       	lpm	r18, Z+
    1198:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR4B);
}
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
}
    119a:	c9 01       	movw	r24, r18
    119c:	08 95       	ret

0000119e <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    119e:	20 91 72 05 	lds	r18, 0x0572
    11a2:	30 91 73 05 	lds	r19, 0x0573
    11a6:	40 91 74 05 	lds	r20, 0x0574
    11aa:	50 91 75 05 	lds	r21, 0x0575
}
    11ae:	b9 01       	movw	r22, r18
    11b0:	ca 01       	movw	r24, r20
    11b2:	08 95       	ret

000011b4 <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    return timer1_ovrflow_cnt;
    11b4:	20 91 6e 05 	lds	r18, 0x056E
    11b8:	30 91 6f 05 	lds	r19, 0x056F
    11bc:	40 91 70 05 	lds	r20, 0x0570
    11c0:	50 91 71 05 	lds	r21, 0x0571
}
    11c4:	b9 01       	movw	r22, r18
    11c6:	ca 01       	movw	r24, r20
    11c8:	08 95       	ret

000011ca <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    return timer2_ovrflow_cnt;
    11ca:	20 91 76 05 	lds	r18, 0x0576
    11ce:	30 91 77 05 	lds	r19, 0x0577
    11d2:	40 91 78 05 	lds	r20, 0x0578
    11d6:	50 91 79 05 	lds	r21, 0x0579
}
    11da:	b9 01       	movw	r22, r18
    11dc:	ca 01       	movw	r24, r20
    11de:	08 95       	ret

000011e0 <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    return timer3_ovrflow_cnt;
    11e0:	20 91 7e 05 	lds	r18, 0x057E
    11e4:	30 91 7f 05 	lds	r19, 0x057F
    11e8:	40 91 80 05 	lds	r20, 0x0580
    11ec:	50 91 81 05 	lds	r21, 0x0581
}
    11f0:	b9 01       	movw	r22, r18
    11f2:	ca 01       	movw	r24, r20
    11f4:	08 95       	ret

000011f6 <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    return timer4_ovrflow_cnt;
    11f6:	20 91 6a 05 	lds	r18, 0x056A
    11fa:	30 91 6b 05 	lds	r19, 0x056B
    11fe:	40 91 6c 05 	lds	r20, 0x056C
    1202:	50 91 6d 05 	lds	r21, 0x056D
}
    1206:	b9 01       	movw	r22, r18
    1208:	ca 01       	movw	r24, r20
    120a:	08 95       	ret

0000120c <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    return timer5_ovrflow_cnt;
    120c:	20 91 82 05 	lds	r18, 0x0582
    1210:	30 91 83 05 	lds	r19, 0x0583
    1214:	40 91 84 05 	lds	r20, 0x0584
    1218:	50 91 85 05 	lds	r21, 0x0585
}
    121c:	b9 01       	movw	r22, r18
    121e:	ca 01       	movw	r24, r20
    1220:	08 95       	ret

00001222 <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    return TCNT0;
    1222:	86 b5       	in	r24, 0x26	; 38
}
    1224:	08 95       	ret

00001226 <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    return TCNT1;
    1226:	20 91 84 00 	lds	r18, 0x0084
    122a:	30 91 85 00 	lds	r19, 0x0085
}
    122e:	c9 01       	movw	r24, r18
    1230:	08 95       	ret

00001232 <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    return TCNT2;
    1232:	80 91 b2 00 	lds	r24, 0x00B2
}
    1236:	08 95       	ret

00001238 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    return TCNT3;
    1238:	20 91 94 00 	lds	r18, 0x0094
    123c:	30 91 95 00 	lds	r19, 0x0095
}
    1240:	c9 01       	movw	r24, r18
    1242:	08 95       	ret

00001244 <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    return TCNT4;
    1244:	20 91 a4 00 	lds	r18, 0x00A4
    1248:	30 91 a5 00 	lds	r19, 0x00A5
}
    124c:	c9 01       	movw	r24, r18
    124e:	08 95       	ret

00001250 <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    return TCNT5;
    1250:	20 91 24 01 	lds	r18, 0x0124
    1254:	30 91 25 01 	lds	r19, 0x0125
}
    1258:	c9 01       	movw	r24, r18
    125a:	08 95       	ret

0000125c <reset_timer0>:

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    125c:	10 92 72 05 	sts	0x0572, r1
    1260:	10 92 73 05 	sts	0x0573, r1
    1264:	10 92 74 05 	sts	0x0574, r1
    1268:	10 92 75 05 	sts	0x0575, r1
    126c:	16 bc       	out	0x26, r1	; 38
}
    126e:	08 95       	ret

00001270 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1270:	10 92 6e 05 	sts	0x056E, r1
    1274:	10 92 6f 05 	sts	0x056F, r1
    1278:	10 92 70 05 	sts	0x0570, r1
    127c:	10 92 71 05 	sts	0x0571, r1
    1280:	10 92 85 00 	sts	0x0085, r1
    1284:	10 92 84 00 	sts	0x0084, r1
}
    1288:	08 95       	ret

0000128a <reset_timer2>:
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    128a:	10 92 76 05 	sts	0x0576, r1
    128e:	10 92 77 05 	sts	0x0577, r1
    1292:	10 92 78 05 	sts	0x0578, r1
    1296:	10 92 79 05 	sts	0x0579, r1
    129a:	10 92 b2 00 	sts	0x00B2, r1
}
    129e:	08 95       	ret

000012a0 <reset_timer3>:
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    12a0:	10 92 7e 05 	sts	0x057E, r1
    12a4:	10 92 7f 05 	sts	0x057F, r1
    12a8:	10 92 80 05 	sts	0x0580, r1
    12ac:	10 92 81 05 	sts	0x0581, r1
    12b0:	10 92 95 00 	sts	0x0095, r1
    12b4:	10 92 94 00 	sts	0x0094, r1
}
    12b8:	08 95       	ret

000012ba <reset_timer4>:
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    12ba:	10 92 6a 05 	sts	0x056A, r1
    12be:	10 92 6b 05 	sts	0x056B, r1
    12c2:	10 92 6c 05 	sts	0x056C, r1
    12c6:	10 92 6d 05 	sts	0x056D, r1
    12ca:	10 92 a5 00 	sts	0x00A5, r1
    12ce:	10 92 a4 00 	sts	0x00A4, r1
}
    12d2:	08 95       	ret

000012d4 <reset_timer5>:
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    12d4:	10 92 82 05 	sts	0x0582, r1
    12d8:	10 92 83 05 	sts	0x0583, r1
    12dc:	10 92 84 05 	sts	0x0584, r1
    12e0:	10 92 85 05 	sts	0x0585, r1
    12e4:	10 92 25 01 	sts	0x0125, r1
    12e8:	10 92 24 01 	sts	0x0124, r1
}
    12ec:	08 95       	ret

000012ee <delay_us>:

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
    12ee:	08 95       	ret

000012f0 <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
    12f0:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 6e 00 	sts	0x006E, r24
    return TCNT5;
}

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    12f8:	10 92 72 05 	sts	0x0572, r1
    12fc:	10 92 73 05 	sts	0x0573, r1
    1300:	10 92 74 05 	sts	0x0574, r1
    1304:	10 92 75 05 	sts	0x0575, r1
    1308:	16 bc       	out	0x26, r1	; 38
void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    130a:	08 95       	ret

0000130c <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
    130c:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    1316:	10 92 6e 05 	sts	0x056E, r1
    131a:	10 92 6f 05 	sts	0x056F, r1
    131e:	10 92 70 05 	sts	0x0570, r1
    1322:	10 92 71 05 	sts	0x0571, r1
    1326:	10 92 85 00 	sts	0x0085, r1
    132a:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    132e:	08 95       	ret

00001330 <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
    1330:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 70 00 	sts	0x0070, r24
{
    TCNT1 = timer1_ovrflow_cnt = 0;
}
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    133a:	10 92 76 05 	sts	0x0576, r1
    133e:	10 92 77 05 	sts	0x0577, r1
    1342:	10 92 78 05 	sts	0x0578, r1
    1346:	10 92 79 05 	sts	0x0579, r1
    134a:	10 92 b2 00 	sts	0x00B2, r1
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
  TIMSK2 = _BV(TOIE2); // enable interrupts
  reset_timer2(); // reset counter
}
    134e:	08 95       	ret

00001350 <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
    1350:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 71 00 	sts	0x0071, r24
{
    TCNT2 = timer2_ovrflow_cnt = 0;
}
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    135a:	10 92 7e 05 	sts	0x057E, r1
    135e:	10 92 7f 05 	sts	0x057F, r1
    1362:	10 92 80 05 	sts	0x0580, r1
    1366:	10 92 81 05 	sts	0x0581, r1
    136a:	10 92 95 00 	sts	0x0095, r1
    136e:	10 92 94 00 	sts	0x0094, r1
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
  TIMSK3 = _BV(TOIE3); // enable interrupts
  reset_timer3(); // reset counter
}
    1372:	08 95       	ret

00001374 <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
    1374:	80 93 a1 00 	sts	0x00A1, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 72 00 	sts	0x0072, r24
{
    TCNT3 = timer3_ovrflow_cnt = 0;
}
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    137e:	10 92 6a 05 	sts	0x056A, r1
    1382:	10 92 6b 05 	sts	0x056B, r1
    1386:	10 92 6c 05 	sts	0x056C, r1
    138a:	10 92 6d 05 	sts	0x056D, r1
    138e:	10 92 a5 00 	sts	0x00A5, r1
    1392:	10 92 a4 00 	sts	0x00A4, r1
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
  TIMSK4 = _BV(TOIE4); // enable interrupts
  reset_timer4(); // reset counter
}
    1396:	08 95       	ret

00001398 <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
    1398:	80 93 21 01 	sts	0x0121, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 73 00 	sts	0x0073, r24
{
    TCNT4 = timer4_ovrflow_cnt = 0;
}
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    13a2:	10 92 82 05 	sts	0x0582, r1
    13a6:	10 92 83 05 	sts	0x0583, r1
    13aa:	10 92 84 05 	sts	0x0584, r1
    13ae:	10 92 85 05 	sts	0x0585, r1
    13b2:	10 92 25 01 	sts	0x0125, r1
    13b6:	10 92 24 01 	sts	0x0124, r1
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
  TIMSK5 = _BV(TOIE5); // enable interrupts
  reset_timer5(); // reset counter
}
    13ba:	08 95       	ret

000013bc <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    13bc:	e8 2f       	mov	r30, r24
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	ee 56       	subi	r30, 0x6E	; 110
    13c6:	fd 4f       	sbci	r31, 0xFD	; 253
    13c8:	71 83       	std	Z+1, r23	; 0x01
    13ca:	60 83       	st	Z, r22
}
    13cc:	08 95       	ret

000013ce <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    13ce:	e8 2f       	mov	r30, r24
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	ee 56       	subi	r30, 0x6E	; 110
    13d8:	fd 4f       	sbci	r31, 0xFD	; 253
    13da:	11 82       	std	Z+1, r1	; 0x01
    13dc:	10 82       	st	Z, r1
}
    13de:	08 95       	ret

000013e0 <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    13e4:	08 95       	ret

000013e6 <sleep>:

void sleep(uint16_t time_ms)
{
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    1402:	5b 01       	movw	r10, r22
    1404:	6c 01       	movw	r12, r24
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	55 e4       	ldi	r21, 0x45	; 69
    140e:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
    1412:	7b 01       	movw	r14, r22
    1414:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__cmpsf2>
    1422:	88 23       	and	r24, r24
    1424:	1c f4       	brge	.+6      	; 0x142c <sleep+0x46>
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	24 c0       	rjmp	.+72     	; 0x1474 <sleep+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
    142c:	c8 01       	movw	r24, r16
    142e:	b7 01       	movw	r22, r14
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__gesf2>
    143c:	18 16       	cp	r1, r24
    143e:	b4 f4       	brge	.+44     	; 0x146c <sleep+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    1440:	c6 01       	movw	r24, r12
    1442:	b5 01       	movw	r22, r10
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
    1450:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1454:	80 e9       	ldi	r24, 0x90	; 144
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <sleep+0x7e>
    145a:	fc 01       	movw	r30, r24
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <sleep+0x76>
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    1464:	61 15       	cp	r22, r1
    1466:	71 05       	cpc	r23, r1
    1468:	c1 f7       	brne	.-16     	; 0x145a <sleep+0x74>
    146a:	07 c0       	rjmp	.+14     	; 0x147a <sleep+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	c8 01       	movw	r24, r16
    146e:	b7 01       	movw	r22, r14
    1470:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1474:	cb 01       	movw	r24, r22
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <sleep+0x90>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	08 95       	ret

0000148c <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
  timer0_ovrflow_cnt++;
    14ae:	80 91 72 05 	lds	r24, 0x0572
    14b2:	90 91 73 05 	lds	r25, 0x0573
    14b6:	a0 91 74 05 	lds	r26, 0x0574
    14ba:	b0 91 75 05 	lds	r27, 0x0575
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	a1 1d       	adc	r26, r1
    14c2:	b1 1d       	adc	r27, r1
    14c4:	80 93 72 05 	sts	0x0572, r24
    14c8:	90 93 73 05 	sts	0x0573, r25
    14cc:	a0 93 74 05 	sts	0x0574, r26
    14d0:	b0 93 75 05 	sts	0x0575, r27
  timer_sleep_cnt++;
    14d4:	80 91 7a 05 	lds	r24, 0x057A
    14d8:	90 91 7b 05 	lds	r25, 0x057B
    14dc:	a0 91 7c 05 	lds	r26, 0x057C
    14e0:	b0 91 7d 05 	lds	r27, 0x057D
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	b1 1d       	adc	r27, r1
    14ea:	80 93 7a 05 	sts	0x057A, r24
    14ee:	90 93 7b 05 	sts	0x057B, r25
    14f2:	a0 93 7c 05 	sts	0x057C, r26
    14f6:	b0 93 7d 05 	sts	0x057D, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    14fa:	80 91 96 02 	lds	r24, 0x0296
    14fe:	90 91 97 02 	lds	r25, 0x0297
    1502:	89 2b       	or	r24, r25
    1504:	29 f0       	breq	.+10     	; 0x1510 <__vector_23+0x84>
    1506:	e0 91 96 02 	lds	r30, 0x0296
    150a:	f0 91 97 02 	lds	r31, 0x0297
    150e:	09 95       	icall
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	4f 93       	push	r20
    1542:	5f 93       	push	r21
    1544:	6f 93       	push	r22
    1546:	7f 93       	push	r23
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
  timer1_ovrflow_cnt++;
    1554:	80 91 6e 05 	lds	r24, 0x056E
    1558:	90 91 6f 05 	lds	r25, 0x056F
    155c:	a0 91 70 05 	lds	r26, 0x0570
    1560:	b0 91 71 05 	lds	r27, 0x0571
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	a1 1d       	adc	r26, r1
    1568:	b1 1d       	adc	r27, r1
    156a:	80 93 6e 05 	sts	0x056E, r24
    156e:	90 93 6f 05 	sts	0x056F, r25
    1572:	a0 93 70 05 	sts	0x0570, r26
    1576:	b0 93 71 05 	sts	0x0571, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    157a:	80 91 a0 02 	lds	r24, 0x02A0
    157e:	90 91 a1 02 	lds	r25, 0x02A1
    1582:	89 2b       	or	r24, r25
    1584:	29 f0       	breq	.+10     	; 0x1590 <__vector_20+0x5e>
    1586:	e0 91 a0 02 	lds	r30, 0x02A0
    158a:	f0 91 a1 02 	lds	r31, 0x02A1
    158e:	09 95       	icall
}
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
  timer2_ovrflow_cnt++;
    15d4:	80 91 76 05 	lds	r24, 0x0576
    15d8:	90 91 77 05 	lds	r25, 0x0577
    15dc:	a0 91 78 05 	lds	r26, 0x0578
    15e0:	b0 91 79 05 	lds	r27, 0x0579
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	a1 1d       	adc	r26, r1
    15e8:	b1 1d       	adc	r27, r1
    15ea:	80 93 76 05 	sts	0x0576, r24
    15ee:	90 93 77 05 	sts	0x0577, r25
    15f2:	a0 93 78 05 	sts	0x0578, r26
    15f6:	b0 93 79 05 	sts	0x0579, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    15fa:	80 91 a6 02 	lds	r24, 0x02A6
    15fe:	90 91 a7 02 	lds	r25, 0x02A7
    1602:	89 2b       	or	r24, r25
    1604:	29 f0       	breq	.+10     	; 0x1610 <__vector_15+0x5e>
    1606:	e0 91 a6 02 	lds	r30, 0x02A6
    160a:	f0 91 a7 02 	lds	r31, 0x02A7
    160e:	09 95       	icall
}
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	bf 91       	pop	r27
    1616:	af 91       	pop	r26
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	7f 91       	pop	r23
    161e:	6f 91       	pop	r22
    1620:	5f 91       	pop	r21
    1622:	4f 91       	pop	r20
    1624:	3f 91       	pop	r19
    1626:	2f 91       	pop	r18
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
  timer3_ovrflow_cnt++;
    1654:	80 91 7e 05 	lds	r24, 0x057E
    1658:	90 91 7f 05 	lds	r25, 0x057F
    165c:	a0 91 80 05 	lds	r26, 0x0580
    1660:	b0 91 81 05 	lds	r27, 0x0581
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	a1 1d       	adc	r26, r1
    1668:	b1 1d       	adc	r27, r1
    166a:	80 93 7e 05 	sts	0x057E, r24
    166e:	90 93 7f 05 	sts	0x057F, r25
    1672:	a0 93 80 05 	sts	0x0580, r26
    1676:	b0 93 81 05 	sts	0x0581, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    167a:	80 91 b0 02 	lds	r24, 0x02B0
    167e:	90 91 b1 02 	lds	r25, 0x02B1
    1682:	89 2b       	or	r24, r25
    1684:	29 f0       	breq	.+10     	; 0x1690 <__vector_35+0x5e>
    1686:	e0 91 b0 02 	lds	r30, 0x02B0
    168a:	f0 91 b1 02 	lds	r31, 0x02B1
    168e:	09 95       	icall
}
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
  timer4_ovrflow_cnt++;
    16d4:	80 91 6a 05 	lds	r24, 0x056A
    16d8:	90 91 6b 05 	lds	r25, 0x056B
    16dc:	a0 91 6c 05 	lds	r26, 0x056C
    16e0:	b0 91 6d 05 	lds	r27, 0x056D
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	a1 1d       	adc	r26, r1
    16e8:	b1 1d       	adc	r27, r1
    16ea:	80 93 6a 05 	sts	0x056A, r24
    16ee:	90 93 6b 05 	sts	0x056B, r25
    16f2:	a0 93 6c 05 	sts	0x056C, r26
    16f6:	b0 93 6d 05 	sts	0x056D, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    16fa:	80 91 ba 02 	lds	r24, 0x02BA
    16fe:	90 91 bb 02 	lds	r25, 0x02BB
    1702:	89 2b       	or	r24, r25
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_45+0x5e>
    1706:	e0 91 ba 02 	lds	r30, 0x02BA
    170a:	f0 91 bb 02 	lds	r31, 0x02BB
    170e:	09 95       	icall
}
    1710:	ff 91       	pop	r31
    1712:	ef 91       	pop	r30
    1714:	bf 91       	pop	r27
    1716:	af 91       	pop	r26
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	7f 91       	pop	r23
    171e:	6f 91       	pop	r22
    1720:	5f 91       	pop	r21
    1722:	4f 91       	pop	r20
    1724:	3f 91       	pop	r19
    1726:	2f 91       	pop	r18
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	2f 93       	push	r18
    173e:	3f 93       	push	r19
    1740:	4f 93       	push	r20
    1742:	5f 93       	push	r21
    1744:	6f 93       	push	r22
    1746:	7f 93       	push	r23
    1748:	8f 93       	push	r24
    174a:	9f 93       	push	r25
    174c:	af 93       	push	r26
    174e:	bf 93       	push	r27
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
  timer5_ovrflow_cnt++;
    1754:	80 91 82 05 	lds	r24, 0x0582
    1758:	90 91 83 05 	lds	r25, 0x0583
    175c:	a0 91 84 05 	lds	r26, 0x0584
    1760:	b0 91 85 05 	lds	r27, 0x0585
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	a1 1d       	adc	r26, r1
    1768:	b1 1d       	adc	r27, r1
    176a:	80 93 82 05 	sts	0x0582, r24
    176e:	90 93 83 05 	sts	0x0583, r25
    1772:	a0 93 84 05 	sts	0x0584, r26
    1776:	b0 93 85 05 	sts	0x0585, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    177a:	80 91 c4 02 	lds	r24, 0x02C4
    177e:	90 91 c5 02 	lds	r25, 0x02C5
    1782:	89 2b       	or	r24, r25
    1784:	29 f0       	breq	.+10     	; 0x1790 <__vector_50+0x5e>
    1786:	e0 91 c4 02 	lds	r30, 0x02C4
    178a:	f0 91 c5 02 	lds	r31, 0x02C5
    178e:	09 95       	icall
}
    1790:	ff 91       	pop	r31
    1792:	ef 91       	pop	r30
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    17d4:	80 91 92 02 	lds	r24, 0x0292
    17d8:	90 91 93 02 	lds	r25, 0x0293
    17dc:	89 2b       	or	r24, r25
    17de:	29 f0       	breq	.+10     	; 0x17ea <__vector_21+0x38>
    17e0:	e0 91 92 02 	lds	r30, 0x0292
    17e4:	f0 91 93 02 	lds	r31, 0x0293
    17e8:	09 95       	icall
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    182e:	80 91 94 02 	lds	r24, 0x0294
    1832:	90 91 95 02 	lds	r25, 0x0295
    1836:	89 2b       	or	r24, r25
    1838:	29 f0       	breq	.+10     	; 0x1844 <__vector_22+0x38>
    183a:	e0 91 94 02 	lds	r30, 0x0294
    183e:	f0 91 95 02 	lds	r31, 0x0295
    1842:	09 95       	icall
}
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	bf 91       	pop	r27
    184a:	af 91       	pop	r26
    184c:	9f 91       	pop	r25
    184e:	8f 91       	pop	r24
    1850:	7f 91       	pop	r23
    1852:	6f 91       	pop	r22
    1854:	5f 91       	pop	r21
    1856:	4f 91       	pop	r20
    1858:	3f 91       	pop	r19
    185a:	2f 91       	pop	r18
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    1866:	1f 92       	push	r1
    1868:	0f 92       	push	r0
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	0f 92       	push	r0
    186e:	11 24       	eor	r1, r1
    1870:	2f 93       	push	r18
    1872:	3f 93       	push	r19
    1874:	4f 93       	push	r20
    1876:	5f 93       	push	r21
    1878:	6f 93       	push	r22
    187a:	7f 93       	push	r23
    187c:	8f 93       	push	r24
    187e:	9f 93       	push	r25
    1880:	af 93       	push	r26
    1882:	bf 93       	push	r27
    1884:	ef 93       	push	r30
    1886:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    1888:	80 91 98 02 	lds	r24, 0x0298
    188c:	90 91 99 02 	lds	r25, 0x0299
    1890:	89 2b       	or	r24, r25
    1892:	29 f0       	breq	.+10     	; 0x189e <__vector_16+0x38>
    1894:	e0 91 98 02 	lds	r30, 0x0298
    1898:	f0 91 99 02 	lds	r31, 0x0299
    189c:	09 95       	icall
}
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <__vector_18>:
{
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
}
*/
ISR(TIMER1_COMPB_vect)
{
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	ef 93       	push	r30
    18e0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    18e2:	80 91 9c 02 	lds	r24, 0x029C
    18e6:	90 91 9d 02 	lds	r25, 0x029D
    18ea:	89 2b       	or	r24, r25
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <__vector_18+0x38>
    18ee:	e0 91 9c 02 	lds	r30, 0x029C
    18f2:	f0 91 9d 02 	lds	r31, 0x029D
    18f6:	09 95       	icall
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	af 93       	push	r26
    1936:	bf 93       	push	r27
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    193c:	80 91 9e 02 	lds	r24, 0x029E
    1940:	90 91 9f 02 	lds	r25, 0x029F
    1944:	89 2b       	or	r24, r25
    1946:	29 f0       	breq	.+10     	; 0x1952 <__vector_19+0x38>
    1948:	e0 91 9e 02 	lds	r30, 0x029E
    194c:	f0 91 9f 02 	lds	r31, 0x029F
    1950:	09 95       	icall
}
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	2f 93       	push	r18
    1980:	3f 93       	push	r19
    1982:	4f 93       	push	r20
    1984:	5f 93       	push	r21
    1986:	6f 93       	push	r22
    1988:	7f 93       	push	r23
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	af 93       	push	r26
    1990:	bf 93       	push	r27
    1992:	ef 93       	push	r30
    1994:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    1996:	80 91 a2 02 	lds	r24, 0x02A2
    199a:	90 91 a3 02 	lds	r25, 0x02A3
    199e:	89 2b       	or	r24, r25
    19a0:	29 f0       	breq	.+10     	; 0x19ac <__vector_13+0x38>
    19a2:	e0 91 a2 02 	lds	r30, 0x02A2
    19a6:	f0 91 a3 02 	lds	r31, 0x02A3
    19aa:	09 95       	icall
}
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    19f0:	80 91 a4 02 	lds	r24, 0x02A4
    19f4:	90 91 a5 02 	lds	r25, 0x02A5
    19f8:	89 2b       	or	r24, r25
    19fa:	29 f0       	breq	.+10     	; 0x1a06 <__vector_14+0x38>
    19fc:	e0 91 a4 02 	lds	r30, 0x02A4
    1a00:	f0 91 a5 02 	lds	r31, 0x02A5
    1a04:	09 95       	icall
}
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	4f 93       	push	r20
    1a38:	5f 93       	push	r21
    1a3a:	6f 93       	push	r22
    1a3c:	7f 93       	push	r23
    1a3e:	8f 93       	push	r24
    1a40:	9f 93       	push	r25
    1a42:	af 93       	push	r26
    1a44:	bf 93       	push	r27
    1a46:	ef 93       	push	r30
    1a48:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    1a4a:	80 91 a8 02 	lds	r24, 0x02A8
    1a4e:	90 91 a9 02 	lds	r25, 0x02A9
    1a52:	89 2b       	or	r24, r25
    1a54:	29 f0       	breq	.+10     	; 0x1a60 <__vector_31+0x38>
    1a56:	e0 91 a8 02 	lds	r30, 0x02A8
    1a5a:	f0 91 a9 02 	lds	r31, 0x02A9
    1a5e:	09 95       	icall
}
    1a60:	ff 91       	pop	r31
    1a62:	ef 91       	pop	r30
    1a64:	bf 91       	pop	r27
    1a66:	af 91       	pop	r26
    1a68:	9f 91       	pop	r25
    1a6a:	8f 91       	pop	r24
    1a6c:	7f 91       	pop	r23
    1a6e:	6f 91       	pop	r22
    1a70:	5f 91       	pop	r21
    1a72:	4f 91       	pop	r20
    1a74:	3f 91       	pop	r19
    1a76:	2f 91       	pop	r18
    1a78:	0f 90       	pop	r0
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	0f 90       	pop	r0
    1a7e:	1f 90       	pop	r1
    1a80:	18 95       	reti

00001a82 <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    1a82:	1f 92       	push	r1
    1a84:	0f 92       	push	r0
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	0f 92       	push	r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	2f 93       	push	r18
    1a8e:	3f 93       	push	r19
    1a90:	4f 93       	push	r20
    1a92:	5f 93       	push	r21
    1a94:	6f 93       	push	r22
    1a96:	7f 93       	push	r23
    1a98:	8f 93       	push	r24
    1a9a:	9f 93       	push	r25
    1a9c:	af 93       	push	r26
    1a9e:	bf 93       	push	r27
    1aa0:	ef 93       	push	r30
    1aa2:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    1aa4:	80 91 aa 02 	lds	r24, 0x02AA
    1aa8:	90 91 ab 02 	lds	r25, 0x02AB
    1aac:	89 2b       	or	r24, r25
    1aae:	29 f0       	breq	.+10     	; 0x1aba <__vector_32+0x38>
    1ab0:	e0 91 aa 02 	lds	r30, 0x02AA
    1ab4:	f0 91 ab 02 	lds	r31, 0x02AB
    1ab8:	09 95       	icall
}
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    1afe:	80 91 ac 02 	lds	r24, 0x02AC
    1b02:	90 91 ad 02 	lds	r25, 0x02AD
    1b06:	89 2b       	or	r24, r25
    1b08:	29 f0       	breq	.+10     	; 0x1b14 <__vector_33+0x38>
    1b0a:	e0 91 ac 02 	lds	r30, 0x02AC
    1b0e:	f0 91 ad 02 	lds	r31, 0x02AD
    1b12:	09 95       	icall
}
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    1b58:	80 91 ae 02 	lds	r24, 0x02AE
    1b5c:	90 91 af 02 	lds	r25, 0x02AF
    1b60:	89 2b       	or	r24, r25
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <__vector_34+0x38>
    1b64:	e0 91 ae 02 	lds	r30, 0x02AE
    1b68:	f0 91 af 02 	lds	r31, 0x02AF
    1b6c:	09 95       	icall
}
    1b6e:	ff 91       	pop	r31
    1b70:	ef 91       	pop	r30
    1b72:	bf 91       	pop	r27
    1b74:	af 91       	pop	r26
    1b76:	9f 91       	pop	r25
    1b78:	8f 91       	pop	r24
    1b7a:	7f 91       	pop	r23
    1b7c:	6f 91       	pop	r22
    1b7e:	5f 91       	pop	r21
    1b80:	4f 91       	pop	r20
    1b82:	3f 91       	pop	r19
    1b84:	2f 91       	pop	r18
    1b86:	0f 90       	pop	r0
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	0f 90       	pop	r0
    1b8c:	1f 90       	pop	r1
    1b8e:	18 95       	reti

00001b90 <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    1b90:	1f 92       	push	r1
    1b92:	0f 92       	push	r0
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	0f 92       	push	r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	2f 93       	push	r18
    1b9c:	3f 93       	push	r19
    1b9e:	4f 93       	push	r20
    1ba0:	5f 93       	push	r21
    1ba2:	6f 93       	push	r22
    1ba4:	7f 93       	push	r23
    1ba6:	8f 93       	push	r24
    1ba8:	9f 93       	push	r25
    1baa:	af 93       	push	r26
    1bac:	bf 93       	push	r27
    1bae:	ef 93       	push	r30
    1bb0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    1bb2:	80 91 b2 02 	lds	r24, 0x02B2
    1bb6:	90 91 b3 02 	lds	r25, 0x02B3
    1bba:	89 2b       	or	r24, r25
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <__vector_41+0x38>
    1bbe:	e0 91 b2 02 	lds	r30, 0x02B2
    1bc2:	f0 91 b3 02 	lds	r31, 0x02B3
    1bc6:	09 95       	icall
}
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	9f 91       	pop	r25
    1bd2:	8f 91       	pop	r24
    1bd4:	7f 91       	pop	r23
    1bd6:	6f 91       	pop	r22
    1bd8:	5f 91       	pop	r21
    1bda:	4f 91       	pop	r20
    1bdc:	3f 91       	pop	r19
    1bde:	2f 91       	pop	r18
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f 90       	pop	r0
    1be6:	1f 90       	pop	r1
    1be8:	18 95       	reti

00001bea <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    1bea:	1f 92       	push	r1
    1bec:	0f 92       	push	r0
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	0f 92       	push	r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	2f 93       	push	r18
    1bf6:	3f 93       	push	r19
    1bf8:	4f 93       	push	r20
    1bfa:	5f 93       	push	r21
    1bfc:	6f 93       	push	r22
    1bfe:	7f 93       	push	r23
    1c00:	8f 93       	push	r24
    1c02:	9f 93       	push	r25
    1c04:	af 93       	push	r26
    1c06:	bf 93       	push	r27
    1c08:	ef 93       	push	r30
    1c0a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    1c0c:	80 91 b4 02 	lds	r24, 0x02B4
    1c10:	90 91 b5 02 	lds	r25, 0x02B5
    1c14:	89 2b       	or	r24, r25
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <__vector_42+0x38>
    1c18:	e0 91 b4 02 	lds	r30, 0x02B4
    1c1c:	f0 91 b5 02 	lds	r31, 0x02B5
    1c20:	09 95       	icall
}
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	2f 93       	push	r18
    1c50:	3f 93       	push	r19
    1c52:	4f 93       	push	r20
    1c54:	5f 93       	push	r21
    1c56:	6f 93       	push	r22
    1c58:	7f 93       	push	r23
    1c5a:	8f 93       	push	r24
    1c5c:	9f 93       	push	r25
    1c5e:	af 93       	push	r26
    1c60:	bf 93       	push	r27
    1c62:	ef 93       	push	r30
    1c64:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    1c66:	80 91 b6 02 	lds	r24, 0x02B6
    1c6a:	90 91 b7 02 	lds	r25, 0x02B7
    1c6e:	89 2b       	or	r24, r25
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <__vector_43+0x38>
    1c72:	e0 91 b6 02 	lds	r30, 0x02B6
    1c76:	f0 91 b7 02 	lds	r31, 0x02B7
    1c7a:	09 95       	icall
}
    1c7c:	ff 91       	pop	r31
    1c7e:	ef 91       	pop	r30
    1c80:	bf 91       	pop	r27
    1c82:	af 91       	pop	r26
    1c84:	9f 91       	pop	r25
    1c86:	8f 91       	pop	r24
    1c88:	7f 91       	pop	r23
    1c8a:	6f 91       	pop	r22
    1c8c:	5f 91       	pop	r21
    1c8e:	4f 91       	pop	r20
    1c90:	3f 91       	pop	r19
    1c92:	2f 91       	pop	r18
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	af 93       	push	r26
    1cba:	bf 93       	push	r27
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    1cc0:	80 91 b8 02 	lds	r24, 0x02B8
    1cc4:	90 91 b9 02 	lds	r25, 0x02B9
    1cc8:	89 2b       	or	r24, r25
    1cca:	29 f0       	breq	.+10     	; 0x1cd6 <__vector_44+0x38>
    1ccc:	e0 91 b8 02 	lds	r30, 0x02B8
    1cd0:	f0 91 b9 02 	lds	r31, 0x02B9
    1cd4:	09 95       	icall
}
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    1cf8:	1f 92       	push	r1
    1cfa:	0f 92       	push	r0
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	0f 92       	push	r0
    1d00:	11 24       	eor	r1, r1
    1d02:	2f 93       	push	r18
    1d04:	3f 93       	push	r19
    1d06:	4f 93       	push	r20
    1d08:	5f 93       	push	r21
    1d0a:	6f 93       	push	r22
    1d0c:	7f 93       	push	r23
    1d0e:	8f 93       	push	r24
    1d10:	9f 93       	push	r25
    1d12:	af 93       	push	r26
    1d14:	bf 93       	push	r27
    1d16:	ef 93       	push	r30
    1d18:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    1d1a:	80 91 bc 02 	lds	r24, 0x02BC
    1d1e:	90 91 bd 02 	lds	r25, 0x02BD
    1d22:	89 2b       	or	r24, r25
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <__vector_46+0x38>
    1d26:	e0 91 bc 02 	lds	r30, 0x02BC
    1d2a:	f0 91 bd 02 	lds	r31, 0x02BD
    1d2e:	09 95       	icall
}
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	4f 93       	push	r20
    1d62:	5f 93       	push	r21
    1d64:	6f 93       	push	r22
    1d66:	7f 93       	push	r23
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
    1d70:	ef 93       	push	r30
    1d72:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    1d74:	80 91 be 02 	lds	r24, 0x02BE
    1d78:	90 91 bf 02 	lds	r25, 0x02BF
    1d7c:	89 2b       	or	r24, r25
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <__vector_47+0x38>
    1d80:	e0 91 be 02 	lds	r30, 0x02BE
    1d84:	f0 91 bf 02 	lds	r31, 0x02BF
    1d88:	09 95       	icall
}
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	bf 91       	pop	r27
    1d90:	af 91       	pop	r26
    1d92:	9f 91       	pop	r25
    1d94:	8f 91       	pop	r24
    1d96:	7f 91       	pop	r23
    1d98:	6f 91       	pop	r22
    1d9a:	5f 91       	pop	r21
    1d9c:	4f 91       	pop	r20
    1d9e:	3f 91       	pop	r19
    1da0:	2f 91       	pop	r18
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    1dce:	80 91 c0 02 	lds	r24, 0x02C0
    1dd2:	90 91 c1 02 	lds	r25, 0x02C1
    1dd6:	89 2b       	or	r24, r25
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <__vector_48+0x38>
    1dda:	e0 91 c0 02 	lds	r30, 0x02C0
    1dde:	f0 91 c1 02 	lds	r31, 0x02C1
    1de2:	09 95       	icall
}
    1de4:	ff 91       	pop	r31
    1de6:	ef 91       	pop	r30
    1de8:	bf 91       	pop	r27
    1dea:	af 91       	pop	r26
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	7f 91       	pop	r23
    1df2:	6f 91       	pop	r22
    1df4:	5f 91       	pop	r21
    1df6:	4f 91       	pop	r20
    1df8:	3f 91       	pop	r19
    1dfa:	2f 91       	pop	r18
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    1e06:	1f 92       	push	r1
    1e08:	0f 92       	push	r0
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	0f 92       	push	r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	2f 93       	push	r18
    1e12:	3f 93       	push	r19
    1e14:	4f 93       	push	r20
    1e16:	5f 93       	push	r21
    1e18:	6f 93       	push	r22
    1e1a:	7f 93       	push	r23
    1e1c:	8f 93       	push	r24
    1e1e:	9f 93       	push	r25
    1e20:	af 93       	push	r26
    1e22:	bf 93       	push	r27
    1e24:	ef 93       	push	r30
    1e26:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    1e28:	80 91 c2 02 	lds	r24, 0x02C2
    1e2c:	90 91 c3 02 	lds	r25, 0x02C3
    1e30:	89 2b       	or	r24, r25
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <__vector_49+0x38>
    1e34:	e0 91 c2 02 	lds	r30, 0x02C2
    1e38:	f0 91 c3 02 	lds	r31, 0x02C3
    1e3c:	09 95       	icall
}
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <__vector_default>:

ISR(BADISR_vect)
{
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	7f 93       	push	r23
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
  rprintf("BAD_vect called!");
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <__vector_default+0x24>
    1e84:	0f 92       	push	r0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	ed b7       	in	r30, 0x3d	; 61
    1e8a:	fe b7       	in	r31, 0x3e	; 62
    1e8c:	81 83       	std	Z+1, r24	; 0x01
    1e8e:	84 ef       	ldi	r24, 0xF4	; 244
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	93 83       	std	Z+3, r25	; 0x03
    1e94:	82 83       	std	Z+2, r24	; 0x02
    1e96:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
}
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    1ec2:	84 30       	cpi	r24, 0x04	; 4
    1ec4:	40 f4       	brcc	.+16     	; 0x1ed6 <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    1ec6:	e8 2f       	mov	r30, r24
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ea 5f       	subi	r30, 0xFA	; 250
    1ed0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed2:	71 83       	std	Z+1, r23	; 0x01
    1ed4:	60 83       	st	Z, r22
    1ed6:	08 95       	ret

00001ed8 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    1ed8:	1f 93       	push	r17
    1eda:	18 2f       	mov	r17, r24
    1edc:	9a 01       	movw	r18, r20
    1ede:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	60 58       	subi	r22, 0x80	; 128
    1ee6:	7b 47       	sbci	r23, 0x7B	; 123
    1ee8:	81 4e       	sbci	r24, 0xE1	; 225
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	f3 e0       	ldi	r31, 0x03	; 3
    1eee:	66 0f       	add	r22, r22
    1ef0:	77 1f       	adc	r23, r23
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	fa 95       	dec	r31
    1ef8:	d1 f7       	brne	.-12     	; 0x1eee <uartSetBaudRate+0x16>
    1efa:	e4 e0       	ldi	r30, 0x04	; 4
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	44 1f       	adc	r20, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	ea 95       	dec	r30
    1f06:	d1 f7       	brne	.-12     	; 0x1efc <uartSetBaudRate+0x24>
    1f08:	0e 94 be 20 	call	0x417c	; 0x417c <__udivmodsi4>
    1f0c:	21 50       	subi	r18, 0x01	; 1
    1f0e:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
    1f10:	13 30       	cpi	r17, 0x03	; 3
    1f12:	29 f4       	brne	.+10     	; 0x1f1e <uartSetBaudRate+0x46>
	{
		outb(UBRR3L, bauddiv);
    1f14:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
    1f18:	30 93 35 01 	sts	0x0135, r19
    1f1c:	12 c0       	rjmp	.+36     	; 0x1f42 <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==2)
    1f1e:	12 30       	cpi	r17, 0x02	; 2
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <uartSetBaudRate+0x54>
	{
		outb(UBRR2L, bauddiv);
    1f22:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
    1f26:	30 93 d5 00 	sts	0x00D5, r19
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==1)
    1f2c:	11 30       	cpi	r17, 0x01	; 1
    1f2e:	29 f4       	brne	.+10     	; 0x1f3a <uartSetBaudRate+0x62>
	{
		outb(UBRR1L, bauddiv);
    1f30:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
    1f34:	30 93 cd 00 	sts	0x00CD, r19
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <uartSetBaudRate+0x6a>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
    1f3a:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    1f3e:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
    1f42:	1f 91       	pop	r17
    1f44:	08 95       	ret

00001f46 <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	a3 e0       	ldi	r26, 0x03	; 3
    1f4c:	22 0f       	add	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	aa 95       	dec	r26
    1f52:	e1 f7       	brne	.-8      	; 0x1f4c <uartGetRxBuffer+0x6>
    1f54:	26 57       	subi	r18, 0x76	; 118
    1f56:	3a 4f       	sbci	r19, 0xFA	; 250
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    1f58:	c9 01       	movw	r24, r18
    1f5a:	08 95       	ret

00001f5c <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	b3 e0       	ldi	r27, 0x03	; 3
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	ba 95       	dec	r27
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <uartGetTxBuffer+0x6>
    1f6a:	22 55       	subi	r18, 0x52	; 82
    1f6c:	3a 4f       	sbci	r19, 0xFA	; 250
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    1f6e:	c9 01       	movw	r24, r18
    1f70:	08 95       	ret

00001f72 <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    1f72:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    1f78:	80 91 30 01 	lds	r24, 0x0130
    1f7c:	85 ff       	sbrs	r24, 5
    1f7e:	fc cf       	rjmp	.-8      	; 0x1f78 <uartSendByte+0x6>
		outb(UDR3, txData);
    1f80:	60 93 36 01 	sts	0x0136, r22
    1f84:	18 c0       	rjmp	.+48     	; 0x1fb6 <uartSendByte+0x44>
	}
	else if(nUart==2)
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	39 f4       	brne	.+14     	; 0x1f98 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    1f8a:	80 91 d0 00 	lds	r24, 0x00D0
    1f8e:	85 ff       	sbrs	r24, 5
    1f90:	fc cf       	rjmp	.-8      	; 0x1f8a <uartSendByte+0x18>
		outb(UDR2, txData);
    1f92:	60 93 d6 00 	sts	0x00D6, r22
    1f96:	0f c0       	rjmp	.+30     	; 0x1fb6 <uartSendByte+0x44>
	}
	else if(nUart==1)
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    1f9c:	80 91 c8 00 	lds	r24, 0x00C8
    1fa0:	85 ff       	sbrs	r24, 5
    1fa2:	fc cf       	rjmp	.-8      	; 0x1f9c <uartSendByte+0x2a>
		outb(UDR1, txData);
    1fa4:	60 93 ce 00 	sts	0x00CE, r22
    1fa8:	06 c0       	rjmp	.+12     	; 0x1fb6 <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
    1faa:	80 91 c0 00 	lds	r24, 0x00C0
    1fae:	85 ff       	sbrs	r24, 5
    1fb0:	fc cf       	rjmp	.-8      	; 0x1faa <uartSendByte+0x38>
		outb(UDR0, txData);
    1fb2:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	ea 57       	subi	r30, 0x7A	; 122
    1fba:	fa 4f       	sbci	r31, 0xFA	; 250
    1fbc:	10 82       	st	Z, r1
}
    1fbe:	08 95       	ret

00001fc0 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    1fc0:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
}
    1fc8:	08 95       	ret

00001fca <uart1SendByte>:

void uart1SendByte(u08 data)
{
    1fca:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
}
    1fd2:	08 95       	ret

00001fd4 <uart2SendByte>:

void uart2SendByte(u08 data)
{
    1fd4:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
}
    1fdc:	08 95       	ret

00001fde <uart3SendByte>:

void uart3SendByte(u08 data)
{
    1fde:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
}
    1fe6:	08 95       	ret

00001fe8 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	e8 2f       	mov	r30, r24
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	8a 95       	dec	r24
    1ff6:	e1 f7       	brne	.-8      	; 0x1ff0 <uartReceiveBufferIsEmpty+0x8>
    1ff8:	e2 57       	subi	r30, 0x72	; 114
    1ffa:	fa 4f       	sbci	r31, 0xFA	; 250
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	89 2b       	or	r24, r25
    2002:	09 f4       	brne	.+2      	; 0x2006 <uartReceiveBufferIsEmpty+0x1e>
    2004:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    2006:	82 2f       	mov	r24, r18
    2008:	08 95       	ret

0000200a <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	19 f4       	brne	.+6      	; 0x2018 <uartReceiveService+0xe>
		c = inb(UDR3);
    2012:	60 91 36 01 	lds	r22, 0x0136
    2016:	0c c0       	rjmp	.+24     	; 0x2030 <uartReceiveService+0x26>
	else if(nUart==2)
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	19 f4       	brne	.+6      	; 0x2022 <uartReceiveService+0x18>
		c = inb(UDR2);
    201c:	60 91 d6 00 	lds	r22, 0x00D6
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <uartReceiveService+0x26>
	else if(nUart==1)
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	19 f4       	brne	.+6      	; 0x202c <uartReceiveService+0x22>
		c = inb(UDR1);
    2026:	60 91 ce 00 	lds	r22, 0x00CE
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <uartReceiveService+0x26>
	else
		c = inb(UDR0);
    202c:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	e9 01       	movw	r28, r18
    2036:	cc 0f       	add	r28, r28
    2038:	dd 1f       	adc	r29, r29
    203a:	fe 01       	movw	r30, r28
    203c:	ea 5f       	subi	r30, 0xFA	; 250
    203e:	fa 4f       	sbci	r31, 0xFA	; 250
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	89 2b       	or	r24, r25
    2046:	31 f0       	breq	.+12     	; 0x2054 <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    2048:	01 90       	ld	r0, Z+
    204a:	f0 81       	ld	r31, Z
    204c:	e0 2d       	mov	r30, r0
    204e:	86 2f       	mov	r24, r22
    2050:	09 95       	icall
    2052:	14 c0       	rjmp	.+40     	; 0x207c <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	9a 95       	dec	r25
    205c:	e1 f7       	brne	.-8      	; 0x2056 <uartReceiveService+0x4c>
    205e:	c9 01       	movw	r24, r18
    2060:	86 57       	subi	r24, 0x76	; 118
    2062:	9a 4f       	sbci	r25, 0xFA	; 250
    2064:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
    2068:	88 23       	and	r24, r24
    206a:	41 f4       	brne	.+16     	; 0x207c <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    206c:	fe 01       	movw	r30, r28
    206e:	e2 53       	subi	r30, 0x32	; 50
    2070:	fa 4f       	sbci	r31, 0xFA	; 250
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
		}
	}
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <__vector_54>:
{
	uartReceiveService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    2082:	1f 92       	push	r1
    2084:	0f 92       	push	r0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	0f 92       	push	r0
    208a:	11 24       	eor	r1, r1
    208c:	2f 93       	push	r18
    208e:	3f 93       	push	r19
    2090:	4f 93       	push	r20
    2092:	5f 93       	push	r21
    2094:	6f 93       	push	r22
    2096:	7f 93       	push	r23
    2098:	8f 93       	push	r24
    209a:	9f 93       	push	r25
    209c:	af 93       	push	r26
    209e:	bf 93       	push	r27
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
	uartReceiveService(3);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	0e 94 05 10 	call	0x200a	; 0x200a <uartReceiveService>
}
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	7f 91       	pop	r23
    20b8:	6f 91       	pop	r22
    20ba:	5f 91       	pop	r21
    20bc:	4f 91       	pop	r20
    20be:	3f 91       	pop	r19
    20c0:	2f 91       	pop	r18
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <__vector_51>:
{
	uartReceiveService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    20cc:	1f 92       	push	r1
    20ce:	0f 92       	push	r0
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	0f 92       	push	r0
    20d4:	11 24       	eor	r1, r1
    20d6:	2f 93       	push	r18
    20d8:	3f 93       	push	r19
    20da:	4f 93       	push	r20
    20dc:	5f 93       	push	r21
    20de:	6f 93       	push	r22
    20e0:	7f 93       	push	r23
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	af 93       	push	r26
    20e8:	bf 93       	push	r27
    20ea:	ef 93       	push	r30
    20ec:	ff 93       	push	r31
	uartReceiveService(2);
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	0e 94 05 10 	call	0x200a	; 0x200a <uartReceiveService>
}
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_36>:
{
	uartReceiveService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	5f 93       	push	r21
    2128:	6f 93       	push	r22
    212a:	7f 93       	push	r23
    212c:	8f 93       	push	r24
    212e:	9f 93       	push	r25
    2130:	af 93       	push	r26
    2132:	bf 93       	push	r27
    2134:	ef 93       	push	r30
    2136:	ff 93       	push	r31
	uartReceiveService(1);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	0e 94 05 10 	call	0x200a	; 0x200a <uartReceiveService>
}
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	bf 91       	pop	r27
    2144:	af 91       	pop	r26
    2146:	9f 91       	pop	r25
    2148:	8f 91       	pop	r24
    214a:	7f 91       	pop	r23
    214c:	6f 91       	pop	r22
    214e:	5f 91       	pop	r21
    2150:	4f 91       	pop	r20
    2152:	3f 91       	pop	r19
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
	uartReceiveService(0);
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0e 94 05 10 	call	0x200a	; 0x200a <uartReceiveService>
}
    2188:	ff 91       	pop	r31
    218a:	ef 91       	pop	r30
    218c:	bf 91       	pop	r27
    218e:	af 91       	pop	r26
    2190:	9f 91       	pop	r25
    2192:	8f 91       	pop	r24
    2194:	7f 91       	pop	r23
    2196:	6f 91       	pop	r22
    2198:	5f 91       	pop	r21
    219a:	4f 91       	pop	r20
    219c:	3f 91       	pop	r19
    219e:	2f 91       	pop	r18
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	0f 90       	pop	r0
    21a6:	1f 90       	pop	r1
    21a8:	18 95       	reti

000021aa <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    21aa:	8f 92       	push	r8
    21ac:	9f 92       	push	r9
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	88 2e       	mov	r8, r24
    21c4:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    21c6:	c8 2e       	mov	r12, r24
    21c8:	dd 24       	eor	r13, r13
    21ca:	f6 01       	movw	r30, r12
    21cc:	13 e0       	ldi	r17, 0x03	; 3
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	1a 95       	dec	r17
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <uartSendBuffer+0x24>
    21d6:	ee 54       	subi	r30, 0x4E	; 78
    21d8:	fa 4f       	sbci	r31, 0xFA	; 250
    21da:	20 81       	ld	r18, Z
    21dc:	31 81       	ldd	r19, Z+1	; 0x01
    21de:	24 0f       	add	r18, r20
    21e0:	35 1f       	adc	r19, r21
    21e2:	f6 01       	movw	r30, r12
    21e4:	73 e0       	ldi	r23, 0x03	; 3
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	7a 95       	dec	r23
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <uartSendBuffer+0x3c>
    21ee:	e0 55       	subi	r30, 0x50	; 80
    21f0:	fa 4f       	sbci	r31, 0xFA	; 250
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	28 17       	cp	r18, r24
    21f8:	39 07       	cpc	r19, r25
    21fa:	70 f5       	brcc	.+92     	; 0x2258 <__stack+0x59>
    21fc:	41 15       	cp	r20, r1
    21fe:	51 05       	cpc	r21, r1
    2200:	59 f1       	breq	.+86     	; 0x2258 <__stack+0x59>
	{
		// grab first character
		first = *buffer++;
    2202:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    2204:	76 01       	movw	r14, r12
    2206:	63 e0       	ldi	r22, 0x03	; 3
    2208:	ee 0c       	add	r14, r14
    220a:	ff 1c       	adc	r15, r15
    220c:	6a 95       	dec	r22
    220e:	e1 f7       	brne	.-8      	; 0x2208 <__stack+0x9>
    2210:	8e ea       	ldi	r24, 0xAE	; 174
    2212:	95 e0       	ldi	r25, 0x05	; 5
    2214:	e8 0e       	add	r14, r24
    2216:	f9 1e       	adc	r15, r25
    2218:	8d 01       	movw	r16, r26
    221a:	c0 e0       	ldi	r28, 0x00	; 0
    221c:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    221e:	5a 01       	movw	r10, r20
    2220:	08 94       	sec
    2222:	a1 08       	sbc	r10, r1
    2224:	b1 08       	sbc	r11, r1
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <__stack+0x35>
    2228:	c7 01       	movw	r24, r14
    222a:	f8 01       	movw	r30, r16
    222c:	60 81       	ld	r22, Z
    222e:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
    2232:	21 96       	adiw	r28, 0x01	; 1
    2234:	0f 5f       	subi	r16, 0xFF	; 255
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	ca 15       	cp	r28, r10
    223a:	db 05       	cpc	r29, r11
    223c:	a8 f3       	brcs	.-22     	; 0x2228 <__stack+0x29>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    223e:	8a ea       	ldi	r24, 0xAA	; 170
    2240:	95 e0       	ldi	r25, 0x05	; 5
    2242:	c8 0e       	add	r12, r24
    2244:	d9 1e       	adc	r13, r25
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	f6 01       	movw	r30, r12
    224a:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    224c:	88 2d       	mov	r24, r8
    224e:	69 2d       	mov	r22, r9
    2250:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
    2254:	8f ef       	ldi	r24, 0xFF	; 255
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x5b>
		// return success
		return TRUE;
    2258:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	08 95       	ret

00002274 <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	23 e0       	ldi	r18, 0x03	; 3
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	2a 95       	dec	r18
    227e:	e1 f7       	brne	.-8      	; 0x2278 <uartAddToTxBuffer+0x4>
    2280:	82 55       	subi	r24, 0x52	; 82
    2282:	9a 4f       	sbci	r25, 0xFA	; 250
    2284:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
}
    2288:	08 95       	ret

0000228a <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
    228a:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    228c:	86 ec       	ldi	r24, 0xC6	; 198
    228e:	95 e0       	ldi	r25, 0x05	; 5
    2290:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
    2294:	08 95       	ret

00002296 <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
    2296:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2298:	8e eb       	ldi	r24, 0xBE	; 190
    229a:	95 e0       	ldi	r25, 0x05	; 5
    229c:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
    22a0:	08 95       	ret

000022a2 <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
    22a2:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    22a4:	86 eb       	ldi	r24, 0xB6	; 182
    22a6:	95 e0       	ldi	r25, 0x05	; 5
    22a8:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
    22ac:	08 95       	ret

000022ae <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
    22ae:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    22b0:	8e ea       	ldi	r24, 0xAE	; 174
    22b2:	95 e0       	ldi	r25, 0x05	; 5
    22b4:	0e 94 85 1c 	call	0x390a	; 0x390a <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    22b8:	08 95       	ret

000022ba <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    22c0:	a8 2f       	mov	r26, r24
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ed 01       	movw	r28, r26
    22c6:	c6 55       	subi	r28, 0x56	; 86
    22c8:	da 4f       	sbci	r29, 0xFA	; 250
    22ca:	88 81       	ld	r24, Y
    22cc:	88 23       	and	r24, r24
    22ce:	79 f1       	breq	.+94     	; 0x232e <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    22d0:	fd 01       	movw	r30, r26
    22d2:	33 e0       	ldi	r19, 0x03	; 3
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	3a 95       	dec	r19
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <uartTransmitService+0x1a>
    22dc:	ee 54       	subi	r30, 0x4E	; 78
    22de:	fa 4f       	sbci	r31, 0xFA	; 250
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	89 2b       	or	r24, r25
    22e6:	11 f1       	breq	.+68     	; 0x232c <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
    22e8:	23 30       	cpi	r18, 0x03	; 3
    22ea:	39 f4       	brne	.+14     	; 0x22fa <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    22ec:	86 ec       	ldi	r24, 0xC6	; 198
    22ee:	95 e0       	ldi	r25, 0x05	; 5
    22f0:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    22f4:	80 93 36 01 	sts	0x0136, r24
    22f8:	1e c0       	rjmp	.+60     	; 0x2336 <uartTransmitService+0x7c>
			else if(nUart==2)
    22fa:	22 30       	cpi	r18, 0x02	; 2
    22fc:	39 f4       	brne	.+14     	; 0x230c <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    22fe:	8e eb       	ldi	r24, 0xBE	; 190
    2300:	95 e0       	ldi	r25, 0x05	; 5
    2302:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    2306:	80 93 d6 00 	sts	0x00D6, r24
    230a:	15 c0       	rjmp	.+42     	; 0x2336 <uartTransmitService+0x7c>
			else if(nUart==1)
    230c:	21 30       	cpi	r18, 0x01	; 1
    230e:	39 f4       	brne	.+14     	; 0x231e <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    2310:	86 eb       	ldi	r24, 0xB6	; 182
    2312:	95 e0       	ldi	r25, 0x05	; 5
    2314:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    2318:	80 93 ce 00 	sts	0x00CE, r24
    231c:	0c c0       	rjmp	.+24     	; 0x2336 <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    231e:	8e ea       	ldi	r24, 0xAE	; 174
    2320:	95 e0       	ldi	r25, 0x05	; 5
    2322:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    2326:	80 93 c6 00 	sts	0x00C6, r24
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    232c:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    232e:	aa 57       	subi	r26, 0x7A	; 122
    2330:	ba 4f       	sbci	r27, 0xFA	; 250
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	8c 93       	st	X, r24
	}
}
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    233c:	1f 92       	push	r1
    233e:	0f 92       	push	r0
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	0f 92       	push	r0
    2344:	11 24       	eor	r1, r1
    2346:	2f 93       	push	r18
    2348:	3f 93       	push	r19
    234a:	4f 93       	push	r20
    234c:	5f 93       	push	r21
    234e:	6f 93       	push	r22
    2350:	7f 93       	push	r23
    2352:	8f 93       	push	r24
    2354:	9f 93       	push	r25
    2356:	af 93       	push	r26
    2358:	bf 93       	push	r27
    235a:	ef 93       	push	r30
    235c:	ff 93       	push	r31
	uartTransmitService(3);
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	0e 94 5d 11 	call	0x22ba	; 0x22ba <uartTransmitService>
}
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    2386:	1f 92       	push	r1
    2388:	0f 92       	push	r0
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	0f 92       	push	r0
    238e:	11 24       	eor	r1, r1
    2390:	2f 93       	push	r18
    2392:	3f 93       	push	r19
    2394:	4f 93       	push	r20
    2396:	5f 93       	push	r21
    2398:	6f 93       	push	r22
    239a:	7f 93       	push	r23
    239c:	8f 93       	push	r24
    239e:	9f 93       	push	r25
    23a0:	af 93       	push	r26
    23a2:	bf 93       	push	r27
    23a4:	ef 93       	push	r30
    23a6:	ff 93       	push	r31
	uartTransmitService(2);
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <uartTransmitService>
}
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	bf 91       	pop	r27
    23b4:	af 91       	pop	r26
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	7f 91       	pop	r23
    23bc:	6f 91       	pop	r22
    23be:	5f 91       	pop	r21
    23c0:	4f 91       	pop	r20
    23c2:	3f 91       	pop	r19
    23c4:	2f 91       	pop	r18
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
	uartTransmitService(1);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <uartTransmitService>
}
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	7f 91       	pop	r23
    2406:	6f 91       	pop	r22
    2408:	5f 91       	pop	r21
    240a:	4f 91       	pop	r20
    240c:	3f 91       	pop	r19
    240e:	2f 91       	pop	r18
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	0f 92       	push	r0
    2422:	11 24       	eor	r1, r1
    2424:	2f 93       	push	r18
    2426:	3f 93       	push	r19
    2428:	4f 93       	push	r20
    242a:	5f 93       	push	r21
    242c:	6f 93       	push	r22
    242e:	7f 93       	push	r23
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	af 93       	push	r26
    2436:	bf 93       	push	r27
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31
	uartTransmitService(0);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <uartTransmitService>
}
    2442:	ff 91       	pop	r31
    2444:	ef 91       	pop	r30
    2446:	bf 91       	pop	r27
    2448:	af 91       	pop	r26
    244a:	9f 91       	pop	r25
    244c:	8f 91       	pop	r24
    244e:	7f 91       	pop	r23
    2450:	6f 91       	pop	r22
    2452:	5f 91       	pop	r21
    2454:	4f 91       	pop	r20
    2456:	3f 91       	pop	r19
    2458:	2f 91       	pop	r18
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f 90       	pop	r0
    2460:	1f 90       	pop	r1
    2462:	18 95       	reti

00002464 <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
    2464:	1f 93       	push	r17
    2466:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	fc 01       	movw	r30, r24
    246c:	e6 55       	subi	r30, 0x56	; 86
    246e:	fa 4f       	sbci	r31, 0xFA	; 250
    2470:	2f ef       	ldi	r18, 0xFF	; 255
    2472:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    2474:	43 e0       	ldi	r20, 0x03	; 3
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	4a 95       	dec	r20
    247c:	e1 f7       	brne	.-8      	; 0x2476 <uartSendTxBuffer+0x12>
    247e:	82 55       	subi	r24, 0x52	; 82
    2480:	9a 4f       	sbci	r25, 0xFA	; 250
    2482:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    2486:	68 2f       	mov	r22, r24
    2488:	81 2f       	mov	r24, r17
    248a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uartSendByte>
}
    248e:	1f 91       	pop	r17
    2490:	08 95       	ret

00002492 <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	f9 01       	movw	r30, r18
    249e:	73 e0       	ldi	r23, 0x03	; 3
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	7a 95       	dec	r23
    24a6:	e1 f7       	brne	.-8      	; 0x24a0 <uartReceiveByte+0xe>
    24a8:	e4 57       	subi	r30, 0x74	; 116
    24aa:	fa 4f       	sbci	r31, 0xFA	; 250
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	89 2b       	or	r24, r25
    24b2:	c9 f0       	breq	.+50     	; 0x24e6 <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    24b4:	f9 01       	movw	r30, r18
    24b6:	63 e0       	ldi	r22, 0x03	; 3
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	6a 95       	dec	r22
    24be:	e1 f7       	brne	.-8      	; 0x24b8 <uartReceiveByte+0x26>
    24c0:	e2 57       	subi	r30, 0x72	; 114
    24c2:	fa 4f       	sbci	r31, 0xFA	; 250
    24c4:	80 81       	ld	r24, Z
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	89 2b       	or	r24, r25
    24ca:	69 f0       	breq	.+26     	; 0x24e6 <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    24cc:	53 e0       	ldi	r21, 0x03	; 3
    24ce:	22 0f       	add	r18, r18
    24d0:	33 1f       	adc	r19, r19
    24d2:	5a 95       	dec	r21
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <uartReceiveByte+0x3c>
    24d6:	c9 01       	movw	r24, r18
    24d8:	86 57       	subi	r24, 0x76	; 118
    24da:	9a 4f       	sbci	r25, 0xFA	; 250
    24dc:	0e 94 1c 1c 	call	0x3838	; 0x3838 <bufferGetFromFront>
    24e0:	88 83       	st	Y, r24
    24e2:	8f ef       	ldi	r24, 0xFF	; 255
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <uartReceiveByte+0x56>
			return TRUE;
    24e6:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	be 01       	movw	r22, r28
    24fc:	6f 5f       	subi	r22, 0xFF	; 255
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	0e 94 49 12 	call	0x2492	; 0x2492 <uartReceiveByte>
    2504:	88 23       	and	r24, r24
    2506:	19 f4       	brne	.+6      	; 0x250e <uart3GetByte+0x20>
    2508:	2f ef       	ldi	r18, 0xFF	; 255
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <uart3GetByte+0x26>
		return c;
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    2514:	c9 01       	movw	r24, r18
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	be 01       	movw	r22, r28
    252c:	6f 5f       	subi	r22, 0xFF	; 255
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	0e 94 49 12 	call	0x2492	; 0x2492 <uartReceiveByte>
    2534:	88 23       	and	r24, r24
    2536:	19 f4       	brne	.+6      	; 0x253e <uart2GetByte+0x20>
    2538:	2f ef       	ldi	r18, 0xFF	; 255
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <uart2GetByte+0x26>
		return c;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    2544:	c9 01       	movw	r24, r18
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	be 01       	movw	r22, r28
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	0e 94 49 12 	call	0x2492	; 0x2492 <uartReceiveByte>
    2564:	88 23       	and	r24, r24
    2566:	19 f4       	brne	.+6      	; 0x256e <uart1GetByte+0x20>
    2568:	2f ef       	ldi	r18, 0xFF	; 255
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <uart1GetByte+0x26>
		return c;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    2574:	c9 01       	movw	r24, r18
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	be 01       	movw	r22, r28
    258c:	6f 5f       	subi	r22, 0xFF	; 255
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	0e 94 49 12 	call	0x2492	; 0x2492 <uartReceiveByte>
    2594:	88 23       	and	r24, r24
    2596:	19 f4       	brne	.+6      	; 0x259e <uart0GetByte+0x20>
    2598:	2f ef       	ldi	r18, 0xFF	; 255
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <uart0GetByte+0x26>
		return c;
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    25a4:	c9 01       	movw	r24, r18
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	e3 e0       	ldi	r30, 0x03	; 3
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	ea 95       	dec	r30
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <uartFlushReceiveBuffer+0x4>
    25ba:	86 57       	subi	r24, 0x76	; 118
    25bc:	9a 4f       	sbci	r25, 0xFA	; 250
    25be:	0e 94 b8 1c 	call	0x3970	; 0x3970 <bufferFlush>
}
    25c2:	08 95       	ret

000025c4 <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
    25c4:	82 ea       	ldi	r24, 0xA2	; 162
    25c6:	95 e0       	ldi	r25, 0x05	; 5
    25c8:	66 e7       	ldi	r22, 0x76	; 118
    25ca:	74 e0       	ldi	r23, 0x04	; 4
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
    25d4:	86 ec       	ldi	r24, 0xC6	; 198
    25d6:	95 e0       	ldi	r25, 0x05	; 5
    25d8:	66 ef       	ldi	r22, 0xF6	; 246
    25da:	74 e0       	ldi	r23, 0x04	; 4
    25dc:	40 e1       	ldi	r20, 0x10	; 16
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
    25e4:	08 95       	ret

000025e6 <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
    25e6:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
    25ea:	10 92 0d 05 	sts	0x050D, r1
    25ee:	10 92 0c 05 	sts	0x050C, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    25f2:	88 ed       	ldi	r24, 0xD8	; 216
    25f4:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	55 e2       	ldi	r21, 0x25	; 37
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	80 93 89 05 	sts	0x0589, r24
	uartBufferedTx[3] = FALSE;
    260c:	10 92 ad 05 	sts	0x05AD, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
    2610:	10 92 d5 05 	sts	0x05D5, r1
    2614:	10 92 d4 05 	sts	0x05D4, r1
	// enable interrupts
	sei();
    2618:	78 94       	sei
}
    261a:	08 95       	ret

0000261c <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
    261c:	8a e9       	ldi	r24, 0x9A	; 154
    261e:	95 e0       	ldi	r25, 0x05	; 5
    2620:	66 ee       	ldi	r22, 0xE6	; 230
    2622:	73 e0       	ldi	r23, 0x03	; 3
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
    262c:	8e eb       	ldi	r24, 0xBE	; 190
    262e:	95 e0       	ldi	r25, 0x05	; 5
    2630:	66 e6       	ldi	r22, 0x66	; 102
    2632:	74 e0       	ldi	r23, 0x04	; 4
    2634:	40 e1       	ldi	r20, 0x10	; 16
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
    263c:	08 95       	ret

0000263e <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
    263e:	0e 94 0e 13 	call	0x261c	; 0x261c <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
    2642:	10 92 0b 05 	sts	0x050B, r1
    2646:	10 92 0a 05 	sts	0x050A, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    264a:	88 ed       	ldi	r24, 0xD8	; 216
    264c:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	55 e2       	ldi	r21, 0x25	; 37
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	80 93 88 05 	sts	0x0588, r24
	uartBufferedTx[2] = FALSE;
    2664:	10 92 ac 05 	sts	0x05AC, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
    2668:	10 92 d3 05 	sts	0x05D3, r1
    266c:	10 92 d2 05 	sts	0x05D2, r1
	// enable interrupts
	sei();
    2670:	78 94       	sei
}
    2672:	08 95       	ret

00002674 <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
    2674:	82 e9       	ldi	r24, 0x92	; 146
    2676:	95 e0       	ldi	r25, 0x05	; 5
    2678:	66 e5       	ldi	r22, 0x56	; 86
    267a:	73 e0       	ldi	r23, 0x03	; 3
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
    2684:	86 eb       	ldi	r24, 0xB6	; 182
    2686:	95 e0       	ldi	r25, 0x05	; 5
    2688:	66 ed       	ldi	r22, 0xD6	; 214
    268a:	73 e0       	ldi	r23, 0x03	; 3
    268c:	40 e1       	ldi	r20, 0x10	; 16
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
    2694:	08 95       	ret

00002696 <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
    2696:	0e 94 3a 13 	call	0x2674	; 0x2674 <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
    269a:	10 92 09 05 	sts	0x0509, r1
    269e:	10 92 08 05 	sts	0x0508, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    26a2:	88 ed       	ldi	r24, 0xD8	; 216
    26a4:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	55 e2       	ldi	r21, 0x25	; 37
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	80 93 87 05 	sts	0x0587, r24
	uartBufferedTx[1] = FALSE;
    26bc:	10 92 ab 05 	sts	0x05AB, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
    26c0:	10 92 d1 05 	sts	0x05D1, r1
    26c4:	10 92 d0 05 	sts	0x05D0, r1
	// enable interrupts
	sei();
    26c8:	78 94       	sei
}
    26ca:	08 95       	ret

000026cc <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    26cc:	8a e8       	ldi	r24, 0x8A	; 138
    26ce:	95 e0       	ldi	r25, 0x05	; 5
    26d0:	66 ec       	ldi	r22, 0xC6	; 198
    26d2:	72 e0       	ldi	r23, 0x02	; 2
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    26dc:	8e ea       	ldi	r24, 0xAE	; 174
    26de:	95 e0       	ldi	r25, 0x05	; 5
    26e0:	66 e4       	ldi	r22, 0x46	; 70
    26e2:	73 e0       	ldi	r23, 0x03	; 3
    26e4:	40 e1       	ldi	r20, 0x10	; 16
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	0e 94 0f 1c 	call	0x381e	; 0x381e <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    26ec:	08 95       	ret

000026ee <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    26ee:	0e 94 66 13 	call	0x26cc	; 0x26cc <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    26f2:	10 92 07 05 	sts	0x0507, r1
    26f6:	10 92 06 05 	sts	0x0506, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    26fa:	88 ed       	ldi	r24, 0xD8	; 216
    26fc:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	55 e2       	ldi	r21, 0x25	; 37
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	80 93 86 05 	sts	0x0586, r24
	uartBufferedTx[0] = FALSE;
    2714:	10 92 aa 05 	sts	0x05AA, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    2718:	10 92 cf 05 	sts	0x05CF, r1
    271c:	10 92 ce 05 	sts	0x05CE, r1
	// enable interrupts
	sei();
    2720:	78 94       	sei
}
    2722:	08 95       	ret

00002724 <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    2724:	0e 94 77 13 	call	0x26ee	; 0x26ee <uart0Init>
	uart1Init();
    2728:	0e 94 4b 13 	call	0x2696	; 0x2696 <uart1Init>
	uart2Init();
    272c:	0e 94 1f 13 	call	0x263e	; 0x263e <uart2Init>
	uart3Init();
    2730:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <uart3Init>
}
    2734:	08 95       	ret

00002736 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    2736:	aa e7       	ldi	r26, 0x7A	; 122
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	8c 91       	ld	r24, X
    273c:	80 68       	ori	r24, 0x80	; 128
    273e:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    2740:	8c 91       	ld	r24, X
    2742:	8f 7d       	andi	r24, 0xDF	; 223
    2744:	8c 93       	st	X, r24
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2746:	8c 91       	ld	r24, X
    2748:	88 7f       	andi	r24, 0xF8	; 248
    274a:	86 60       	ori	r24, 0x06	; 6
    274c:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    274e:	ec e7       	ldi	r30, 0x7C	; 124
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8f 73       	andi	r24, 0x3F	; 63
    2756:	80 64       	ori	r24, 0x40	; 64
    2758:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    275a:	80 81       	ld	r24, Z
    275c:	8f 7d       	andi	r24, 0xDF	; 223
    275e:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    2760:	8c 91       	ld	r24, X
    2762:	88 60       	ori	r24, 0x08	; 8
    2764:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    2766:	10 92 d6 05 	sts	0x05D6, r1
	sei();							// turn on interrupts (if not already on)
    276a:	78 94       	sei
}
    276c:	08 95       	ret

0000276e <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    276e:	ea e7       	ldi	r30, 0x7A	; 122
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	87 7f       	andi	r24, 0xF7	; 247
    2776:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    2778:	80 81       	ld	r24, Z
    277a:	8f 77       	andi	r24, 0x7F	; 127
    277c:	80 83       	st	Z, r24
}
    277e:	08 95       	ret

00002780 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2780:	ea e7       	ldi	r30, 0x7A	; 122
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	90 81       	ld	r25, Z
    2786:	98 7f       	andi	r25, 0xF8	; 248
    2788:	98 2b       	or	r25, r24
    278a:	90 83       	st	Z, r25
}
    278c:	08 95       	ret

0000278e <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    278e:	ec e7       	ldi	r30, 0x7C	; 124
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	90 81       	ld	r25, Z
    2794:	82 95       	swap	r24
    2796:	88 0f       	add	r24, r24
    2798:	88 0f       	add	r24, r24
    279a:	80 7c       	andi	r24, 0xC0	; 192
    279c:	9f 73       	andi	r25, 0x3F	; 63
    279e:	98 2b       	or	r25, r24
    27a0:	90 83       	st	Z, r25
}
    27a2:	08 95       	ret

000027a4 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    27a4:	ec e7       	ldi	r30, 0x7C	; 124
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	90 81       	ld	r25, Z
    27aa:	8f 71       	andi	r24, 0x1F	; 31
    27ac:	90 7e       	andi	r25, 0xE0	; 224
    27ae:	89 2b       	or	r24, r25
    27b0:	80 83       	st	Z, r24
}
    27b2:	08 95       	ret

000027b4 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    27b4:	ea e7       	ldi	r30, 0x7A	; 122
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	80 61       	ori	r24, 0x10	; 16
    27bc:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
    27be:	80 81       	ld	r24, Z
    27c0:	80 64       	ori	r24, 0x40	; 64
    27c2:	80 83       	st	Z, r24
}
    27c4:	08 95       	ret

000027c6 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    27c6:	80 91 7a 00 	lds	r24, 0x007A
}
    27ca:	80 74       	andi	r24, 0x40	; 64
    27cc:	08 95       	ret

000027ce <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    27ce:	98 2f       	mov	r25, r24
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    27d0:	10 92 d6 05 	sts	0x05D6, r1

if (ch >= 8)
    27d4:	88 30       	cpi	r24, 0x08	; 8
    27d6:	20 f0       	brcs	.+8      	; 0x27e0 <a2dConvert10bit+0x12>
    ADCSRB |= _BV(MUX5);
    27d8:	80 91 7b 00 	lds	r24, 0x007B
    27dc:	88 60       	ori	r24, 0x08	; 8
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <a2dConvert10bit+0x18>
else
    ADCSRB &= ~_BV(MUX5);
    27e0:	80 91 7b 00 	lds	r24, 0x007B
    27e4:	87 7f       	andi	r24, 0xF7	; 247
    27e6:	80 93 7b 00 	sts	0x007B, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
    27ea:	80 91 7c 00 	lds	r24, 0x007C
    27ee:	97 70       	andi	r25, 0x07	; 7
    27f0:	88 7f       	andi	r24, 0xF8	; 248
    27f2:	89 2b       	or	r24, r25
    27f4:	80 93 7c 00 	sts	0x007C, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    27f8:	80 91 7a 00 	lds	r24, 0x007A
    27fc:	80 61       	ori	r24, 0x10	; 16
    27fe:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
    2802:	80 91 7a 00 	lds	r24, 0x007A
    2806:	80 64       	ori	r24, 0x40	; 64
    2808:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    280c:	80 91 7a 00 	lds	r24, 0x007A
    2810:	86 fd       	sbrc	r24, 6
    2812:	fc cf       	rjmp	.-8      	; 0x280c <a2dConvert10bit+0x3e>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
    2814:	20 91 78 00 	lds	r18, 0x0078
    2818:	30 91 79 00 	lds	r19, 0x0079
}
    281c:	c9 01       	movw	r24, r18
    281e:	08 95       	ret

00002820 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    2820:	0e 94 e7 13 	call	0x27ce	; 0x27ce <a2dConvert10bit>
    2824:	96 95       	lsr	r25
    2826:	87 95       	ror	r24
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
}
    282c:	08 95       	ret

0000282e <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    282e:	1f 92       	push	r1
    2830:	0f 92       	push	r0
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	0f 92       	push	r0
    2836:	11 24       	eor	r1, r1
    2838:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	80 93 d6 05 	sts	0x05D6, r24
}
    2840:	8f 91       	pop	r24
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    284c:	90 93 0f 05 	sts	0x050F, r25
    2850:	80 93 0e 05 	sts	0x050E, r24
}
    2854:	08 95       	ret

00002856 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    2856:	1f 93       	push	r17
    2858:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    285a:	8a 30       	cpi	r24, 0x0A	; 10
    285c:	31 f4       	brne	.+12     	; 0x286a <rprintfChar+0x14>
		rputchar('\r');
    285e:	e0 91 0e 05 	lds	r30, 0x050E
    2862:	f0 91 0f 05 	lds	r31, 0x050F
    2866:	8d e0       	ldi	r24, 0x0D	; 13
    2868:	09 95       	icall
	// send character
	rputchar(c);
    286a:	e0 91 0e 05 	lds	r30, 0x050E
    286e:	f0 91 0f 05 	lds	r31, 0x050F
    2872:	81 2f       	mov	r24, r17
    2874:	09 95       	icall
}
    2876:	1f 91       	pop	r17
    2878:	08 95       	ret

0000287a <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	21 f4       	brne	.+8      	; 0x288c <rprintfStr+0x12>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    2886:	21 96       	adiw	r28, 0x01	; 1
    2888:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    288c:	88 81       	ld	r24, Y
    288e:	88 23       	and	r24, r24
    2890:	d1 f7       	brne	.-12     	; 0x2886 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	08 95       	ret

00002898 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	8c 01       	movw	r16, r24
    28a6:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	e9 f0       	breq	.+58     	; 0x28e6 <rprintfStrLen+0x4e>
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    28b0:	26 17       	cp	r18, r22
    28b2:	37 07       	cpc	r19, r23
    28b4:	38 f4       	brcc	.+14     	; 0x28c4 <rprintfStrLen+0x2c>
    28b6:	f8 01       	movw	r30, r16
    28b8:	81 91       	ld	r24, Z+
    28ba:	8f 01       	movw	r16, r30
    28bc:	2f 5f       	subi	r18, 0xFF	; 255
    28be:	3f 4f       	sbci	r19, 0xFF	; 255
    28c0:	88 23       	and	r24, r24
    28c2:	b1 f7       	brne	.-20     	; 0x28b0 <rprintfStrLen+0x18>
    28c4:	c0 e0       	ldi	r28, 0x00	; 0
    28c6:	d0 e0       	ldi	r29, 0x00	; 0
    28c8:	0b c0       	rjmp	.+22     	; 0x28e0 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    28ca:	f8 01       	movw	r30, r16
    28cc:	80 81       	ld	r24, Z
    28ce:	88 23       	and	r24, r24
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    28d2:	0f 5f       	subi	r16, 0xFF	; 255
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    28de:	21 96       	adiw	r28, 0x01	; 1
    28e0:	ce 15       	cp	r28, r14
    28e2:	df 05       	cpc	r29, r15
    28e4:	90 f3       	brcs	.-28     	; 0x28ca <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	08 95       	ret

000028f4 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	19 f4       	brne	.+6      	; 0x2904 <rprintfProgStr+0x10>
    28fe:	07 c0       	rjmp	.+14     	; 0x290e <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    2900:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2904:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2906:	21 96       	adiw	r28, 0x01	; 1
    2908:	84 91       	lpm	r24, Z+
    290a:	88 23       	and	r24, r24
    290c:	c9 f7       	brne	.-14     	; 0x2900 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    2914:	8a e0       	ldi	r24, 0x0A	; 10
    2916:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
}
    291a:	08 95       	ret

0000291c <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    291c:	e8 2f       	mov	r30, r24
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	ef 70       	andi	r30, 0x0F	; 15
    2922:	f0 70       	andi	r31, 0x00	; 0
    2924:	eb 5f       	subi	r30, 0xFB	; 251
    2926:	fd 4f       	sbci	r31, 0xFD	; 253
    2928:	e4 91       	lpm	r30, Z+
    292a:	8e 2f       	mov	r24, r30
    292c:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
}
    2930:	08 95       	ret

00002932 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    2932:	1f 93       	push	r17
    2934:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    2936:	82 95       	swap	r24
    2938:	8f 70       	andi	r24, 0x0F	; 15
    293a:	0e 94 8e 14 	call	0x291c	; 0x291c <rprintfu04>
	rprintfu04(data);
    293e:	81 2f       	mov	r24, r17
    2940:	0e 94 8e 14 	call	0x291c	; 0x291c <rprintfu04>
}
    2944:	1f 91       	pop	r17
    2946:	08 95       	ret

00002948 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    2948:	1f 93       	push	r17
    294a:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    294c:	89 2f       	mov	r24, r25
    294e:	0e 94 99 14 	call	0x2932	; 0x2932 <rprintfu08>
	rprintfu08(data);
    2952:	81 2f       	mov	r24, r17
    2954:	0e 94 99 14 	call	0x2932	; 0x2932 <rprintfu08>
}
    2958:	1f 91       	pop	r17
    295a:	08 95       	ret

0000295c <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	7b 01       	movw	r14, r22
    2966:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    2968:	c8 01       	movw	r24, r16
    296a:	aa 27       	eor	r26, r26
    296c:	bb 27       	eor	r27, r27
    296e:	0e 94 a4 14 	call	0x2948	; 0x2948 <rprintfu16>
	rprintfu16(data);
    2972:	c7 01       	movw	r24, r14
    2974:	0e 94 a4 14 	call	0x2948	; 0x2948 <rprintfu16>
}
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	08 95       	ret

00002982 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    2982:	2f 92       	push	r2
    2984:	3f 92       	push	r3
    2986:	4f 92       	push	r4
    2988:	5f 92       	push	r5
    298a:	6f 92       	push	r6
    298c:	7f 92       	push	r7
    298e:	8f 92       	push	r8
    2990:	9f 92       	push	r9
    2992:	af 92       	push	r10
    2994:	bf 92       	push	r11
    2996:	cf 92       	push	r12
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	a3 97       	sbiw	r28, 0x23	; 35
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	6a a3       	std	Y+34, r22	; 0x22
    29b8:	24 2e       	mov	r2, r20
    29ba:	2b a3       	std	Y+35, r18	; 0x23
    29bc:	37 01       	movw	r6, r14
    29be:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    29c0:	44 23       	and	r20, r20
    29c2:	51 f0       	breq	.+20     	; 0x29d8 <rprintfNum+0x56>
    29c4:	17 ff       	sbrs	r17, 7
    29c6:	08 c0       	rjmp	.+16     	; 0x29d8 <rprintfNum+0x56>
	{
		x = -n;
    29c8:	ee 24       	eor	r14, r14
    29ca:	ff 24       	eor	r15, r15
    29cc:	87 01       	movw	r16, r14
    29ce:	e6 18       	sub	r14, r6
    29d0:	f7 08       	sbc	r15, r7
    29d2:	08 09       	sbc	r16, r8
    29d4:	19 09       	sbc	r17, r9
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    29d8:	84 01       	movw	r16, r8
    29da:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    29dc:	2a a1       	ldd	r18, Y+34	; 0x22
    29de:	21 50       	subi	r18, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	21 10       	cpse	r2, r1
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	29 1b       	sub	r18, r25
    29e8:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    29ea:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    29ec:	a8 2e       	mov	r10, r24
    29ee:	bb 24       	eor	r11, r11
    29f0:	cc 24       	eor	r12, r12
    29f2:	dd 24       	eor	r13, r13
    29f4:	c8 01       	movw	r24, r16
    29f6:	b7 01       	movw	r22, r14
    29f8:	a6 01       	movw	r20, r12
    29fa:	95 01       	movw	r18, r10
    29fc:	0e 94 be 20 	call	0x417c	; 0x417c <__udivmodsi4>
    2a00:	fb 01       	movw	r30, r22
    2a02:	ef 70       	andi	r30, 0x0F	; 15
    2a04:	f0 70       	andi	r31, 0x00	; 0
    2a06:	eb 5f       	subi	r30, 0xFB	; 251
    2a08:	fd 4f       	sbci	r31, 0xFD	; 253
    2a0a:	64 91       	lpm	r22, Z+
    2a0c:	6f 8f       	std	Y+31, r22	; 0x1f
    2a0e:	c8 01       	movw	r24, r16
    2a10:	b7 01       	movw	r22, r14
    2a12:	a6 01       	movw	r20, r12
    2a14:	95 01       	movw	r18, r10
    2a16:	0e 94 be 20 	call	0x417c	; 0x417c <__udivmodsi4>
    2a1a:	c9 01       	movw	r24, r18
    2a1c:	da 01       	movw	r26, r20
    2a1e:	7c 01       	movw	r14, r24
    2a20:	8d 01       	movw	r16, r26
    2a22:	9e e1       	ldi	r25, 0x1E	; 30
    2a24:	49 2e       	mov	r4, r25
    2a26:	51 2c       	mov	r5, r1
    2a28:	4c 0e       	add	r4, r28
    2a2a:	5d 1e       	adc	r5, r29
    2a2c:	39 a0       	ldd	r3, Y+33	; 0x21
    2a2e:	25 c0       	rjmp	.+74     	; 0x2a7a <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    2a30:	e1 14       	cp	r14, r1
    2a32:	f1 04       	cpc	r15, r1
    2a34:	01 05       	cpc	r16, r1
    2a36:	11 05       	cpc	r17, r1
    2a38:	c9 f0       	breq	.+50     	; 0x2a6c <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	a6 01       	movw	r20, r12
    2a40:	95 01       	movw	r18, r10
    2a42:	0e 94 be 20 	call	0x417c	; 0x417c <__udivmodsi4>
    2a46:	fb 01       	movw	r30, r22
    2a48:	ef 70       	andi	r30, 0x0F	; 15
    2a4a:	f0 70       	andi	r31, 0x00	; 0
    2a4c:	eb 5f       	subi	r30, 0xFB	; 251
    2a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a50:	64 91       	lpm	r22, Z+
    2a52:	f2 01       	movw	r30, r4
    2a54:	60 83       	st	Z, r22
    2a56:	c8 01       	movw	r24, r16
    2a58:	b7 01       	movw	r22, r14
    2a5a:	a6 01       	movw	r20, r12
    2a5c:	95 01       	movw	r18, r10
    2a5e:	0e 94 be 20 	call	0x417c	; 0x417c <__udivmodsi4>
    2a62:	c9 01       	movw	r24, r18
    2a64:	da 01       	movw	r26, r20
    2a66:	7c 01       	movw	r14, r24
    2a68:	8d 01       	movw	r16, r26
    2a6a:	03 c0       	rjmp	.+6      	; 0x2a72 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    2a6c:	2b a1       	ldd	r18, Y+35	; 0x23
    2a6e:	f2 01       	movw	r30, r4
    2a70:	20 83       	st	Z, r18
    2a72:	3a 94       	dec	r3
    2a74:	08 94       	sec
    2a76:	41 08       	sbc	r4, r1
    2a78:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    2a7a:	33 20       	and	r3, r3
    2a7c:	c9 f6       	brne	.-78     	; 0x2a30 <rprintfNum+0xae>
    2a7e:	ce 01       	movw	r24, r28
    2a80:	4f 96       	adiw	r24, 0x1f	; 31
    2a82:	8c 01       	movw	r16, r24
    2a84:	e9 a1       	ldd	r30, Y+33	; 0x21
    2a86:	0e 1b       	sub	r16, r30
    2a88:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    2a8a:	22 20       	and	r2, r2
    2a8c:	f1 f0       	breq	.+60     	; 0x2aca <rprintfNum+0x148>
	{
		if(n < 0)
    2a8e:	97 fe       	sbrs	r9, 7
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <rprintfNum+0x11a>
		{
   			*--p = '-';
    2a92:	8d e2       	ldi	r24, 0x2D	; 45
    2a94:	f8 01       	movw	r30, r16
    2a96:	82 93       	st	-Z, r24
    2a98:	8f 01       	movw	r16, r30
    2a9a:	17 c0       	rjmp	.+46     	; 0x2aca <rprintfNum+0x148>
    2a9c:	c8 01       	movw	r24, r16
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    2aa0:	61 14       	cp	r6, r1
    2aa2:	71 04       	cpc	r7, r1
    2aa4:	81 04       	cpc	r8, r1
    2aa6:	91 04       	cpc	r9, r1
    2aa8:	19 f0       	breq	.+6      	; 0x2ab0 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    2aaa:	8c 01       	movw	r16, r24
    2aac:	8b e2       	ldi	r24, 0x2B	; 43
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    2ab0:	8c 01       	movw	r16, r24
    2ab2:	80 e2       	ldi	r24, 0x20	; 32
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	80 83       	st	Z, r24
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    2aba:	f8 01       	movw	r30, r16
    2abc:	81 91       	ld	r24, Z+
    2abe:	8f 01       	movw	r16, r30
    2ac0:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2ac4:	fa a1       	ldd	r31, Y+34	; 0x22
    2ac6:	f1 50       	subi	r31, 0x01	; 1
    2ac8:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2aca:	2a a1       	ldd	r18, Y+34	; 0x22
    2acc:	22 23       	and	r18, r18
    2ace:	a9 f7       	brne	.-22     	; 0x2aba <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    2ad0:	a3 96       	adiw	r28, 0x23	; 35
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	bf 90       	pop	r11
    2aee:	af 90       	pop	r10
    2af0:	9f 90       	pop	r9
    2af2:	8f 90       	pop	r8
    2af4:	7f 90       	pop	r7
    2af6:	6f 90       	pop	r6
    2af8:	5f 90       	pop	r5
    2afa:	4f 90       	pop	r4
    2afc:	3f 90       	pop	r3
    2afe:	2f 90       	pop	r2
    2b00:	08 95       	ret

00002b02 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    2b02:	4f 92       	push	r4
    2b04:	5f 92       	push	r5
    2b06:	6f 92       	push	r6
    2b08:	7f 92       	push	r7
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	48 2e       	mov	r4, r24
    2b24:	5a 01       	movw	r10, r20
    2b26:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    2b28:	cb 01       	movw	r24, r22
    2b2a:	ba 01       	movw	r22, r20
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__gesf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	1c f4       	brge	.+6      	; 0x2b42 <rprintfFloat+0x40>
    2b3c:	35 01       	movw	r6, r10
    2b3e:	46 01       	movw	r8, r12
    2b40:	06 c0       	rjmp	.+12     	; 0x2b4e <rprintfFloat+0x4c>
    2b42:	35 01       	movw	r6, r10
    2b44:	46 01       	movw	r8, r12
    2b46:	97 fa       	bst	r9, 7
    2b48:	90 94       	com	r9
    2b4a:	97 f8       	bld	r9, 7
    2b4c:	90 94       	com	r9
    2b4e:	0f 2e       	mov	r0, r31
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	ef 2e       	mov	r14, r31
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	ff 2e       	mov	r15, r31
    2b58:	f0 e8       	ldi	r31, 0x80	; 128
    2b5a:	0f 2f       	mov	r16, r31
    2b5c:	ff e3       	ldi	r31, 0x3F	; 63
    2b5e:	1f 2f       	mov	r17, r31
    2b60:	f0 2d       	mov	r31, r0
    2b62:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    2b64:	c4 01       	movw	r24, r8
    2b66:	b3 01       	movw	r22, r6
    2b68:	a8 01       	movw	r20, r16
    2b6a:	97 01       	movw	r18, r14
    2b6c:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__cmpsf2>
    2b7c:	87 fd       	sbrc	r24, 7
    2b7e:	0e c0       	rjmp	.+28     	; 0x2b9c <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    2b80:	c8 01       	movw	r24, r16
    2b82:	b7 01       	movw	r22, r14
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
    2b90:	7b 01       	movw	r14, r22
    2b92:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    2b94:	53 94       	inc	r5
    2b96:	8f e0       	ldi	r24, 0x0F	; 15
    2b98:	58 16       	cp	r5, r24
    2b9a:	21 f7       	brne	.-56     	; 0x2b64 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    2b9c:	c6 01       	movw	r24, r12
    2b9e:	b5 01       	movw	r22, r10
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__cmpsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	14 f4       	brge	.+4      	; 0x2bb4 <rprintfFloat+0xb2>
		rprintfChar('-');
    2bb0:	8d e2       	ldi	r24, 0x2D	; 45
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    2bb4:	8b e2       	ldi	r24, 0x2B	; 43
    2bb6:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2bba:	dd 24       	eor	r13, r13
    2bbc:	aa 24       	eor	r10, r10
    2bbe:	56 c0       	rjmp	.+172    	; 0x2c6c <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    2bc0:	c4 01       	movw	r24, r8
    2bc2:	b3 01       	movw	r22, r6
    2bc4:	a8 01       	movw	r20, r16
    2bc6:	97 01       	movw	r18, r14
    2bc8:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
    2bcc:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__fixunssfsi>
    2bd0:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    2bd2:	d6 2a       	or	r13, r22
    2bd4:	cd 2d       	mov	r28, r13
    2bd6:	d0 e0       	ldi	r29, 0x00	; 0
    2bd8:	cc 24       	eor	r12, r12
    2bda:	dd 24       	eor	r13, r13
    2bdc:	c8 01       	movw	r24, r16
    2bde:	b7 01       	movw	r22, r14
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__cmpsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	19 f4       	brne	.+6      	; 0x2bf6 <rprintfFloat+0xf4>
    2bf0:	21 e0       	ldi	r18, 0x01	; 1
    2bf2:	c2 2e       	mov	r12, r18
    2bf4:	d1 2c       	mov	r13, r1
    2bf6:	cc 29       	or	r28, r12
    2bf8:	dd 29       	or	r29, r13
    2bfa:	cd 2b       	or	r28, r29
    2bfc:	39 f0       	breq	.+14     	; 0x2c0c <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    2bfe:	8b 2d       	mov	r24, r11
    2c00:	80 5d       	subi	r24, 0xD0	; 208
    2c02:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2c06:	dd 24       	eor	r13, r13
    2c08:	da 94       	dec	r13
    2c0a:	04 c0       	rjmp	.+8      	; 0x2c14 <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    2c0c:	80 e2       	ldi	r24, 0x20	; 32
    2c0e:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2c12:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    2c14:	c8 01       	movw	r24, r16
    2c16:	b7 01       	movw	r22, r14
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__cmpsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	19 f4       	brne	.+6      	; 0x2c2e <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    2c28:	8e e2       	ldi	r24, 0x2E	; 46
    2c2a:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
		}
		
		x -= (digit*place);
    2c2e:	6b 2d       	mov	r22, r11
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	88 27       	eor	r24, r24
    2c34:	77 fd       	sbrc	r23, 7
    2c36:	80 95       	com	r24
    2c38:	98 2f       	mov	r25, r24
    2c3a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__floatsisf>
    2c3e:	a8 01       	movw	r20, r16
    2c40:	97 01       	movw	r18, r14
    2c42:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__mulsf3>
    2c46:	9b 01       	movw	r18, r22
    2c48:	ac 01       	movw	r20, r24
    2c4a:	c4 01       	movw	r24, r8
    2c4c:	b3 01       	movw	r22, r6
    2c4e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__subsf3>
    2c52:	3b 01       	movw	r6, r22
    2c54:	4c 01       	movw	r8, r24
		place /= 10.0;
    2c56:	c8 01       	movw	r24, r16
    2c58:	b7 01       	movw	r22, r14
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e2       	ldi	r20, 0x20	; 32
    2c60:	51 e4       	ldi	r21, 0x41	; 65
    2c62:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divsf3>
    2c66:	7b 01       	movw	r14, r22
    2c68:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    2c6a:	a3 94       	inc	r10
    2c6c:	a4 14       	cp	r10, r4
    2c6e:	08 f4       	brcc	.+2      	; 0x2c72 <rprintfFloat+0x170>
    2c70:	a7 cf       	rjmp	.-178    	; 0x2bc0 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	bf 90       	pop	r11
    2c84:	af 90       	pop	r10
    2c86:	9f 90       	pop	r9
    2c88:	8f 90       	pop	r8
    2c8a:	7f 90       	pop	r7
    2c8c:	6f 90       	pop	r6
    2c8e:	5f 90       	pop	r5
    2c90:	4f 90       	pop	r4
    2c92:	08 95       	ret

00002c94 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    2c94:	7f 92       	push	r7
    2c96:	8f 92       	push	r8
    2c98:	9f 92       	push	r9
    2c9a:	af 92       	push	r10
    2c9c:	bf 92       	push	r11
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	78 88       	ldd	r7, Y+16	; 0x10
    2cb4:	c9 88       	ldd	r12, Y+17	; 0x11
    2cb6:	da 88       	ldd	r13, Y+18	; 0x12
    2cb8:	63 e1       	ldi	r22, 0x13	; 19
    2cba:	e6 2e       	mov	r14, r22
    2cbc:	f1 2c       	mov	r15, r1
    2cbe:	ec 0e       	add	r14, r28
    2cc0:	fd 1e       	adc	r15, r29
    2cc2:	14 c0       	rjmp	.+40     	; 0x2cec <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    2cc4:	88 23       	and	r24, r24
    2cc6:	81 f4       	brne	.+32     	; 0x2ce8 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	7f 90       	pop	r7
    2ce6:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    2ce8:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2cec:	96 01       	movw	r18, r12
    2cee:	2f 5f       	subi	r18, 0xFF	; 255
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    2cf2:	77 20       	and	r7, r7
    2cf4:	21 f0       	breq	.+8      	; 0x2cfe <rprintf1RamRom+0x6a>
    2cf6:	f6 01       	movw	r30, r12
    2cf8:	69 01       	movw	r12, r18
    2cfa:	84 91       	lpm	r24, Z+
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <rprintf1RamRom+0x70>
    2cfe:	f6 01       	movw	r30, r12
    2d00:	80 81       	ld	r24, Z
    2d02:	69 01       	movw	r12, r18
    2d04:	85 32       	cpi	r24, 0x25	; 37
    2d06:	f1 f6       	brne	.-68     	; 0x2cc4 <rprintf1RamRom+0x30>
    2d08:	2f 5f       	subi	r18, 0xFF	; 255
    2d0a:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    2d0c:	77 20       	and	r7, r7
    2d0e:	21 f0       	breq	.+8      	; 0x2d18 <rprintf1RamRom+0x84>
    2d10:	f6 01       	movw	r30, r12
    2d12:	69 01       	movw	r12, r18
    2d14:	84 91       	lpm	r24, Z+
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <rprintf1RamRom+0x8a>
    2d18:	f6 01       	movw	r30, r12
    2d1a:	80 81       	ld	r24, Z
    2d1c:	69 01       	movw	r12, r18
    2d1e:	84 36       	cpi	r24, 0x64	; 100
    2d20:	29 f0       	breq	.+10     	; 0x2d2c <rprintf1RamRom+0x98>
    2d22:	88 37       	cpi	r24, 0x78	; 120
    2d24:	81 f0       	breq	.+32     	; 0x2d46 <rprintf1RamRom+0xb2>
    2d26:	83 36       	cpi	r24, 0x63	; 99
    2d28:	f9 f6       	brne	.-66     	; 0x2ce8 <rprintf1RamRom+0x54>
    2d2a:	06 c0       	rjmp	.+12     	; 0x2d38 <rprintf1RamRom+0xa4>
    2d2c:	00 e1       	ldi	r16, 0x10	; 16
    2d2e:	17 e2       	ldi	r17, 0x27	; 39
    2d30:	5a e0       	ldi	r21, 0x0A	; 10
    2d32:	a5 2e       	mov	r10, r21
    2d34:	b1 2c       	mov	r11, r1
    2d36:	0c c0       	rjmp	.+24     	; 0x2d50 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    2d38:	f7 01       	movw	r30, r14
    2d3a:	80 81       	ld	r24, Z
    2d3c:	22 e0       	ldi	r18, 0x02	; 2
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	e2 0e       	add	r14, r18
    2d42:	f3 1e       	adc	r15, r19
    2d44:	d1 cf       	rjmp	.-94     	; 0x2ce8 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    2d46:	00 e0       	ldi	r16, 0x00	; 0
    2d48:	10 e1       	ldi	r17, 0x10	; 16
    2d4a:	40 e1       	ldi	r20, 0x10	; 16
    2d4c:	a4 2e       	mov	r10, r20
    2d4e:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    2d50:	32 e0       	ldi	r19, 0x02	; 2
    2d52:	83 2e       	mov	r8, r19
    2d54:	91 2c       	mov	r9, r1
    2d56:	8e 0c       	add	r8, r14
    2d58:	9f 1c       	adc	r9, r15
    2d5a:	f7 01       	movw	r30, r14
    2d5c:	e0 80       	ld	r14, Z
    2d5e:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    2d60:	84 36       	cpi	r24, 0x64	; 100
    2d62:	b1 f4       	brne	.+44     	; 0x2d90 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    2d64:	f7 fe       	sbrs	r15, 7
    2d66:	11 c0       	rjmp	.+34     	; 0x2d8a <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    2d68:	f0 94       	com	r15
    2d6a:	e1 94       	neg	r14
    2d6c:	f1 08       	sbc	r15, r1
    2d6e:	f3 94       	inc	r15
					rprintfChar('-');
    2d70:	8d e2       	ldi	r24, 0x2D	; 45
    2d72:	0e 94 2b 14 	call	0x2856	; 0x2856 <rprintfChar>
    2d76:	09 c0       	rjmp	.+18     	; 0x2d8a <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    2d78:	c8 01       	movw	r24, r16
    2d7a:	6a e0       	ldi	r22, 0x0A	; 10
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    2d82:	8b 01       	movw	r16, r22
    2d84:	62 30       	cpi	r22, 0x02	; 2
    2d86:	71 05       	cpc	r23, r1
    2d88:	18 f0       	brcs	.+6      	; 0x2d90 <rprintf1RamRom+0xfc>
    2d8a:	e0 16       	cp	r14, r16
    2d8c:	f1 06       	cpc	r15, r17
    2d8e:	a0 f3       	brcs	.-24     	; 0x2d78 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    2d90:	c7 01       	movw	r24, r14
    2d92:	b8 01       	movw	r22, r16
    2d94:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    2d98:	86 2f       	mov	r24, r22
    2d9a:	0e 94 8e 14 	call	0x291c	; 0x291c <rprintfu04>
				u_val %= div_val;
    2d9e:	c7 01       	movw	r24, r14
    2da0:	b8 01       	movw	r22, r16
    2da2:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    2da6:	7c 01       	movw	r14, r24
				div_val /= base;
    2da8:	c8 01       	movw	r24, r16
    2daa:	b5 01       	movw	r22, r10
    2dac:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    2db0:	8b 01       	movw	r16, r22
			} while (div_val);
    2db2:	61 15       	cp	r22, r1
    2db4:	71 05       	cpc	r23, r1
    2db6:	61 f7       	brne	.-40     	; 0x2d90 <rprintf1RamRom+0xfc>
    2db8:	74 01       	movw	r14, r8
    2dba:	98 cf       	rjmp	.-208    	; 0x2cec <rprintf1RamRom+0x58>

00002dbc <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    2dbc:	20 91 b9 00 	lds	r18, 0x00B9
    2dc0:	2e 7f       	andi	r18, 0xFE	; 254
    2dc2:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    2dc6:	20 91 b9 00 	lds	r18, 0x00B9
    2dca:	2d 7f       	andi	r18, 0xFD	; 253
    2dcc:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    2dd0:	9c 01       	movw	r18, r24
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	60 e8       	ldi	r22, 0x80	; 128
    2dd8:	7e e3       	ldi	r23, 0x3E	; 62
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__divmodsi4>
	if(bitrate_div >= 16)
    2de2:	20 31       	cpi	r18, 0x10	; 16
    2de4:	30 f0       	brcs	.+12     	; 0x2df2 <i2cSetBitrate+0x36>
		bitrate_div = (bitrate_div-16)/2;
    2de6:	82 2f       	mov	r24, r18
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	40 97       	sbiw	r24, 0x10	; 16
    2dec:	95 95       	asr	r25
    2dee:	87 95       	ror	r24
    2df0:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
    2df2:	20 93 b8 00 	sts	0x00B8, r18
}
    2df6:	08 95       	ret

00002df8 <i2cInit>:

// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	sbi(PORTD, 0);	// i2c SCL on 640
    2df8:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on 640
    2dfa:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    2dfc:	10 92 57 05 	sts	0x0557, r1
    2e00:	10 92 56 05 	sts	0x0556, r1
	i2cSlaveTransmit = 0;
    2e04:	10 92 59 05 	sts	0x0559, r1
    2e08:	10 92 58 05 	sts	0x0558, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    2e0c:	84 e6       	ldi	r24, 0x64	; 100
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    2e14:	ec eb       	ldi	r30, 0xBC	; 188
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	84 60       	ori	r24, 0x04	; 4
    2e1c:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    2e1e:	10 92 10 05 	sts	0x0510, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    2e22:	80 81       	ld	r24, Z
    2e24:	81 60       	ori	r24, 0x01	; 1
    2e26:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    2e28:	80 81       	ld	r24, Z
    2e2a:	80 64       	ori	r24, 0x40	; 64
    2e2c:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    2e2e:	78 94       	sei
}
    2e30:	08 95       	ret

00002e32 <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	61 11       	cpse	r22, r1
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	8e 7f       	andi	r24, 0xFE	; 254
    2e3a:	98 2b       	or	r25, r24
    2e3c:	90 93 ba 00 	sts	0x00BA, r25
}
    2e40:	08 95       	ret

00002e42 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    2e42:	90 93 57 05 	sts	0x0557, r25
    2e46:	80 93 56 05 	sts	0x0556, r24
}
    2e4a:	08 95       	ret

00002e4c <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    2e4c:	90 93 59 05 	sts	0x0559, r25
    2e50:	80 93 58 05 	sts	0x0558, r24
}
    2e54:	08 95       	ret

00002e56 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    2e56:	ec eb       	ldi	r30, 0xBC	; 188
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8f 70       	andi	r24, 0x0F	; 15
    2e5e:	80 6a       	ori	r24, 0xA0	; 160
    2e60:	80 83       	st	Z, r24
}
    2e62:	08 95       	ret

00002e64 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    2e64:	ec eb       	ldi	r30, 0xBC	; 188
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 70       	andi	r24, 0x0F	; 15
    2e6c:	80 6d       	ori	r24, 0xD0	; 208
    2e6e:	80 83       	st	Z, r24
}
    2e70:	08 95       	ret

00002e72 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    2e72:	80 91 bc 00 	lds	r24, 0x00BC
    2e76:	87 ff       	sbrs	r24, 7
    2e78:	fc cf       	rjmp	.-8      	; 0x2e72 <i2cWaitForComplete>
}
    2e7a:	08 95       	ret

00002e7c <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    2e7c:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    2e80:	ec eb       	ldi	r30, 0xBC	; 188
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	8f 70       	andi	r24, 0x0F	; 15
    2e88:	80 68       	ori	r24, 0x80	; 128
    2e8a:	80 83       	st	Z, r24
}
    2e8c:	08 95       	ret

00002e8e <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    2e8e:	88 23       	and	r24, r24
    2e90:	29 f0       	breq	.+10     	; 0x2e9c <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    2e92:	80 91 bc 00 	lds	r24, 0x00BC
    2e96:	8f 70       	andi	r24, 0x0F	; 15
    2e98:	80 6c       	ori	r24, 0xC0	; 192
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    2e9c:	80 91 bc 00 	lds	r24, 0x00BC
    2ea0:	8f 70       	andi	r24, 0x0F	; 15
    2ea2:	80 68       	ori	r24, 0x80	; 128
    2ea4:	80 93 bc 00 	sts	0x00BC, r24
    2ea8:	08 95       	ret

00002eaa <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    2eaa:	80 91 bb 00 	lds	r24, 0x00BB
}
    2eae:	08 95       	ret

00002eb0 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    2eb0:	80 91 b9 00 	lds	r24, 0x00B9
}
    2eb4:	08 95       	ret

00002eb6 <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    2eb6:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    2eb8:	80 91 10 05 	lds	r24, 0x0510
    2ebc:	88 23       	and	r24, r24
    2ebe:	e1 f7       	brne	.-8      	; 0x2eb8 <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	80 93 10 05 	sts	0x0510, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    2ec6:	9e 7f       	andi	r25, 0xFE	; 254
    2ec8:	90 93 11 05 	sts	0x0511, r25
    2ecc:	a2 e1       	ldi	r26, 0x12	; 18
    2ece:	b5 e0       	ldi	r27, 0x05	; 5
    2ed0:	fa 01       	movw	r30, r20
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    2ed4:	81 91       	ld	r24, Z+
    2ed6:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    2ed8:	8e 2f       	mov	r24, r30
    2eda:	84 1b       	sub	r24, r20
    2edc:	86 17       	cp	r24, r22
    2ede:	d0 f3       	brcs	.-12     	; 0x2ed4 <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    2ee0:	10 92 32 05 	sts	0x0532, r1
	I2cSendDataLength = length;
    2ee4:	60 93 33 05 	sts	0x0533, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    2ee8:	80 91 bc 00 	lds	r24, 0x00BC
    2eec:	8f 70       	andi	r24, 0x0F	; 15
    2eee:	80 6a       	ori	r24, 0xA0	; 160
    2ef0:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    2ef4:	08 95       	ret

00002ef6 <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    2ef6:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    2ef8:	80 91 10 05 	lds	r24, 0x0510
    2efc:	88 23       	and	r24, r24
    2efe:	e1 f7       	brne	.-8      	; 0x2ef8 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	80 93 10 05 	sts	0x0510, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    2f06:	91 60       	ori	r25, 0x01	; 1
    2f08:	90 93 11 05 	sts	0x0511, r25
	I2cReceiveDataIndex = 0;
    2f0c:	10 92 54 05 	sts	0x0554, r1
	I2cReceiveDataLength = length;
    2f10:	60 93 55 05 	sts	0x0555, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    2f14:	80 91 bc 00 	lds	r24, 0x00BC
    2f18:	8f 70       	andi	r24, 0x0F	; 15
    2f1a:	80 6a       	ori	r24, 0xA0	; 160
    2f1c:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    2f20:	80 91 10 05 	lds	r24, 0x0510
    2f24:	88 23       	and	r24, r24
    2f26:	e1 f7       	brne	.-8      	; 0x2f20 <i2cMasterReceive+0x2a>
    2f28:	a4 e3       	ldi	r26, 0x34	; 52
    2f2a:	b5 e0       	ldi	r27, 0x05	; 5
    2f2c:	fa 01       	movw	r30, r20
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    2f30:	8d 91       	ld	r24, X+
    2f32:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    2f34:	8e 2f       	mov	r24, r30
    2f36:	84 1b       	sub	r24, r20
    2f38:	86 17       	cp	r24, r22
    2f3a:	d0 f3       	brcs	.-12     	; 0x2f30 <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    2f3c:	08 95       	ret

00002f3e <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    2f3e:	98 2f       	mov	r25, r24
    2f40:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    2f42:	80 91 bc 00 	lds	r24, 0x00BC
    2f46:	8e 7f       	andi	r24, 0xFE	; 254
    2f48:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    2f4c:	80 91 bc 00 	lds	r24, 0x00BC
    2f50:	8f 70       	andi	r24, 0x0F	; 15
    2f52:	80 6a       	ori	r24, 0xA0	; 160
    2f54:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    2f58:	80 91 bc 00 	lds	r24, 0x00BC
    2f5c:	87 ff       	sbrs	r24, 7
    2f5e:	fc cf       	rjmp	.-8      	; 0x2f58 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    2f60:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    2f62:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    2f66:	80 91 bc 00 	lds	r24, 0x00BC
    2f6a:	8f 70       	andi	r24, 0x0F	; 15
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    2f72:	80 91 bc 00 	lds	r24, 0x00BC
    2f76:	87 ff       	sbrs	r24, 7
    2f78:	fc cf       	rjmp	.-8      	; 0x2f72 <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    2f7a:	80 91 b9 00 	lds	r24, 0x00B9
    2f7e:	88 31       	cpi	r24, 0x18	; 24
    2f80:	89 f0       	breq	.+34     	; 0x2fa4 <i2cMasterSendNI+0x66>
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	12 c0       	rjmp	.+36     	; 0x2faa <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    2f86:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    2f88:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    2f8c:	80 91 bc 00 	lds	r24, 0x00BC
    2f90:	8f 70       	andi	r24, 0x0F	; 15
    2f92:	80 68       	ori	r24, 0x80	; 128
    2f94:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    2f98:	80 91 bc 00 	lds	r24, 0x00BC
    2f9c:	87 ff       	sbrs	r24, 7
    2f9e:	fc cf       	rjmp	.-8      	; 0x2f98 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    2fa0:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    2fa2:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    2fa4:	66 23       	and	r22, r22
    2fa6:	79 f7       	brne	.-34     	; 0x2f86 <i2cMasterSendNI+0x48>
    2fa8:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    2faa:	80 91 bc 00 	lds	r24, 0x00BC
    2fae:	8f 70       	andi	r24, 0x0F	; 15
    2fb0:	80 6d       	ori	r24, 0xD0	; 208
    2fb2:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    2fb6:	80 91 bc 00 	lds	r24, 0x00BC
    2fba:	84 ff       	sbrs	r24, 4
    2fbc:	fc cf       	rjmp	.-8      	; 0x2fb6 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    2fbe:	80 91 bc 00 	lds	r24, 0x00BC
    2fc2:	81 60       	ori	r24, 0x01	; 1
    2fc4:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    2fc8:	89 2f       	mov	r24, r25
    2fca:	08 95       	ret

00002fcc <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    2fcc:	98 2f       	mov	r25, r24
    2fce:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    2fd0:	80 91 bc 00 	lds	r24, 0x00BC
    2fd4:	8e 7f       	andi	r24, 0xFE	; 254
    2fd6:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    2fda:	80 91 bc 00 	lds	r24, 0x00BC
    2fde:	8f 70       	andi	r24, 0x0F	; 15
    2fe0:	80 6a       	ori	r24, 0xA0	; 160
    2fe2:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    2fe6:	80 91 bc 00 	lds	r24, 0x00BC
    2fea:	87 ff       	sbrs	r24, 7
    2fec:	fc cf       	rjmp	.-8      	; 0x2fe6 <i2cMasterReceiveNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    2fee:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    2ff0:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    2ff4:	80 91 bc 00 	lds	r24, 0x00BC
    2ff8:	8f 70       	andi	r24, 0x0F	; 15
    2ffa:	80 68       	ori	r24, 0x80	; 128
    2ffc:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3000:	80 91 bc 00 	lds	r24, 0x00BC
    3004:	87 ff       	sbrs	r24, 7
    3006:	fc cf       	rjmp	.-8      	; 0x3000 <i2cMasterReceiveNI+0x34>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    3008:	80 91 b9 00 	lds	r24, 0x00B9
    300c:	80 34       	cpi	r24, 0x40	; 64
    300e:	81 f0       	breq	.+32     	; 0x3030 <i2cMasterReceiveNI+0x64>
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	1e c0       	rjmp	.+60     	; 0x3050 <i2cMasterReceiveNI+0x84>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3014:	80 91 bc 00 	lds	r24, 0x00BC
    3018:	8f 70       	andi	r24, 0x0F	; 15
    301a:	80 6c       	ori	r24, 0xC0	; 192
    301c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3020:	80 91 bc 00 	lds	r24, 0x00BC
    3024:	87 ff       	sbrs	r24, 7
    3026:	fc cf       	rjmp	.-8      	; 0x3020 <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3028:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    302c:	81 93       	st	Z+, r24
			// decrement length
			length--;
    302e:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    3030:	62 30       	cpi	r22, 0x02	; 2
    3032:	80 f7       	brcc	.-32     	; 0x3014 <i2cMasterReceiveNI+0x48>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3034:	80 91 bc 00 	lds	r24, 0x00BC
    3038:	8f 70       	andi	r24, 0x0F	; 15
    303a:	80 68       	ori	r24, 0x80	; 128
    303c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3040:	80 91 bc 00 	lds	r24, 0x00BC
    3044:	87 ff       	sbrs	r24, 7
    3046:	fc cf       	rjmp	.-8      	; 0x3040 <i2cMasterReceiveNI+0x74>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3048:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    304c:	80 83       	st	Z, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    3050:	80 91 bc 00 	lds	r24, 0x00BC
    3054:	8f 70       	andi	r24, 0x0F	; 15
    3056:	80 6d       	ori	r24, 0xD0	; 208
    3058:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    305c:	80 91 bc 00 	lds	r24, 0x00BC
    3060:	81 60       	ori	r24, 0x01	; 1
    3062:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    3066:	89 2f       	mov	r24, r25
    3068:	08 95       	ret

0000306a <__vector_39>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    306a:	1f 92       	push	r1
    306c:	0f 92       	push	r0
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	0f 92       	push	r0
    3072:	11 24       	eor	r1, r1
    3074:	2f 93       	push	r18
    3076:	3f 93       	push	r19
    3078:	4f 93       	push	r20
    307a:	5f 93       	push	r21
    307c:	6f 93       	push	r22
    307e:	7f 93       	push	r23
    3080:	8f 93       	push	r24
    3082:	9f 93       	push	r25
    3084:	af 93       	push	r26
    3086:	bf 93       	push	r27
    3088:	ef 93       	push	r30
    308a:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    308c:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    3090:	88 7f       	andi	r24, 0xF8	; 248
    3092:	80 36       	cpi	r24, 0x60	; 96
    3094:	09 f4       	brne	.+2      	; 0x3098 <__vector_39+0x2e>
    3096:	a0 c0       	rjmp	.+320    	; 0x31d8 <__vector_39+0x16e>
    3098:	81 36       	cpi	r24, 0x61	; 97
    309a:	70 f5       	brcc	.+92     	; 0x30f8 <__vector_39+0x8e>
    309c:	88 32       	cpi	r24, 0x28	; 40
    309e:	09 f4       	brne	.+2      	; 0x30a2 <__vector_39+0x38>
    30a0:	5f c0       	rjmp	.+190    	; 0x3160 <__vector_39+0xf6>
    30a2:	89 32       	cpi	r24, 0x29	; 41
    30a4:	98 f4       	brcc	.+38     	; 0x30cc <__vector_39+0x62>
    30a6:	80 31       	cpi	r24, 0x10	; 16
    30a8:	09 f4       	brne	.+2      	; 0x30ac <__vector_39+0x42>
    30aa:	57 c0       	rjmp	.+174    	; 0x315a <__vector_39+0xf0>
    30ac:	81 31       	cpi	r24, 0x11	; 17
    30ae:	38 f4       	brcc	.+14     	; 0x30be <__vector_39+0x54>
    30b0:	88 23       	and	r24, r24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <__vector_39+0x4c>
    30b4:	ea c0       	rjmp	.+468    	; 0x328a <__vector_39+0x220>
    30b6:	88 30       	cpi	r24, 0x08	; 8
    30b8:	09 f0       	breq	.+2      	; 0x30bc <__vector_39+0x52>
    30ba:	ef c0       	rjmp	.+478    	; 0x329a <__vector_39+0x230>
    30bc:	4e c0       	rjmp	.+156    	; 0x315a <__vector_39+0xf0>
    30be:	88 31       	cpi	r24, 0x18	; 24
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <__vector_39+0x5a>
    30c2:	4e c0       	rjmp	.+156    	; 0x3160 <__vector_39+0xf6>
    30c4:	80 32       	cpi	r24, 0x20	; 32
    30c6:	09 f0       	breq	.+2      	; 0x30ca <__vector_39+0x60>
    30c8:	e8 c0       	rjmp	.+464    	; 0x329a <__vector_39+0x230>
    30ca:	df c0       	rjmp	.+446    	; 0x328a <__vector_39+0x220>
    30cc:	80 34       	cpi	r24, 0x40	; 64
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <__vector_39+0x68>
    30d0:	77 c0       	rjmp	.+238    	; 0x31c0 <__vector_39+0x156>
    30d2:	81 34       	cpi	r24, 0x41	; 65
    30d4:	38 f4       	brcc	.+14     	; 0x30e4 <__vector_39+0x7a>
    30d6:	80 33       	cpi	r24, 0x30	; 48
    30d8:	09 f4       	brne	.+2      	; 0x30dc <__vector_39+0x72>
    30da:	d7 c0       	rjmp	.+430    	; 0x328a <__vector_39+0x220>
    30dc:	88 33       	cpi	r24, 0x38	; 56
    30de:	09 f0       	breq	.+2      	; 0x30e2 <__vector_39+0x78>
    30e0:	dc c0       	rjmp	.+440    	; 0x329a <__vector_39+0x230>
    30e2:	5d c0       	rjmp	.+186    	; 0x319e <__vector_39+0x134>
    30e4:	80 35       	cpi	r24, 0x50	; 80
    30e6:	09 f4       	brne	.+2      	; 0x30ea <__vector_39+0x80>
    30e8:	5f c0       	rjmp	.+190    	; 0x31a8 <__vector_39+0x13e>
    30ea:	88 35       	cpi	r24, 0x58	; 88
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <__vector_39+0x86>
    30ee:	4a c0       	rjmp	.+148    	; 0x3184 <__vector_39+0x11a>
    30f0:	88 34       	cpi	r24, 0x48	; 72
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <__vector_39+0x8c>
    30f4:	d2 c0       	rjmp	.+420    	; 0x329a <__vector_39+0x230>
    30f6:	c9 c0       	rjmp	.+402    	; 0x328a <__vector_39+0x220>
    30f8:	88 39       	cpi	r24, 0x98	; 152
    30fa:	09 f4       	brne	.+2      	; 0x30fe <__vector_39+0x94>
    30fc:	ba c0       	rjmp	.+372    	; 0x3272 <__vector_39+0x208>
    30fe:	89 39       	cpi	r24, 0x99	; 153
    3100:	b0 f4       	brcc	.+44     	; 0x312e <__vector_39+0xc4>
    3102:	88 37       	cpi	r24, 0x78	; 120
    3104:	09 f4       	brne	.+2      	; 0x3108 <__vector_39+0x9e>
    3106:	68 c0       	rjmp	.+208    	; 0x31d8 <__vector_39+0x16e>
    3108:	89 37       	cpi	r24, 0x79	; 121
    310a:	38 f4       	brcc	.+14     	; 0x311a <__vector_39+0xb0>
    310c:	88 36       	cpi	r24, 0x68	; 104
    310e:	09 f4       	brne	.+2      	; 0x3112 <__vector_39+0xa8>
    3110:	63 c0       	rjmp	.+198    	; 0x31d8 <__vector_39+0x16e>
    3112:	80 37       	cpi	r24, 0x70	; 112
    3114:	09 f0       	breq	.+2      	; 0x3118 <__vector_39+0xae>
    3116:	c1 c0       	rjmp	.+386    	; 0x329a <__vector_39+0x230>
    3118:	5f c0       	rjmp	.+190    	; 0x31d8 <__vector_39+0x16e>
    311a:	88 38       	cpi	r24, 0x88	; 136
    311c:	09 f4       	brne	.+2      	; 0x3120 <__vector_39+0xb6>
    311e:	a9 c0       	rjmp	.+338    	; 0x3272 <__vector_39+0x208>
    3120:	80 39       	cpi	r24, 0x90	; 144
    3122:	09 f4       	brne	.+2      	; 0x3126 <__vector_39+0xbc>
    3124:	5f c0       	rjmp	.+190    	; 0x31e4 <__vector_39+0x17a>
    3126:	80 38       	cpi	r24, 0x80	; 128
    3128:	09 f0       	breq	.+2      	; 0x312c <__vector_39+0xc2>
    312a:	b7 c0       	rjmp	.+366    	; 0x329a <__vector_39+0x230>
    312c:	5b c0       	rjmp	.+182    	; 0x31e4 <__vector_39+0x17a>
    312e:	80 3b       	cpi	r24, 0xB0	; 176
    3130:	09 f4       	brne	.+2      	; 0x3134 <__vector_39+0xca>
    3132:	79 c0       	rjmp	.+242    	; 0x3226 <__vector_39+0x1bc>
    3134:	81 3b       	cpi	r24, 0xB1	; 177
    3136:	38 f4       	brcc	.+14     	; 0x3146 <__vector_39+0xdc>
    3138:	80 3a       	cpi	r24, 0xA0	; 160
    313a:	09 f4       	brne	.+2      	; 0x313e <__vector_39+0xd4>
    313c:	62 c0       	rjmp	.+196    	; 0x3202 <__vector_39+0x198>
    313e:	88 3a       	cpi	r24, 0xA8	; 168
    3140:	09 f0       	breq	.+2      	; 0x3144 <__vector_39+0xda>
    3142:	ab c0       	rjmp	.+342    	; 0x329a <__vector_39+0x230>
    3144:	70 c0       	rjmp	.+224    	; 0x3226 <__vector_39+0x1bc>
    3146:	80 3c       	cpi	r24, 0xC0	; 192
    3148:	09 f4       	brne	.+2      	; 0x314c <__vector_39+0xe2>
    314a:	9a c0       	rjmp	.+308    	; 0x3280 <__vector_39+0x216>
    314c:	88 3c       	cpi	r24, 0xC8	; 200
    314e:	09 f4       	brne	.+2      	; 0x3152 <__vector_39+0xe8>
    3150:	97 c0       	rjmp	.+302    	; 0x3280 <__vector_39+0x216>
    3152:	88 3b       	cpi	r24, 0xB8	; 184
    3154:	09 f0       	breq	.+2      	; 0x3158 <__vector_39+0xee>
    3156:	a1 c0       	rjmp	.+322    	; 0x329a <__vector_39+0x230>
    3158:	77 c0       	rjmp	.+238    	; 0x3248 <__vector_39+0x1de>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    315a:	80 91 11 05 	lds	r24, 0x0511
    315e:	0f c0       	rjmp	.+30     	; 0x317e <__vector_39+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    3160:	90 91 32 05 	lds	r25, 0x0532
    3164:	80 91 33 05 	lds	r24, 0x0533
    3168:	98 17       	cp	r25, r24
    316a:	08 f0       	brcs	.+2      	; 0x316e <__vector_39+0x104>
    316c:	8e c0       	rjmp	.+284    	; 0x328a <__vector_39+0x220>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    316e:	e9 2f       	mov	r30, r25
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	ee 5e       	subi	r30, 0xEE	; 238
    3174:	fa 4f       	sbci	r31, 0xFA	; 250
    3176:	80 81       	ld	r24, Z
    3178:	9f 5f       	subi	r25, 0xFF	; 255
    317a:	90 93 32 05 	sts	0x0532, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    317e:	80 93 bb 00 	sts	0x00BB, r24
    3182:	77 c0       	rjmp	.+238    	; 0x3272 <__vector_39+0x208>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    3184:	80 91 54 05 	lds	r24, 0x0554
    3188:	90 91 bb 00 	lds	r25, 0x00BB
    318c:	e8 2f       	mov	r30, r24
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	ec 5c       	subi	r30, 0xCC	; 204
    3192:	fa 4f       	sbci	r31, 0xFA	; 250
    3194:	90 83       	st	Z, r25
    3196:	8f 5f       	subi	r24, 0xFF	; 255
    3198:	80 93 54 05 	sts	0x0554, r24
    319c:	76 c0       	rjmp	.+236    	; 0x328a <__vector_39+0x220>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    319e:	80 91 bc 00 	lds	r24, 0x00BC
    31a2:	8f 70       	andi	r24, 0x0F	; 15
    31a4:	80 68       	ori	r24, 0x80	; 128
    31a6:	75 c0       	rjmp	.+234    	; 0x3292 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    31a8:	80 91 54 05 	lds	r24, 0x0554
    31ac:	90 91 bb 00 	lds	r25, 0x00BB
    31b0:	e8 2f       	mov	r30, r24
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	ec 5c       	subi	r30, 0xCC	; 204
    31b6:	fa 4f       	sbci	r31, 0xFA	; 250
    31b8:	90 83       	st	Z, r25
    31ba:	8f 5f       	subi	r24, 0xFF	; 255
    31bc:	80 93 54 05 	sts	0x0554, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    31c0:	20 91 54 05 	lds	r18, 0x0554
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	80 91 55 05 	lds	r24, 0x0555
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	28 17       	cp	r18, r24
    31d0:	39 07       	cpc	r19, r25
    31d2:	0c f0       	brlt	.+2      	; 0x31d6 <__vector_39+0x16c>
    31d4:	4e c0       	rjmp	.+156    	; 0x3272 <__vector_39+0x208>
    31d6:	48 c0       	rjmp	.+144    	; 0x3268 <__vector_39+0x1fe>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    31d8:	85 e0       	ldi	r24, 0x05	; 5
    31da:	80 93 10 05 	sts	0x0510, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    31de:	10 92 54 05 	sts	0x0554, r1
    31e2:	42 c0       	rjmp	.+132    	; 0x3268 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    31e4:	80 91 54 05 	lds	r24, 0x0554
    31e8:	90 91 bb 00 	lds	r25, 0x00BB
    31ec:	e8 2f       	mov	r30, r24
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	ec 5c       	subi	r30, 0xCC	; 204
    31f2:	fa 4f       	sbci	r31, 0xFA	; 250
    31f4:	90 83       	st	Z, r25
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	80 93 54 05 	sts	0x0554, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    31fc:	80 32       	cpi	r24, 0x20	; 32
    31fe:	c8 f5       	brcc	.+114    	; 0x3272 <__vector_39+0x208>
    3200:	33 c0       	rjmp	.+102    	; 0x3268 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3202:	80 91 bc 00 	lds	r24, 0x00BC
    3206:	8f 70       	andi	r24, 0x0F	; 15
    3208:	80 6c       	ori	r24, 0xC0	; 192
    320a:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    320e:	e0 91 56 05 	lds	r30, 0x0556
    3212:	f0 91 57 05 	lds	r31, 0x0557
    3216:	30 97       	sbiw	r30, 0x00	; 0
    3218:	f1 f1       	breq	.+124    	; 0x3296 <__vector_39+0x22c>
    321a:	80 91 54 05 	lds	r24, 0x0554
    321e:	64 e3       	ldi	r22, 0x34	; 52
    3220:	75 e0       	ldi	r23, 0x05	; 5
    3222:	09 95       	icall
    3224:	38 c0       	rjmp	.+112    	; 0x3296 <__vector_39+0x22c>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    3226:	84 e0       	ldi	r24, 0x04	; 4
    3228:	80 93 10 05 	sts	0x0510, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    322c:	e0 91 58 05 	lds	r30, 0x0558
    3230:	f0 91 59 05 	lds	r31, 0x0559
    3234:	30 97       	sbiw	r30, 0x00	; 0
    3236:	31 f0       	breq	.+12     	; 0x3244 <__vector_39+0x1da>
    3238:	80 e2       	ldi	r24, 0x20	; 32
    323a:	62 e1       	ldi	r22, 0x12	; 18
    323c:	75 e0       	ldi	r23, 0x05	; 5
    323e:	09 95       	icall
    3240:	80 93 33 05 	sts	0x0533, r24
		// reset data index
		I2cSendDataIndex = 0;
    3244:	10 92 32 05 	sts	0x0532, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    3248:	90 91 32 05 	lds	r25, 0x0532
    324c:	e9 2f       	mov	r30, r25
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	ee 5e       	subi	r30, 0xEE	; 238
    3252:	fa 4f       	sbci	r31, 0xFA	; 250
    3254:	80 81       	ld	r24, Z
    3256:	80 93 bb 00 	sts	0x00BB, r24
    325a:	9f 5f       	subi	r25, 0xFF	; 255
    325c:	90 93 32 05 	sts	0x0532, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    3260:	80 91 33 05 	lds	r24, 0x0533
    3264:	98 17       	cp	r25, r24
    3266:	28 f4       	brcc	.+10     	; 0x3272 <__vector_39+0x208>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3268:	80 91 bc 00 	lds	r24, 0x00BC
    326c:	8f 70       	andi	r24, 0x0F	; 15
    326e:	80 6c       	ori	r24, 0xC0	; 192
    3270:	04 c0       	rjmp	.+8      	; 0x327a <__vector_39+0x210>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    3272:	80 91 bc 00 	lds	r24, 0x00BC
    3276:	8f 70       	andi	r24, 0x0F	; 15
    3278:	80 68       	ori	r24, 0x80	; 128
    327a:	80 93 bc 00 	sts	0x00BC, r24
    327e:	0d c0       	rjmp	.+26     	; 0x329a <__vector_39+0x230>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    3280:	80 91 bc 00 	lds	r24, 0x00BC
    3284:	8f 70       	andi	r24, 0x0F	; 15
    3286:	80 6c       	ori	r24, 0xC0	; 192
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    328a:	80 91 bc 00 	lds	r24, 0x00BC
    328e:	8f 70       	andi	r24, 0x0F	; 15
    3290:	80 6d       	ori	r24, 0xD0	; 208
    3292:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    3296:	10 92 10 05 	sts	0x0510, r1
		break;
	}
}
    329a:	ff 91       	pop	r31
    329c:	ef 91       	pop	r30
    329e:	bf 91       	pop	r27
    32a0:	af 91       	pop	r26
    32a2:	9f 91       	pop	r25
    32a4:	8f 91       	pop	r24
    32a6:	7f 91       	pop	r23
    32a8:	6f 91       	pop	r22
    32aa:	5f 91       	pop	r21
    32ac:	4f 91       	pop	r20
    32ae:	3f 91       	pop	r19
    32b0:	2f 91       	pop	r18
    32b2:	0f 90       	pop	r0
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	0f 90       	pop	r0
    32b8:	1f 90       	pop	r1
    32ba:	18 95       	reti

000032bc <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    32bc:	80 91 10 05 	lds	r24, 0x0510
}
    32c0:	08 95       	ret

000032c2 <init_LDS_buffer>:
uint8_t lds_buffer[BUFFER_SIZE];
uint8_t *lds_buffer_write_ndx = NULL;
uint8_t *lds_buffer_read_ndx = NULL;

void init_LDS_buffer(){
	lds_buffer_write_ndx = lds_buffer_read_ndx = lds_buffer;
    32c2:	87 ed       	ldi	r24, 0xD7	; 215
    32c4:	95 e0       	ldi	r25, 0x05	; 5
    32c6:	90 93 5d 05 	sts	0x055D, r25
    32ca:	80 93 5c 05 	sts	0x055C, r24
    32ce:	90 93 5b 05 	sts	0x055B, r25
    32d2:	80 93 5a 05 	sts	0x055A, r24
}
    32d6:	08 95       	ret

000032d8 <LDSRcv>:

void LDSRcv(unsigned char c){
	if(c != 0xff){
    32d8:	8f 3f       	cpi	r24, 0xFF	; 255
    32da:	b9 f0       	breq	.+46     	; 0x330a <LDSRcv+0x32>
		*lds_buffer_write_ndx = c;
    32dc:	e0 91 5a 05 	lds	r30, 0x055A
    32e0:	f0 91 5b 05 	lds	r31, 0x055B
    32e4:	80 83       	st	Z, r24
		lds_buffer_write_ndx++;		
    32e6:	80 91 5a 05 	lds	r24, 0x055A
    32ea:	90 91 5b 05 	lds	r25, 0x055B
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	90 93 5b 05 	sts	0x055B, r25
    32f4:	80 93 5a 05 	sts	0x055A, r24
		if(lds_buffer_write_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    32f8:	87 5d       	subi	r24, 0xD7	; 215
    32fa:	96 40       	sbci	r25, 0x06	; 6
    32fc:	30 f0       	brcs	.+12     	; 0x330a <LDSRcv+0x32>
			lds_buffer_write_ndx = lds_buffer;
    32fe:	87 ed       	ldi	r24, 0xD7	; 215
    3300:	95 e0       	ldi	r25, 0x05	; 5
    3302:	90 93 5b 05 	sts	0x055B, r25
    3306:	80 93 5a 05 	sts	0x055A, r24
    330a:	08 95       	ret

0000330c <error_checker>:
		lds_buffer_read_ndx = lds_buffer;
	}
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	ec 01       	movw	r28, r24
    3316:	8b 01       	movw	r16, r22
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	70 e0       	ldi	r23, 0x00	; 0
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    3324:	22 0f       	add	r18, r18
    3326:	33 1f       	adc	r19, r19
    3328:	44 1f       	adc	r20, r20
    332a:	55 1f       	adc	r21, r21
    332c:	fe 01       	movw	r30, r28
    332e:	e6 0f       	add	r30, r22
    3330:	f7 1f       	adc	r31, r23
    3332:	80 81       	ld	r24, Z
    3334:	91 81       	ldd	r25, Z+1	; 0x01
    3336:	a0 e0       	ldi	r26, 0x00	; 0
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	28 0f       	add	r18, r24
    333c:	39 1f       	adc	r19, r25
    333e:	4a 1f       	adc	r20, r26
    3340:	5b 1f       	adc	r21, r27
    3342:	6e 5f       	subi	r22, 0xFE	; 254
    3344:	7f 4f       	sbci	r23, 0xFF	; 255
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    3346:	64 31       	cpi	r22, 0x14	; 20
    3348:	71 05       	cpc	r23, r1
    334a:	61 f7       	brne	.-40     	; 0x3324 <error_checker+0x18>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    334c:	c9 01       	movw	r24, r18
    334e:	9f 77       	andi	r25, 0x7F	; 127
    3350:	6f e0       	ldi	r22, 0x0F	; 15
    3352:	56 95       	lsr	r21
    3354:	47 95       	ror	r20
    3356:	37 95       	ror	r19
    3358:	27 95       	ror	r18
    335a:	6a 95       	dec	r22
    335c:	d1 f7       	brne	.-12     	; 0x3352 <error_checker+0x46>
    335e:	82 0f       	add	r24, r18
    3360:	93 1f       	adc	r25, r19
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	9f 77       	andi	r25, 0x7F	; 127
    3366:	80 17       	cp	r24, r16
    3368:	91 07       	cpc	r25, r17
    336a:	09 f4       	brne	.+2      	; 0x336e <error_checker+0x62>
    336c:	21 e0       	ldi	r18, 0x01	; 1
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }
    336e:	82 2f       	mov	r24, r18
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <conv_FrametoDist>:
			f_ndx++;
		}
	}
}

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
    3380:	20 e0       	ldi	r18, 0x00	; 0
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
		// Maps frame indicies to range indices
		r_ndx = 4*ldsf[f_ndx].index - 640;
    3382:	e8 81       	ld	r30, Y
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	e0 5a       	subi	r30, 0xA0	; 160
    3388:	f0 40       	sbci	r31, 0x00	; 0
    338a:	ee 0f       	add	r30, r30
    338c:	ff 1f       	adc	r31, r31
    338e:	ee 0f       	add	r30, r30
    3390:	ff 1f       	adc	r31, r31
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
    3392:	df 01       	movw	r26, r30
    3394:	aa 0f       	add	r26, r26
    3396:	bb 1f       	adc	r27, r27
    3398:	a6 0f       	add	r26, r22
    339a:	b7 1f       	adc	r27, r23
    339c:	8b 85       	ldd	r24, Y+11	; 0x0b
    339e:	9c 85       	ldd	r25, Y+12	; 0x0c
    33a0:	8d 93       	st	X+, r24
    33a2:	9c 93       	st	X, r25
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
    33a4:	df 01       	movw	r26, r30
    33a6:	11 96       	adiw	r26, 0x01	; 1
    33a8:	aa 0f       	add	r26, r26
    33aa:	bb 1f       	adc	r27, r27
    33ac:	a6 0f       	add	r26, r22
    33ae:	b7 1f       	adc	r27, r23
    33b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b4:	8d 93       	st	X+, r24
    33b6:	9c 93       	st	X, r25
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
    33b8:	32 96       	adiw	r30, 0x02	; 2
    33ba:	df 01       	movw	r26, r30
    33bc:	aa 0f       	add	r26, r26
    33be:	bb 1f       	adc	r27, r27
    33c0:	a6 0f       	add	r26, r22
    33c2:	b7 1f       	adc	r27, r23
    33c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c6:	98 89       	ldd	r25, Y+16	; 0x10
    33c8:	8d 93       	st	X+, r24
    33ca:	9c 93       	st	X, r25
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
    33cc:	31 96       	adiw	r30, 0x01	; 1
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	e6 0f       	add	r30, r22
    33d4:	f7 1f       	adc	r31, r23
    33d6:	89 89       	ldd	r24, Y+17	; 0x11
    33d8:	9a 89       	ldd	r25, Y+18	; 0x12
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
    33de:	2f 5f       	subi	r18, 0xFF	; 255
    33e0:	6d 96       	adiw	r28, 0x1d	; 29
    33e2:	2a 35       	cpi	r18, 0x5A	; 90
    33e4:	71 f6       	brne	.-100    	; 0x3382 <conv_FrametoDist+0x8>
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	08 95       	ret

000033ec <print_frame>:
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
}  

void print_frame(LDS_FRAME frame){
    33ec:	ef 92       	push	r14
    33ee:	ff 92       	push	r15
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	e9 84       	ldd	r14, Y+9	; 0x09
    33fe:	0a 85       	ldd	r16, Y+10	; 0x0a
    3400:	1b 85       	ldd	r17, Y+11	; 0x0b
	rprintf("Index: ");
    3402:	00 d0       	rcall	.+0      	; 0x3404 <print_frame+0x18>
    3404:	0f 92       	push	r0
    3406:	ff 24       	eor	r15, r15
    3408:	f3 94       	inc	r15
    340a:	ad b7       	in	r26, 0x3d	; 61
    340c:	be b7       	in	r27, 0x3e	; 62
    340e:	11 96       	adiw	r26, 0x01	; 1
    3410:	fc 92       	st	X, r15
    3412:	11 97       	sbiw	r26, 0x01	; 1
    3414:	86 e3       	ldi	r24, 0x36	; 54
    3416:	92 e0       	ldi	r25, 0x02	; 2
    3418:	13 96       	adiw	r26, 0x03	; 3
    341a:	9c 93       	st	X, r25
    341c:	8e 93       	st	-X, r24
    341e:	12 97       	sbiw	r26, 0x02	; 2
    3420:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	rprintfu08(frame.index);
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	8e 2d       	mov	r24, r14
    342c:	0e 94 99 14 	call	0x2932	; 0x2932 <rprintfu08>
	rprintf(" Motor Speed: ");
    3430:	00 d0       	rcall	.+0      	; 0x3432 <print_frame+0x46>
    3432:	0f 92       	push	r0
    3434:	ed b7       	in	r30, 0x3d	; 61
    3436:	fe b7       	in	r31, 0x3e	; 62
    3438:	f1 82       	std	Z+1, r15	; 0x01
    343a:	87 e2       	ldi	r24, 0x27	; 39
    343c:	92 e0       	ldi	r25, 0x02	; 2
    343e:	93 83       	std	Z+3, r25	; 0x03
    3440:	82 83       	std	Z+2, r24	; 0x02
    3442:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	rprintfu16(frame.motor_speed);
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	c8 01       	movw	r24, r16
    344e:	0e 94 a4 14 	call	0x2948	; 0x2948 <rprintfu16>
	rprintf(" Distances: ");
    3452:	00 d0       	rcall	.+0      	; 0x3454 <print_frame+0x68>
    3454:	0f 92       	push	r0
    3456:	ad b7       	in	r26, 0x3d	; 61
    3458:	be b7       	in	r27, 0x3e	; 62
    345a:	11 96       	adiw	r26, 0x01	; 1
    345c:	fc 92       	st	X, r15
    345e:	11 97       	sbiw	r26, 0x01	; 1
    3460:	8a e1       	ldi	r24, 0x1A	; 26
    3462:	92 e0       	ldi	r25, 0x02	; 2
    3464:	13 96       	adiw	r26, 0x03	; 3
    3466:	9c 93       	st	X, r25
    3468:	8e 93       	st	-X, r24
    346a:	12 97       	sbiw	r26, 0x02	; 2
    346c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	for(uint8_t ndx = 0; ndx < 4; ndx++){
		rprintf("%d ",frame.distance[ndx]);
    3470:	00 d0       	rcall	.+0      	; 0x3472 <print_frame+0x86>
    3472:	ed b7       	in	r30, 0x3d	; 61
    3474:	fe b7       	in	r31, 0x3e	; 62
    3476:	31 96       	adiw	r30, 0x01	; 1
    3478:	ad b7       	in	r26, 0x3d	; 61
    347a:	be b7       	in	r27, 0x3e	; 62
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	fc 92       	st	X, r15
    3480:	06 e1       	ldi	r16, 0x16	; 22
    3482:	12 e0       	ldi	r17, 0x02	; 2
    3484:	12 83       	std	Z+2, r17	; 0x02
    3486:	01 83       	std	Z+1, r16	; 0x01
    3488:	8c 89       	ldd	r24, Y+20	; 0x14
    348a:	9d 89       	ldd	r25, Y+21	; 0x15
    348c:	94 83       	std	Z+4, r25	; 0x04
    348e:	83 83       	std	Z+3, r24	; 0x03
    3490:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
    3494:	ed b7       	in	r30, 0x3d	; 61
    3496:	fe b7       	in	r31, 0x3e	; 62
    3498:	31 96       	adiw	r30, 0x01	; 1
    349a:	ad b7       	in	r26, 0x3d	; 61
    349c:	be b7       	in	r27, 0x3e	; 62
    349e:	11 96       	adiw	r26, 0x01	; 1
    34a0:	fc 92       	st	X, r15
    34a2:	12 83       	std	Z+2, r17	; 0x02
    34a4:	01 83       	std	Z+1, r16	; 0x01
    34a6:	8e 89       	ldd	r24, Y+22	; 0x16
    34a8:	9f 89       	ldd	r25, Y+23	; 0x17
    34aa:	94 83       	std	Z+4, r25	; 0x04
    34ac:	83 83       	std	Z+3, r24	; 0x03
    34ae:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
    34b2:	ed b7       	in	r30, 0x3d	; 61
    34b4:	fe b7       	in	r31, 0x3e	; 62
    34b6:	31 96       	adiw	r30, 0x01	; 1
    34b8:	ad b7       	in	r26, 0x3d	; 61
    34ba:	be b7       	in	r27, 0x3e	; 62
    34bc:	11 96       	adiw	r26, 0x01	; 1
    34be:	fc 92       	st	X, r15
    34c0:	12 83       	std	Z+2, r17	; 0x02
    34c2:	01 83       	std	Z+1, r16	; 0x01
    34c4:	88 8d       	ldd	r24, Y+24	; 0x18
    34c6:	99 8d       	ldd	r25, Y+25	; 0x19
    34c8:	94 83       	std	Z+4, r25	; 0x04
    34ca:	83 83       	std	Z+3, r24	; 0x03
    34cc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
    34d0:	ed b7       	in	r30, 0x3d	; 61
    34d2:	fe b7       	in	r31, 0x3e	; 62
    34d4:	31 96       	adiw	r30, 0x01	; 1
    34d6:	ad b7       	in	r26, 0x3d	; 61
    34d8:	be b7       	in	r27, 0x3e	; 62
    34da:	11 96       	adiw	r26, 0x01	; 1
    34dc:	fc 92       	st	X, r15
    34de:	12 83       	std	Z+2, r17	; 0x02
    34e0:	01 83       	std	Z+1, r16	; 0x01
    34e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e6:	94 83       	std	Z+4, r25	; 0x04
    34e8:	83 83       	std	Z+3, r24	; 0x03
    34ea:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <rprintf1RamRom>
	}
	rprintfCRLF();
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0e 94 8a 14 	call	0x2914	; 0x2914 <rprintfCRLF>
}
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	ff 90       	pop	r15
    3506:	ef 90       	pop	r14
    3508:	08 95       	ret

0000350a <read_LDS>:
			lds_buffer_write_ndx = lds_buffer;
		}
	}
}

uint8_t read_LDS(){
    350a:	04 c0       	rjmp	.+8      	; 0x3514 <read_LDS+0xa>
	while(lds_buffer_read_ndx == lds_buffer_write_ndx){ delay_us(10); };
    350c:	8a e0       	ldi	r24, 0x0A	; 10
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 77 09 	call	0x12ee	; 0x12ee <delay_us>
    3514:	e0 91 5c 05 	lds	r30, 0x055C
    3518:	f0 91 5d 05 	lds	r31, 0x055D
    351c:	80 91 5a 05 	lds	r24, 0x055A
    3520:	90 91 5b 05 	lds	r25, 0x055B
    3524:	e8 17       	cp	r30, r24
    3526:	f9 07       	cpc	r31, r25
    3528:	89 f3       	breq	.-30     	; 0x350c <read_LDS+0x2>
	uint8_t data = *lds_buffer_read_ndx;
    352a:	21 91       	ld	r18, Z+
	lds_buffer_read_ndx++;
    352c:	f0 93 5d 05 	sts	0x055D, r31
    3530:	e0 93 5c 05 	sts	0x055C, r30
	if(lds_buffer_read_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    3534:	e7 5d       	subi	r30, 0xD7	; 215
    3536:	f6 40       	sbci	r31, 0x06	; 6
    3538:	30 f0       	brcs	.+12     	; 0x3546 <read_LDS+0x3c>
		lds_buffer_read_ndx = lds_buffer;
    353a:	87 ed       	ldi	r24, 0xD7	; 215
    353c:	95 e0       	ldi	r25, 0x05	; 5
    353e:	90 93 5d 05 	sts	0x055D, r25
    3542:	80 93 5c 05 	sts	0x055C, r24
	}
	return data;
}
    3546:	82 2f       	mov	r24, r18
    3548:	08 95       	ret

0000354a <parse_frame>:
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }

uint8_t parse_frame(LDS_FRAME *frame){
    354a:	2f 92       	push	r2
    354c:	3f 92       	push	r3
    354e:	4f 92       	push	r4
    3550:	5f 92       	push	r5
    3552:	6f 92       	push	r6
    3554:	7f 92       	push	r7
    3556:	8f 92       	push	r8
    3558:	9f 92       	push	r9
    355a:	af 92       	push	r10
    355c:	bf 92       	push	r11
    355e:	cf 92       	push	r12
    3560:	df 92       	push	r13
    3562:	ef 92       	push	r14
    3564:	ff 92       	push	r15
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	6a 97       	sbiw	r28, 0x1a	; 26
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	2c 01       	movw	r4, r24
    // Array for use by the error checker
    uint16_t chk_data[10];

    // Read start byte
    uint8_t start_byte = read_LDS();
    3580:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    // If the byte read in is not the start byte (0xFA), then this is not the beginning of a frame
    if(start_byte != 0xFA) return FALSE; 
    3584:	8a 3f       	cpi	r24, 0xFA	; 250
    3586:	09 f0       	breq	.+2      	; 0x358a <parse_frame+0x40>
    3588:	ac c0       	rjmp	.+344    	; 0x36e2 <parse_frame+0x198>

    // Read index
	frame->index = read_LDS();
    358a:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    358e:	28 2f       	mov	r18, r24
    3590:	f2 01       	movw	r30, r4
    3592:	80 83       	st	Z, r24
    // If the byte proceeding the start byte does not look like an index, then is is not the beginning of a frame
    if((frame->index < 0xA0)||(frame->index > 0xF9)) return FALSE;
    3594:	80 5a       	subi	r24, 0xA0	; 160
    3596:	8a 35       	cpi	r24, 0x5A	; 90
    3598:	08 f0       	brcs	.+2      	; 0x359c <parse_frame+0x52>
    359a:	a3 c0       	rjmp	.+326    	; 0x36e2 <parse_frame+0x198>

    // Add these bytes for the error checker
    chk_data[0] = (frame->index << 8) + start_byte;
    359c:	92 2f       	mov	r25, r18
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	86 50       	subi	r24, 0x06	; 6
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    //   MSB                                                               LSB
    //   15  14  13  12  11  10  9   8   7   6    5    4    3    2    1    0
    //   512 256 128 64  32  16  8   4   2   1 .  1/2  1/4  1/8  1/16 1/32 1/64
    //
	
	frame->motor_speed = ((uint16_t)read_LDS()) + ((uint16_t)read_LDS()<<8);
    35a8:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    35ac:	18 2f       	mov	r17, r24
    35ae:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    35b2:	38 2f       	mov	r19, r24
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	21 0f       	add	r18, r17
    35b8:	31 1d       	adc	r19, r1
    35ba:	f2 01       	movw	r30, r4
    35bc:	32 83       	std	Z+2, r19	; 0x02
    35be:	21 83       	std	Z+1, r18	; 0x01
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
    35c0:	38 87       	std	Y+8, r19	; 0x08
    35c2:	2f 83       	std	Y+7, r18	; 0x07
    35c4:	32 01       	movw	r6, r4
    35c6:	09 e0       	ldi	r16, 0x09	; 9
    35c8:	80 2e       	mov	r8, r16
    35ca:	91 2c       	mov	r9, r1
    35cc:	8c 0e       	add	r8, r28
    35ce:	9d 1e       	adc	r9, r29
    35d0:	62 01       	movw	r12, r4
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    35d2:	15 e0       	ldi	r17, 0x05	; 5
    35d4:	21 2e       	mov	r2, r17
    35d6:	31 2c       	mov	r3, r1
    35d8:	2c 0e       	add	r2, r28
    35da:	3d 1e       	adc	r3, r29
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    35dc:	ae 01       	movw	r20, r28
    35de:	47 5e       	subi	r20, 0xE7	; 231
    35e0:	5f 4f       	sbci	r21, 0xFF	; 255
    35e2:	5a 8f       	std	Y+26, r21	; 0x1a
    35e4:	49 8f       	std	Y+25, r20	; 0x19
    35e6:	46 c0       	rjmp	.+140    	; 0x3674 <parse_frame+0x12a>
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
	  	di_bytes[d_ndx] = read_LDS();
    35e8:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    35ec:	f8 01       	movw	r30, r16
    35ee:	81 93       	st	Z+, r24
    35f0:	8f 01       	movw	r16, r30
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    35f2:	e2 15       	cp	r30, r2
    35f4:	f3 05       	cpc	r31, r3
    35f6:	c1 f7       	brne	.-16     	; 0x35e8 <parse_frame+0x9e>
	  	di_bytes[d_ndx] = read_LDS();
      }
      // The invalid and strength flags are the MSB and adjacent bit of the second (indexwise) distance byte
      frame->invalid[itr] = (uint8_t)(di_bytes[1] & 0x80);
    35f8:	4a 81       	ldd	r20, Y+2	; 0x02
    35fa:	94 2f       	mov	r25, r20
    35fc:	90 78       	andi	r25, 0x80	; 128
    35fe:	f3 01       	movw	r30, r6
    3600:	93 83       	std	Z+3, r25	; 0x03
      frame->strength_warning[itr] = (uint8_t)(di_bytes[1] & 0x40);
    3602:	84 2f       	mov	r24, r20
    3604:	80 74       	andi	r24, 0x40	; 64
    3606:	87 83       	std	Z+7, r24	; 0x07

      // Distance and intensity bytes are read in little endian, and therefore need to be switched and concatenated
      // The second distance byte (indexwise) is masked to eliminate the invalid and strength flags from the measurement
      if(frame->invalid[itr]){ // If this measurement is invalid, set it to zero
    3608:	99 23       	and	r25, r25
    360a:	21 f0       	breq	.+8      	; 0x3614 <parse_frame+0xca>
		frame->distance[itr]  = 0;
    360c:	f6 01       	movw	r30, r12
    360e:	14 86       	std	Z+12, r1	; 0x0c
    3610:	13 86       	std	Z+11, r1	; 0x0b
    3612:	0c c0       	rjmp	.+24     	; 0x362c <parse_frame+0xe2>
      }
      else{
		frame->distance[itr]  = ((di_bytes[1] & 0x3F) << 8) + di_bytes[0];
    3614:	84 2f       	mov	r24, r20
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	8f 73       	andi	r24, 0x3F	; 63
    361a:	90 70       	andi	r25, 0x00	; 0
    361c:	98 2f       	mov	r25, r24
    361e:	88 27       	eor	r24, r24
    3620:	29 81       	ldd	r18, Y+1	; 0x01
    3622:	82 0f       	add	r24, r18
    3624:	91 1d       	adc	r25, r1
    3626:	f6 01       	movw	r30, r12
    3628:	94 87       	std	Z+12, r25	; 0x0c
    362a:	83 87       	std	Z+11, r24	; 0x0b
      }

      frame->intensity[itr] = (di_bytes[3] << 8) + di_bytes[2];
    362c:	bc 80       	ldd	r11, Y+4	; 0x04
    362e:	aa 24       	eor	r10, r10
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	95 01       	movw	r18, r10
    3634:	28 0f       	add	r18, r24
    3636:	31 1d       	adc	r19, r1
    3638:	f6 01       	movw	r30, r12
    363a:	34 8b       	std	Z+20, r19	; 0x14
    363c:	23 8b       	std	Z+19, r18	; 0x13
      
      // Add these bytes for the error checker
      chk_data[2*itr + 2] = (di_bytes[1] << 8) + di_bytes[0];
    363e:	f4 2e       	mov	r15, r20
    3640:	ee 24       	eor	r14, r14
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	a7 01       	movw	r20, r14
    3646:	48 0f       	add	r20, r24
    3648:	51 1d       	adc	r21, r1
    364a:	f4 01       	movw	r30, r8
    364c:	51 83       	std	Z+1, r21	; 0x01
    364e:	40 83       	st	Z, r20
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    3650:	33 83       	std	Z+3, r19	; 0x03
    3652:	22 83       	std	Z+2, r18	; 0x02
    3654:	42 e0       	ldi	r20, 0x02	; 2
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	c4 0e       	add	r12, r20
    365a:	d5 1e       	adc	r13, r21
    365c:	84 e0       	ldi	r24, 0x04	; 4
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	88 0e       	add	r8, r24
    3662:	99 1e       	adc	r9, r25
    3664:	08 94       	sec
    3666:	61 1c       	adc	r6, r1
    3668:	71 1c       	adc	r7, r1
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    366a:	e9 8d       	ldd	r30, Y+25	; 0x19
    366c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    366e:	8e 16       	cp	r8, r30
    3670:	9f 06       	cpc	r9, r31
    3672:	21 f0       	breq	.+8      	; 0x367c <parse_frame+0x132>
    3674:	8e 01       	movw	r16, r28
    3676:	0f 5f       	subi	r16, 0xFF	; 255
    3678:	1f 4f       	sbci	r17, 0xFF	; 255
    367a:	b6 cf       	rjmp	.-148    	; 0x35e8 <parse_frame+0x9e>
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    }

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    367c:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    3680:	18 2f       	mov	r17, r24
    3682:	0e 94 85 1a 	call	0x350a	; 0x350a <read_LDS>
    3686:	38 2f       	mov	r19, r24
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	b9 01       	movw	r22, r18
    368c:	61 0f       	add	r22, r17
    368e:	71 1d       	adc	r23, r1
    3690:	f2 01       	movw	r30, r4
    3692:	74 8f       	std	Z+28, r23	; 0x1c
    3694:	63 8f       	std	Z+27, r22	; 0x1b
    3696:	f1 01       	movw	r30, r2
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    36a0:	22 0f       	add	r18, r18
    36a2:	33 1f       	adc	r19, r19
    36a4:	44 1f       	adc	r20, r20
    36a6:	55 1f       	adc	r21, r21
    36a8:	81 91       	ld	r24, Z+
    36aa:	91 91       	ld	r25, Z+
    36ac:	a0 e0       	ldi	r26, 0x00	; 0
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	28 0f       	add	r18, r24
    36b2:	39 1f       	adc	r19, r25
    36b4:	4a 1f       	adc	r20, r26
    36b6:	5b 1f       	adc	r21, r27
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    36b8:	e8 15       	cp	r30, r8
    36ba:	f9 05       	cpc	r31, r9
    36bc:	89 f7       	brne	.-30     	; 0x36a0 <parse_frame+0x156>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    36be:	c9 01       	movw	r24, r18
    36c0:	9f 77       	andi	r25, 0x7F	; 127
    36c2:	ef e0       	ldi	r30, 0x0F	; 15
    36c4:	56 95       	lsr	r21
    36c6:	47 95       	ror	r20
    36c8:	37 95       	ror	r19
    36ca:	27 95       	ror	r18
    36cc:	ea 95       	dec	r30
    36ce:	d1 f7       	brne	.-12     	; 0x36c4 <parse_frame+0x17a>
    36d0:	82 0f       	add	r24, r18
    36d2:	93 1f       	adc	r25, r19
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	9f 77       	andi	r25, 0x7F	; 127
    36d8:	86 17       	cp	r24, r22
    36da:	97 07       	cpc	r25, r23
    36dc:	19 f4       	brne	.+6      	; 0x36e4 <parse_frame+0x19a>
    36de:	21 e0       	ldi	r18, 0x01	; 1
    36e0:	01 c0       	rjmp	.+2      	; 0x36e4 <parse_frame+0x19a>

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
    36e2:	20 e0       	ldi	r18, 0x00	; 0
}  
    36e4:	82 2f       	mov	r24, r18
    36e6:	6a 96       	adiw	r28, 0x1a	; 26
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	df 90       	pop	r13
    3700:	cf 90       	pop	r12
    3702:	bf 90       	pop	r11
    3704:	af 90       	pop	r10
    3706:	9f 90       	pop	r9
    3708:	8f 90       	pop	r8
    370a:	7f 90       	pop	r7
    370c:	6f 90       	pop	r6
    370e:	5f 90       	pop	r5
    3710:	4f 90       	pop	r4
    3712:	3f 90       	pop	r3
    3714:	2f 90       	pop	r2
    3716:	08 95       	ret

00003718 <grab_frames>:
		rprintf("%d ",frame.distance[ndx]);
	}
	rprintfCRLF();
}

void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	1f 93       	push	r17
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	6d 97       	sbiw	r28, 0x1d	; 29
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	7b 01       	movw	r14, r22
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;
    373c:	db 01       	movw	r26, r22
    373e:	fc 01       	movw	r30, r24
    3740:	8d e1       	ldi	r24, 0x1D	; 29
    3742:	01 90       	ld	r0, Z+
    3744:	0d 92       	st	X+, r0
    3746:	81 50       	subi	r24, 0x01	; 1
    3748:	e1 f7       	brne	.-8      	; 0x3742 <grab_frames+0x2a>
    374a:	11 e0       	ldi	r17, 0x01	; 1

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    374c:	6e 01       	movw	r12, r28
    374e:	08 94       	sec
    3750:	c1 1c       	adc	r12, r1
    3752:	d1 1c       	adc	r13, r1
			ldsf[f_ndx] = t_frame;
    3754:	8d e1       	ldi	r24, 0x1D	; 29
    3756:	a8 2e       	mov	r10, r24
    3758:	b1 2c       	mov	r11, r1
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    375a:	c6 01       	movw	r24, r12
    375c:	0e 94 a5 1a 	call	0x354a	; 0x354a <parse_frame>
    3760:	88 23       	and	r24, r24
    3762:	d9 f3       	breq	.-10     	; 0x375a <grab_frames+0x42>
			ldsf[f_ndx] = t_frame;
    3764:	81 2f       	mov	r24, r17
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	8a 9d       	mul	r24, r10
    376a:	f0 01       	movw	r30, r0
    376c:	8b 9d       	mul	r24, r11
    376e:	f0 0d       	add	r31, r0
    3770:	9a 9d       	mul	r25, r10
    3772:	f0 0d       	add	r31, r0
    3774:	11 24       	eor	r1, r1
    3776:	ee 0d       	add	r30, r14
    3778:	ff 1d       	adc	r31, r15
    377a:	d6 01       	movw	r26, r12
    377c:	8d e1       	ldi	r24, 0x1D	; 29
    377e:	0d 90       	ld	r0, X+
    3780:	01 92       	st	Z+, r0
    3782:	81 50       	subi	r24, 0x01	; 1
    3784:	e1 f7       	brne	.-8      	; 0x377e <grab_frames+0x66>
			f_ndx++;
    3786:	1f 5f       	subi	r17, 0xFF	; 255
void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
    3788:	1a 35       	cpi	r17, 0x5A	; 90
    378a:	38 f3       	brcs	.-50     	; 0x375a <grab_frames+0x42>
		if(parse_frame(&t_frame)){
			ldsf[f_ndx] = t_frame;
			f_ndx++;
		}
	}
}
    378c:	6d 96       	adiw	r28, 0x1d	; 29
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	1f 91       	pop	r17
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	bf 90       	pop	r11
    37a8:	af 90       	pop	r10
    37aa:	08 95       	ret

000037ac <get_range_scan>:
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}

void get_range_scan(uint16_t ranges[]){
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	cf 54       	subi	r28, 0x4F	; 79
    37c2:	da 40       	sbci	r29, 0x0A	; 10
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	6c 01       	movw	r12, r24
	uint8_t first_frame = UNSET;
	LDS_FRAME frame;
	LDS_FRAME ldsf[90];
	// Grab frames
	while(!first_frame){
		if(parse_frame(&frame)){
    37d0:	7e 01       	movw	r14, r28
    37d2:	08 94       	sec
    37d4:	e1 1c       	adc	r14, r1
    37d6:	f1 1c       	adc	r15, r1
    37d8:	c7 01       	movw	r24, r14
    37da:	0e 94 a5 1a 	call	0x354a	; 0x354a <parse_frame>
    37de:	88 23       	and	r24, r24
    37e0:	d9 f3       	breq	.-10     	; 0x37d8 <get_range_scan+0x2c>
			//rprintf("Got frame.\n");
			// If you get the first frame, start reading into the frame buffer
			if(frame.index == 0xA0){
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	80 3a       	cpi	r24, 0xA0	; 160
    37e6:	c1 f7       	brne	.-16     	; 0x37d8 <get_range_scan+0x2c>
				first_frame = SET;
				grab_frames(&frame,ldsf);
    37e8:	8e 01       	movw	r16, r28
    37ea:	02 5e       	subi	r16, 0xE2	; 226
    37ec:	1f 4f       	sbci	r17, 0xFF	; 255
    37ee:	c7 01       	movw	r24, r14
    37f0:	b8 01       	movw	r22, r16
    37f2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <grab_frames>
				//rprintf("Frames grabbed.\n");
				// Convert frames into distances
				conv_FrametoDist(ldsf,ranges);
    37f6:	c8 01       	movw	r24, r16
    37f8:	b6 01       	movw	r22, r12
    37fa:	0e 94 bd 19 	call	0x337a	; 0x337a <conv_FrametoDist>
				rprintf("\nScan end\n\n");
				*/
			}
		}
	}
}
    37fe:	c1 5b       	subi	r28, 0xB1	; 177
    3800:	d5 4f       	sbci	r29, 0xF5	; 245
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	df 90       	pop	r13
    381a:	cf 90       	pop	r12
    381c:	08 95       	ret

0000381e <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    381e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3820:	8f b7       	in	r24, 0x3f	; 63
    3822:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    3824:	71 83       	std	Z+1, r23	; 0x01
    3826:	60 83       	st	Z, r22
	buffer->size = size;
    3828:	53 83       	std	Z+3, r21	; 0x03
    382a:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    382c:	17 82       	std	Z+7, r1	; 0x07
    382e:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    3830:	15 82       	std	Z+5, r1	; 0x05
    3832:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    3834:	8f bf       	out	0x3f, r24	; 63
}
    3836:	08 95       	ret

00003838 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    3838:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    383a:	4f b7       	in	r20, 0x3f	; 63
    383c:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    383e:	14 96       	adiw	r26, 0x04	; 4
    3840:	8d 91       	ld	r24, X+
    3842:	9c 91       	ld	r25, X
    3844:	15 97       	sbiw	r26, 0x05	; 5
    3846:	89 2b       	or	r24, r25
    3848:	11 f4       	brne	.+4      	; 0x384e <bufferGetFromFront+0x16>
    384a:	e0 e0       	ldi	r30, 0x00	; 0
    384c:	25 c0       	rjmp	.+74     	; 0x3898 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    384e:	16 96       	adiw	r26, 0x06	; 6
    3850:	8d 91       	ld	r24, X+
    3852:	9c 91       	ld	r25, X
    3854:	17 97       	sbiw	r26, 0x07	; 7
    3856:	ed 91       	ld	r30, X+
    3858:	fc 91       	ld	r31, X
    385a:	11 97       	sbiw	r26, 0x01	; 1
    385c:	e8 0f       	add	r30, r24
    385e:	f9 1f       	adc	r31, r25
    3860:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	17 96       	adiw	r26, 0x07	; 7
    3866:	9c 93       	st	X, r25
    3868:	8e 93       	st	-X, r24
    386a:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    386c:	12 96       	adiw	r26, 0x02	; 2
    386e:	2d 91       	ld	r18, X+
    3870:	3c 91       	ld	r19, X
    3872:	13 97       	sbiw	r26, 0x03	; 3
    3874:	82 17       	cp	r24, r18
    3876:	93 07       	cpc	r25, r19
    3878:	30 f0       	brcs	.+12     	; 0x3886 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    387a:	82 1b       	sub	r24, r18
    387c:	93 0b       	sbc	r25, r19
    387e:	17 96       	adiw	r26, 0x07	; 7
    3880:	9c 93       	st	X, r25
    3882:	8e 93       	st	-X, r24
    3884:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    3886:	14 96       	adiw	r26, 0x04	; 4
    3888:	8d 91       	ld	r24, X+
    388a:	9c 91       	ld	r25, X
    388c:	15 97       	sbiw	r26, 0x05	; 5
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	15 96       	adiw	r26, 0x05	; 5
    3892:	9c 93       	st	X, r25
    3894:	8e 93       	st	-X, r24
    3896:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    3898:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    389a:	8e 2f       	mov	r24, r30
    389c:	08 95       	ret

0000389e <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    389e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    38a0:	4f b7       	in	r20, 0x3f	; 63
    38a2:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    38a4:	84 81       	ldd	r24, Z+4	; 0x04
    38a6:	95 81       	ldd	r25, Z+5	; 0x05
    38a8:	68 17       	cp	r22, r24
    38aa:	79 07       	cpc	r23, r25
    38ac:	b0 f4       	brcc	.+44     	; 0x38da <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    38ae:	86 81       	ldd	r24, Z+6	; 0x06
    38b0:	97 81       	ldd	r25, Z+7	; 0x07
    38b2:	86 0f       	add	r24, r22
    38b4:	97 1f       	adc	r25, r23
    38b6:	97 83       	std	Z+7, r25	; 0x07
    38b8:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    38ba:	22 81       	ldd	r18, Z+2	; 0x02
    38bc:	33 81       	ldd	r19, Z+3	; 0x03
    38be:	82 17       	cp	r24, r18
    38c0:	93 07       	cpc	r25, r19
    38c2:	20 f0       	brcs	.+8      	; 0x38cc <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    38c4:	82 1b       	sub	r24, r18
    38c6:	93 0b       	sbc	r25, r19
    38c8:	97 83       	std	Z+7, r25	; 0x07
    38ca:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    38cc:	84 81       	ldd	r24, Z+4	; 0x04
    38ce:	95 81       	ldd	r25, Z+5	; 0x05
    38d0:	86 1b       	sub	r24, r22
    38d2:	97 0b       	sbc	r25, r23
    38d4:	95 83       	std	Z+5, r25	; 0x05
    38d6:	84 83       	std	Z+4, r24	; 0x04
    38d8:	02 c0       	rjmp	.+4      	; 0x38de <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    38da:	15 82       	std	Z+5, r1	; 0x05
    38dc:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    38de:	4f bf       	out	0x3f, r20	; 63
}
    38e0:	08 95       	ret

000038e2 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    38e2:	fc 01       	movw	r30, r24
    38e4:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    38e6:	2f b7       	in	r18, 0x3f	; 63
    38e8:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    38ea:	2f bf       	out	0x3f, r18	; 63
    38ec:	26 81       	ldd	r18, Z+6	; 0x06
    38ee:	37 81       	ldd	r19, Z+7	; 0x07
    38f0:	62 81       	ldd	r22, Z+2	; 0x02
    38f2:	73 81       	ldd	r23, Z+3	; 0x03
    38f4:	82 0f       	add	r24, r18
    38f6:	93 1f       	adc	r25, r19
    38f8:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    38fc:	01 90       	ld	r0, Z+
    38fe:	f0 81       	ld	r31, Z
    3900:	e0 2d       	mov	r30, r0
    3902:	e8 0f       	add	r30, r24
    3904:	f9 1f       	adc	r31, r25
	return data;
}
    3906:	80 81       	ld	r24, Z
    3908:	08 95       	ret

0000390a <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	ec 01       	movw	r28, r24
    3912:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    3914:	4f b7       	in	r20, 0x3f	; 63
    3916:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    3918:	2c 81       	ldd	r18, Y+4	; 0x04
    391a:	3d 81       	ldd	r19, Y+5	; 0x05
    391c:	6a 81       	ldd	r22, Y+2	; 0x02
    391e:	7b 81       	ldd	r23, Y+3	; 0x03
    3920:	26 17       	cp	r18, r22
    3922:	37 07       	cpc	r19, r23
    3924:	98 f4       	brcc	.+38     	; 0x394c <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    3926:	8e 81       	ldd	r24, Y+6	; 0x06
    3928:	9f 81       	ldd	r25, Y+7	; 0x07
    392a:	82 0f       	add	r24, r18
    392c:	93 1f       	adc	r25, r19
    392e:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    3932:	e8 81       	ld	r30, Y
    3934:	f9 81       	ldd	r31, Y+1	; 0x01
    3936:	e8 0f       	add	r30, r24
    3938:	f9 1f       	adc	r31, r25
    393a:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    393c:	8c 81       	ldd	r24, Y+4	; 0x04
    393e:	9d 81       	ldd	r25, Y+5	; 0x05
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	9d 83       	std	Y+5, r25	; 0x05
    3944:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    3946:	4f bf       	out	0x3f, r20	; 63
    3948:	8f ef       	ldi	r24, 0xFF	; 255
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    394c:	4f bf       	out	0x3f, r20	; 63
    394e:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	08 95       	ret

00003958 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    3958:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    395a:	8f b7       	in	r24, 0x3f	; 63
    395c:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    395e:	8f bf       	out	0x3f, r24	; 63
    3960:	22 81       	ldd	r18, Z+2	; 0x02
    3962:	33 81       	ldd	r19, Z+3	; 0x03
    3964:	84 81       	ldd	r24, Z+4	; 0x04
    3966:	95 81       	ldd	r25, Z+5	; 0x05
    3968:	28 1b       	sub	r18, r24
    396a:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    396c:	c9 01       	movw	r24, r18
    396e:	08 95       	ret

00003970 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    3970:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3972:	8f b7       	in	r24, 0x3f	; 63
    3974:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    3976:	15 82       	std	Z+5, r1	; 0x05
    3978:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    397a:	8f bf       	out	0x3f, r24	; 63
}
    397c:	08 95       	ret

0000397e <exit>:
    397e:	f8 94       	cli
    3980:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <_exit>

00003984 <__subsf3>:
    3984:	50 58       	subi	r21, 0x80	; 128

00003986 <__addsf3>:
    3986:	bb 27       	eor	r27, r27
    3988:	aa 27       	eor	r26, r26
    398a:	0e d0       	rcall	.+28     	; 0x39a8 <__addsf3x>
    398c:	70 c1       	rjmp	.+736    	; 0x3c6e <__fp_round>
    398e:	61 d1       	rcall	.+706    	; 0x3c52 <__fp_pscA>
    3990:	30 f0       	brcs	.+12     	; 0x399e <__addsf3+0x18>
    3992:	66 d1       	rcall	.+716    	; 0x3c60 <__fp_pscB>
    3994:	20 f0       	brcs	.+8      	; 0x399e <__addsf3+0x18>
    3996:	31 f4       	brne	.+12     	; 0x39a4 <__addsf3+0x1e>
    3998:	9f 3f       	cpi	r25, 0xFF	; 255
    399a:	11 f4       	brne	.+4      	; 0x39a0 <__addsf3+0x1a>
    399c:	1e f4       	brtc	.+6      	; 0x39a4 <__addsf3+0x1e>
    399e:	56 c1       	rjmp	.+684    	; 0x3c4c <__fp_nan>
    39a0:	0e f4       	brtc	.+2      	; 0x39a4 <__addsf3+0x1e>
    39a2:	e0 95       	com	r30
    39a4:	e7 fb       	bst	r30, 7
    39a6:	4c c1       	rjmp	.+664    	; 0x3c40 <__fp_inf>

000039a8 <__addsf3x>:
    39a8:	e9 2f       	mov	r30, r25
    39aa:	72 d1       	rcall	.+740    	; 0x3c90 <__fp_split3>
    39ac:	80 f3       	brcs	.-32     	; 0x398e <__addsf3+0x8>
    39ae:	ba 17       	cp	r27, r26
    39b0:	62 07       	cpc	r22, r18
    39b2:	73 07       	cpc	r23, r19
    39b4:	84 07       	cpc	r24, r20
    39b6:	95 07       	cpc	r25, r21
    39b8:	18 f0       	brcs	.+6      	; 0x39c0 <__addsf3x+0x18>
    39ba:	71 f4       	brne	.+28     	; 0x39d8 <__addsf3x+0x30>
    39bc:	9e f5       	brtc	.+102    	; 0x3a24 <__addsf3x+0x7c>
    39be:	8a c1       	rjmp	.+788    	; 0x3cd4 <__fp_zero>
    39c0:	0e f4       	brtc	.+2      	; 0x39c4 <__addsf3x+0x1c>
    39c2:	e0 95       	com	r30
    39c4:	0b 2e       	mov	r0, r27
    39c6:	ba 2f       	mov	r27, r26
    39c8:	a0 2d       	mov	r26, r0
    39ca:	0b 01       	movw	r0, r22
    39cc:	b9 01       	movw	r22, r18
    39ce:	90 01       	movw	r18, r0
    39d0:	0c 01       	movw	r0, r24
    39d2:	ca 01       	movw	r24, r20
    39d4:	a0 01       	movw	r20, r0
    39d6:	11 24       	eor	r1, r1
    39d8:	ff 27       	eor	r31, r31
    39da:	59 1b       	sub	r21, r25
    39dc:	99 f0       	breq	.+38     	; 0x3a04 <__addsf3x+0x5c>
    39de:	59 3f       	cpi	r21, 0xF9	; 249
    39e0:	50 f4       	brcc	.+20     	; 0x39f6 <__addsf3x+0x4e>
    39e2:	50 3e       	cpi	r21, 0xE0	; 224
    39e4:	68 f1       	brcs	.+90     	; 0x3a40 <__addsf3x+0x98>
    39e6:	1a 16       	cp	r1, r26
    39e8:	f0 40       	sbci	r31, 0x00	; 0
    39ea:	a2 2f       	mov	r26, r18
    39ec:	23 2f       	mov	r18, r19
    39ee:	34 2f       	mov	r19, r20
    39f0:	44 27       	eor	r20, r20
    39f2:	58 5f       	subi	r21, 0xF8	; 248
    39f4:	f3 cf       	rjmp	.-26     	; 0x39dc <__addsf3x+0x34>
    39f6:	46 95       	lsr	r20
    39f8:	37 95       	ror	r19
    39fa:	27 95       	ror	r18
    39fc:	a7 95       	ror	r26
    39fe:	f0 40       	sbci	r31, 0x00	; 0
    3a00:	53 95       	inc	r21
    3a02:	c9 f7       	brne	.-14     	; 0x39f6 <__addsf3x+0x4e>
    3a04:	7e f4       	brtc	.+30     	; 0x3a24 <__addsf3x+0x7c>
    3a06:	1f 16       	cp	r1, r31
    3a08:	ba 0b       	sbc	r27, r26
    3a0a:	62 0b       	sbc	r22, r18
    3a0c:	73 0b       	sbc	r23, r19
    3a0e:	84 0b       	sbc	r24, r20
    3a10:	ba f0       	brmi	.+46     	; 0x3a40 <__addsf3x+0x98>
    3a12:	91 50       	subi	r25, 0x01	; 1
    3a14:	a1 f0       	breq	.+40     	; 0x3a3e <__addsf3x+0x96>
    3a16:	ff 0f       	add	r31, r31
    3a18:	bb 1f       	adc	r27, r27
    3a1a:	66 1f       	adc	r22, r22
    3a1c:	77 1f       	adc	r23, r23
    3a1e:	88 1f       	adc	r24, r24
    3a20:	c2 f7       	brpl	.-16     	; 0x3a12 <__addsf3x+0x6a>
    3a22:	0e c0       	rjmp	.+28     	; 0x3a40 <__addsf3x+0x98>
    3a24:	ba 0f       	add	r27, r26
    3a26:	62 1f       	adc	r22, r18
    3a28:	73 1f       	adc	r23, r19
    3a2a:	84 1f       	adc	r24, r20
    3a2c:	48 f4       	brcc	.+18     	; 0x3a40 <__addsf3x+0x98>
    3a2e:	87 95       	ror	r24
    3a30:	77 95       	ror	r23
    3a32:	67 95       	ror	r22
    3a34:	b7 95       	ror	r27
    3a36:	f7 95       	ror	r31
    3a38:	9e 3f       	cpi	r25, 0xFE	; 254
    3a3a:	08 f0       	brcs	.+2      	; 0x3a3e <__addsf3x+0x96>
    3a3c:	b3 cf       	rjmp	.-154    	; 0x39a4 <__addsf3+0x1e>
    3a3e:	93 95       	inc	r25
    3a40:	88 0f       	add	r24, r24
    3a42:	08 f0       	brcs	.+2      	; 0x3a46 <__addsf3x+0x9e>
    3a44:	99 27       	eor	r25, r25
    3a46:	ee 0f       	add	r30, r30
    3a48:	97 95       	ror	r25
    3a4a:	87 95       	ror	r24
    3a4c:	08 95       	ret

00003a4e <__cmpsf2>:
    3a4e:	d4 d0       	rcall	.+424    	; 0x3bf8 <__fp_cmp>
    3a50:	08 f4       	brcc	.+2      	; 0x3a54 <__cmpsf2+0x6>
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	08 95       	ret

00003a56 <__divsf3>:
    3a56:	0c d0       	rcall	.+24     	; 0x3a70 <__divsf3x>
    3a58:	0a c1       	rjmp	.+532    	; 0x3c6e <__fp_round>
    3a5a:	02 d1       	rcall	.+516    	; 0x3c60 <__fp_pscB>
    3a5c:	40 f0       	brcs	.+16     	; 0x3a6e <__divsf3+0x18>
    3a5e:	f9 d0       	rcall	.+498    	; 0x3c52 <__fp_pscA>
    3a60:	30 f0       	brcs	.+12     	; 0x3a6e <__divsf3+0x18>
    3a62:	21 f4       	brne	.+8      	; 0x3a6c <__divsf3+0x16>
    3a64:	5f 3f       	cpi	r21, 0xFF	; 255
    3a66:	19 f0       	breq	.+6      	; 0x3a6e <__divsf3+0x18>
    3a68:	eb c0       	rjmp	.+470    	; 0x3c40 <__fp_inf>
    3a6a:	51 11       	cpse	r21, r1
    3a6c:	34 c1       	rjmp	.+616    	; 0x3cd6 <__fp_szero>
    3a6e:	ee c0       	rjmp	.+476    	; 0x3c4c <__fp_nan>

00003a70 <__divsf3x>:
    3a70:	0f d1       	rcall	.+542    	; 0x3c90 <__fp_split3>
    3a72:	98 f3       	brcs	.-26     	; 0x3a5a <__divsf3+0x4>

00003a74 <__divsf3_pse>:
    3a74:	99 23       	and	r25, r25
    3a76:	c9 f3       	breq	.-14     	; 0x3a6a <__divsf3+0x14>
    3a78:	55 23       	and	r21, r21
    3a7a:	b1 f3       	breq	.-20     	; 0x3a68 <__divsf3+0x12>
    3a7c:	95 1b       	sub	r25, r21
    3a7e:	55 0b       	sbc	r21, r21
    3a80:	bb 27       	eor	r27, r27
    3a82:	aa 27       	eor	r26, r26
    3a84:	62 17       	cp	r22, r18
    3a86:	73 07       	cpc	r23, r19
    3a88:	84 07       	cpc	r24, r20
    3a8a:	38 f0       	brcs	.+14     	; 0x3a9a <__divsf3_pse+0x26>
    3a8c:	9f 5f       	subi	r25, 0xFF	; 255
    3a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a90:	22 0f       	add	r18, r18
    3a92:	33 1f       	adc	r19, r19
    3a94:	44 1f       	adc	r20, r20
    3a96:	aa 1f       	adc	r26, r26
    3a98:	a9 f3       	breq	.-22     	; 0x3a84 <__divsf3_pse+0x10>
    3a9a:	33 d0       	rcall	.+102    	; 0x3b02 <__divsf3_pse+0x8e>
    3a9c:	0e 2e       	mov	r0, r30
    3a9e:	3a f0       	brmi	.+14     	; 0x3aae <__divsf3_pse+0x3a>
    3aa0:	e0 e8       	ldi	r30, 0x80	; 128
    3aa2:	30 d0       	rcall	.+96     	; 0x3b04 <__divsf3_pse+0x90>
    3aa4:	91 50       	subi	r25, 0x01	; 1
    3aa6:	50 40       	sbci	r21, 0x00	; 0
    3aa8:	e6 95       	lsr	r30
    3aaa:	00 1c       	adc	r0, r0
    3aac:	ca f7       	brpl	.-14     	; 0x3aa0 <__divsf3_pse+0x2c>
    3aae:	29 d0       	rcall	.+82     	; 0x3b02 <__divsf3_pse+0x8e>
    3ab0:	fe 2f       	mov	r31, r30
    3ab2:	27 d0       	rcall	.+78     	; 0x3b02 <__divsf3_pse+0x8e>
    3ab4:	66 0f       	add	r22, r22
    3ab6:	77 1f       	adc	r23, r23
    3ab8:	88 1f       	adc	r24, r24
    3aba:	bb 1f       	adc	r27, r27
    3abc:	26 17       	cp	r18, r22
    3abe:	37 07       	cpc	r19, r23
    3ac0:	48 07       	cpc	r20, r24
    3ac2:	ab 07       	cpc	r26, r27
    3ac4:	b0 e8       	ldi	r27, 0x80	; 128
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <__divsf3_pse+0x56>
    3ac8:	bb 0b       	sbc	r27, r27
    3aca:	80 2d       	mov	r24, r0
    3acc:	bf 01       	movw	r22, r30
    3ace:	ff 27       	eor	r31, r31
    3ad0:	93 58       	subi	r25, 0x83	; 131
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	2a f0       	brmi	.+10     	; 0x3ae0 <__divsf3_pse+0x6c>
    3ad6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ad8:	51 05       	cpc	r21, r1
    3ada:	68 f0       	brcs	.+26     	; 0x3af6 <__divsf3_pse+0x82>
    3adc:	b1 c0       	rjmp	.+354    	; 0x3c40 <__fp_inf>
    3ade:	fb c0       	rjmp	.+502    	; 0x3cd6 <__fp_szero>
    3ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ae2:	ec f3       	brlt	.-6      	; 0x3ade <__divsf3_pse+0x6a>
    3ae4:	98 3e       	cpi	r25, 0xE8	; 232
    3ae6:	dc f3       	brlt	.-10     	; 0x3ade <__divsf3_pse+0x6a>
    3ae8:	86 95       	lsr	r24
    3aea:	77 95       	ror	r23
    3aec:	67 95       	ror	r22
    3aee:	b7 95       	ror	r27
    3af0:	f7 95       	ror	r31
    3af2:	9f 5f       	subi	r25, 0xFF	; 255
    3af4:	c9 f7       	brne	.-14     	; 0x3ae8 <__divsf3_pse+0x74>
    3af6:	88 0f       	add	r24, r24
    3af8:	91 1d       	adc	r25, r1
    3afa:	96 95       	lsr	r25
    3afc:	87 95       	ror	r24
    3afe:	97 f9       	bld	r25, 7
    3b00:	08 95       	ret
    3b02:	e1 e0       	ldi	r30, 0x01	; 1
    3b04:	66 0f       	add	r22, r22
    3b06:	77 1f       	adc	r23, r23
    3b08:	88 1f       	adc	r24, r24
    3b0a:	bb 1f       	adc	r27, r27
    3b0c:	62 17       	cp	r22, r18
    3b0e:	73 07       	cpc	r23, r19
    3b10:	84 07       	cpc	r24, r20
    3b12:	ba 07       	cpc	r27, r26
    3b14:	20 f0       	brcs	.+8      	; 0x3b1e <__divsf3_pse+0xaa>
    3b16:	62 1b       	sub	r22, r18
    3b18:	73 0b       	sbc	r23, r19
    3b1a:	84 0b       	sbc	r24, r20
    3b1c:	ba 0b       	sbc	r27, r26
    3b1e:	ee 1f       	adc	r30, r30
    3b20:	88 f7       	brcc	.-30     	; 0x3b04 <__divsf3_pse+0x90>
    3b22:	e0 95       	com	r30
    3b24:	08 95       	ret

00003b26 <__fixunssfsi>:
    3b26:	bc d0       	rcall	.+376    	; 0x3ca0 <__fp_splitA>
    3b28:	88 f0       	brcs	.+34     	; 0x3b4c <__fixunssfsi+0x26>
    3b2a:	9f 57       	subi	r25, 0x7F	; 127
    3b2c:	90 f0       	brcs	.+36     	; 0x3b52 <__fixunssfsi+0x2c>
    3b2e:	b9 2f       	mov	r27, r25
    3b30:	99 27       	eor	r25, r25
    3b32:	b7 51       	subi	r27, 0x17	; 23
    3b34:	a0 f0       	brcs	.+40     	; 0x3b5e <__fixunssfsi+0x38>
    3b36:	d1 f0       	breq	.+52     	; 0x3b6c <__fixunssfsi+0x46>
    3b38:	66 0f       	add	r22, r22
    3b3a:	77 1f       	adc	r23, r23
    3b3c:	88 1f       	adc	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	1a f0       	brmi	.+6      	; 0x3b48 <__fixunssfsi+0x22>
    3b42:	ba 95       	dec	r27
    3b44:	c9 f7       	brne	.-14     	; 0x3b38 <__fixunssfsi+0x12>
    3b46:	12 c0       	rjmp	.+36     	; 0x3b6c <__fixunssfsi+0x46>
    3b48:	b1 30       	cpi	r27, 0x01	; 1
    3b4a:	81 f0       	breq	.+32     	; 0x3b6c <__fixunssfsi+0x46>
    3b4c:	c3 d0       	rcall	.+390    	; 0x3cd4 <__fp_zero>
    3b4e:	b1 e0       	ldi	r27, 0x01	; 1
    3b50:	08 95       	ret
    3b52:	c0 c0       	rjmp	.+384    	; 0x3cd4 <__fp_zero>
    3b54:	67 2f       	mov	r22, r23
    3b56:	78 2f       	mov	r23, r24
    3b58:	88 27       	eor	r24, r24
    3b5a:	b8 5f       	subi	r27, 0xF8	; 248
    3b5c:	39 f0       	breq	.+14     	; 0x3b6c <__fixunssfsi+0x46>
    3b5e:	b9 3f       	cpi	r27, 0xF9	; 249
    3b60:	cc f3       	brlt	.-14     	; 0x3b54 <__fixunssfsi+0x2e>
    3b62:	86 95       	lsr	r24
    3b64:	77 95       	ror	r23
    3b66:	67 95       	ror	r22
    3b68:	b3 95       	inc	r27
    3b6a:	d9 f7       	brne	.-10     	; 0x3b62 <__fixunssfsi+0x3c>
    3b6c:	3e f4       	brtc	.+14     	; 0x3b7c <__fixunssfsi+0x56>
    3b6e:	90 95       	com	r25
    3b70:	80 95       	com	r24
    3b72:	70 95       	com	r23
    3b74:	61 95       	neg	r22
    3b76:	7f 4f       	sbci	r23, 0xFF	; 255
    3b78:	8f 4f       	sbci	r24, 0xFF	; 255
    3b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7c:	08 95       	ret

00003b7e <__floatunsisf>:
    3b7e:	e8 94       	clt
    3b80:	09 c0       	rjmp	.+18     	; 0x3b94 <__floatsisf+0x12>

00003b82 <__floatsisf>:
    3b82:	97 fb       	bst	r25, 7
    3b84:	3e f4       	brtc	.+14     	; 0x3b94 <__floatsisf+0x12>
    3b86:	90 95       	com	r25
    3b88:	80 95       	com	r24
    3b8a:	70 95       	com	r23
    3b8c:	61 95       	neg	r22
    3b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b90:	8f 4f       	sbci	r24, 0xFF	; 255
    3b92:	9f 4f       	sbci	r25, 0xFF	; 255
    3b94:	99 23       	and	r25, r25
    3b96:	a9 f0       	breq	.+42     	; 0x3bc2 <__floatsisf+0x40>
    3b98:	f9 2f       	mov	r31, r25
    3b9a:	96 e9       	ldi	r25, 0x96	; 150
    3b9c:	bb 27       	eor	r27, r27
    3b9e:	93 95       	inc	r25
    3ba0:	f6 95       	lsr	r31
    3ba2:	87 95       	ror	r24
    3ba4:	77 95       	ror	r23
    3ba6:	67 95       	ror	r22
    3ba8:	b7 95       	ror	r27
    3baa:	f1 11       	cpse	r31, r1
    3bac:	f8 cf       	rjmp	.-16     	; 0x3b9e <__floatsisf+0x1c>
    3bae:	fa f4       	brpl	.+62     	; 0x3bee <__floatsisf+0x6c>
    3bb0:	bb 0f       	add	r27, r27
    3bb2:	11 f4       	brne	.+4      	; 0x3bb8 <__floatsisf+0x36>
    3bb4:	60 ff       	sbrs	r22, 0
    3bb6:	1b c0       	rjmp	.+54     	; 0x3bee <__floatsisf+0x6c>
    3bb8:	6f 5f       	subi	r22, 0xFF	; 255
    3bba:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc0:	16 c0       	rjmp	.+44     	; 0x3bee <__floatsisf+0x6c>
    3bc2:	88 23       	and	r24, r24
    3bc4:	11 f0       	breq	.+4      	; 0x3bca <__floatsisf+0x48>
    3bc6:	96 e9       	ldi	r25, 0x96	; 150
    3bc8:	11 c0       	rjmp	.+34     	; 0x3bec <__floatsisf+0x6a>
    3bca:	77 23       	and	r23, r23
    3bcc:	21 f0       	breq	.+8      	; 0x3bd6 <__floatsisf+0x54>
    3bce:	9e e8       	ldi	r25, 0x8E	; 142
    3bd0:	87 2f       	mov	r24, r23
    3bd2:	76 2f       	mov	r23, r22
    3bd4:	05 c0       	rjmp	.+10     	; 0x3be0 <__floatsisf+0x5e>
    3bd6:	66 23       	and	r22, r22
    3bd8:	71 f0       	breq	.+28     	; 0x3bf6 <__floatsisf+0x74>
    3bda:	96 e8       	ldi	r25, 0x86	; 134
    3bdc:	86 2f       	mov	r24, r22
    3bde:	70 e0       	ldi	r23, 0x00	; 0
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	2a f0       	brmi	.+10     	; 0x3bee <__floatsisf+0x6c>
    3be4:	9a 95       	dec	r25
    3be6:	66 0f       	add	r22, r22
    3be8:	77 1f       	adc	r23, r23
    3bea:	88 1f       	adc	r24, r24
    3bec:	da f7       	brpl	.-10     	; 0x3be4 <__floatsisf+0x62>
    3bee:	88 0f       	add	r24, r24
    3bf0:	96 95       	lsr	r25
    3bf2:	87 95       	ror	r24
    3bf4:	97 f9       	bld	r25, 7
    3bf6:	08 95       	ret

00003bf8 <__fp_cmp>:
    3bf8:	99 0f       	add	r25, r25
    3bfa:	00 08       	sbc	r0, r0
    3bfc:	55 0f       	add	r21, r21
    3bfe:	aa 0b       	sbc	r26, r26
    3c00:	e0 e8       	ldi	r30, 0x80	; 128
    3c02:	fe ef       	ldi	r31, 0xFE	; 254
    3c04:	16 16       	cp	r1, r22
    3c06:	17 06       	cpc	r1, r23
    3c08:	e8 07       	cpc	r30, r24
    3c0a:	f9 07       	cpc	r31, r25
    3c0c:	c0 f0       	brcs	.+48     	; 0x3c3e <__fp_cmp+0x46>
    3c0e:	12 16       	cp	r1, r18
    3c10:	13 06       	cpc	r1, r19
    3c12:	e4 07       	cpc	r30, r20
    3c14:	f5 07       	cpc	r31, r21
    3c16:	98 f0       	brcs	.+38     	; 0x3c3e <__fp_cmp+0x46>
    3c18:	62 1b       	sub	r22, r18
    3c1a:	73 0b       	sbc	r23, r19
    3c1c:	84 0b       	sbc	r24, r20
    3c1e:	95 0b       	sbc	r25, r21
    3c20:	39 f4       	brne	.+14     	; 0x3c30 <__fp_cmp+0x38>
    3c22:	0a 26       	eor	r0, r26
    3c24:	61 f0       	breq	.+24     	; 0x3c3e <__fp_cmp+0x46>
    3c26:	23 2b       	or	r18, r19
    3c28:	24 2b       	or	r18, r20
    3c2a:	25 2b       	or	r18, r21
    3c2c:	21 f4       	brne	.+8      	; 0x3c36 <__fp_cmp+0x3e>
    3c2e:	08 95       	ret
    3c30:	0a 26       	eor	r0, r26
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <__fp_cmp+0x3e>
    3c34:	a1 40       	sbci	r26, 0x01	; 1
    3c36:	a6 95       	lsr	r26
    3c38:	8f ef       	ldi	r24, 0xFF	; 255
    3c3a:	81 1d       	adc	r24, r1
    3c3c:	81 1d       	adc	r24, r1
    3c3e:	08 95       	ret

00003c40 <__fp_inf>:
    3c40:	97 f9       	bld	r25, 7
    3c42:	9f 67       	ori	r25, 0x7F	; 127
    3c44:	80 e8       	ldi	r24, 0x80	; 128
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	08 95       	ret

00003c4c <__fp_nan>:
    3c4c:	9f ef       	ldi	r25, 0xFF	; 255
    3c4e:	80 ec       	ldi	r24, 0xC0	; 192
    3c50:	08 95       	ret

00003c52 <__fp_pscA>:
    3c52:	00 24       	eor	r0, r0
    3c54:	0a 94       	dec	r0
    3c56:	16 16       	cp	r1, r22
    3c58:	17 06       	cpc	r1, r23
    3c5a:	18 06       	cpc	r1, r24
    3c5c:	09 06       	cpc	r0, r25
    3c5e:	08 95       	ret

00003c60 <__fp_pscB>:
    3c60:	00 24       	eor	r0, r0
    3c62:	0a 94       	dec	r0
    3c64:	12 16       	cp	r1, r18
    3c66:	13 06       	cpc	r1, r19
    3c68:	14 06       	cpc	r1, r20
    3c6a:	05 06       	cpc	r0, r21
    3c6c:	08 95       	ret

00003c6e <__fp_round>:
    3c6e:	09 2e       	mov	r0, r25
    3c70:	03 94       	inc	r0
    3c72:	00 0c       	add	r0, r0
    3c74:	11 f4       	brne	.+4      	; 0x3c7a <__fp_round+0xc>
    3c76:	88 23       	and	r24, r24
    3c78:	52 f0       	brmi	.+20     	; 0x3c8e <__fp_round+0x20>
    3c7a:	bb 0f       	add	r27, r27
    3c7c:	40 f4       	brcc	.+16     	; 0x3c8e <__fp_round+0x20>
    3c7e:	bf 2b       	or	r27, r31
    3c80:	11 f4       	brne	.+4      	; 0x3c86 <__fp_round+0x18>
    3c82:	60 ff       	sbrs	r22, 0
    3c84:	04 c0       	rjmp	.+8      	; 0x3c8e <__fp_round+0x20>
    3c86:	6f 5f       	subi	r22, 0xFF	; 255
    3c88:	7f 4f       	sbci	r23, 0xFF	; 255
    3c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8e:	08 95       	ret

00003c90 <__fp_split3>:
    3c90:	57 fd       	sbrc	r21, 7
    3c92:	90 58       	subi	r25, 0x80	; 128
    3c94:	44 0f       	add	r20, r20
    3c96:	55 1f       	adc	r21, r21
    3c98:	59 f0       	breq	.+22     	; 0x3cb0 <__fp_splitA+0x10>
    3c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c9c:	71 f0       	breq	.+28     	; 0x3cba <__fp_splitA+0x1a>
    3c9e:	47 95       	ror	r20

00003ca0 <__fp_splitA>:
    3ca0:	88 0f       	add	r24, r24
    3ca2:	97 fb       	bst	r25, 7
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	61 f0       	breq	.+24     	; 0x3cc0 <__fp_splitA+0x20>
    3ca8:	9f 3f       	cpi	r25, 0xFF	; 255
    3caa:	79 f0       	breq	.+30     	; 0x3cca <__fp_splitA+0x2a>
    3cac:	87 95       	ror	r24
    3cae:	08 95       	ret
    3cb0:	12 16       	cp	r1, r18
    3cb2:	13 06       	cpc	r1, r19
    3cb4:	14 06       	cpc	r1, r20
    3cb6:	55 1f       	adc	r21, r21
    3cb8:	f2 cf       	rjmp	.-28     	; 0x3c9e <__fp_split3+0xe>
    3cba:	46 95       	lsr	r20
    3cbc:	f1 df       	rcall	.-30     	; 0x3ca0 <__fp_splitA>
    3cbe:	08 c0       	rjmp	.+16     	; 0x3cd0 <__fp_splitA+0x30>
    3cc0:	16 16       	cp	r1, r22
    3cc2:	17 06       	cpc	r1, r23
    3cc4:	18 06       	cpc	r1, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	f1 cf       	rjmp	.-30     	; 0x3cac <__fp_splitA+0xc>
    3cca:	86 95       	lsr	r24
    3ccc:	71 05       	cpc	r23, r1
    3cce:	61 05       	cpc	r22, r1
    3cd0:	08 94       	sec
    3cd2:	08 95       	ret

00003cd4 <__fp_zero>:
    3cd4:	e8 94       	clt

00003cd6 <__fp_szero>:
    3cd6:	bb 27       	eor	r27, r27
    3cd8:	66 27       	eor	r22, r22
    3cda:	77 27       	eor	r23, r23
    3cdc:	cb 01       	movw	r24, r22
    3cde:	97 f9       	bld	r25, 7
    3ce0:	08 95       	ret

00003ce2 <__gesf2>:
    3ce2:	8a df       	rcall	.-236    	; 0x3bf8 <__fp_cmp>
    3ce4:	08 f4       	brcc	.+2      	; 0x3ce8 <__gesf2+0x6>
    3ce6:	8f ef       	ldi	r24, 0xFF	; 255
    3ce8:	08 95       	ret

00003cea <__mulsf3>:
    3cea:	0b d0       	rcall	.+22     	; 0x3d02 <__mulsf3x>
    3cec:	c0 cf       	rjmp	.-128    	; 0x3c6e <__fp_round>
    3cee:	b1 df       	rcall	.-158    	; 0x3c52 <__fp_pscA>
    3cf0:	28 f0       	brcs	.+10     	; 0x3cfc <__mulsf3+0x12>
    3cf2:	b6 df       	rcall	.-148    	; 0x3c60 <__fp_pscB>
    3cf4:	18 f0       	brcs	.+6      	; 0x3cfc <__mulsf3+0x12>
    3cf6:	95 23       	and	r25, r21
    3cf8:	09 f0       	breq	.+2      	; 0x3cfc <__mulsf3+0x12>
    3cfa:	a2 cf       	rjmp	.-188    	; 0x3c40 <__fp_inf>
    3cfc:	a7 cf       	rjmp	.-178    	; 0x3c4c <__fp_nan>
    3cfe:	11 24       	eor	r1, r1
    3d00:	ea cf       	rjmp	.-44     	; 0x3cd6 <__fp_szero>

00003d02 <__mulsf3x>:
    3d02:	c6 df       	rcall	.-116    	; 0x3c90 <__fp_split3>
    3d04:	a0 f3       	brcs	.-24     	; 0x3cee <__mulsf3+0x4>

00003d06 <__mulsf3_pse>:
    3d06:	95 9f       	mul	r25, r21
    3d08:	d1 f3       	breq	.-12     	; 0x3cfe <__mulsf3+0x14>
    3d0a:	95 0f       	add	r25, r21
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	55 1f       	adc	r21, r21
    3d10:	62 9f       	mul	r22, r18
    3d12:	f0 01       	movw	r30, r0
    3d14:	72 9f       	mul	r23, r18
    3d16:	bb 27       	eor	r27, r27
    3d18:	f0 0d       	add	r31, r0
    3d1a:	b1 1d       	adc	r27, r1
    3d1c:	63 9f       	mul	r22, r19
    3d1e:	aa 27       	eor	r26, r26
    3d20:	f0 0d       	add	r31, r0
    3d22:	b1 1d       	adc	r27, r1
    3d24:	aa 1f       	adc	r26, r26
    3d26:	64 9f       	mul	r22, r20
    3d28:	66 27       	eor	r22, r22
    3d2a:	b0 0d       	add	r27, r0
    3d2c:	a1 1d       	adc	r26, r1
    3d2e:	66 1f       	adc	r22, r22
    3d30:	82 9f       	mul	r24, r18
    3d32:	22 27       	eor	r18, r18
    3d34:	b0 0d       	add	r27, r0
    3d36:	a1 1d       	adc	r26, r1
    3d38:	62 1f       	adc	r22, r18
    3d3a:	73 9f       	mul	r23, r19
    3d3c:	b0 0d       	add	r27, r0
    3d3e:	a1 1d       	adc	r26, r1
    3d40:	62 1f       	adc	r22, r18
    3d42:	83 9f       	mul	r24, r19
    3d44:	a0 0d       	add	r26, r0
    3d46:	61 1d       	adc	r22, r1
    3d48:	22 1f       	adc	r18, r18
    3d4a:	74 9f       	mul	r23, r20
    3d4c:	33 27       	eor	r19, r19
    3d4e:	a0 0d       	add	r26, r0
    3d50:	61 1d       	adc	r22, r1
    3d52:	23 1f       	adc	r18, r19
    3d54:	84 9f       	mul	r24, r20
    3d56:	60 0d       	add	r22, r0
    3d58:	21 1d       	adc	r18, r1
    3d5a:	82 2f       	mov	r24, r18
    3d5c:	76 2f       	mov	r23, r22
    3d5e:	6a 2f       	mov	r22, r26
    3d60:	11 24       	eor	r1, r1
    3d62:	9f 57       	subi	r25, 0x7F	; 127
    3d64:	50 40       	sbci	r21, 0x00	; 0
    3d66:	8a f0       	brmi	.+34     	; 0x3d8a <__mulsf3_pse+0x84>
    3d68:	e1 f0       	breq	.+56     	; 0x3da2 <__mulsf3_pse+0x9c>
    3d6a:	88 23       	and	r24, r24
    3d6c:	4a f0       	brmi	.+18     	; 0x3d80 <__mulsf3_pse+0x7a>
    3d6e:	ee 0f       	add	r30, r30
    3d70:	ff 1f       	adc	r31, r31
    3d72:	bb 1f       	adc	r27, r27
    3d74:	66 1f       	adc	r22, r22
    3d76:	77 1f       	adc	r23, r23
    3d78:	88 1f       	adc	r24, r24
    3d7a:	91 50       	subi	r25, 0x01	; 1
    3d7c:	50 40       	sbci	r21, 0x00	; 0
    3d7e:	a9 f7       	brne	.-22     	; 0x3d6a <__mulsf3_pse+0x64>
    3d80:	9e 3f       	cpi	r25, 0xFE	; 254
    3d82:	51 05       	cpc	r21, r1
    3d84:	70 f0       	brcs	.+28     	; 0x3da2 <__mulsf3_pse+0x9c>
    3d86:	5c cf       	rjmp	.-328    	; 0x3c40 <__fp_inf>
    3d88:	a6 cf       	rjmp	.-180    	; 0x3cd6 <__fp_szero>
    3d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3d8c:	ec f3       	brlt	.-6      	; 0x3d88 <__mulsf3_pse+0x82>
    3d8e:	98 3e       	cpi	r25, 0xE8	; 232
    3d90:	dc f3       	brlt	.-10     	; 0x3d88 <__mulsf3_pse+0x82>
    3d92:	86 95       	lsr	r24
    3d94:	77 95       	ror	r23
    3d96:	67 95       	ror	r22
    3d98:	b7 95       	ror	r27
    3d9a:	f7 95       	ror	r31
    3d9c:	e7 95       	ror	r30
    3d9e:	9f 5f       	subi	r25, 0xFF	; 255
    3da0:	c1 f7       	brne	.-16     	; 0x3d92 <__mulsf3_pse+0x8c>
    3da2:	fe 2b       	or	r31, r30
    3da4:	88 0f       	add	r24, r24
    3da6:	91 1d       	adc	r25, r1
    3da8:	96 95       	lsr	r25
    3daa:	87 95       	ror	r24
    3dac:	97 f9       	bld	r25, 7
    3dae:	08 95       	ret

00003db0 <pow>:
    3db0:	fa 01       	movw	r30, r20
    3db2:	ee 0f       	add	r30, r30
    3db4:	ff 1f       	adc	r31, r31
    3db6:	30 96       	adiw	r30, 0x00	; 0
    3db8:	21 05       	cpc	r18, r1
    3dba:	31 05       	cpc	r19, r1
    3dbc:	99 f1       	breq	.+102    	; 0x3e24 <pow+0x74>
    3dbe:	61 15       	cp	r22, r1
    3dc0:	71 05       	cpc	r23, r1
    3dc2:	61 f4       	brne	.+24     	; 0x3ddc <pow+0x2c>
    3dc4:	80 38       	cpi	r24, 0x80	; 128
    3dc6:	bf e3       	ldi	r27, 0x3F	; 63
    3dc8:	9b 07       	cpc	r25, r27
    3dca:	49 f1       	breq	.+82     	; 0x3e1e <pow+0x6e>
    3dcc:	68 94       	set
    3dce:	90 38       	cpi	r25, 0x80	; 128
    3dd0:	81 05       	cpc	r24, r1
    3dd2:	61 f0       	breq	.+24     	; 0x3dec <pow+0x3c>
    3dd4:	80 38       	cpi	r24, 0x80	; 128
    3dd6:	bf ef       	ldi	r27, 0xFF	; 255
    3dd8:	9b 07       	cpc	r25, r27
    3dda:	41 f0       	breq	.+16     	; 0x3dec <pow+0x3c>
    3ddc:	99 23       	and	r25, r25
    3dde:	42 f5       	brpl	.+80     	; 0x3e30 <pow+0x80>
    3de0:	ff 3f       	cpi	r31, 0xFF	; 255
    3de2:	e1 05       	cpc	r30, r1
    3de4:	31 05       	cpc	r19, r1
    3de6:	21 05       	cpc	r18, r1
    3de8:	11 f1       	breq	.+68     	; 0x3e2e <pow+0x7e>
    3dea:	e8 94       	clt
    3dec:	08 94       	sec
    3dee:	e7 95       	ror	r30
    3df0:	d9 01       	movw	r26, r18
    3df2:	aa 23       	and	r26, r26
    3df4:	29 f4       	brne	.+10     	; 0x3e00 <pow+0x50>
    3df6:	ab 2f       	mov	r26, r27
    3df8:	be 2f       	mov	r27, r30
    3dfa:	f8 5f       	subi	r31, 0xF8	; 248
    3dfc:	d0 f3       	brcs	.-12     	; 0x3df2 <pow+0x42>
    3dfe:	10 c0       	rjmp	.+32     	; 0x3e20 <pow+0x70>
    3e00:	ff 5f       	subi	r31, 0xFF	; 255
    3e02:	70 f4       	brcc	.+28     	; 0x3e20 <pow+0x70>
    3e04:	a6 95       	lsr	r26
    3e06:	e0 f7       	brcc	.-8      	; 0x3e00 <pow+0x50>
    3e08:	f7 39       	cpi	r31, 0x97	; 151
    3e0a:	50 f0       	brcs	.+20     	; 0x3e20 <pow+0x70>
    3e0c:	19 f0       	breq	.+6      	; 0x3e14 <pow+0x64>
    3e0e:	ff 3a       	cpi	r31, 0xAF	; 175
    3e10:	38 f4       	brcc	.+14     	; 0x3e20 <pow+0x70>
    3e12:	9f 77       	andi	r25, 0x7F	; 127
    3e14:	9f 93       	push	r25
    3e16:	0c d0       	rcall	.+24     	; 0x3e30 <pow+0x80>
    3e18:	0f 90       	pop	r0
    3e1a:	07 fc       	sbrc	r0, 7
    3e1c:	90 58       	subi	r25, 0x80	; 128
    3e1e:	08 95       	ret
    3e20:	3e f0       	brts	.+14     	; 0x3e30 <pow+0x80>
    3e22:	14 cf       	rjmp	.-472    	; 0x3c4c <__fp_nan>
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	80 e8       	ldi	r24, 0x80	; 128
    3e2a:	9f e3       	ldi	r25, 0x3F	; 63
    3e2c:	08 95       	ret
    3e2e:	4f e7       	ldi	r20, 0x7F	; 127
    3e30:	9f 77       	andi	r25, 0x7F	; 127
    3e32:	5f 93       	push	r21
    3e34:	4f 93       	push	r20
    3e36:	3f 93       	push	r19
    3e38:	2f 93       	push	r18
    3e3a:	06 d1       	rcall	.+524    	; 0x4048 <log>
    3e3c:	2f 91       	pop	r18
    3e3e:	3f 91       	pop	r19
    3e40:	4f 91       	pop	r20
    3e42:	5f 91       	pop	r21
    3e44:	52 df       	rcall	.-348    	; 0x3cea <__mulsf3>
    3e46:	56 c0       	rjmp	.+172    	; 0x3ef4 <exp>
    3e48:	11 f4       	brne	.+4      	; 0x3e4e <pow+0x9e>
    3e4a:	0e f4       	brtc	.+2      	; 0x3e4e <pow+0x9e>
    3e4c:	ff ce       	rjmp	.-514    	; 0x3c4c <__fp_nan>
    3e4e:	7e c0       	rjmp	.+252    	; 0x3f4c <__fp_mpack>

00003e50 <sqrt>:
    3e50:	27 df       	rcall	.-434    	; 0x3ca0 <__fp_splitA>
    3e52:	d0 f3       	brcs	.-12     	; 0x3e48 <pow+0x98>
    3e54:	99 23       	and	r25, r25
    3e56:	d9 f3       	breq	.-10     	; 0x3e4e <pow+0x9e>
    3e58:	ce f3       	brts	.-14     	; 0x3e4c <pow+0x9c>
    3e5a:	9f 57       	subi	r25, 0x7F	; 127
    3e5c:	55 0b       	sbc	r21, r21
    3e5e:	87 ff       	sbrs	r24, 7
    3e60:	85 d0       	rcall	.+266    	; 0x3f6c <__fp_norm2>
    3e62:	56 95       	lsr	r21
    3e64:	97 95       	ror	r25
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	20 f4       	brcc	.+8      	; 0x3e72 <sqrt+0x22>
    3e6a:	66 0f       	add	r22, r22
    3e6c:	77 1f       	adc	r23, r23
    3e6e:	88 1f       	adc	r24, r24
    3e70:	bb 1f       	adc	r27, r27
    3e72:	1f 93       	push	r17
    3e74:	0f 93       	push	r16
    3e76:	00 24       	eor	r0, r0
    3e78:	90 01       	movw	r18, r0
    3e7a:	a0 01       	movw	r20, r0
    3e7c:	80 01       	movw	r16, r0
    3e7e:	f0 01       	movw	r30, r0
    3e80:	a0 e8       	ldi	r26, 0x80	; 128
    3e82:	0e 0f       	add	r16, r30
    3e84:	1f 1f       	adc	r17, r31
    3e86:	0a 1e       	adc	r0, r26
    3e88:	51 1d       	adc	r21, r1
    3e8a:	60 1b       	sub	r22, r16
    3e8c:	71 0b       	sbc	r23, r17
    3e8e:	80 09       	sbc	r24, r0
    3e90:	b5 0b       	sbc	r27, r21
    3e92:	48 f4       	brcc	.+18     	; 0x3ea6 <sqrt+0x56>
    3e94:	60 0f       	add	r22, r16
    3e96:	71 1f       	adc	r23, r17
    3e98:	80 1d       	adc	r24, r0
    3e9a:	b5 1f       	adc	r27, r21
    3e9c:	0e 1b       	sub	r16, r30
    3e9e:	1f 0b       	sbc	r17, r31
    3ea0:	0a 0a       	sbc	r0, r26
    3ea2:	51 09       	sbc	r21, r1
    3ea4:	07 c0       	rjmp	.+14     	; 0x3eb4 <sqrt+0x64>
    3ea6:	2e 0f       	add	r18, r30
    3ea8:	3f 1f       	adc	r19, r31
    3eaa:	4a 1f       	adc	r20, r26
    3eac:	0e 0f       	add	r16, r30
    3eae:	1f 1f       	adc	r17, r31
    3eb0:	0a 1e       	adc	r0, r26
    3eb2:	51 1d       	adc	r21, r1
    3eb4:	66 0f       	add	r22, r22
    3eb6:	77 1f       	adc	r23, r23
    3eb8:	88 1f       	adc	r24, r24
    3eba:	bb 1f       	adc	r27, r27
    3ebc:	a6 95       	lsr	r26
    3ebe:	f7 95       	ror	r31
    3ec0:	e7 95       	ror	r30
    3ec2:	f8 f6       	brcc	.-66     	; 0x3e82 <sqrt+0x32>
    3ec4:	06 17       	cp	r16, r22
    3ec6:	17 07       	cpc	r17, r23
    3ec8:	08 06       	cpc	r0, r24
    3eca:	5b 07       	cpc	r21, r27
    3ecc:	21 1d       	adc	r18, r1
    3ece:	31 1d       	adc	r19, r1
    3ed0:	41 1d       	adc	r20, r1
    3ed2:	0f 91       	pop	r16
    3ed4:	1f 91       	pop	r17
    3ed6:	b9 01       	movw	r22, r18
    3ed8:	84 2f       	mov	r24, r20
    3eda:	91 58       	subi	r25, 0x81	; 129
    3edc:	88 0f       	add	r24, r24
    3ede:	96 95       	lsr	r25
    3ee0:	87 95       	ror	r24
    3ee2:	08 95       	ret

00003ee4 <square>:
    3ee4:	9b 01       	movw	r18, r22
    3ee6:	ac 01       	movw	r20, r24
    3ee8:	00 cf       	rjmp	.-512    	; 0x3cea <__mulsf3>
    3eea:	19 f4       	brne	.+6      	; 0x3ef2 <square+0xe>
    3eec:	0e f0       	brts	.+2      	; 0x3ef0 <square+0xc>
    3eee:	a8 ce       	rjmp	.-688    	; 0x3c40 <__fp_inf>
    3ef0:	f1 ce       	rjmp	.-542    	; 0x3cd4 <__fp_zero>
    3ef2:	ac ce       	rjmp	.-680    	; 0x3c4c <__fp_nan>

00003ef4 <exp>:
    3ef4:	d5 de       	rcall	.-598    	; 0x3ca0 <__fp_splitA>
    3ef6:	c8 f3       	brcs	.-14     	; 0x3eea <square+0x6>
    3ef8:	96 38       	cpi	r25, 0x86	; 134
    3efa:	c0 f7       	brcc	.-16     	; 0x3eec <square+0x8>
    3efc:	07 f8       	bld	r0, 7
    3efe:	0f 92       	push	r0
    3f00:	e8 94       	clt
    3f02:	2b e3       	ldi	r18, 0x3B	; 59
    3f04:	3a ea       	ldi	r19, 0xAA	; 170
    3f06:	48 eb       	ldi	r20, 0xB8	; 184
    3f08:	5f e7       	ldi	r21, 0x7F	; 127
    3f0a:	fd de       	rcall	.-518    	; 0x3d06 <__mulsf3_pse>
    3f0c:	0f 92       	push	r0
    3f0e:	0f 92       	push	r0
    3f10:	0f 92       	push	r0
    3f12:	4d b7       	in	r20, 0x3d	; 61
    3f14:	5e b7       	in	r21, 0x3e	; 62
    3f16:	0f 92       	push	r0
    3f18:	d7 d0       	rcall	.+430    	; 0x40c8 <modf>
    3f1a:	e4 ee       	ldi	r30, 0xE4	; 228
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	2d d0       	rcall	.+90     	; 0x3f7a <__fp_powser>
    3f20:	4f 91       	pop	r20
    3f22:	5f 91       	pop	r21
    3f24:	ef 91       	pop	r30
    3f26:	ff 91       	pop	r31
    3f28:	e5 95       	asr	r30
    3f2a:	ee 1f       	adc	r30, r30
    3f2c:	ff 1f       	adc	r31, r31
    3f2e:	49 f0       	breq	.+18     	; 0x3f42 <exp+0x4e>
    3f30:	fe 57       	subi	r31, 0x7E	; 126
    3f32:	e0 68       	ori	r30, 0x80	; 128
    3f34:	44 27       	eor	r20, r20
    3f36:	ee 0f       	add	r30, r30
    3f38:	44 1f       	adc	r20, r20
    3f3a:	fa 95       	dec	r31
    3f3c:	e1 f7       	brne	.-8      	; 0x3f36 <exp+0x42>
    3f3e:	41 95       	neg	r20
    3f40:	55 0b       	sbc	r21, r21
    3f42:	49 d0       	rcall	.+146    	; 0x3fd6 <ldexp>
    3f44:	0f 90       	pop	r0
    3f46:	07 fe       	sbrs	r0, 7
    3f48:	3d c0       	rjmp	.+122    	; 0x3fc4 <inverse>
    3f4a:	08 95       	ret

00003f4c <__fp_mpack>:
    3f4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f4e:	49 f0       	breq	.+18     	; 0x3f62 <__fp_mpack+0x16>
    3f50:	91 50       	subi	r25, 0x01	; 1
    3f52:	28 f4       	brcc	.+10     	; 0x3f5e <__fp_mpack+0x12>
    3f54:	86 95       	lsr	r24
    3f56:	77 95       	ror	r23
    3f58:	67 95       	ror	r22
    3f5a:	b7 95       	ror	r27
    3f5c:	9f 5f       	subi	r25, 0xFF	; 255
    3f5e:	80 38       	cpi	r24, 0x80	; 128
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	88 0f       	add	r24, r24
    3f64:	96 95       	lsr	r25
    3f66:	87 95       	ror	r24
    3f68:	97 f9       	bld	r25, 7
    3f6a:	08 95       	ret

00003f6c <__fp_norm2>:
    3f6c:	91 50       	subi	r25, 0x01	; 1
    3f6e:	50 40       	sbci	r21, 0x00	; 0
    3f70:	66 0f       	add	r22, r22
    3f72:	77 1f       	adc	r23, r23
    3f74:	88 1f       	adc	r24, r24
    3f76:	d2 f7       	brpl	.-12     	; 0x3f6c <__fp_norm2>
    3f78:	08 95       	ret

00003f7a <__fp_powser>:
    3f7a:	df 93       	push	r29
    3f7c:	cf 93       	push	r28
    3f7e:	1f 93       	push	r17
    3f80:	0f 93       	push	r16
    3f82:	ff 92       	push	r15
    3f84:	ef 92       	push	r14
    3f86:	df 92       	push	r13
    3f88:	7b 01       	movw	r14, r22
    3f8a:	8c 01       	movw	r16, r24
    3f8c:	68 94       	set
    3f8e:	05 c0       	rjmp	.+10     	; 0x3f9a <__fp_powser+0x20>
    3f90:	da 2e       	mov	r13, r26
    3f92:	ef 01       	movw	r28, r30
    3f94:	b6 de       	rcall	.-660    	; 0x3d02 <__mulsf3x>
    3f96:	fe 01       	movw	r30, r28
    3f98:	e8 94       	clt
    3f9a:	a5 91       	lpm	r26, Z+
    3f9c:	25 91       	lpm	r18, Z+
    3f9e:	35 91       	lpm	r19, Z+
    3fa0:	45 91       	lpm	r20, Z+
    3fa2:	55 91       	lpm	r21, Z+
    3fa4:	ae f3       	brts	.-22     	; 0x3f90 <__fp_powser+0x16>
    3fa6:	ef 01       	movw	r28, r30
    3fa8:	ff dc       	rcall	.-1538   	; 0x39a8 <__addsf3x>
    3faa:	fe 01       	movw	r30, r28
    3fac:	97 01       	movw	r18, r14
    3fae:	a8 01       	movw	r20, r16
    3fb0:	da 94       	dec	r13
    3fb2:	79 f7       	brne	.-34     	; 0x3f92 <__fp_powser+0x18>
    3fb4:	df 90       	pop	r13
    3fb6:	ef 90       	pop	r14
    3fb8:	ff 90       	pop	r15
    3fba:	0f 91       	pop	r16
    3fbc:	1f 91       	pop	r17
    3fbe:	cf 91       	pop	r28
    3fc0:	df 91       	pop	r29
    3fc2:	08 95       	ret

00003fc4 <inverse>:
    3fc4:	9b 01       	movw	r18, r22
    3fc6:	ac 01       	movw	r20, r24
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	80 e8       	ldi	r24, 0x80	; 128
    3fce:	9f e3       	ldi	r25, 0x3F	; 63
    3fd0:	42 cd       	rjmp	.-1404   	; 0x3a56 <__divsf3>
    3fd2:	36 ce       	rjmp	.-916    	; 0x3c40 <__fp_inf>
    3fd4:	bb cf       	rjmp	.-138    	; 0x3f4c <__fp_mpack>

00003fd6 <ldexp>:
    3fd6:	64 de       	rcall	.-824    	; 0x3ca0 <__fp_splitA>
    3fd8:	e8 f3       	brcs	.-6      	; 0x3fd4 <inverse+0x10>
    3fda:	99 23       	and	r25, r25
    3fdc:	d9 f3       	breq	.-10     	; 0x3fd4 <inverse+0x10>
    3fde:	94 0f       	add	r25, r20
    3fe0:	51 1d       	adc	r21, r1
    3fe2:	bb f3       	brvs	.-18     	; 0x3fd2 <inverse+0xe>
    3fe4:	91 50       	subi	r25, 0x01	; 1
    3fe6:	50 40       	sbci	r21, 0x00	; 0
    3fe8:	94 f0       	brlt	.+36     	; 0x400e <ldexp+0x38>
    3fea:	59 f0       	breq	.+22     	; 0x4002 <ldexp+0x2c>
    3fec:	88 23       	and	r24, r24
    3fee:	32 f0       	brmi	.+12     	; 0x3ffc <ldexp+0x26>
    3ff0:	66 0f       	add	r22, r22
    3ff2:	77 1f       	adc	r23, r23
    3ff4:	88 1f       	adc	r24, r24
    3ff6:	91 50       	subi	r25, 0x01	; 1
    3ff8:	50 40       	sbci	r21, 0x00	; 0
    3ffa:	c1 f7       	brne	.-16     	; 0x3fec <ldexp+0x16>
    3ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    3ffe:	51 05       	cpc	r21, r1
    4000:	44 f7       	brge	.-48     	; 0x3fd2 <inverse+0xe>
    4002:	88 0f       	add	r24, r24
    4004:	91 1d       	adc	r25, r1
    4006:	96 95       	lsr	r25
    4008:	87 95       	ror	r24
    400a:	97 f9       	bld	r25, 7
    400c:	08 95       	ret
    400e:	5f 3f       	cpi	r21, 0xFF	; 255
    4010:	ac f0       	brlt	.+42     	; 0x403c <ldexp+0x66>
    4012:	98 3e       	cpi	r25, 0xE8	; 232
    4014:	9c f0       	brlt	.+38     	; 0x403c <ldexp+0x66>
    4016:	bb 27       	eor	r27, r27
    4018:	86 95       	lsr	r24
    401a:	77 95       	ror	r23
    401c:	67 95       	ror	r22
    401e:	b7 95       	ror	r27
    4020:	08 f4       	brcc	.+2      	; 0x4024 <ldexp+0x4e>
    4022:	b1 60       	ori	r27, 0x01	; 1
    4024:	93 95       	inc	r25
    4026:	c1 f7       	brne	.-16     	; 0x4018 <ldexp+0x42>
    4028:	bb 0f       	add	r27, r27
    402a:	58 f7       	brcc	.-42     	; 0x4002 <ldexp+0x2c>
    402c:	11 f4       	brne	.+4      	; 0x4032 <ldexp+0x5c>
    402e:	60 ff       	sbrs	r22, 0
    4030:	e8 cf       	rjmp	.-48     	; 0x4002 <ldexp+0x2c>
    4032:	6f 5f       	subi	r22, 0xFF	; 255
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	8f 4f       	sbci	r24, 0xFF	; 255
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	e3 cf       	rjmp	.-58     	; 0x4002 <ldexp+0x2c>
    403c:	4c ce       	rjmp	.-872    	; 0x3cd6 <__fp_szero>
    403e:	0e f0       	brts	.+2      	; 0x4042 <ldexp+0x6c>
    4040:	85 cf       	rjmp	.-246    	; 0x3f4c <__fp_mpack>
    4042:	04 ce       	rjmp	.-1016   	; 0x3c4c <__fp_nan>
    4044:	68 94       	set
    4046:	fc cd       	rjmp	.-1032   	; 0x3c40 <__fp_inf>

00004048 <log>:
    4048:	2b de       	rcall	.-938    	; 0x3ca0 <__fp_splitA>
    404a:	c8 f3       	brcs	.-14     	; 0x403e <ldexp+0x68>
    404c:	99 23       	and	r25, r25
    404e:	d1 f3       	breq	.-12     	; 0x4044 <ldexp+0x6e>
    4050:	c6 f3       	brts	.-16     	; 0x4042 <ldexp+0x6c>
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	1f 93       	push	r17
    4058:	0f 93       	push	r16
    405a:	ff 92       	push	r15
    405c:	c9 2f       	mov	r28, r25
    405e:	dd 27       	eor	r29, r29
    4060:	88 23       	and	r24, r24
    4062:	2a f0       	brmi	.+10     	; 0x406e <log+0x26>
    4064:	21 97       	sbiw	r28, 0x01	; 1
    4066:	66 0f       	add	r22, r22
    4068:	77 1f       	adc	r23, r23
    406a:	88 1f       	adc	r24, r24
    406c:	da f7       	brpl	.-10     	; 0x4064 <log+0x1c>
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f eb       	ldi	r21, 0xBF	; 191
    4076:	9f e3       	ldi	r25, 0x3F	; 63
    4078:	88 39       	cpi	r24, 0x98	; 152
    407a:	20 f0       	brcs	.+8      	; 0x4084 <log+0x3c>
    407c:	80 3e       	cpi	r24, 0xE0	; 224
    407e:	30 f0       	brcs	.+12     	; 0x408c <log+0x44>
    4080:	21 96       	adiw	r28, 0x01	; 1
    4082:	8f 77       	andi	r24, 0x7F	; 127
    4084:	80 dc       	rcall	.-1792   	; 0x3986 <__addsf3>
    4086:	ec e0       	ldi	r30, 0x0C	; 12
    4088:	f1 e0       	ldi	r31, 0x01	; 1
    408a:	03 c0       	rjmp	.+6      	; 0x4092 <log+0x4a>
    408c:	7c dc       	rcall	.-1800   	; 0x3986 <__addsf3>
    408e:	e9 e3       	ldi	r30, 0x39	; 57
    4090:	f1 e0       	ldi	r31, 0x01	; 1
    4092:	73 df       	rcall	.-282    	; 0x3f7a <__fp_powser>
    4094:	8b 01       	movw	r16, r22
    4096:	be 01       	movw	r22, r28
    4098:	ec 01       	movw	r28, r24
    409a:	fb 2e       	mov	r15, r27
    409c:	6f 57       	subi	r22, 0x7F	; 127
    409e:	71 09       	sbc	r23, r1
    40a0:	75 95       	asr	r23
    40a2:	77 1f       	adc	r23, r23
    40a4:	88 0b       	sbc	r24, r24
    40a6:	99 0b       	sbc	r25, r25
    40a8:	6c dd       	rcall	.-1320   	; 0x3b82 <__floatsisf>
    40aa:	28 e1       	ldi	r18, 0x18	; 24
    40ac:	32 e7       	ldi	r19, 0x72	; 114
    40ae:	41 e3       	ldi	r20, 0x31	; 49
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	27 de       	rcall	.-946    	; 0x3d02 <__mulsf3x>
    40b4:	af 2d       	mov	r26, r15
    40b6:	98 01       	movw	r18, r16
    40b8:	ae 01       	movw	r20, r28
    40ba:	ff 90       	pop	r15
    40bc:	0f 91       	pop	r16
    40be:	1f 91       	pop	r17
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	71 dc       	rcall	.-1822   	; 0x39a8 <__addsf3x>
    40c6:	d3 cd       	rjmp	.-1114   	; 0x3c6e <__fp_round>

000040c8 <modf>:
    40c8:	fa 01       	movw	r30, r20
    40ca:	dc 01       	movw	r26, r24
    40cc:	aa 0f       	add	r26, r26
    40ce:	bb 1f       	adc	r27, r27
    40d0:	9b 01       	movw	r18, r22
    40d2:	ac 01       	movw	r20, r24
    40d4:	bf 57       	subi	r27, 0x7F	; 127
    40d6:	28 f4       	brcc	.+10     	; 0x40e2 <modf+0x1a>
    40d8:	22 27       	eor	r18, r18
    40da:	33 27       	eor	r19, r19
    40dc:	44 27       	eor	r20, r20
    40de:	50 78       	andi	r21, 0x80	; 128
    40e0:	1f c0       	rjmp	.+62     	; 0x4120 <modf+0x58>
    40e2:	b7 51       	subi	r27, 0x17	; 23
    40e4:	88 f4       	brcc	.+34     	; 0x4108 <modf+0x40>
    40e6:	ab 2f       	mov	r26, r27
    40e8:	00 24       	eor	r0, r0
    40ea:	46 95       	lsr	r20
    40ec:	37 95       	ror	r19
    40ee:	27 95       	ror	r18
    40f0:	01 1c       	adc	r0, r1
    40f2:	a3 95       	inc	r26
    40f4:	d2 f3       	brmi	.-12     	; 0x40ea <modf+0x22>
    40f6:	00 20       	and	r0, r0
    40f8:	69 f0       	breq	.+26     	; 0x4114 <modf+0x4c>
    40fa:	22 0f       	add	r18, r18
    40fc:	33 1f       	adc	r19, r19
    40fe:	44 1f       	adc	r20, r20
    4100:	b3 95       	inc	r27
    4102:	da f3       	brmi	.-10     	; 0x40fa <modf+0x32>
    4104:	0d d0       	rcall	.+26     	; 0x4120 <modf+0x58>
    4106:	3e cc       	rjmp	.-1924   	; 0x3984 <__subsf3>
    4108:	61 30       	cpi	r22, 0x01	; 1
    410a:	71 05       	cpc	r23, r1
    410c:	a0 e8       	ldi	r26, 0x80	; 128
    410e:	8a 07       	cpc	r24, r26
    4110:	b9 46       	sbci	r27, 0x69	; 105
    4112:	30 f4       	brcc	.+12     	; 0x4120 <modf+0x58>
    4114:	9b 01       	movw	r18, r22
    4116:	ac 01       	movw	r20, r24
    4118:	66 27       	eor	r22, r22
    411a:	77 27       	eor	r23, r23
    411c:	88 27       	eor	r24, r24
    411e:	90 78       	andi	r25, 0x80	; 128
    4120:	30 96       	adiw	r30, 0x00	; 0
    4122:	21 f0       	breq	.+8      	; 0x412c <modf+0x64>
    4124:	20 83       	st	Z, r18
    4126:	31 83       	std	Z+1, r19	; 0x01
    4128:	42 83       	std	Z+2, r20	; 0x02
    412a:	53 83       	std	Z+3, r21	; 0x03
    412c:	08 95       	ret

0000412e <__udivmodhi4>:
    412e:	aa 1b       	sub	r26, r26
    4130:	bb 1b       	sub	r27, r27
    4132:	51 e1       	ldi	r21, 0x11	; 17
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <__udivmodhi4_ep>

00004136 <__udivmodhi4_loop>:
    4136:	aa 1f       	adc	r26, r26
    4138:	bb 1f       	adc	r27, r27
    413a:	a6 17       	cp	r26, r22
    413c:	b7 07       	cpc	r27, r23
    413e:	10 f0       	brcs	.+4      	; 0x4144 <__udivmodhi4_ep>
    4140:	a6 1b       	sub	r26, r22
    4142:	b7 0b       	sbc	r27, r23

00004144 <__udivmodhi4_ep>:
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	5a 95       	dec	r21
    414a:	a9 f7       	brne	.-22     	; 0x4136 <__udivmodhi4_loop>
    414c:	80 95       	com	r24
    414e:	90 95       	com	r25
    4150:	bc 01       	movw	r22, r24
    4152:	cd 01       	movw	r24, r26
    4154:	08 95       	ret

00004156 <__divmodhi4>:
    4156:	97 fb       	bst	r25, 7
    4158:	09 2e       	mov	r0, r25
    415a:	07 26       	eor	r0, r23
    415c:	0a d0       	rcall	.+20     	; 0x4172 <__divmodhi4_neg1>
    415e:	77 fd       	sbrc	r23, 7
    4160:	04 d0       	rcall	.+8      	; 0x416a <__divmodhi4_neg2>
    4162:	e5 df       	rcall	.-54     	; 0x412e <__udivmodhi4>
    4164:	06 d0       	rcall	.+12     	; 0x4172 <__divmodhi4_neg1>
    4166:	00 20       	and	r0, r0
    4168:	1a f4       	brpl	.+6      	; 0x4170 <__divmodhi4_exit>

0000416a <__divmodhi4_neg2>:
    416a:	70 95       	com	r23
    416c:	61 95       	neg	r22
    416e:	7f 4f       	sbci	r23, 0xFF	; 255

00004170 <__divmodhi4_exit>:
    4170:	08 95       	ret

00004172 <__divmodhi4_neg1>:
    4172:	f6 f7       	brtc	.-4      	; 0x4170 <__divmodhi4_exit>
    4174:	90 95       	com	r25
    4176:	81 95       	neg	r24
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	08 95       	ret

0000417c <__udivmodsi4>:
    417c:	a1 e2       	ldi	r26, 0x21	; 33
    417e:	1a 2e       	mov	r1, r26
    4180:	aa 1b       	sub	r26, r26
    4182:	bb 1b       	sub	r27, r27
    4184:	fd 01       	movw	r30, r26
    4186:	0d c0       	rjmp	.+26     	; 0x41a2 <__udivmodsi4_ep>

00004188 <__udivmodsi4_loop>:
    4188:	aa 1f       	adc	r26, r26
    418a:	bb 1f       	adc	r27, r27
    418c:	ee 1f       	adc	r30, r30
    418e:	ff 1f       	adc	r31, r31
    4190:	a2 17       	cp	r26, r18
    4192:	b3 07       	cpc	r27, r19
    4194:	e4 07       	cpc	r30, r20
    4196:	f5 07       	cpc	r31, r21
    4198:	20 f0       	brcs	.+8      	; 0x41a2 <__udivmodsi4_ep>
    419a:	a2 1b       	sub	r26, r18
    419c:	b3 0b       	sbc	r27, r19
    419e:	e4 0b       	sbc	r30, r20
    41a0:	f5 0b       	sbc	r31, r21

000041a2 <__udivmodsi4_ep>:
    41a2:	66 1f       	adc	r22, r22
    41a4:	77 1f       	adc	r23, r23
    41a6:	88 1f       	adc	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	1a 94       	dec	r1
    41ac:	69 f7       	brne	.-38     	; 0x4188 <__udivmodsi4_loop>
    41ae:	60 95       	com	r22
    41b0:	70 95       	com	r23
    41b2:	80 95       	com	r24
    41b4:	90 95       	com	r25
    41b6:	9b 01       	movw	r18, r22
    41b8:	ac 01       	movw	r20, r24
    41ba:	bd 01       	movw	r22, r26
    41bc:	cf 01       	movw	r24, r30
    41be:	08 95       	ret

000041c0 <__divmodsi4>:
    41c0:	97 fb       	bst	r25, 7
    41c2:	09 2e       	mov	r0, r25
    41c4:	05 26       	eor	r0, r21
    41c6:	0e d0       	rcall	.+28     	; 0x41e4 <__divmodsi4_neg1>
    41c8:	57 fd       	sbrc	r21, 7
    41ca:	04 d0       	rcall	.+8      	; 0x41d4 <__divmodsi4_neg2>
    41cc:	d7 df       	rcall	.-82     	; 0x417c <__udivmodsi4>
    41ce:	0a d0       	rcall	.+20     	; 0x41e4 <__divmodsi4_neg1>
    41d0:	00 1c       	adc	r0, r0
    41d2:	38 f4       	brcc	.+14     	; 0x41e2 <__divmodsi4_exit>

000041d4 <__divmodsi4_neg2>:
    41d4:	50 95       	com	r21
    41d6:	40 95       	com	r20
    41d8:	30 95       	com	r19
    41da:	21 95       	neg	r18
    41dc:	3f 4f       	sbci	r19, 0xFF	; 255
    41de:	4f 4f       	sbci	r20, 0xFF	; 255
    41e0:	5f 4f       	sbci	r21, 0xFF	; 255

000041e2 <__divmodsi4_exit>:
    41e2:	08 95       	ret

000041e4 <__divmodsi4_neg1>:
    41e4:	f6 f7       	brtc	.-4      	; 0x41e2 <__divmodsi4_exit>
    41e6:	90 95       	com	r25
    41e8:	80 95       	com	r24
    41ea:	70 95       	com	r23
    41ec:	61 95       	neg	r22
    41ee:	7f 4f       	sbci	r23, 0xFF	; 255
    41f0:	8f 4f       	sbci	r24, 0xFF	; 255
    41f2:	9f 4f       	sbci	r25, 0xFF	; 255
    41f4:	08 95       	ret

000041f6 <_exit>:
    41f6:	f8 94       	cli

000041f8 <__stop_program>:
    41f8:	ff cf       	rjmp	.-2      	; 0x41f8 <__stop_program>

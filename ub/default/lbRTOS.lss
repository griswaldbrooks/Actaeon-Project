
lbRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800200  000046ce  00004762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046f  008002d2  008002d2  00004834  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000012df  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003801  00000000  00000000  00005c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eba  00000000  00000000  00009414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d09  00000000  00000000  0000a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e00  00000000  00000000  0000cfd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000171c  00000000  00000000  0000ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a96  00000000  00000000  0000f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00010f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__ctors_end>
       4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
       c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      10:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      14:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      18:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      1c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      20:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      24:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      28:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      2c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      30:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      34:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__vector_13>
      38:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_14>
      3c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_15>
      40:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_16>
      44:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      48:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__vector_18>
      4c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_19>
      50:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_20>
      54:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_21>
      58:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_22>
      5c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_23>
      60:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      64:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__vector_25>
      68:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      6c:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_27>
      70:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      74:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_29>
      78:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      7c:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_31>
      80:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_32>
      84:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_33>
      88:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__vector_34>
      8c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_35>
      90:	0c 94 37 12 	jmp	0x246e	; 0x246e <__vector_36>
      94:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      98:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__vector_38>
      9c:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__vector_39>
      a0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      a4:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__vector_41>
      a8:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_42>
      ac:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_43>
      b0:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__vector_44>
      b4:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_45>
      b8:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__vector_46>
      bc:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__vector_47>
      c0:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_48>
      c4:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_49>
      c8:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_50>
      cc:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__vector_51>
      d0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      d4:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_53>
      d8:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__vector_54>
      dc:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__bad_interrupt>
      e0:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_56>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 08       	sbc	r3, r15
     130:	00 00       	nop
     132:	00 be       	out	0x30, r0	; 48
     134:	92 24       	eor	r9, r2
     136:	49 12       	cpse	r4, r25
     138:	3e ab       	std	Y+54, r19	; 0x36
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	2a be       	out	0x3a, r2	; 58
     13e:	cd cc       	rjmp	.-1638   	; 0xfffffada <__eeprom_end+0xff7efada>
     140:	cc 4c       	sbci	r28, 0xCC	; 204
     142:	3e 00       	.word	0x003e	; ????
     144:	00 00       	nop
     146:	80 be       	out	0x30, r8	; 48
     148:	ab aa       	std	Y+51, r10	; 0x33
     14a:	aa aa       	std	Y+50, r10	; 0x32
     14c:	3e 00       	.word	0x003e	; ????
     14e:	00 00       	nop
     150:	00 bf       	out	0x30, r16	; 48
     152:	00 00       	nop
     154:	00 80       	ld	r0, Z
     156:	3f 00       	.word	0x003f	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	08 41       	sbci	r16, 0x18	; 24
     15e:	78 d3       	rcall	.+1776   	; 0x850 <sin_SoR+0x26>
     160:	bb 43       	sbci	r27, 0x3B	; 59
     162:	87 d1       	rcall	.+782    	; 0x472 <PWM_Init_timer4_H5+0xc>
     164:	13 3d       	cpi	r17, 0xD3	; 211
     166:	19 0e       	add	r1, r25
     168:	3c c3       	rjmp	.+1656   	; 0x7e2 <cos_SoR+0xe>
     16a:	bd 42       	sbci	r27, 0x2D	; 45
     16c:	82 ad       	ldd	r24, Z+58	; 0x3a
     16e:	2b 3e       	cpi	r18, 0xEB	; 235
     170:	68 ec       	ldi	r22, 0xC8	; 200
     172:	82 76       	andi	r24, 0x62	; 98
     174:	be d9       	rcall	.-3204   	; 0xfffff4f2 <__eeprom_end+0xff7ef4f2>
     176:	8f e1       	ldi	r24, 0x1F	; 31
     178:	a9 3e       	cpi	r26, 0xE9	; 233
     17a:	4c 80       	ldd	r4, Y+4	; 0x04
     17c:	ef ff       	.word	0xffef	; ????
     17e:	be 01       	movw	r22, r28
     180:	c4 ff       	sbrs	r28, 4
     182:	7f 3f       	cpi	r23, 0xFF	; 255
     184:	00 00       	nop
     186:	00 00       	nop
     188:	00 07       	cpc	r16, r16
     18a:	63 42       	sbci	r22, 0x23	; 35
     18c:	36 b7       	in	r19, 0x36	; 54
     18e:	9b d8       	rcall	.-3786   	; 0xfffff2c6 <__eeprom_end+0xff7ef2c6>
     190:	a7 1a       	sub	r10, r23
     192:	39 68       	ori	r19, 0x89	; 137
     194:	56 18       	sub	r5, r6
     196:	ae ba       	out	0x1e, r10	; 30
     198:	ab 55       	subi	r26, 0x5B	; 91
     19a:	8c 1d       	adc	r24, r12
     19c:	3c b7       	in	r19, 0x3c	; 60
     19e:	cc 57       	subi	r28, 0x7C	; 124
     1a0:	63 bd       	out	0x23, r22	; 35
     1a2:	6d ed       	ldi	r22, 0xDD	; 221
     1a4:	fd 75       	andi	r31, 0x5D	; 93
     1a6:	3e f6       	brtc	.-114    	; 0x136 <__SREG__+0xf7>
     1a8:	17 72       	andi	r17, 0x27	; 39
     1aa:	31 bf       	out	0x31, r19	; 49
     1ac:	00 00       	nop
     1ae:	00 80       	ld	r0, Z
     1b0:	3f 25       	eor	r19, r15

000001b1 <__c.2891>:
     1b1:	25 64 2c 25 64 00                                   %d,%d.

000001b7 <__c.2886>:
     1b7:	53 74 61 72 74 69 6e 67 20 70 72 6f 67 72 61 6d     Starting program
     1c7:	2e 0a 00                                            ...

000001ca <__c.2859>:
     1ca:	35 30 30 2c 20 00                                   500, .

000001d0 <__c.2857>:
     1d0:	34 30 30 2c 20 00                                   400, .

000001d6 <__c.2813>:
     1d6:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 43     Initialization C
     1e6:	6f 6d 70 6c 65 74 65 20 0d 0a 00                    omplete ...

000001f1 <__c.2808>:
     1f1:	2e 00                                               ..

000001f3 <__c.2806>:
     1f3:	0d 0a 53 79 73 74 65 6d 20 57 61 72 6d 65 64 20     ..System Warmed 
     203:	55 70 00                                            Up.

00000206 <TimerPrescaleFactor>:
     206:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000212 <Timer2PrescaleFactor>:
     212:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000222 <__c.1991>:
     222:	42 41 44 5f 76 65 63 74 20 63 61 6c 6c 65 64 21     BAD_vect called!
	...

00000233 <HexChars>:
     233:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000244 <__c.1708>:
     244:	25 64 20 00                                         %d .

00000248 <__c.1705>:
     248:	20 44 69 73 74 61 6e 63 65 73 3a 20 00               Distances: .

00000255 <__c.1703>:
     255:	20 4d 6f 74 6f 72 20 53 70 65 65 64 3a 20 00         Motor Speed: .

00000264 <__c.1701>:
     264:	49 6e 64 65 78 3a 20 00                             Index: .

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d1 e2       	ldi	r29, 0x21	; 33
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	ee ec       	ldi	r30, 0xCE	; 206
     280:	f6 e4       	ldi	r31, 0x46	; 70
     282:	02 c0       	rjmp	.+4      	; 0x288 <.do_copy_data_start>

00000284 <.do_copy_data_loop>:
     284:	05 90       	lpm	r0, Z+
     286:	0d 92       	st	X+, r0

00000288 <.do_copy_data_start>:
     288:	a2 3d       	cpi	r26, 0xD2	; 210
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <.do_copy_data_loop>

0000028e <__do_clear_bss>:
     28e:	17 e0       	ldi	r17, 0x07	; 7
     290:	a2 ed       	ldi	r26, 0xD2	; 210
     292:	b2 e0       	ldi	r27, 0x02	; 2
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	a1 34       	cpi	r26, 0x41	; 65
     29a:	b1 07       	cpc	r27, r17
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>
     29e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <main>
     2a2:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <exit>

000002a6 <__bad_interrupt>:
     2a6:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_default>

000002aa <PWM_Init_timer1_LED>:

//OC1B  pin B6 (attached to green LED)
void PWM_Init_timer1_LED(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     2aa:	89 30       	cpi	r24, 0x09	; 9
     2ac:	49 f4       	brne	.+18     	; 0x2c0 <PWM_Init_timer1_LED+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     2ae:	80 91 80 00 	lds	r24, 0x0080
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
     2b8:	80 91 80 00 	lds	r24, 0x0080
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	0e c0       	rjmp	.+28     	; 0x2dc <PWM_Init_timer1_LED+0x32>
	}
	else if( bitRes == 10 )
     2c0:	8a 30       	cpi	r24, 0x0A	; 10
     2c2:	21 f4       	brne	.+8      	; 0x2cc <PWM_Init_timer1_LED+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     2c4:	80 91 80 00 	lds	r24, 0x0080
     2c8:	82 60       	ori	r24, 0x02	; 2
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <PWM_Init_timer1_LED+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     2cc:	80 91 80 00 	lds	r24, 0x0080
     2d0:	8d 7f       	andi	r24, 0xFD	; 253
     2d2:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
     2d6:	80 91 80 00 	lds	r24, 0x0080
     2da:	81 60       	ori	r24, 0x01	; 1
     2dc:	80 93 80 00 	sts	0x0080, r24
	}
	// clear output compare values
	OCR1B = 0;
     2e0:	10 92 8b 00 	sts	0x008B, r1
     2e4:	10 92 8a 00 	sts	0x008A, r1
}
     2e8:	08 95       	ret

000002ea <PWM_Init_timer2_H6>:
//pin H6, timer2
void PWM_Init_timer2_H6(u08 bitRes)
{
	// enable timer2 as 8,9,10bit PWM
	if(bitRes == 9)
     2ea:	89 30       	cpi	r24, 0x09	; 9
     2ec:	49 f4       	brne	.+18     	; 0x300 <PWM_Init_timer2_H6+0x16>
	{	// 9bit mode
		sbi(TCCR2A,PWM11);
     2ee:	80 91 b0 00 	lds	r24, 0x00B0
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	80 93 b0 00 	sts	0x00B0, r24
		cbi(TCCR2A,PWM10);
     2f8:	80 91 b0 00 	lds	r24, 0x00B0
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	0e c0       	rjmp	.+28     	; 0x31c <PWM_Init_timer2_H6+0x32>
	}
	else if( bitRes == 10 )
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	21 f4       	brne	.+8      	; 0x30c <PWM_Init_timer2_H6+0x22>
	{	// 10bit mode
		sbi(TCCR2A,PWM11);
     304:	80 91 b0 00 	lds	r24, 0x00B0
     308:	82 60       	ori	r24, 0x02	; 2
     30a:	03 c0       	rjmp	.+6      	; 0x312 <PWM_Init_timer2_H6+0x28>
		sbi(TCCR2A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR2A,PWM11);
     30c:	80 91 b0 00 	lds	r24, 0x00B0
     310:	8d 7f       	andi	r24, 0xFD	; 253
     312:	80 93 b0 00 	sts	0x00B0, r24
		sbi(TCCR2A,PWM10);
     316:	80 91 b0 00 	lds	r24, 0x00B0
     31a:	81 60       	ori	r24, 0x01	; 1
     31c:	80 93 b0 00 	sts	0x00B0, r24
	}
	// clear output compare values
	OCR2B = 0;
     320:	10 92 b4 00 	sts	0x00B4, r1
}
     324:	08 95       	ret

00000326 <PWM_Init_timer3_E3>:
//pin E3
void PWM_Init_timer3_E3(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     326:	89 30       	cpi	r24, 0x09	; 9
     328:	49 f4       	brne	.+18     	; 0x33c <PWM_Init_timer3_E3+0x16>
	{	// 9bit mode
		sbi(TCCR3A,PWM11);
     32a:	80 91 90 00 	lds	r24, 0x0090
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	80 93 90 00 	sts	0x0090, r24
		cbi(TCCR3A,PWM10);
     334:	80 91 90 00 	lds	r24, 0x0090
     338:	8e 7f       	andi	r24, 0xFE	; 254
     33a:	0e c0       	rjmp	.+28     	; 0x358 <PWM_Init_timer3_E3+0x32>
	}
	else if( bitRes == 10 )
     33c:	8a 30       	cpi	r24, 0x0A	; 10
     33e:	21 f4       	brne	.+8      	; 0x348 <PWM_Init_timer3_E3+0x22>
	{	// 10bit mode
		sbi(TCCR3A,PWM11);
     340:	80 91 90 00 	lds	r24, 0x0090
     344:	82 60       	ori	r24, 0x02	; 2
     346:	03 c0       	rjmp	.+6      	; 0x34e <PWM_Init_timer3_E3+0x28>
		sbi(TCCR3A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3A,PWM11);
     348:	80 91 90 00 	lds	r24, 0x0090
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	80 93 90 00 	sts	0x0090, r24
		sbi(TCCR3A,PWM10);
     352:	80 91 90 00 	lds	r24, 0x0090
     356:	81 60       	ori	r24, 0x01	; 1
     358:	80 93 90 00 	sts	0x0090, r24
	}
	// clear output compare values
	OCR3A = 0;
     35c:	10 92 99 00 	sts	0x0099, r1
     360:	10 92 98 00 	sts	0x0098, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     364:	08 95       	ret

00000366 <PWM_Init_timer3_E4>:
//pin E4
void PWM_Init_timer3_E4(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     366:	89 30       	cpi	r24, 0x09	; 9
     368:	49 f4       	brne	.+18     	; 0x37c <PWM_Init_timer3_E4+0x16>
	{	// 9bit mode
		sbi(TCCR3B,PWM11);
     36a:	80 91 91 00 	lds	r24, 0x0091
     36e:	82 60       	ori	r24, 0x02	; 2
     370:	80 93 91 00 	sts	0x0091, r24
		cbi(TCCR3B,PWM10);
     374:	80 91 91 00 	lds	r24, 0x0091
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	0e c0       	rjmp	.+28     	; 0x398 <PWM_Init_timer3_E4+0x32>
	}
	else if( bitRes == 10 )
     37c:	8a 30       	cpi	r24, 0x0A	; 10
     37e:	21 f4       	brne	.+8      	; 0x388 <PWM_Init_timer3_E4+0x22>
	{	// 10bit mode
		sbi(TCCR3B,PWM11);
     380:	80 91 91 00 	lds	r24, 0x0091
     384:	82 60       	ori	r24, 0x02	; 2
     386:	03 c0       	rjmp	.+6      	; 0x38e <PWM_Init_timer3_E4+0x28>
		sbi(TCCR3B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3B,PWM11);
     388:	80 91 91 00 	lds	r24, 0x0091
     38c:	8d 7f       	andi	r24, 0xFD	; 253
     38e:	80 93 91 00 	sts	0x0091, r24
		sbi(TCCR3B,PWM10);
     392:	80 91 91 00 	lds	r24, 0x0091
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 93 91 00 	sts	0x0091, r24
	}
	// clear output compare values
	OCR3B = 0;
     39c:	10 92 9b 00 	sts	0x009B, r1
     3a0:	10 92 9a 00 	sts	0x009A, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3a4:	08 95       	ret

000003a6 <PWM_Init_timer3_E5>:
//pin E5
void PWM_Init_timer3_E5(u08 bitRes)
{
	// enable timer3 as 8,9,10bit PWM
	if(bitRes == 9)
     3a6:	89 30       	cpi	r24, 0x09	; 9
     3a8:	49 f4       	brne	.+18     	; 0x3bc <PWM_Init_timer3_E5+0x16>
	{	// 9bit mode
		sbi(TCCR3C,PWM11);
     3aa:	80 91 92 00 	lds	r24, 0x0092
     3ae:	82 60       	ori	r24, 0x02	; 2
     3b0:	80 93 92 00 	sts	0x0092, r24
		cbi(TCCR3C,PWM10);
     3b4:	80 91 92 00 	lds	r24, 0x0092
     3b8:	8e 7f       	andi	r24, 0xFE	; 254
     3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <PWM_Init_timer3_E5+0x32>
	}
	else if( bitRes == 10 )
     3bc:	8a 30       	cpi	r24, 0x0A	; 10
     3be:	21 f4       	brne	.+8      	; 0x3c8 <PWM_Init_timer3_E5+0x22>
	{	// 10bit mode
		sbi(TCCR3C,PWM11);
     3c0:	80 91 92 00 	lds	r24, 0x0092
     3c4:	82 60       	ori	r24, 0x02	; 2
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <PWM_Init_timer3_E5+0x28>
		sbi(TCCR3C,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR3C,PWM11);
     3c8:	80 91 92 00 	lds	r24, 0x0092
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	80 93 92 00 	sts	0x0092, r24
		sbi(TCCR3C,PWM10);
     3d2:	80 91 92 00 	lds	r24, 0x0092
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	80 93 92 00 	sts	0x0092, r24
	}
	// clear output compare values
	OCR3C = 0;
     3dc:	10 92 9d 00 	sts	0x009D, r1
     3e0:	10 92 9c 00 	sts	0x009C, r1
	//timer3PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     3e4:	08 95       	ret

000003e6 <PWM_Init_timer4_H3>:
//pin H3, timer4
void PWM_Init_timer4_H3(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     3e6:	89 30       	cpi	r24, 0x09	; 9
     3e8:	49 f4       	brne	.+18     	; 0x3fc <PWM_Init_timer4_H3+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     3ea:	80 91 a0 00 	lds	r24, 0x00A0
     3ee:	82 60       	ori	r24, 0x02	; 2
     3f0:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     3f4:	80 91 a0 00 	lds	r24, 0x00A0
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <PWM_Init_timer4_H3+0x32>
	}
	else if( bitRes == 10 )
     3fc:	8a 30       	cpi	r24, 0x0A	; 10
     3fe:	21 f4       	brne	.+8      	; 0x408 <PWM_Init_timer4_H3+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     400:	80 91 a0 00 	lds	r24, 0x00A0
     404:	82 60       	ori	r24, 0x02	; 2
     406:	03 c0       	rjmp	.+6      	; 0x40e <PWM_Init_timer4_H3+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     408:	80 91 a0 00 	lds	r24, 0x00A0
     40c:	8d 7f       	andi	r24, 0xFD	; 253
     40e:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     412:	80 91 a0 00 	lds	r24, 0x00A0
     416:	81 60       	ori	r24, 0x01	; 1
     418:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4A = 0;
     41c:	10 92 a9 00 	sts	0x00A9, r1
     420:	10 92 a8 00 	sts	0x00A8, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     424:	08 95       	ret

00000426 <PWM_Init_timer4_H4>:
//pin H4, timer4
void PWM_Init_timer4_H4(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     426:	89 30       	cpi	r24, 0x09	; 9
     428:	49 f4       	brne	.+18     	; 0x43c <PWM_Init_timer4_H4+0x16>
	{	// 9bit mode
		sbi(TCCR4B,PWM11);
     42a:	80 91 a1 00 	lds	r24, 0x00A1
     42e:	82 60       	ori	r24, 0x02	; 2
     430:	80 93 a1 00 	sts	0x00A1, r24
		cbi(TCCR4B,PWM10);
     434:	80 91 a1 00 	lds	r24, 0x00A1
     438:	8e 7f       	andi	r24, 0xFE	; 254
     43a:	0e c0       	rjmp	.+28     	; 0x458 <PWM_Init_timer4_H4+0x32>
	}
	else if( bitRes == 10 )
     43c:	8a 30       	cpi	r24, 0x0A	; 10
     43e:	21 f4       	brne	.+8      	; 0x448 <PWM_Init_timer4_H4+0x22>
	{	// 10bit mode
		sbi(TCCR4B,PWM11);
     440:	80 91 a1 00 	lds	r24, 0x00A1
     444:	82 60       	ori	r24, 0x02	; 2
     446:	03 c0       	rjmp	.+6      	; 0x44e <PWM_Init_timer4_H4+0x28>
		sbi(TCCR4B,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4B,PWM11);
     448:	80 91 a1 00 	lds	r24, 0x00A1
     44c:	8d 7f       	andi	r24, 0xFD	; 253
     44e:	80 93 a1 00 	sts	0x00A1, r24
		sbi(TCCR4B,PWM10);
     452:	80 91 a1 00 	lds	r24, 0x00A1
     456:	81 60       	ori	r24, 0x01	; 1
     458:	80 93 a1 00 	sts	0x00A1, r24
	}
	// clear output compare values
	OCR4B = 0;
     45c:	10 92 ab 00 	sts	0x00AB, r1
     460:	10 92 aa 00 	sts	0x00AA, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     464:	08 95       	ret

00000466 <PWM_Init_timer4_H5>:
//pin H5, timer4
void PWM_Init_timer4_H5(u08 bitRes)
{
	// enable timer4 as 8,9,10bit PWM
	if(bitRes == 9)
     466:	89 30       	cpi	r24, 0x09	; 9
     468:	49 f4       	brne	.+18     	; 0x47c <PWM_Init_timer4_H5+0x16>
	{	// 9bit mode
		sbi(TCCR4A,PWM11);
     46a:	80 91 a0 00 	lds	r24, 0x00A0
     46e:	82 60       	ori	r24, 0x02	; 2
     470:	80 93 a0 00 	sts	0x00A0, r24
		cbi(TCCR4A,PWM10);
     474:	80 91 a0 00 	lds	r24, 0x00A0
     478:	8e 7f       	andi	r24, 0xFE	; 254
     47a:	0e c0       	rjmp	.+28     	; 0x498 <PWM_Init_timer4_H5+0x32>
	}
	else if( bitRes == 10 )
     47c:	8a 30       	cpi	r24, 0x0A	; 10
     47e:	21 f4       	brne	.+8      	; 0x488 <PWM_Init_timer4_H5+0x22>
	{	// 10bit mode
		sbi(TCCR4A,PWM11);
     480:	80 91 a0 00 	lds	r24, 0x00A0
     484:	82 60       	ori	r24, 0x02	; 2
     486:	03 c0       	rjmp	.+6      	; 0x48e <PWM_Init_timer4_H5+0x28>
		sbi(TCCR4A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR4A,PWM11);
     488:	80 91 a0 00 	lds	r24, 0x00A0
     48c:	8d 7f       	andi	r24, 0xFD	; 253
     48e:	80 93 a0 00 	sts	0x00A0, r24
		sbi(TCCR4A,PWM10);
     492:	80 91 a0 00 	lds	r24, 0x00A0
     496:	81 60       	ori	r24, 0x01	; 1
     498:	80 93 a0 00 	sts	0x00A0, r24
	}
	// clear output compare values
	OCR4C = 0;
     49c:	10 92 ad 00 	sts	0x00AD, r1
     4a0:	10 92 ac 00 	sts	0x00AC, r1
	//timer4PWMInitICR(20000);// 20mS PWM cycle time for RC servos
}
     4a4:	08 95       	ret

000004a6 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
     4a6:	e0 e8       	ldi	r30, 0x80	; 128
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	20 81       	ld	r18, Z
     4ac:	2e 7f       	andi	r18, 0xFE	; 254
     4ae:	20 83       	st	Z, r18
	sbi(TCCR1A,WGM11);
     4b0:	20 81       	ld	r18, Z
     4b2:	22 60       	ori	r18, 0x02	; 2
     4b4:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM12);
     4b6:	e1 e8       	ldi	r30, 0x81	; 129
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	20 81       	ld	r18, Z
     4bc:	28 60       	ori	r18, 0x08	; 8
     4be:	20 83       	st	Z, r18
	sbi(TCCR1B,WGM13);
     4c0:	20 81       	ld	r18, Z
     4c2:	20 61       	ori	r18, 0x10	; 16
     4c4:	20 83       	st	Z, r18
	
	// set top count value
	ICR1 = topcount;
     4c6:	90 93 87 00 	sts	0x0087, r25
     4ca:	80 93 86 00 	sts	0x0086, r24
	
	// clear output compare values
	OCR1A = 0;
     4ce:	10 92 89 00 	sts	0x0089, r1
     4d2:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     4d6:	10 92 8b 00 	sts	0x008B, r1
     4da:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
     4de:	10 92 8d 00 	sts	0x008D, r1
     4e2:	10 92 8c 00 	sts	0x008C, r1
}
     4e6:	08 95       	ret

000004e8 <timer3PWMInitICR>:
void timer3PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR3A,WGM10);
     4e8:	e0 e9       	ldi	r30, 0x90	; 144
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	20 81       	ld	r18, Z
     4ee:	2e 7f       	andi	r18, 0xFE	; 254
     4f0:	20 83       	st	Z, r18
	sbi(TCCR3A,WGM11);
     4f2:	20 81       	ld	r18, Z
     4f4:	22 60       	ori	r18, 0x02	; 2
     4f6:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM12);
     4f8:	e1 e9       	ldi	r30, 0x91	; 145
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	20 81       	ld	r18, Z
     4fe:	28 60       	ori	r18, 0x08	; 8
     500:	20 83       	st	Z, r18
	sbi(TCCR3B,WGM13);
     502:	20 81       	ld	r18, Z
     504:	20 61       	ori	r18, 0x10	; 16
     506:	20 83       	st	Z, r18
	
	// set top count value
	ICR3 = topcount;
     508:	90 93 97 00 	sts	0x0097, r25
     50c:	80 93 96 00 	sts	0x0096, r24
	
	// clear output compare values
	OCR3A = 0;
     510:	10 92 99 00 	sts	0x0099, r1
     514:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
     518:	10 92 9b 00 	sts	0x009B, r1
     51c:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
     520:	10 92 9d 00 	sts	0x009D, r1
     524:	10 92 9c 00 	sts	0x009C, r1
}
     528:	08 95       	ret

0000052a <timer4PWMInitICR>:
void timer4PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR4A,WGM10);
     52a:	e0 ea       	ldi	r30, 0xA0	; 160
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	20 81       	ld	r18, Z
     530:	2e 7f       	andi	r18, 0xFE	; 254
     532:	20 83       	st	Z, r18
	sbi(TCCR4A,WGM11);
     534:	20 81       	ld	r18, Z
     536:	22 60       	ori	r18, 0x02	; 2
     538:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM12);
     53a:	e1 ea       	ldi	r30, 0xA1	; 161
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	20 81       	ld	r18, Z
     540:	28 60       	ori	r18, 0x08	; 8
     542:	20 83       	st	Z, r18
	sbi(TCCR4B,WGM13);
     544:	20 81       	ld	r18, Z
     546:	20 61       	ori	r18, 0x10	; 16
     548:	20 83       	st	Z, r18
	
	// set top count value
	ICR4 = topcount;
     54a:	90 93 a7 00 	sts	0x00A7, r25
     54e:	80 93 a6 00 	sts	0x00A6, r24
	
	// clear output compare values
	OCR4A = 0;
     552:	10 92 a9 00 	sts	0x00A9, r1
     556:	10 92 a8 00 	sts	0x00A8, r1
	OCR4B = 0;
     55a:	10 92 ab 00 	sts	0x00AB, r1
     55e:	10 92 aa 00 	sts	0x00AA, r1
	OCR4C = 0;
     562:	10 92 ad 00 	sts	0x00AD, r1
     566:	10 92 ac 00 	sts	0x00AC, r1
}
     56a:	08 95       	ret

0000056c <PWM_timer1_On_LED>:
#endif

//on commands
void PWM_timer1_On_LED(void)
{
	sbi(TCCR1A,COM1B1);
     56c:	e0 e8       	ldi	r30, 0x80	; 128
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	80 62       	ori	r24, 0x20	; 32
     574:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     576:	80 81       	ld	r24, Z
     578:	8f 7e       	andi	r24, 0xEF	; 239
     57a:	80 83       	st	Z, r24
}
     57c:	08 95       	ret

0000057e <PWM_timer2_On_H6>:
void PWM_timer2_On_H6(void)
{
	sbi(TCCR2A,COM2B1);
     57e:	e0 eb       	ldi	r30, 0xB0	; 176
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	80 62       	ori	r24, 0x20	; 32
     586:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     588:	80 81       	ld	r24, Z
     58a:	8f 7e       	andi	r24, 0xEF	; 239
     58c:	80 83       	st	Z, r24
}
     58e:	08 95       	ret

00000590 <PWM_timer3_On_E3>:
void PWM_timer3_On_E3(void)
{
	sbi(TCCR3A,COM3A1);
     590:	e0 e9       	ldi	r30, 0x90	; 144
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	80 68       	ori	r24, 0x80	; 128
     598:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     59a:	80 81       	ld	r24, Z
     59c:	8f 7b       	andi	r24, 0xBF	; 191
     59e:	80 83       	st	Z, r24
}
     5a0:	08 95       	ret

000005a2 <PWM_timer3_On_E4>:
void PWM_timer3_On_E4(void)
{
	sbi(TCCR3A,COM3B1);
     5a2:	e0 e9       	ldi	r30, 0x90	; 144
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	80 62       	ori	r24, 0x20	; 32
     5aa:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     5ac:	80 81       	ld	r24, Z
     5ae:	8f 7e       	andi	r24, 0xEF	; 239
     5b0:	80 83       	st	Z, r24
}
     5b2:	08 95       	ret

000005b4 <PWM_timer3_On_E5>:
void PWM_timer3_On_E5(void)
{
	sbi(TCCR3A,COM3C1);
     5b4:	e0 e9       	ldi	r30, 0x90	; 144
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 60       	ori	r24, 0x08	; 8
     5bc:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     5be:	80 81       	ld	r24, Z
     5c0:	8b 7f       	andi	r24, 0xFB	; 251
     5c2:	80 83       	st	Z, r24
}
     5c4:	08 95       	ret

000005c6 <PWM_timer4_On_H3>:
void PWM_timer4_On_H3(void)
{
	sbi(TCCR4A,COM4A1);
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	80 68       	ori	r24, 0x80	; 128
     5ce:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     5d0:	80 81       	ld	r24, Z
     5d2:	8f 7b       	andi	r24, 0xBF	; 191
     5d4:	80 83       	st	Z, r24
}
     5d6:	08 95       	ret

000005d8 <PWM_timer4_On_H4>:
void PWM_timer4_On_H4(void)
{
	sbi(TCCR4A,COM4B1);
     5d8:	e0 ea       	ldi	r30, 0xA0	; 160
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	80 62       	ori	r24, 0x20	; 32
     5e0:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 7e       	andi	r24, 0xEF	; 239
     5e6:	80 83       	st	Z, r24
}
     5e8:	08 95       	ret

000005ea <PWM_timer4_On_H5>:
void PWM_timer4_On_H5(void)
{
	sbi(TCCR4A,COM4C1);
     5ea:	e0 ea       	ldi	r30, 0xA0	; 160
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	88 60       	ori	r24, 0x08	; 8
     5f2:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     5f4:	80 81       	ld	r24, Z
     5f6:	8b 7f       	andi	r24, 0xFB	; 251
     5f8:	80 83       	st	Z, r24
}
     5fa:	08 95       	ret

000005fc <PWM_timer1_Off_LED>:

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     5fc:	e0 e8       	ldi	r30, 0x80	; 128
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	8f 7d       	andi	r24, 0xDF	; 223
     604:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     606:	80 81       	ld	r24, Z
     608:	8f 7e       	andi	r24, 0xEF	; 239
     60a:	80 83       	st	Z, r24
}
     60c:	08 95       	ret

0000060e <PWM_timer2_Off_H6>:
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     60e:	e0 eb       	ldi	r30, 0xB0	; 176
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	8f 7d       	andi	r24, 0xDF	; 223
     616:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     618:	80 81       	ld	r24, Z
     61a:	8f 7e       	andi	r24, 0xEF	; 239
     61c:	80 83       	st	Z, r24
}
     61e:	08 95       	ret

00000620 <PWM_timer3_Off_E3>:
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     620:	e0 e9       	ldi	r30, 0x90	; 144
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	8f 77       	andi	r24, 0x7F	; 127
     628:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     62a:	80 81       	ld	r24, Z
     62c:	8f 7b       	andi	r24, 0xBF	; 191
     62e:	80 83       	st	Z, r24
}
     630:	08 95       	ret

00000632 <PWM_timer3_Off_E4>:
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     632:	e0 e9       	ldi	r30, 0x90	; 144
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	8f 7d       	andi	r24, 0xDF	; 223
     63a:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     63c:	80 81       	ld	r24, Z
     63e:	8f 7e       	andi	r24, 0xEF	; 239
     640:	80 83       	st	Z, r24
}
     642:	08 95       	ret

00000644 <PWM_timer3_Off_E5>:
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     644:	e0 e9       	ldi	r30, 0x90	; 144
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	87 7f       	andi	r24, 0xF7	; 247
     64c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     64e:	80 81       	ld	r24, Z
     650:	8b 7f       	andi	r24, 0xFB	; 251
     652:	80 83       	st	Z, r24
}
     654:	08 95       	ret

00000656 <PWM_timer4_Off_H3>:
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8f 77       	andi	r24, 0x7F	; 127
     65e:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     660:	80 81       	ld	r24, Z
     662:	8f 7b       	andi	r24, 0xBF	; 191
     664:	80 83       	st	Z, r24
}
     666:	08 95       	ret

00000668 <PWM_timer4_Off_H4>:
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     668:	e0 ea       	ldi	r30, 0xA0	; 160
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	8f 7d       	andi	r24, 0xDF	; 223
     670:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     672:	80 81       	ld	r24, Z
     674:	8f 7e       	andi	r24, 0xEF	; 239
     676:	80 83       	st	Z, r24
}
     678:	08 95       	ret

0000067a <PWM_timer4_Off_H5>:
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     67a:	e0 ea       	ldi	r30, 0xA0	; 160
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	87 7f       	andi	r24, 0xF7	; 247
     682:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     684:	80 81       	ld	r24, Z
     686:	8b 7f       	andi	r24, 0xFB	; 251
     688:	80 83       	st	Z, r24
}
     68a:	08 95       	ret

0000068c <PWM_timer1_Off_All>:


void PWM_timer1_Off_All(void)
{
	cbi(TCCR1A,PWM11);
     68c:	e0 e8       	ldi	r30, 0x80	; 128
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8d 7f       	andi	r24, 0xFD	; 253
     694:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
     696:	80 81       	ld	r24, Z
     698:	8e 7f       	andi	r24, 0xFE	; 254
     69a:	80 83       	st	Z, r24
}

//off commands
void PWM_timer1_Off_LED(void)
{
	cbi(TCCR1A,COM1B1);
     69c:	80 81       	ld	r24, Z
     69e:	8f 7d       	andi	r24, 0xDF	; 223
     6a0:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
     6a2:	80 81       	ld	r24, Z
     6a4:	8f 7e       	andi	r24, 0xEF	; 239
     6a6:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	//timer2PWMAOff();
	PWM_timer1_Off_LED();
	//timer2PWMCOff();
}
     6a8:	08 95       	ret

000006aa <PWM_timer2_Off_All>:
void PWM_timer2_Off_All(void)
{
	cbi(TCCR2A,PWM11);
     6aa:	e0 eb       	ldi	r30, 0xB0	; 176
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	8d 7f       	andi	r24, 0xFD	; 253
     6b2:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM10);
     6b4:	80 81       	ld	r24, Z
     6b6:	8e 7f       	andi	r24, 0xFE	; 254
     6b8:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B1);
	cbi(TCCR1A,COM1B0);
}
void PWM_timer2_Off_H6(void)
{
	cbi(TCCR2A,COM2B1);
     6ba:	80 81       	ld	r24, Z
     6bc:	8f 7d       	andi	r24, 0xDF	; 223
     6be:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B0);
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	80 83       	st	Z, r24
	cbi(TCCR2A,PWM11);
	cbi(TCCR2A,PWM10);
	//timer2PWMAOff();
	PWM_timer2_Off_H6();
	//timer2PWMCOff();
}
     6c6:	08 95       	ret

000006c8 <PWM_timer3_Off_All>:
void PWM_timer3_Off_All(void)
{
	cbi(TCCR3A,PWM11);
     6c8:	e0 e9       	ldi	r30, 0x90	; 144
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	8d 7f       	andi	r24, 0xFD	; 253
     6d0:	80 83       	st	Z, r24
	cbi(TCCR3A,PWM10);
     6d2:	80 81       	ld	r24, Z
     6d4:	8e 7f       	andi	r24, 0xFE	; 254
     6d6:	80 83       	st	Z, r24
	cbi(TCCR2A,COM2B1);
	cbi(TCCR2A,COM2B0);
}
void PWM_timer3_Off_E3(void)
{
	cbi(TCCR3A,COM3A1);
     6d8:	80 81       	ld	r24, Z
     6da:	8f 77       	andi	r24, 0x7F	; 127
     6dc:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3A0);
     6de:	80 81       	ld	r24, Z
     6e0:	8f 7b       	andi	r24, 0xBF	; 191
     6e2:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E4(void)
{
	cbi(TCCR3A,COM3B1);
     6e4:	80 81       	ld	r24, Z
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3B0);
     6ea:	80 81       	ld	r24, Z
     6ec:	8f 7e       	andi	r24, 0xEF	; 239
     6ee:	80 83       	st	Z, r24
}
void PWM_timer3_Off_E5(void)
{
	cbi(TCCR3A,COM3C1);
     6f0:	80 81       	ld	r24, Z
     6f2:	87 7f       	andi	r24, 0xF7	; 247
     6f4:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C0);
     6f6:	80 81       	ld	r24, Z
     6f8:	8b 7f       	andi	r24, 0xFB	; 251
     6fa:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer3_Off_E3();
	PWM_timer3_Off_E4();
	PWM_timer3_Off_E5();
	//timer2PWMCOff();
}
     6fc:	08 95       	ret

000006fe <PWM_timer4_Off_All>:
void PWM_timer4_Off_All(void)
{
	cbi(TCCR4A,PWM11);
     6fe:	e0 ea       	ldi	r30, 0xA0	; 160
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	8d 7f       	andi	r24, 0xFD	; 253
     706:	80 83       	st	Z, r24
	cbi(TCCR4A,PWM10);
     708:	80 81       	ld	r24, Z
     70a:	8e 7f       	andi	r24, 0xFE	; 254
     70c:	80 83       	st	Z, r24
	cbi(TCCR3A,COM3C1);
	cbi(TCCR3A,COM3C0);
}
void PWM_timer4_Off_H3(void)
{
	cbi(TCCR4A,COM4A1);
     70e:	80 81       	ld	r24, Z
     710:	8f 77       	andi	r24, 0x7F	; 127
     712:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4A0);
     714:	80 81       	ld	r24, Z
     716:	8f 7b       	andi	r24, 0xBF	; 191
     718:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H4(void)
{
	cbi(TCCR4A,COM4B1);
     71a:	80 81       	ld	r24, Z
     71c:	8f 7d       	andi	r24, 0xDF	; 223
     71e:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4B0);
     720:	80 81       	ld	r24, Z
     722:	8f 7e       	andi	r24, 0xEF	; 239
     724:	80 83       	st	Z, r24
}
void PWM_timer4_Off_H5(void)
{
	cbi(TCCR4A,COM4C1);
     726:	80 81       	ld	r24, Z
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	80 83       	st	Z, r24
	cbi(TCCR4A,COM4C0);
     72c:	80 81       	ld	r24, Z
     72e:	8b 7f       	andi	r24, 0xFB	; 251
     730:	80 83       	st	Z, r24
	//timer2PWMAOff();
	PWM_timer4_Off_H3();
	PWM_timer4_Off_H4();
	PWM_timer4_Off_H5();
	//timer2PWMCOff();
}
     732:	08 95       	ret

00000734 <PWM_timer1_Set_LED>:
// this PWM output is generated on OC2B pin
// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
//			pwmDuty should be in the range 0-511 for 9bit PWM
//			pwmDuty should be in the range 0-1023 for 10bit PWM
void PWM_timer1_Set_LED(u16 pwmDuty)
	{OCR1B = pwmDuty;}
     734:	90 93 8b 00 	sts	0x008B, r25
     738:	80 93 8a 00 	sts	0x008A, r24
     73c:	08 95       	ret

0000073e <PWM_timer2_Set_H6>:
void PWM_timer2_Set_H6(u16 pwmDuty)
	{OCR2B = pwmDuty;}
     73e:	80 93 b4 00 	sts	0x00B4, r24
     742:	08 95       	ret

00000744 <PWM_timer3_Set_E3>:
void PWM_timer3_Set_E3(u16 pwmDuty)
	{OCR3A = pwmDuty;}
     744:	90 93 99 00 	sts	0x0099, r25
     748:	80 93 98 00 	sts	0x0098, r24
     74c:	08 95       	ret

0000074e <PWM_timer3_Set_E4>:
void PWM_timer3_Set_E4(u16 pwmDuty)
	{OCR3B = pwmDuty;}
     74e:	90 93 9b 00 	sts	0x009B, r25
     752:	80 93 9a 00 	sts	0x009A, r24
     756:	08 95       	ret

00000758 <PWM_timer3_Set_E5>:
void PWM_timer3_Set_E5(u16 pwmDuty)
	{OCR3C = pwmDuty;}
     758:	90 93 9d 00 	sts	0x009D, r25
     75c:	80 93 9c 00 	sts	0x009C, r24
     760:	08 95       	ret

00000762 <PWM_timer4_Set_H3>:
void PWM_timer4_Set_H3(u16 pwmDuty)
	{OCR4A = pwmDuty;}
     762:	90 93 a9 00 	sts	0x00A9, r25
     766:	80 93 a8 00 	sts	0x00A8, r24
     76a:	08 95       	ret

0000076c <PWM_timer4_Set_H4>:
void PWM_timer4_Set_H4(u16 pwmDuty)
	{OCR4B = pwmDuty;}
     76c:	90 93 ab 00 	sts	0x00AB, r25
     770:	80 93 aa 00 	sts	0x00AA, r24
     774:	08 95       	ret

00000776 <PWM_timer4_Set_H5>:
void PWM_timer4_Set_H5(u16 pwmDuty)
	{OCR4C = pwmDuty;}
     776:	90 93 ad 00 	sts	0x00AD, r25
     77a:	80 93 ac 00 	sts	0x00AC, r24
     77e:	08 95       	ret

00000780 <configure_ports>:
	//cbi(DDRG, PG5);  //set G5 as input pin

	//ANALOG PORTS
	//useful for sensors, SharpIR, photoresistors, etc.
	//analog ports can be configured as digital ports if desired
	DDRF = 0b00000000;  //configure all F ports for input				0x00
     780:	10 ba       	out	0x10, r1	; 16
	PORTF = 0b00000000; //make sure pull-up resistors are turned off	0x00
     782:	11 ba       	out	0x11, r1	; 17
	DDRK = 0b00000000;  //configure all K ports for input				0x00
     784:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0b00000000; //make sure pull-up resistors are turned off	0x00
     788:	10 92 08 01 	sts	0x0108, r1

	//DIGITAL PORTS
	//useful for servos, PWM, LED's, UART, interrupts, timers
	DDRA = 0b11111111;  //configure ports for output
     78c:	9f ef       	ldi	r25, 0xFF	; 255
     78e:	91 b9       	out	0x01, r25	; 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTB reserved for programmer (use programmer pins if you know what you are doing)
	DDRB = _BV (PB6);	//PB6 is LED, hold low to turn it on
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;  //configure ports for output
     794:	97 b9       	out	0x07, r25	; 7
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 	
	sbi(PORTD, PD0); // SCL pull-up
     796:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, PD1); // SDA pull-up
     798:	59 9a       	sbi	0x0b, 1	; 11
	DDRD = 0b11110011;  //configure ports for output
     79a:	83 ef       	ldi	r24, 0xF3	; 243
     79c:	8a b9       	out	0x0a, r24	; 10
	//       ||||\______3: serial TXD1, output -> 1
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: timer0
	DDRE = 0b11111110;  //configure ports for output
     79e:	8e ef       	ldi	r24, 0xFE	; 254
     7a0:	8d b9       	out	0x0d, r24	; 13
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//cbi(PORTG, PG5);  // disable pull-up resistor for Axon v1e and earlier
	sbi(PORTG, PG5);  // enable pull-up resistor for v1f and later
     7a2:	a5 9a       	sbi	0x14, 5	; 20
	cbi(DDRG, PG5);	//PG5 is for the button, make a digital input
     7a4:	9d 98       	cbi	0x13, 5	; 19
	//note that button actions are inverted between both versions!!!
	DDRH = 0b11111110;  //configure ports for output
     7a6:	80 93 01 01 	sts	0x0101, r24
	//       ||||\______3: 
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	DDRJ = 0b11111110;  //configure ports for output
     7aa:	80 93 04 01 	sts	0x0104, r24
	//       |||\_______4: 
	//       ||\________5: 
	//       |\_________6: 
	//       \__________7: 
	//PORTL has no headers
	};
     7ae:	08 95       	ret

000007b0 <delay_cycles>:
void delay_cycles(unsigned long int cycles)
	{
	cycles=cycles;//doubled frequency but too lazy to change times
	while(cycles > 0)
		cycles--;
	}
     7b0:	08 95       	ret

000007b2 <LED_off>:


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     7b2:	2e 9a       	sbi	0x05, 6	; 5
     7b4:	08 95       	ret

000007b6 <LED_on>:
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     7b6:	2e 98       	cbi	0x05, 6	; 5
     7b8:	08 95       	ret

000007ba <button_pressed>:


//*****************BUTTON****************
int button_pressed(void)
	{
	return (bit_is_clear(PING, 5));
     7ba:	22 b3       	in	r18, 0x12	; 18
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	36 95       	lsr	r19
     7c2:	27 95       	ror	r18
     7c4:	8a 95       	dec	r24
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <button_pressed+0x6>
     7c8:	20 95       	com	r18
     7ca:	30 95       	com	r19
     7cc:	21 70       	andi	r18, 0x01	; 1
     7ce:	30 70       	andi	r19, 0x00	; 0
	//return ((PING) & (1<<PG5));//old version, went high when button pushed
	}
     7d0:	c9 01       	movw	r24, r18
     7d2:	08 95       	ret

000007d4 <cos_SoR>:
signed int angtable[73]={100,100,98,97,94,91,87,82,77,71,64,57,50,42,34,26,17,9,0,-9,-17,-26,-34,-42,-50,-57,-64,-71,-77,-82,-87,-91,-94,-97,-98,-100,
						 -100,-100,-98,-97,-94,-91,-87,-82,-77,-71,-64,-57,-50,-42,-34,-26,-17,-9,0,9,17,26,34,42,50,57,64,71,77,82,87,91,94,97,98,100,100};

signed int cos_SoR(long signed int degrees)//returns cos*100
	{
	if (degrees >= 0)//positive angles
     7d4:	97 fd       	sbrc	r25, 7
     7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <cos_SoR+0x24>
		return angtable[degrees/5];
     7d8:	25 e0       	ldi	r18, 0x05	; 5
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
     7e4:	da 01       	movw	r26, r20
     7e6:	c9 01       	movw	r24, r18
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	80 5c       	subi	r24, 0xC0	; 192
     7ee:	9d 4f       	sbci	r25, 0xFD	; 253
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 81       	ld	r18, Z
     7f4:	31 81       	ldd	r19, Z+1	; 0x01
     7f6:	17 c0       	rjmp	.+46     	; 0x826 <cos_SoR+0x52>
	else
		return -angtable[72-(-degrees)/5];
     7f8:	25 e0       	ldi	r18, 0x05	; 5
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
     804:	da 01       	movw	r26, r20
     806:	c9 01       	movw	r24, r18
     808:	88 5b       	subi	r24, 0xB8	; 184
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	af 4f       	sbci	r26, 0xFF	; 255
     80e:	bf 4f       	sbci	r27, 0xFF	; 255
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	80 5c       	subi	r24, 0xC0	; 192
     816:	9d 4f       	sbci	r25, 0xFD	; 253
     818:	fc 01       	movw	r30, r24
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	22 27       	eor	r18, r18
     820:	33 27       	eor	r19, r19
     822:	28 1b       	sub	r18, r24
     824:	39 0b       	sbc	r19, r25
	}
     826:	c9 01       	movw	r24, r18
     828:	08 95       	ret

0000082a <sin_SoR>:

signed int sin_SoR(long signed int degrees)//returns sin*100
	{
	degrees=degrees - 90;//phase shift 90 degrees
     82a:	6a 55       	subi	r22, 0x5A	; 90
     82c:	70 40       	sbci	r23, 0x00	; 0
     82e:	80 40       	sbci	r24, 0x00	; 0
     830:	90 40       	sbci	r25, 0x00	; 0

	if (degrees >= 0)//positive angles
     832:	97 fd       	sbrc	r25, 7
     834:	10 c0       	rjmp	.+32     	; 0x856 <sin_SoR+0x2c>
		return angtable[degrees/5];
     836:	25 e0       	ldi	r18, 0x05	; 5
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
     842:	da 01       	movw	r26, r20
     844:	c9 01       	movw	r24, r18
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	80 5c       	subi	r24, 0xC0	; 192
     84c:	9d 4f       	sbci	r25, 0xFD	; 253
     84e:	fc 01       	movw	r30, r24
     850:	20 81       	ld	r18, Z
     852:	31 81       	ldd	r19, Z+1	; 0x01
     854:	17 c0       	rjmp	.+46     	; 0x884 <sin_SoR+0x5a>
	else
		return -angtable[72-(-degrees)/5];
     856:	25 e0       	ldi	r18, 0x05	; 5
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
     862:	da 01       	movw	r26, r20
     864:	c9 01       	movw	r24, r18
     866:	88 5b       	subi	r24, 0xB8	; 184
     868:	9f 4f       	sbci	r25, 0xFF	; 255
     86a:	af 4f       	sbci	r26, 0xFF	; 255
     86c:	bf 4f       	sbci	r27, 0xFF	; 255
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	80 5c       	subi	r24, 0xC0	; 192
     874:	9d 4f       	sbci	r25, 0xFD	; 253
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	22 27       	eor	r18, r18
     87e:	33 27       	eor	r19, r19
     880:	28 1b       	sub	r18, r24
     882:	39 0b       	sbc	r19, r25
	}
     884:	c9 01       	movw	r24, r18
     886:	08 95       	ret

00000888 <tan_SoR>:

signed int tan_SoR(long signed int degrees)//returns tan * 10
	{
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
	//tan(x) = sin(x)/cos(x)
	if (degrees == 90 || degrees == -90 || degrees == 270 || degrees == -270)//blows up
     898:	8a e5       	ldi	r24, 0x5A	; 90
     89a:	c8 16       	cp	r12, r24
     89c:	d1 04       	cpc	r13, r1
     89e:	e1 04       	cpc	r14, r1
     8a0:	f1 04       	cpc	r15, r1
     8a2:	a1 f1       	breq	.+104    	; 0x90c <tan_SoR+0x84>
     8a4:	86 ea       	ldi	r24, 0xA6	; 166
     8a6:	c8 16       	cp	r12, r24
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	d8 06       	cpc	r13, r24
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	e8 06       	cpc	r14, r24
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	f8 06       	cpc	r15, r24
     8b4:	59 f1       	breq	.+86     	; 0x90c <tan_SoR+0x84>
     8b6:	8e e0       	ldi	r24, 0x0E	; 14
     8b8:	c8 16       	cp	r12, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	d8 06       	cpc	r13, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	e8 06       	cpc	r14, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	f8 06       	cpc	r15, r24
     8c6:	11 f1       	breq	.+68     	; 0x90c <tan_SoR+0x84>
     8c8:	82 ef       	ldi	r24, 0xF2	; 242
     8ca:	c8 16       	cp	r12, r24
     8cc:	8e ef       	ldi	r24, 0xFE	; 254
     8ce:	d8 06       	cpc	r13, r24
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	e8 06       	cpc	r14, r24
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	f8 06       	cpc	r15, r24
     8d8:	c9 f0       	breq	.+50     	; 0x90c <tan_SoR+0x84>
		return 0;//what else should I return?!?!?
	return sin_SoR(degrees)/cos_SoR(degrees)*10;
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 15 04 	call	0x82a	; 0x82a <sin_SoR>
     8e2:	8c 01       	movw	r16, r24
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <cos_SoR>
     8ec:	bc 01       	movw	r22, r24
     8ee:	c8 01       	movw	r24, r16
     8f0:	0e 94 15 23 	call	0x462a	; 0x462a <__divmodhi4>
     8f4:	cb 01       	movw	r24, r22
     8f6:	9b 01       	movw	r18, r22
     8f8:	73 e0       	ldi	r23, 0x03	; 3
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	7a 95       	dec	r23
     900:	e1 f7       	brne	.-8      	; 0x8fa <tan_SoR+0x72>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	28 0f       	add	r18, r24
     908:	39 1f       	adc	r19, r25
     90a:	02 c0       	rjmp	.+4      	; 0x910 <tan_SoR+0x88>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
	}
     910:	c9 01       	movw	r24, r18
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <lbRcv>:
//-----------------------------**&&**


void lbRcv(unsigned char c){
		
}
     920:	08 95       	ret

00000922 <send_frame>:

/*************************************************/



void send_frame(float velocity, float omega){
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	06 2f       	mov	r16, r22
     944:	f7 2e       	mov	r15, r23
     946:	e8 2e       	mov	r14, r24
     948:	d9 2e       	mov	r13, r25
     94a:	c2 2e       	mov	r12, r18
     94c:	b3 2e       	mov	r11, r19
     94e:	a4 2e       	mov	r10, r20
     950:	95 2e       	mov	r9, r21
//send data frame
	
	// Break the floats into 4 bytes
	union u_vel fltuint8_velocity;
	union u_ome fltuint8_omega;
	fltuint8_velocity.f_vel = velocity;
     952:	17 2f       	mov	r17, r23
	fltuint8_omega.f_ome = omega;
     954:	36 01       	movw	r6, r12
     956:	25 01       	movw	r4, r10
		
	// Send header
	uart0SendByte(0xFA);
     958:	8a ef       	ldi	r24, 0xFA	; 250
     95a:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	//rprintfu08(0xFA);

	// Send linear velocity
	uart0SendByte(fltuint8_velocity.arr_vel[0]);
     95e:	80 2f       	mov	r24, r16
     960:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[1]);
     964:	8f 2d       	mov	r24, r15
     966:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[2]);
     96a:	8e 2d       	mov	r24, r14
     96c:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_velocity.arr_vel[3]);
     970:	8d 2d       	mov	r24, r13
     972:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	//rprintfu08(fltuint8_velocity.arr_vel[1]);
	//rprintfu08(fltuint8_velocity.arr_vel[2]);
	//rprintfu08(fltuint8_velocity.arr_vel[3]);

	// Send angular velocity
	uart0SendByte(fltuint8_omega.arr_ome[0]);
     976:	8c 2d       	mov	r24, r12
     978:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[1]);
     97c:	8b 2d       	mov	r24, r11
     97e:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[2]);
     982:	8a 2d       	mov	r24, r10
     984:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	uart0SendByte(fltuint8_omega.arr_ome[3]);
     988:	89 2d       	mov	r24, r9
     98a:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	// Send checksum
	uint8_t chk = fltuint8_velocity.arr_vel[0] + fltuint8_velocity.arr_vel[1] + fltuint8_velocity.arr_vel[2]
	+ fltuint8_velocity.arr_vel[3] + fltuint8_omega.arr_ome[0] + fltuint8_omega.arr_ome[1] 
	+ fltuint8_omega.arr_ome[2] + fltuint8_omega.arr_ome[3];

	uart0SendByte(chk);
     98e:	10 0f       	add	r17, r16
     990:	1e 0d       	add	r17, r14
     992:	17 0d       	add	r17, r7
     994:	16 0d       	add	r17, r6
     996:	15 0d       	add	r17, r5
     998:	14 0d       	add	r17, r4
     99a:	81 2f       	mov	r24, r17
     99c:	89 0d       	add	r24, r9
     99e:	0e 94 8c 11 	call	0x2318	; 0x2318 <uart0SendByte>
	//rprintfu08(chk);
}
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	bf 90       	pop	r11
     9b0:	af 90       	pop	r10
     9b2:	9f 90       	pop	r9
     9b4:	8f 90       	pop	r8
     9b6:	7f 90       	pop	r7
     9b8:	6f 90       	pop	r6
     9ba:	5f 90       	pop	r5
     9bc:	4f 90       	pop	r4
     9be:	3f 90       	pop	r3
     9c0:	2f 90       	pop	r2
     9c2:	08 95       	ret

000009c4 <right_wall>:

void right_wall(uint16_t range[]){
     9c4:	4f 92       	push	r4
     9c6:	5f 92       	push	r5
     9c8:	6f 92       	push	r6
     9ca:	7f 92       	push	r7
     9cc:	8f 92       	push	r8
     9ce:	9f 92       	push	r9
     9d0:	af 92       	push	r10
     9d2:	bf 92       	push	r11
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	4c 01       	movw	r8, r24
     9e6:	ec 01       	movw	r28, r24
     9e8:	c4 53       	subi	r28, 0x34	; 52
     9ea:	df 4f       	sbci	r29, 0xFF	; 255
     9ec:	cc 24       	eor	r12, r12
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	0f 2f       	mov	r16, r31
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	1f 2f       	mov	r17, r31
     a00:	f0 2d       	mov	r31, r0
     a02:	dd 24       	eor	r13, r13
		uint8_t f_ndx = 358 + r_ndx;
		// Accomodate wrap around
		if(f_ndx > 359){
			f_ndx -= 360;
		}
		if(range[f_ndx] > MIN_RANGE){
     a04:	68 81       	ld	r22, Y
     a06:	79 81       	ldd	r23, Y+1	; 0x01
     a08:	67 39       	cpi	r22, 0x97	; 151
     a0a:	71 05       	cpc	r23, r1
     a0c:	68 f0       	brcs	.+26     	; 0xa28 <right_wall+0x64>
			f_rng_avg += (float)range[f_ndx];
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	c8 01       	movw	r24, r16
     a1c:	b7 01       	movw	r22, r14
     a1e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
     a22:	7b 01       	movw	r14, r22
     a24:	8c 01       	movw	r16, r24
			f_cntr++;
     a26:	c3 94       	inc	r12
	uint8_t r_cntr = 0;
	float f_rng_avg = 0;
	float r_rng_avg = 0;
	const MIN_RANGE = 150; // mm
	// Calculate the average of the front 5 valid beams
	for(uint8_t r_ndx = 0; r_ndx < 5; r_ndx++){
     a28:	d3 94       	inc	r13
     a2a:	22 96       	adiw	r28, 0x02	; 2
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	d8 16       	cp	r13, r24
     a30:	49 f7       	brne	.-46     	; 0xa04 <right_wall+0x40>
		if(range[f_ndx] > MIN_RANGE){
			f_rng_avg += (float)range[f_ndx];
			f_cntr++;
		}
	}
	if(f_cntr != 0){
     a32:	cc 20       	and	r12, r12
     a34:	71 f0       	breq	.+28     	; 0xa52 <right_wall+0x8e>
		f_rng_avg = f_rng_avg/(float)f_cntr;
     a36:	6c 2d       	mov	r22, r12
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c8 01       	movw	r24, r16
     a48:	b7 01       	movw	r22, r14
     a4a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     a4e:	7b 01       	movw	r14, r22
     a50:	8c 01       	movw	r16, r24
	}
//	rprintf("Front Range: ");
//	rprintfFloat(5, f_rng_avg);
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 30*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);
     a52:	c8 01       	movw	r24, r16
     a54:	b7 01       	movw	r22, r14
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	48 ec       	ldi	r20, 0xC8	; 200
     a5c:	52 e4       	ldi	r21, 0x42	; 66
     a5e:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 ea       	ldi	r20, 0xA0	; 160
     a68:	50 e4       	ldi	r21, 0x40	; 64
     a6a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e4       	ldi	r25, 0x40	; 64
     a7a:	0e 94 9c 21 	call	0x4338	; 0x4338 <pow>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ef       	ldi	r20, 0xF0	; 240
     a8c:	51 e4       	ldi	r21, 0x41	; 65
     a8e:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
     a92:	5b 01       	movw	r10, r22
     a94:	6c 01       	movw	r12, r24
     a96:	c8 01       	movw	r24, r16
     a98:	b7 01       	movw	r22, r14
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	50 e4       	ldi	r21, 0x40	; 64
     aa2:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	c6 01       	movw	r24, r12
     aac:	b5 01       	movw	r22, r10
     aae:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     ab2:	76 2e       	mov	r7, r22
     ab4:	67 2e       	mov	r6, r23
     ab6:	58 2e       	mov	r5, r24
     ab8:	49 2e       	mov	r4, r25
     aba:	e0 e7       	ldi	r30, 0x70	; 112
     abc:	ce 2e       	mov	r12, r30
     abe:	e2 e0       	ldi	r30, 0x02	; 2
     ac0:	de 2e       	mov	r13, r30
     ac2:	c8 0c       	add	r12, r8
     ac4:	d9 1c       	adc	r13, r9
     ac6:	aa 24       	eor	r10, r10
     ac8:	0f 2e       	mov	r0, r31
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ef 2e       	mov	r14, r31
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	ff 2e       	mov	r15, r31
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	0f 2f       	mov	r16, r31
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	1f 2f       	mov	r17, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	c8 e3       	ldi	r28, 0x38	; 56
     ade:	d1 e0       	ldi	r29, 0x01	; 1

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
		
		if(range[r_ndx] > MIN_RANGE){
     ae0:	f6 01       	movw	r30, r12
     ae2:	60 81       	ld	r22, Z
     ae4:	71 81       	ldd	r23, Z+1	; 0x01
     ae6:	67 39       	cpi	r22, 0x97	; 151
     ae8:	71 05       	cpc	r23, r1
     aea:	68 f0       	brcs	.+26     	; 0xb06 <right_wall+0x142>
			r_rng_avg += (float)range[r_ndx];
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c8 01       	movw	r24, r16
     afa:	b7 01       	movw	r22, r14
     afc:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
     b00:	7b 01       	movw	r14, r22
     b02:	8c 01       	movw	r16, r24
			r_cntr++;
     b04:	a3 94       	inc	r10
//	rprintfCRLF();
	// Produce a linear velocity using sigmoid
	lin_v = 30*pow(2.0,(f_rng_avg/100)-5)/(pow(2.0,(f_rng_avg/100)-5) + 4.0);

	// Calculate the average of the 5 right beams about -45 degrees
	for(uint16_t r_ndx = 312; r_ndx < 317; r_ndx++){
     b06:	21 96       	adiw	r28, 0x01	; 1
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	c8 0e       	add	r12, r24
     b0e:	d9 1e       	adc	r13, r25
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	cd 33       	cpi	r28, 0x3D	; 61
     b14:	d9 07       	cpc	r29, r25
     b16:	21 f7       	brne	.-56     	; 0xae0 <right_wall+0x11c>
		if(range[r_ndx] > MIN_RANGE){
			r_rng_avg += (float)range[r_ndx];
			r_cntr++;
		}
	}
	if(r_cntr != 0){
     b18:	aa 20       	and	r10, r10
     b1a:	71 f0       	breq	.+28     	; 0xb38 <right_wall+0x174>
		r_rng_avg = r_rng_avg/(float)r_cntr;
     b1c:	6a 2d       	mov	r22, r10
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c8 01       	movw	r24, r16
     b2e:	b7 01       	movw	r22, r14
     b30:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     b34:	7b 01       	movw	r14, r22
     b36:	8c 01       	movw	r16, r24
	}
//	rprintf("Right Range: ");
//	rprintfFloat(5, r_rng_avg);
//	rprintfCRLF();

	ang_v = -0.3*(r_rng_avg-230)/sqrt(1 + square(r_rng_avg-230));
     b38:	c8 01       	movw	r24, r16
     b3a:	b7 01       	movw	r22, r14
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	46 e6       	ldi	r20, 0x66	; 102
     b42:	53 e4       	ldi	r21, 0x43	; 67
     b44:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
     b48:	5b 01       	movw	r10, r22
     b4a:	6c 01       	movw	r12, r24
     b4c:	0e 94 3c 22 	call	0x4478	; 0x4478 <square>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e8       	ldi	r20, 0x80	; 128
     b56:	5f e3       	ldi	r21, 0x3F	; 63
     b58:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
     b5c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <sqrt>
     b60:	7b 01       	movw	r14, r22
     b62:	8c 01       	movw	r16, r24
     b64:	c6 01       	movw	r24, r12
     b66:	b5 01       	movw	r22, r10
     b68:	2a e9       	ldi	r18, 0x9A	; 154
     b6a:	39 e9       	ldi	r19, 0x99	; 153
     b6c:	49 e9       	ldi	r20, 0x99	; 153
     b6e:	5e eb       	ldi	r21, 0xBE	; 190
     b70:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
     b74:	a8 01       	movw	r20, r16
     b76:	97 01       	movw	r18, r14
     b78:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24

	send_frame((float)lin_v,(float)ang_v);
     b80:	27 2d       	mov	r18, r7
     b82:	36 2d       	mov	r19, r6
     b84:	45 2d       	mov	r20, r5
     b86:	54 2d       	mov	r21, r4
     b88:	b9 01       	movw	r22, r18
     b8a:	ca 01       	movw	r24, r20
     b8c:	97 01       	movw	r18, r14
     b8e:	a8 01       	movw	r20, r16
     b90:	0e 94 91 04 	call	0x922	; 0x922 <send_frame>
	rprintf("400, ");
     b94:	00 d0       	rcall	.+0      	; 0xb96 <right_wall+0x1d2>
     b96:	0f 92       	push	r0
     b98:	dd 24       	eor	r13, r13
     b9a:	d3 94       	inc	r13
     b9c:	ed b7       	in	r30, 0x3d	; 61
     b9e:	fe b7       	in	r31, 0x3e	; 62
     ba0:	d1 82       	std	Z+1, r13	; 0x01
     ba2:	80 ed       	ldi	r24, 0xD0	; 208
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	93 83       	std	Z+3, r25	; 0x03
     ba8:	82 83       	std	Z+2, r24	; 0x02
     baa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	rprintfFloat(5,ang_v);
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	85 e0       	ldi	r24, 0x05	; 5
     bb6:	4e 2d       	mov	r20, r14
     bb8:	5f 2d       	mov	r21, r15
     bba:	60 2f       	mov	r22, r16
     bbc:	71 2f       	mov	r23, r17
     bbe:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
	rprintfCRLF();
     bc2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <rprintfCRLF>
	rprintf("500, ");
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <right_wall+0x204>
     bc8:	0f 92       	push	r0
     bca:	ed b7       	in	r30, 0x3d	; 61
     bcc:	fe b7       	in	r31, 0x3e	; 62
     bce:	d1 82       	std	Z+1, r13	; 0x01
     bd0:	8a ec       	ldi	r24, 0xCA	; 202
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	93 83       	std	Z+3, r25	; 0x03
     bd6:	82 83       	std	Z+2, r24	; 0x02
     bd8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	rprintfFloat(5,lin_v);
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	47 2d       	mov	r20, r7
     be6:	56 2d       	mov	r21, r6
     be8:	65 2d       	mov	r22, r5
     bea:	74 2d       	mov	r23, r4
     bec:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
	rprintfCRLF();
     bf0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <rprintfCRLF>

}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	08 95       	ret

00000c16 <prvSetupHardware>:
}

  


void prvSetupHardware(){
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
	delay_cycles(65535);
	delay_cycles(65535);
	
	

	uartInit();  // initialize the UART (serial port)
     c1e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <uartInit>
    uartSetBaudRate(0, 34800); // LB
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	40 ef       	ldi	r20, 0xF0	; 240
     c26:	57 e8       	ldi	r21, 0x87	; 135
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
    uartSetBaudRate(1, 115200); // USB
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	52 ec       	ldi	r21, 0xC2	; 194
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
    uartSetBaudRate(2, 115200); // XBEE
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	52 ec       	ldi	r21, 0xC2	; 194
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
    uartSetBaudRate(3, 115200); // LDS
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	52 ec       	ldi	r21, 0xC2	; 194
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
	//G=Ground, T=Tx (connect to external Rx), R=Rx (connect to external Tx)

	rprintfInit(uart2SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf
     c5a:	86 e9       	ldi	r24, 0x96	; 150
     c5c:	91 e1       	ldi	r25, 0x11	; 17
     c5e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <rprintfInit>
	//rprintfInit(uart1SendByte);// initialize rprintf system and configure uart1 (USB) for rprintf

	configure_ports(); // configure which ports are analog, digital, etc.
     c62:	0e 94 c0 03 	call	0x780	; 0x780 <configure_ports>
	*/

	
	//UART ISR *** UART ISR ***
	
	uartSetRxHandler(0, &lbRcv);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	60 e9       	ldi	r22, 0x90	; 144
     c6a:	74 e0       	ldi	r23, 0x04	; 4
     c6c:	0e 94 0d 11 	call	0x221a	; 0x221a <uartSetRxHandler>
	uartSetRxHandler(3, &LDSRcv);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	68 e1       	ldi	r22, 0x18	; 24
     c74:	7b e1       	ldi	r23, 0x1B	; 27
     c76:	0e 94 0d 11 	call	0x221a	; 0x221a <uartSetRxHandler>
//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
void LED_on(void)
	{PORT_OFF(PORTB,6);}
     c7a:	2e 98       	cbi	0x05, 6	; 5

	//UART ISR *** UART ISR ***

	LED_on();

	rprintf("\r\nSystem Warmed Up");
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <prvSetupHardware+0x68>
     c7e:	0f 92       	push	r0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	ed b7       	in	r30, 0x3d	; 61
     c84:	fe b7       	in	r31, 0x3e	; 62
     c86:	81 83       	std	Z+1, r24	; 0x01
     c88:	83 ef       	ldi	r24, 0xF3	; 243
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	93 83       	std	Z+3, r25	; 0x03
     c8e:	82 83       	std	Z+2, r24	; 0x02
     c90:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>

	// initialize the timer system
 	init_timer0(TIMER_CLK_1024);
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	0e 94 24 0b 	call	0x1648	; 0x1648 <init_timer0>
 	init_timer1(TIMER_CLK_64); // Timer 1 is initialized by FreeRTOS
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	0e 94 32 0b 	call	0x1664	; 0x1664 <init_timer1>
 	//init_timer2(TIMER2_CLK_64);
	init_timer2(TIMER2_CLK_1024);
     ca6:	87 e0       	ldi	r24, 0x07	; 7
     ca8:	0e 94 44 0b 	call	0x1688	; 0x1688 <init_timer2>
 	init_timer3(TIMER_CLK_64);
     cac:	83 e0       	ldi	r24, 0x03	; 3
     cae:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <init_timer3>
 	init_timer4(TIMER_CLK_64);
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <init_timer4>
 	init_timer5(TIMER_CLK_64);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <init_timer5>

	a2dInit(); // initialize analog to digital converter (ADC)
     cbe:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <a2dSetReference>
     cce:	10 e0       	ldi	r17, 0x00	; 0
	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
     cd0:	01 e0       	ldi	r16, 0x01	; 1
     cd2:	c1 ef       	ldi	r28, 0xF1	; 241
     cd4:	d1 e0       	ldi	r29, 0x01	; 1
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
		{
		j=a2dConvert8bit(i);//read each ADC once to get it working accurately
     cd6:	81 2f       	mov	r24, r17
     cd8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <a2dConvert8bit>
		delay_cycles(5000); //keep LED on long enough to see Axon reseting
		rprintf(".");
     cdc:	00 d0       	rcall	.+0      	; 0xcde <prvSetupHardware+0xc8>
     cde:	0f 92       	push	r0
     ce0:	ed b7       	in	r30, 0x3d	; 61
     ce2:	fe b7       	in	r31, 0x3e	; 62
     ce4:	01 83       	std	Z+1, r16	; 0x01
     ce6:	d3 83       	std	Z+3, r29	; 0x03
     ce8:	c2 83       	std	Z+2, r28	; 0x02
     cea:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
     cee:	1f 5f       	subi	r17, 0xFF	; 255
	a2dInit(); // initialize analog to digital converter (ADC)
	a2dSetPrescaler(ADC_PRESCALE_DIV32); // configure ADC scaling
	a2dSetReference(ADC_REFERENCE_AVCC); // configure ADC reference voltage

	//let system stabelize for X time
	for(i=0;i<16;i++)
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	10 31       	cpi	r17, 0x10	; 16
     cf8:	71 f7       	brne	.-36     	; 0xcd6 <prvSetupHardware+0xc0>


//***************STATUS LED**************
//tank test
void LED_off(void)
	{PORT_ON(PORTB,6);}
     cfa:	2e 9a       	sbi	0x05, 6	; 5
		rprintf(".");
		}

	LED_off();

	rprintf("Initialization Complete \r\n");
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <prvSetupHardware+0xe8>
     cfe:	0f 92       	push	r0
     d00:	ed b7       	in	r30, 0x3d	; 61
     d02:	fe b7       	in	r31, 0x3e	; 62
     d04:	01 83       	std	Z+1, r16	; 0x01
     d06:	86 ed       	ldi	r24, 0xD6	; 214
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	93 83       	std	Z+3, r25	; 0x03
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>

	//reset all timers to zero
	reset_timer0();
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <reset_timer0>
	reset_timer1();
     d1c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <reset_timer1>
	reset_timer2();
     d20:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <reset_timer2>
	reset_timer3();
     d24:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <reset_timer3>
	reset_timer4();
     d28:	0e 94 09 0b 	call	0x1612	; 0x1612 <reset_timer4>
	reset_timer5();
     d2c:	0e 94 16 0b 	call	0x162c	; 0x162c <reset_timer5>


}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <main>:
	rprintfCRLF();

}

int main(void)
{
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	c0 5d       	subi	r28, 0xD0	; 208
     d56:	d2 40       	sbci	r29, 0x02	; 2
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t ranges[360];
	init_LDS_buffer();
     d62:	0e 94 0d 1b 	call	0x361a	; 0x361a <init_LDS_buffer>
	prvSetupHardware();
     d66:	0e 94 0b 06 	call	0xc16	; 0xc16 <prvSetupHardware>
	rprintf("Starting program.\n");
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <main+0x32>
     d6c:	0f 92       	push	r0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	ad b7       	in	r26, 0x3d	; 61
     d72:	be b7       	in	r27, 0x3e	; 62
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	8c 93       	st	X, r24
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	87 eb       	ldi	r24, 0xB7	; 183
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
	
	double fow, right;
	while(1){
		// Print ranges
		//rprintf("Scan start\n");
		get_range_scan(ranges);
     d90:	6e 01       	movw	r12, r28
     d92:	08 94       	sec
     d94:	c1 1c       	adc	r12, r1
     d96:	d1 1c       	adc	r13, r1
		/* Print ranges */
		for(uint16_t r_ndx = 0; r_ndx < 360; r_ndx++){
			rprintf("%d,%d",r_ndx,ranges[r_ndx]);
     d98:	99 24       	eor	r9, r9
     d9a:	93 94       	inc	r9
     d9c:	f1 eb       	ldi	r31, 0xB1	; 177
     d9e:	af 2e       	mov	r10, r31
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	bf 2e       	mov	r11, r31
	
	double fow, right;
	while(1){
		// Print ranges
		//rprintf("Scan start\n");
		get_range_scan(ranges);
     da4:	c6 01       	movw	r24, r12
     da6:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <get_range_scan>
     daa:	76 01       	movw	r14, r12
     dac:	00 e0       	ldi	r16, 0x00	; 0
     dae:	10 e0       	ldi	r17, 0x00	; 0
		/* Print ranges */
		for(uint16_t r_ndx = 0; r_ndx < 360; r_ndx++){
			rprintf("%d,%d",r_ndx,ranges[r_ndx]);
     db0:	ed b7       	in	r30, 0x3d	; 61
     db2:	fe b7       	in	r31, 0x3e	; 62
     db4:	37 97       	sbiw	r30, 0x07	; 7
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	fe bf       	out	0x3e, r31	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	ed bf       	out	0x3d, r30	; 61
     dc0:	31 96       	adiw	r30, 0x01	; 1
     dc2:	ad b7       	in	r26, 0x3d	; 61
     dc4:	be b7       	in	r27, 0x3e	; 62
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	9c 92       	st	X, r9
     dca:	b2 82       	std	Z+2, r11	; 0x02
     dcc:	a1 82       	std	Z+1, r10	; 0x01
     dce:	14 83       	std	Z+4, r17	; 0x04
     dd0:	03 83       	std	Z+3, r16	; 0x03
     dd2:	d7 01       	movw	r26, r14
     dd4:	8d 91       	ld	r24, X+
     dd6:	9d 91       	ld	r25, X+
     dd8:	7d 01       	movw	r14, r26
     dda:	96 83       	std	Z+6, r25	; 0x06
     ddc:	85 83       	std	Z+5, r24	; 0x05
     dde:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
			//uart2SendByte(ranges[r_ndx]);
			rprintfCRLF();
     de2:	ed b7       	in	r30, 0x3d	; 61
     de4:	fe b7       	in	r31, 0x3e	; 62
     de6:	37 96       	adiw	r30, 0x07	; 7
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	fe bf       	out	0x3e, r31	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	ed bf       	out	0x3d, r30	; 61
     df2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <rprintfCRLF>
	while(1){
		// Print ranges
		//rprintf("Scan start\n");
		get_range_scan(ranges);
		/* Print ranges */
		for(uint16_t r_ndx = 0; r_ndx < 360; r_ndx++){
     df6:	0f 5f       	subi	r16, 0xFF	; 255
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	08 36       	cpi	r16, 0x68	; 104
     dfe:	1f 07       	cpc	r17, r31
     e00:	b9 f6       	brne	.-82     	; 0xdb0 <main+0x76>
			rprintfCRLF();
			//uart2SendByte('\n');
		}
		//rprintf("\nScan end\n\n");
		
		right_wall(ranges);
     e02:	c6 01       	movw	r24, r12
     e04:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <right_wall>
     e08:	cd cf       	rjmp	.-102    	; 0xda4 <main+0x6a>

00000e0a <solutionUpdater>:


/*!	\fn 	solutionUpdater(void)
 */

void solutionUpdater(void) {
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
	if( _framecount == frames_NEXPECTED ) {
     e12:	80 91 d2 02 	lds	r24, 0x02D2
     e16:	90 91 d3 02 	lds	r25, 0x02D3
     e1a:	87 56       	subi	r24, 0x67	; 103
     e1c:	91 40       	sbci	r25, 0x01	; 1
     e1e:	09 f0       	breq	.+2      	; 0xe22 <solutionUpdater+0x18>
     e20:	a5 c0       	rjmp	.+330    	; 0xf6c <solutionUpdater+0x162>
	// ========== VELOCITY CALCULATION HANDLE SECTION ========= //
		_velocsolution  = (_velocitysum/_veloccount)*veloc_LINEARCOEFF;
     e22:	60 91 d4 02 	lds	r22, 0x02D4
     e26:	70 91 d5 02 	lds	r23, 0x02D5
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
     e32:	7b 01       	movw	r14, r22
     e34:	8c 01       	movw	r16, r24
     e36:	60 91 e8 02 	lds	r22, 0x02E8
     e3a:	70 91 e9 02 	lds	r23, 0x02E9
     e3e:	80 91 ea 02 	lds	r24, 0x02EA
     e42:	90 91 eb 02 	lds	r25, 0x02EB
     e46:	a8 01       	movw	r20, r16
     e48:	97 01       	movw	r18, r14
     e4a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
     e5a:	60 93 f8 02 	sts	0x02F8, r22
     e5e:	70 93 f9 02 	sts	0x02F9, r23
     e62:	80 93 fa 02 	sts	0x02FA, r24
     e66:	90 93 fb 02 	sts	0x02FB, r25
		rprintfFloat( 3, _veloccount );
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	b8 01       	movw	r22, r16
     e6e:	a7 01       	movw	r20, r14
     e70:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
	// ============== BAD READING HANDLE SECTION ============= //	
		if( _veloccount < 5 ) {
     e74:	80 91 d4 02 	lds	r24, 0x02D4
     e78:	90 91 d5 02 	lds	r25, 0x02D5
     e7c:	05 97       	sbiw	r24, 0x05	; 5
     e7e:	60 f4       	brcc	.+24     	; 0xe98 <solutionUpdater+0x8e>
			_velocsolution = -10;
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e2       	ldi	r26, 0x20	; 32
     e86:	b1 ec       	ldi	r27, 0xC1	; 193
     e88:	80 93 f8 02 	sts	0x02F8, r24
     e8c:	90 93 f9 02 	sts	0x02F9, r25
     e90:	a0 93 fa 02 	sts	0x02FA, r26
     e94:	b0 93 fb 02 	sts	0x02FB, r27
		}
	// ============ OMEGA CALCULATION HANDLE SECTION ========== //
		_omegasolution += (double)(_wieghtedsum/_potentialsum)*omega_LINEARCOEFF;	
     e98:	60 91 f0 02 	lds	r22, 0x02F0
     e9c:	70 91 f1 02 	lds	r23, 0x02F1
     ea0:	80 91 f2 02 	lds	r24, 0x02F2
     ea4:	90 91 f3 02 	lds	r25, 0x02F3
     ea8:	20 91 ec 02 	lds	r18, 0x02EC
     eac:	30 91 ed 02 	lds	r19, 0x02ED
     eb0:	40 91 ee 02 	lds	r20, 0x02EE
     eb4:	50 91 ef 02 	lds	r21, 0x02EF
     eb8:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	60 91 f4 02 	lds	r22, 0x02F4
     ec4:	70 91 f5 02 	lds	r23, 0x02F5
     ec8:	80 91 f6 02 	lds	r24, 0x02F6
     ecc:	90 91 f7 02 	lds	r25, 0x02F7
     ed0:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
     ed4:	60 93 f4 02 	sts	0x02F4, r22
     ed8:	70 93 f5 02 	sts	0x02F5, r23
     edc:	80 93 f6 02 	sts	0x02F6, r24
     ee0:	90 93 f7 02 	sts	0x02F7, r25
		
		rprintfStr( "==============================\n" );
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <rprintfStr>
		rprintfFloat( 4, _omegasolution ); 	rprintfChar( '\t' );
     eec:	40 91 f4 02 	lds	r20, 0x02F4
     ef0:	50 91 f5 02 	lds	r21, 0x02F5
     ef4:	60 91 f6 02 	lds	r22, 0x02F6
     ef8:	70 91 f7 02 	lds	r23, 0x02F7
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
     f02:	89 e0       	ldi	r24, 0x09	; 9
     f04:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
		rprintfFloat( 4, _velocsolution ); 	rprintfChar( '\n' );
     f08:	40 91 f8 02 	lds	r20, 0x02F8
     f0c:	50 91 f9 02 	lds	r21, 0x02F9
     f10:	60 91 fa 02 	lds	r22, 0x02FA
     f14:	70 91 fb 02 	lds	r23, 0x02FB
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
     f1e:	8a e0       	ldi	r24, 0x0A	; 10
     f20:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
		rprintfStr( "------------------------------\n" );		
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <rprintfStr>
		rprintfFloat( 4, _velocitysum ); 	rprintfChar( '\t' );
     f2c:	40 91 e8 02 	lds	r20, 0x02E8
     f30:	50 91 e9 02 	lds	r21, 0x02E9
     f34:	60 91 ea 02 	lds	r22, 0x02EA
     f38:	70 91 eb 02 	lds	r23, 0x02EB
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
		rprintfFloat( 4, _wieghtedsum ); 	rprintfChar( '\n' );
     f48:	40 91 f0 02 	lds	r20, 0x02F0
     f4c:	50 91 f1 02 	lds	r21, 0x02F1
     f50:	60 91 f2 02 	lds	r22, 0x02F2
     f54:	70 91 f3 02 	lds	r23, 0x02F3
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
		rprintfStr( "==============================\n" );
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <rprintfStr>
		
	}
} 
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	08 95       	ret

00000f76 <addFrame>:
//=============================================================


/*!	\fn 	addFrame( double theta, double radius )
 */ 
void addFrame( double theta, double radius ) {
     f76:	2f 92       	push	r2
     f78:	3f 92       	push	r3
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	2c 97       	sbiw	r28, 0x0c	; 12
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	7b 01       	movw	r14, r22
     fac:	8c 01       	movw	r16, r24
     fae:	39 01       	movw	r6, r18
     fb0:	4a 01       	movw	r8, r20
	// ============= VARIABLE RESET HANDLE SECTION ============ //
	if( _framecount > (frames_NEXPECTED) ) {
     fb2:	80 91 d2 02 	lds	r24, 0x02D2
     fb6:	90 91 d3 02 	lds	r25, 0x02D3
     fba:	88 56       	subi	r24, 0x68	; 104
     fbc:	91 40       	sbci	r25, 0x01	; 1
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <addFrame+0x4c>
     fc0:	40 c0       	rjmp	.+128    	; 0x1042 <addFrame+0xcc>
		_framecount 	= 0;
     fc2:	10 92 d3 02 	sts	0x02D3, r1
     fc6:	10 92 d2 02 	sts	0x02D2, r1
		_veloccount		= 0;
     fca:	10 92 d5 02 	sts	0x02D5, r1
     fce:	10 92 d4 02 	sts	0x02D4, r1
		_scopecount		= 0;
     fd2:	10 92 d7 02 	sts	0x02D7, r1
     fd6:	10 92 d6 02 	sts	0x02D6, r1
		_lastX 			= 0;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	80 93 e0 02 	sts	0x02E0, r24
     fe6:	90 93 e1 02 	sts	0x02E1, r25
     fea:	a0 93 e2 02 	sts	0x02E2, r26
     fee:	b0 93 e3 02 	sts	0x02E3, r27
		_lastY			= 0;
     ff2:	80 93 e4 02 	sts	0x02E4, r24
     ff6:	90 93 e5 02 	sts	0x02E5, r25
     ffa:	a0 93 e6 02 	sts	0x02E6, r26
     ffe:	b0 93 e7 02 	sts	0x02E7, r27
		_velocitysum	= 0;
    1002:	80 93 e8 02 	sts	0x02E8, r24
    1006:	90 93 e9 02 	sts	0x02E9, r25
    100a:	a0 93 ea 02 	sts	0x02EA, r26
    100e:	b0 93 eb 02 	sts	0x02EB, r27
		_potentialsum 	= 0;
    1012:	80 93 ec 02 	sts	0x02EC, r24
    1016:	90 93 ed 02 	sts	0x02ED, r25
    101a:	a0 93 ee 02 	sts	0x02EE, r26
    101e:	b0 93 ef 02 	sts	0x02EF, r27
		_wieghtedsum	= 0;
    1022:	80 93 f0 02 	sts	0x02F0, r24
    1026:	90 93 f1 02 	sts	0x02F1, r25
    102a:	a0 93 f2 02 	sts	0x02F2, r26
    102e:	b0 93 f3 02 	sts	0x02F3, r27
		_omegasolution	= 0;
    1032:	80 93 f4 02 	sts	0x02F4, r24
    1036:	90 93 f5 02 	sts	0x02F5, r25
    103a:	a0 93 f6 02 	sts	0x02F6, r26
    103e:	b0 93 f7 02 	sts	0x02F7, r27
	}
	// ============ POTENTIAL FIELD HANDLE SECTION ============ //
	double ith_potential, ith_angle;
	_framecount++;
    1042:	80 91 d2 02 	lds	r24, 0x02D2
    1046:	90 91 d3 02 	lds	r25, 0x02D3
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	90 93 d3 02 	sts	0x02D3, r25
    1050:	80 93 d2 02 	sts	0x02D2, r24
	if( radius > 5 ) {
    1054:	c4 01       	movw	r24, r8
    1056:	b3 01       	movw	r22, r6
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 ea       	ldi	r20, 0xA0	; 160
    105e:	50 e4       	ldi	r21, 0x40	; 64
    1060:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__gesf2>
    1064:	18 16       	cp	r1, r24
    1066:	0c f0       	brlt	.+2      	; 0x106a <addFrame+0xf4>
    1068:	c2 c1       	rjmp	.+900    	; 0x13ee <addFrame+0x478>
		ith_angle 		= _REL2HEADING(theta);
    106a:	c8 01       	movw	r24, r16
    106c:	b7 01       	movw	r22, r14
    106e:	2b ed       	ldi	r18, 0xDB	; 219
    1070:	3f e0       	ldi	r19, 0x0F	; 15
    1072:	49 e4       	ldi	r20, 0x49	; 73
    1074:	50 e4       	ldi	r21, 0x40	; 64
    1076:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__gesf2>
    107a:	18 16       	cp	r1, r24
    107c:	1c f0       	brlt	.+6      	; 0x1084 <addFrame+0x10e>
    107e:	57 01       	movw	r10, r14
    1080:	68 01       	movw	r12, r16
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <addFrame+0x122>
    1084:	c8 01       	movw	r24, r16
    1086:	b7 01       	movw	r22, r14
    1088:	2b ed       	ldi	r18, 0xDB	; 219
    108a:	3f e0       	ldi	r19, 0x0F	; 15
    108c:	49 ec       	ldi	r20, 0xC9	; 201
    108e:	50 e4       	ldi	r21, 0x40	; 64
    1090:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    1094:	5b 01       	movw	r10, r22
    1096:	6c 01       	movw	r12, r24
		ith_potential	= _POTENTIAL_FIELD(ith_angle,radius);
    1098:	c6 01       	movw	r24, r12
    109a:	b5 01       	movw	r22, r10
    109c:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <cos>
    10a0:	69 87       	std	Y+9, r22	; 0x09
    10a2:	7a 87       	std	Y+10, r23	; 0x0a
    10a4:	8b 87       	std	Y+11, r24	; 0x0b
    10a6:	9c 87       	std	Y+12, r25	; 0x0c
    10a8:	c4 01       	movw	r24, r8
    10aa:	b3 01       	movw	r22, r6
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	46 e1       	ldi	r20, 0x16	; 22
    10b2:	53 e4       	ldi	r21, 0x43	; 67
    10b4:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	50 e4       	ldi	r21, 0x40	; 64
    10c0:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    10c4:	7b 01       	movw	r14, r22
    10c6:	8c 01       	movw	r16, r24
    10c8:	c4 01       	movw	r24, r8
    10ca:	b3 01       	movw	r22, r6
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	46 e9       	ldi	r20, 0x96	; 150
    10d2:	53 e4       	ldi	r21, 0x43	; 67
    10d4:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	c8 01       	movw	r24, r16
    10de:	b7 01       	movw	r22, r14
    10e0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    10e4:	1b 01       	movw	r2, r22
    10e6:	2c 01       	movw	r4, r24
    10e8:	69 85       	ldd	r22, Y+9	; 0x09
    10ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    10ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f0:	a2 01       	movw	r20, r4
    10f2:	91 01       	movw	r18, r2
    10f4:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e4       	ldi	r20, 0x40	; 64
    10fe:	50 e4       	ldi	r21, 0x40	; 64
    1100:	0e 94 9c 21 	call	0x4338	; 0x4338 <pow>
    1104:	7b 01       	movw	r14, r22
    1106:	8c 01       	movw	r16, r24
		_potentialsum  += ith_potential;
    1108:	60 91 ec 02 	lds	r22, 0x02EC
    110c:	70 91 ed 02 	lds	r23, 0x02ED
    1110:	80 91 ee 02 	lds	r24, 0x02EE
    1114:	90 91 ef 02 	lds	r25, 0x02EF
    1118:	a8 01       	movw	r20, r16
    111a:	97 01       	movw	r18, r14
    111c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    1120:	60 93 ec 02 	sts	0x02EC, r22
    1124:	70 93 ed 02 	sts	0x02ED, r23
    1128:	80 93 ee 02 	sts	0x02EE, r24
    112c:	90 93 ef 02 	sts	0x02EF, r25
		_wieghtedsum   += ith_potential*ith_angle;
    1130:	c8 01       	movw	r24, r16
    1132:	b7 01       	movw	r22, r14
    1134:	a6 01       	movw	r20, r12
    1136:	95 01       	movw	r18, r10
    1138:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	60 91 f0 02 	lds	r22, 0x02F0
    1144:	70 91 f1 02 	lds	r23, 0x02F1
    1148:	80 91 f2 02 	lds	r24, 0x02F2
    114c:	90 91 f3 02 	lds	r25, 0x02F3
    1150:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    1154:	60 93 f0 02 	sts	0x02F0, r22
    1158:	70 93 f1 02 	sts	0x02F1, r23
    115c:	80 93 f2 02 	sts	0x02F2, r24
    1160:	90 93 f3 02 	sts	0x02F3, r25
		// ========== VELOCITY CALCULATION HANDLE SECTION ========= //
		if( fabs(ith_angle) < veloc_ANGLESCOPE ) {
    1164:	c6 01       	movw	r24, r12
    1166:	b5 01       	movw	r22, r10
    1168:	9f 77       	andi	r25, 0x7F	; 127
    116a:	2b ed       	ldi	r18, 0xDB	; 219
    116c:	3f e0       	ldi	r19, 0x0F	; 15
    116e:	49 ec       	ldi	r20, 0xC9	; 201
    1170:	5e e3       	ldi	r21, 0x3E	; 62
    1172:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    1176:	88 23       	and	r24, r24
    1178:	ec f4       	brge	.+58     	; 0x11b4 <addFrame+0x23e>
			_veloccount++;
    117a:	80 91 d4 02 	lds	r24, 0x02D4
    117e:	90 91 d5 02 	lds	r25, 0x02D5
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	90 93 d5 02 	sts	0x02D5, r25
    1188:	80 93 d4 02 	sts	0x02D4, r24
			_velocitysum += _POTENTIAL_rfrad(radius);
    118c:	60 91 e8 02 	lds	r22, 0x02E8
    1190:	70 91 e9 02 	lds	r23, 0x02E9
    1194:	80 91 ea 02 	lds	r24, 0x02EA
    1198:	90 91 eb 02 	lds	r25, 0x02EB
    119c:	a2 01       	movw	r20, r4
    119e:	91 01       	movw	r18, r2
    11a0:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    11a4:	60 93 e8 02 	sts	0x02E8, r22
    11a8:	70 93 e9 02 	sts	0x02E9, r23
    11ac:	80 93 ea 02 	sts	0x02EA, r24
    11b0:	90 93 eb 02 	sts	0x02EB, r25

		}
		// =========== IN-SCOPE-SORTING HANDLE SECTION =========== //
		unsigned int scope_update = 0;
		if( radius < omega_RADSCOPE ) {
    11b4:	c4 01       	movw	r24, r8
    11b6:	b3 01       	movw	r22, r6
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	46 e9       	ldi	r20, 0x96	; 150
    11be:	53 e4       	ldi	r21, 0x43	; 67
    11c0:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    11c4:	87 fd       	sbrc	r24, 7
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <addFrame+0x258>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4d c0       	rjmp	.+154    	; 0x1268 <addFrame+0x2f2>
			_scopecount++;
    11ce:	80 91 d6 02 	lds	r24, 0x02D6
    11d2:	90 91 d7 02 	lds	r25, 0x02D7
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	90 93 d7 02 	sts	0x02D7, r25
    11dc:	80 93 d6 02 	sts	0x02D6, r24
			_lastX = _currX; 
    11e0:	80 91 d8 02 	lds	r24, 0x02D8
    11e4:	90 91 d9 02 	lds	r25, 0x02D9
    11e8:	a0 91 da 02 	lds	r26, 0x02DA
    11ec:	b0 91 db 02 	lds	r27, 0x02DB
    11f0:	80 93 e0 02 	sts	0x02E0, r24
    11f4:	90 93 e1 02 	sts	0x02E1, r25
    11f8:	a0 93 e2 02 	sts	0x02E2, r26
    11fc:	b0 93 e3 02 	sts	0x02E3, r27
			_lastY = _currY;
    1200:	80 91 dc 02 	lds	r24, 0x02DC
    1204:	90 91 dd 02 	lds	r25, 0x02DD
    1208:	a0 91 de 02 	lds	r26, 0x02DE
    120c:	b0 91 df 02 	lds	r27, 0x02DF
    1210:	80 93 e4 02 	sts	0x02E4, r24
    1214:	90 93 e5 02 	sts	0x02E5, r25
    1218:	a0 93 e6 02 	sts	0x02E6, r26
    121c:	b0 93 e7 02 	sts	0x02E7, r27
			_currX = radius*sin(ith_angle);
    1220:	c6 01       	movw	r24, r12
    1222:	b5 01       	movw	r22, r10
    1224:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <sin>
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	c4 01       	movw	r24, r8
    122e:	b3 01       	movw	r22, r6
    1230:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1234:	60 93 d8 02 	sts	0x02D8, r22
    1238:	70 93 d9 02 	sts	0x02D9, r23
    123c:	80 93 da 02 	sts	0x02DA, r24
    1240:	90 93 db 02 	sts	0x02DB, r25
			_currY = radius*cos(ith_angle);
    1244:	c4 01       	movw	r24, r8
    1246:	b3 01       	movw	r22, r6
    1248:	29 85       	ldd	r18, Y+9	; 0x09
    124a:	3a 85       	ldd	r19, Y+10	; 0x0a
    124c:	4b 85       	ldd	r20, Y+11	; 0x0b
    124e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1250:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1254:	60 93 dc 02 	sts	0x02DC, r22
    1258:	70 93 dd 02 	sts	0x02DD, r23
    125c:	80 93 de 02 	sts	0x02DE, r24
    1260:	90 93 df 02 	sts	0x02DF, r25
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	30 e0       	ldi	r19, 0x00	; 0
			scope_update = 1;
		}
		// ========== APERATURE DETECTION HANDLE SECTION ========== //
		if( (_scopecount > 0) && scope_update ) {
    1268:	80 91 d6 02 	lds	r24, 0x02D6
    126c:	90 91 d7 02 	lds	r25, 0x02D7
    1270:	89 2b       	or	r24, r25
    1272:	09 f4       	brne	.+2      	; 0x1276 <addFrame+0x300>
    1274:	bc c0       	rjmp	.+376    	; 0x13ee <addFrame+0x478>
    1276:	23 2b       	or	r18, r19
    1278:	09 f4       	brne	.+2      	; 0x127c <addFrame+0x306>
    127a:	b9 c0       	rjmp	.+370    	; 0x13ee <addFrame+0x478>
			double magnitude;
			magnitude = sqrt(pow(_lastX-_currX,2)+pow(_lastY-_currY,2));
    127c:	80 91 e0 02 	lds	r24, 0x02E0
    1280:	90 91 e1 02 	lds	r25, 0x02E1
    1284:	a0 91 e2 02 	lds	r26, 0x02E2
    1288:	b0 91 e3 02 	lds	r27, 0x02E3
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	af 83       	std	Y+7, r26	; 0x07
    1292:	b8 87       	std	Y+8, r27	; 0x08
    1294:	80 91 d8 02 	lds	r24, 0x02D8
    1298:	90 91 d9 02 	lds	r25, 0x02D9
    129c:	a0 91 da 02 	lds	r26, 0x02DA
    12a0:	b0 91 db 02 	lds	r27, 0x02DB
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	ab 83       	std	Y+3, r26	; 0x03
    12aa:	bc 83       	std	Y+4, r27	; 0x04
    12ac:	6d 81       	ldd	r22, Y+5	; 0x05
    12ae:	7e 81       	ldd	r23, Y+6	; 0x06
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	29 81       	ldd	r18, Y+1	; 0x01
    12b6:	3a 81       	ldd	r19, Y+2	; 0x02
    12b8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ba:	5c 81       	ldd	r21, Y+4	; 0x04
    12bc:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    12c8:	7b 01       	movw	r14, r22
    12ca:	8c 01       	movw	r16, r24
    12cc:	20 90 e4 02 	lds	r2, 0x02E4
    12d0:	30 90 e5 02 	lds	r3, 0x02E5
    12d4:	40 90 e6 02 	lds	r4, 0x02E6
    12d8:	50 90 e7 02 	lds	r5, 0x02E7
    12dc:	60 90 dc 02 	lds	r6, 0x02DC
    12e0:	70 90 dd 02 	lds	r7, 0x02DD
    12e4:	80 90 de 02 	lds	r8, 0x02DE
    12e8:	90 90 df 02 	lds	r9, 0x02DF
    12ec:	c2 01       	movw	r24, r4
    12ee:	b1 01       	movw	r22, r2
    12f0:	a4 01       	movw	r20, r8
    12f2:	93 01       	movw	r18, r6
    12f4:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	c8 01       	movw	r24, r16
    1306:	b7 01       	movw	r22, r14
    1308:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    130c:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <sqrt>
    1310:	7b 01       	movw	r14, r22
    1312:	8c 01       	movw	r16, r24
			if( _LOGIT(magnitude/apdet_APWIDTH) > fndef_LOGITCUTOFF ) {
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	52 e4       	ldi	r21, 0x42	; 66
    131c:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    1320:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <log>
    1324:	5b 01       	movw	r10, r22
    1326:	6c 01       	movw	r12, r24
    1328:	c8 01       	movw	r24, r16
    132a:	b7 01       	movw	r22, r14
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	52 ec       	ldi	r21, 0xC2	; 194
    1334:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    1344:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <log>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c6 01       	movw	r24, r12
    134e:	b5 01       	movw	r22, r10
    1350:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	48 ec       	ldi	r20, 0xC8	; 200
    135a:	52 e4       	ldi	r21, 0x42	; 66
    135c:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__gesf2>
    1360:	18 16       	cp	r1, r24
    1362:	0c f0       	brlt	.+2      	; 0x1366 <addFrame+0x3f0>
    1364:	44 c0       	rjmp	.+136    	; 0x13ee <addFrame+0x478>
				_omegasolution += atan2((_lastX+_currX)/2,(_lastY+_currY)/2);
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	29 81       	ldd	r18, Y+1	; 0x01
    1370:	3a 81       	ldd	r19, Y+2	; 0x02
    1372:	4b 81       	ldd	r20, Y+3	; 0x03
    1374:	5c 81       	ldd	r21, Y+4	; 0x04
    1376:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    1386:	7b 01       	movw	r14, r22
    1388:	8c 01       	movw	r16, r24
    138a:	c2 01       	movw	r24, r4
    138c:	b1 01       	movw	r22, r2
    138e:	a4 01       	movw	r20, r8
    1390:	93 01       	movw	r18, r6
    1392:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	c8 01       	movw	r24, r16
    13a8:	b7 01       	movw	r22, r14
    13aa:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <atan2>
    13ae:	20 91 f4 02 	lds	r18, 0x02F4
    13b2:	30 91 f5 02 	lds	r19, 0x02F5
    13b6:	40 91 f6 02 	lds	r20, 0x02F6
    13ba:	50 91 f7 02 	lds	r21, 0x02F7
    13be:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__addsf3>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	da 01       	movw	r26, r20
    13ca:	80 93 f4 02 	sts	0x02F4, r24
    13ce:	90 93 f5 02 	sts	0x02F5, r25
    13d2:	a0 93 f6 02 	sts	0x02F6, r26
    13d6:	b0 93 f7 02 	sts	0x02F7, r27
				rprintfFloat( 4,_omegasolution );
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	e3 2f       	mov	r30, r19
    13de:	f4 2f       	mov	r31, r20
    13e0:	a5 2f       	mov	r26, r21
    13e2:	42 2f       	mov	r20, r18
    13e4:	5e 2f       	mov	r21, r30
    13e6:	6f 2f       	mov	r22, r31
    13e8:	7a 2f       	mov	r23, r26
    13ea:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <rprintfFloat>
			}
		}
	}
}
    13ee:	2c 96       	adiw	r28, 0x0c	; 12
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	9f 90       	pop	r9
    1410:	8f 90       	pop	r8
    1412:	7f 90       	pop	r7
    1414:	6f 90       	pop	r6
    1416:	5f 90       	pop	r5
    1418:	4f 90       	pop	r4
    141a:	3f 90       	pop	r3
    141c:	2f 90       	pop	r2
    141e:	08 95       	ret

00001420 <prescaler_hex_to_value>:
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1420:	e8 2f       	mov	r30, r24
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	e7 70       	andi	r30, 0x07	; 7
    1426:	f0 70       	andi	r31, 0x00	; 0
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	ea 5f       	subi	r30, 0xFA	; 250
    142e:	fd 4f       	sbci	r31, 0xFD	; 253
    1430:	25 91       	lpm	r18, Z+
    1432:	34 91       	lpm	r19, Z+
}
    1434:	c9 01       	movw	r24, r18
    1436:	08 95       	ret

00001438 <prescaler_hex_to_value_for_timer2>:
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1438:	e8 2f       	mov	r30, r24
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	e7 70       	andi	r30, 0x07	; 7
    143e:	f0 70       	andi	r31, 0x00	; 0
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 5e       	subi	r30, 0xEE	; 238
    1446:	fd 4f       	sbci	r31, 0xFD	; 253
    1448:	25 91       	lpm	r18, Z+
    144a:	34 91       	lpm	r19, Z+
}
    144c:	c9 01       	movw	r24, r18
    144e:	08 95       	ret

00001450 <get_timer0_prescaler>:

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
    1450:	85 b5       	in	r24, 0x25	; 37
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    1452:	e8 2f       	mov	r30, r24
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	e7 70       	andi	r30, 0x07	; 7
    1458:	f0 70       	andi	r31, 0x00	; 0
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	ea 5f       	subi	r30, 0xFA	; 250
    1460:	fd 4f       	sbci	r31, 0xFD	; 253
    1462:	25 91       	lpm	r18, Z+
    1464:	34 91       	lpm	r19, Z+
}

uint16_t get_timer0_prescaler(void)
{
  return prescaler_hex_to_value(TCCR0B);
}
    1466:	c9 01       	movw	r24, r18
    1468:	08 95       	ret

0000146a <get_timer1_prescaler>:
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
    146a:	80 91 81 00 	lds	r24, 0x0081
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    146e:	e8 2f       	mov	r30, r24
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	e7 70       	andi	r30, 0x07	; 7
    1474:	f0 70       	andi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ea 5f       	subi	r30, 0xFA	; 250
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	25 91       	lpm	r18, Z+
    1480:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR0B);
}
uint16_t get_timer1_prescaler(void)
{
  return prescaler_hex_to_value(TCCR1B);
}
    1482:	c9 01       	movw	r24, r18
    1484:	08 95       	ret

00001486 <get_timer2_prescaler>:
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
    1486:	80 91 b1 00 	lds	r24, 0x00B1
uint16_t prescaler_hex_to_value_for_timer2(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to Timer2PrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(Timer2PrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    148a:	e8 2f       	mov	r30, r24
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	e7 70       	andi	r30, 0x07	; 7
    1490:	f0 70       	andi	r31, 0x00	; 0
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 5e       	subi	r30, 0xEE	; 238
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	25 91       	lpm	r18, Z+
    149c:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR1B);
}
uint16_t get_timer2_prescaler(void)
{
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
    149e:	c9 01       	movw	r24, r18
    14a0:	08 95       	ret

000014a2 <get_timer3_prescaler>:
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
    14a2:	80 91 91 00 	lds	r24, 0x0091
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    14a6:	e8 2f       	mov	r30, r24
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	e7 70       	andi	r30, 0x07	; 7
    14ac:	f0 70       	andi	r31, 0x00	; 0
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	ea 5f       	subi	r30, 0xFA	; 250
    14b4:	fd 4f       	sbci	r31, 0xFD	; 253
    14b6:	25 91       	lpm	r18, Z+
    14b8:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value_for_timer2(TCCR2B);
}
uint16_t get_timer3_prescaler(void)
{
  return prescaler_hex_to_value(TCCR3B);
}
    14ba:	c9 01       	movw	r24, r18
    14bc:	08 95       	ret

000014be <get_timer4_prescaler>:
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
    14be:	80 91 a1 00 	lds	r24, 0x00A1
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    14c2:	e8 2f       	mov	r30, r24
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	e7 70       	andi	r30, 0x07	; 7
    14c8:	f0 70       	andi	r31, 0x00	; 0
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	ea 5f       	subi	r30, 0xFA	; 250
    14d0:	fd 4f       	sbci	r31, 0xFD	; 253
    14d2:	25 91       	lpm	r18, Z+
    14d4:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR3B);
}
uint16_t get_timer4_prescaler(void)
{
  return prescaler_hex_to_value(TCCR4B);
}
    14d6:	c9 01       	movw	r24, r18
    14d8:	08 95       	ret

000014da <get_timer5_prescaler>:
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
    14da:	80 91 21 01 	lds	r24, 0x0121
uint16_t prescaler_hex_to_value(uint8_t hex)
{
  // basically pgm_read_word will return a pointer to TimerPrescaleFactor in program space
  // and it will move the array to the correct position, then typecast it back
  // to uint16_t
  return (uint16_t)(pgm_read_word(TimerPrescaleFactor+(hex & TIMER_PRESCALE_MASK)));
    14de:	e8 2f       	mov	r30, r24
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	e7 70       	andi	r30, 0x07	; 7
    14e4:	f0 70       	andi	r31, 0x00	; 0
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ea 5f       	subi	r30, 0xFA	; 250
    14ec:	fd 4f       	sbci	r31, 0xFD	; 253
    14ee:	25 91       	lpm	r18, Z+
    14f0:	34 91       	lpm	r19, Z+
  return prescaler_hex_to_value(TCCR4B);
}
uint16_t get_timer5_prescaler(void)
{
  return prescaler_hex_to_value(TCCR5B);
}
    14f2:	c9 01       	movw	r24, r18
    14f4:	08 95       	ret

000014f6 <get_timer0_overflow>:

const uint32_t get_timer0_overflow(void)
{
    return timer0_ovrflow_cnt;
    14f6:	20 91 dc 05 	lds	r18, 0x05DC
    14fa:	30 91 dd 05 	lds	r19, 0x05DD
    14fe:	40 91 de 05 	lds	r20, 0x05DE
    1502:	50 91 df 05 	lds	r21, 0x05DF
}
    1506:	b9 01       	movw	r22, r18
    1508:	ca 01       	movw	r24, r20
    150a:	08 95       	ret

0000150c <get_timer1_overflow>:
const uint32_t get_timer1_overflow(void)
{
    return timer1_ovrflow_cnt;
    150c:	20 91 d8 05 	lds	r18, 0x05D8
    1510:	30 91 d9 05 	lds	r19, 0x05D9
    1514:	40 91 da 05 	lds	r20, 0x05DA
    1518:	50 91 db 05 	lds	r21, 0x05DB
}
    151c:	b9 01       	movw	r22, r18
    151e:	ca 01       	movw	r24, r20
    1520:	08 95       	ret

00001522 <get_timer2_overflow>:
const uint32_t get_timer2_overflow(void)
{
    return timer2_ovrflow_cnt;
    1522:	20 91 e0 05 	lds	r18, 0x05E0
    1526:	30 91 e1 05 	lds	r19, 0x05E1
    152a:	40 91 e2 05 	lds	r20, 0x05E2
    152e:	50 91 e3 05 	lds	r21, 0x05E3
}
    1532:	b9 01       	movw	r22, r18
    1534:	ca 01       	movw	r24, r20
    1536:	08 95       	ret

00001538 <get_timer3_overflow>:
const uint32_t get_timer3_overflow(void)
{
    return timer3_ovrflow_cnt;
    1538:	20 91 e8 05 	lds	r18, 0x05E8
    153c:	30 91 e9 05 	lds	r19, 0x05E9
    1540:	40 91 ea 05 	lds	r20, 0x05EA
    1544:	50 91 eb 05 	lds	r21, 0x05EB
}
    1548:	b9 01       	movw	r22, r18
    154a:	ca 01       	movw	r24, r20
    154c:	08 95       	ret

0000154e <get_timer4_overflow>:
const uint32_t get_timer4_overflow(void)
{
    return timer4_ovrflow_cnt;
    154e:	20 91 d4 05 	lds	r18, 0x05D4
    1552:	30 91 d5 05 	lds	r19, 0x05D5
    1556:	40 91 d6 05 	lds	r20, 0x05D6
    155a:	50 91 d7 05 	lds	r21, 0x05D7
}
    155e:	b9 01       	movw	r22, r18
    1560:	ca 01       	movw	r24, r20
    1562:	08 95       	ret

00001564 <get_timer5_overflow>:
const uint32_t get_timer5_overflow(void)
{
    return timer5_ovrflow_cnt;
    1564:	20 91 ec 05 	lds	r18, 0x05EC
    1568:	30 91 ed 05 	lds	r19, 0x05ED
    156c:	40 91 ee 05 	lds	r20, 0x05EE
    1570:	50 91 ef 05 	lds	r21, 0x05EF
}
    1574:	b9 01       	movw	r22, r18
    1576:	ca 01       	movw	r24, r20
    1578:	08 95       	ret

0000157a <get_timer0_counter>:

const uint8_t get_timer0_counter(void)
{
    return TCNT0;
    157a:	86 b5       	in	r24, 0x26	; 38
}
    157c:	08 95       	ret

0000157e <get_timer1_counter>:
const uint16_t get_timer1_counter(void)
{
    return TCNT1;
    157e:	20 91 84 00 	lds	r18, 0x0084
    1582:	30 91 85 00 	lds	r19, 0x0085
}
    1586:	c9 01       	movw	r24, r18
    1588:	08 95       	ret

0000158a <get_timer2_counter>:
const uint8_t get_timer2_counter(void)
{
    return TCNT2;
    158a:	80 91 b2 00 	lds	r24, 0x00B2
}
    158e:	08 95       	ret

00001590 <get_timer3_counter>:
const uint16_t get_timer3_counter(void)
{
    return TCNT3;
    1590:	20 91 94 00 	lds	r18, 0x0094
    1594:	30 91 95 00 	lds	r19, 0x0095
}
    1598:	c9 01       	movw	r24, r18
    159a:	08 95       	ret

0000159c <get_timer4_counter>:
const uint16_t get_timer4_counter(void)
{
    return TCNT4;
    159c:	20 91 a4 00 	lds	r18, 0x00A4
    15a0:	30 91 a5 00 	lds	r19, 0x00A5
}
    15a4:	c9 01       	movw	r24, r18
    15a6:	08 95       	ret

000015a8 <get_timer5_counter>:
const uint16_t get_timer5_counter(void)
{
    return TCNT5;
    15a8:	20 91 24 01 	lds	r18, 0x0124
    15ac:	30 91 25 01 	lds	r19, 0x0125
}
    15b0:	c9 01       	movw	r24, r18
    15b2:	08 95       	ret

000015b4 <reset_timer0>:

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    15b4:	10 92 dc 05 	sts	0x05DC, r1
    15b8:	10 92 dd 05 	sts	0x05DD, r1
    15bc:	10 92 de 05 	sts	0x05DE, r1
    15c0:	10 92 df 05 	sts	0x05DF, r1
    15c4:	16 bc       	out	0x26, r1	; 38
}
    15c6:	08 95       	ret

000015c8 <reset_timer1>:
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    15c8:	10 92 d8 05 	sts	0x05D8, r1
    15cc:	10 92 d9 05 	sts	0x05D9, r1
    15d0:	10 92 da 05 	sts	0x05DA, r1
    15d4:	10 92 db 05 	sts	0x05DB, r1
    15d8:	10 92 85 00 	sts	0x0085, r1
    15dc:	10 92 84 00 	sts	0x0084, r1
}
    15e0:	08 95       	ret

000015e2 <reset_timer2>:
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    15e2:	10 92 e0 05 	sts	0x05E0, r1
    15e6:	10 92 e1 05 	sts	0x05E1, r1
    15ea:	10 92 e2 05 	sts	0x05E2, r1
    15ee:	10 92 e3 05 	sts	0x05E3, r1
    15f2:	10 92 b2 00 	sts	0x00B2, r1
}
    15f6:	08 95       	ret

000015f8 <reset_timer3>:
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    15f8:	10 92 e8 05 	sts	0x05E8, r1
    15fc:	10 92 e9 05 	sts	0x05E9, r1
    1600:	10 92 ea 05 	sts	0x05EA, r1
    1604:	10 92 eb 05 	sts	0x05EB, r1
    1608:	10 92 95 00 	sts	0x0095, r1
    160c:	10 92 94 00 	sts	0x0094, r1
}
    1610:	08 95       	ret

00001612 <reset_timer4>:
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    1612:	10 92 d4 05 	sts	0x05D4, r1
    1616:	10 92 d5 05 	sts	0x05D5, r1
    161a:	10 92 d6 05 	sts	0x05D6, r1
    161e:	10 92 d7 05 	sts	0x05D7, r1
    1622:	10 92 a5 00 	sts	0x00A5, r1
    1626:	10 92 a4 00 	sts	0x00A4, r1
}
    162a:	08 95       	ret

0000162c <reset_timer5>:
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    162c:	10 92 ec 05 	sts	0x05EC, r1
    1630:	10 92 ed 05 	sts	0x05ED, r1
    1634:	10 92 ee 05 	sts	0x05EE, r1
    1638:	10 92 ef 05 	sts	0x05EF, r1
    163c:	10 92 25 01 	sts	0x0125, r1
    1640:	10 92 24 01 	sts	0x0124, r1
}
    1644:	08 95       	ret

00001646 <delay_us>:

	delay_loops = ((time_us * CYCLES_PER_US)+3) / 5; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
    1646:	08 95       	ret

00001648 <init_timer0>:

void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
    1648:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = _BV(TOIE0); // enable interrupts
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	80 93 6e 00 	sts	0x006E, r24
    return TCNT5;
}

void reset_timer0(void)
{
    TCNT0 = timer0_ovrflow_cnt = 0;
    1650:	10 92 dc 05 	sts	0x05DC, r1
    1654:	10 92 dd 05 	sts	0x05DD, r1
    1658:	10 92 de 05 	sts	0x05DE, r1
    165c:	10 92 df 05 	sts	0x05DF, r1
    1660:	16 bc       	out	0x26, r1	; 38
void init_timer0(const uint8_t prescaler)
{
  TCCR0B = prescaler;
  TIMSK0 = _BV(TOIE0); // enable interrupts
  reset_timer0(); // reset counter
}
    1662:	08 95       	ret

00001664 <init_timer1>:
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
    1664:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 = _BV(TOIE1); // enable interrupts
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 6f 00 	sts	0x006F, r24
{
    TCNT0 = timer0_ovrflow_cnt = 0;
}
void reset_timer1(void)
{
    TCNT1 = timer1_ovrflow_cnt = 0;
    166e:	10 92 d8 05 	sts	0x05D8, r1
    1672:	10 92 d9 05 	sts	0x05D9, r1
    1676:	10 92 da 05 	sts	0x05DA, r1
    167a:	10 92 db 05 	sts	0x05DB, r1
    167e:	10 92 85 00 	sts	0x0085, r1
    1682:	10 92 84 00 	sts	0x0084, r1
void init_timer1(const uint8_t prescaler)
{
  TCCR1B = prescaler;
  TIMSK1 = _BV(TOIE1); // enable interrupts
  reset_timer1(); // reset counter
}
    1686:	08 95       	ret

00001688 <init_timer2>:
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
    1688:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = _BV(TOIE2); // enable interrupts
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 70 00 	sts	0x0070, r24
{
    TCNT1 = timer1_ovrflow_cnt = 0;
}
void reset_timer2(void)
{
    TCNT2 = timer2_ovrflow_cnt = 0;
    1692:	10 92 e0 05 	sts	0x05E0, r1
    1696:	10 92 e1 05 	sts	0x05E1, r1
    169a:	10 92 e2 05 	sts	0x05E2, r1
    169e:	10 92 e3 05 	sts	0x05E3, r1
    16a2:	10 92 b2 00 	sts	0x00B2, r1
void init_timer2(const uint8_t prescaler)
{
  TCCR2B = prescaler;
  TIMSK2 = _BV(TOIE2); // enable interrupts
  reset_timer2(); // reset counter
}
    16a6:	08 95       	ret

000016a8 <init_timer3>:
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
    16a8:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = _BV(TOIE3); // enable interrupts
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 71 00 	sts	0x0071, r24
{
    TCNT2 = timer2_ovrflow_cnt = 0;
}
void reset_timer3(void)
{
    TCNT3 = timer3_ovrflow_cnt = 0;
    16b2:	10 92 e8 05 	sts	0x05E8, r1
    16b6:	10 92 e9 05 	sts	0x05E9, r1
    16ba:	10 92 ea 05 	sts	0x05EA, r1
    16be:	10 92 eb 05 	sts	0x05EB, r1
    16c2:	10 92 95 00 	sts	0x0095, r1
    16c6:	10 92 94 00 	sts	0x0094, r1
void init_timer3(const uint8_t prescaler)
{
  TCCR3B = prescaler;
  TIMSK3 = _BV(TOIE3); // enable interrupts
  reset_timer3(); // reset counter
}
    16ca:	08 95       	ret

000016cc <init_timer4>:
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
    16cc:	80 93 a1 00 	sts	0x00A1, r24
  TIMSK4 = _BV(TOIE4); // enable interrupts
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 72 00 	sts	0x0072, r24
{
    TCNT3 = timer3_ovrflow_cnt = 0;
}
void reset_timer4(void)
{
    TCNT4 = timer4_ovrflow_cnt = 0;
    16d6:	10 92 d4 05 	sts	0x05D4, r1
    16da:	10 92 d5 05 	sts	0x05D5, r1
    16de:	10 92 d6 05 	sts	0x05D6, r1
    16e2:	10 92 d7 05 	sts	0x05D7, r1
    16e6:	10 92 a5 00 	sts	0x00A5, r1
    16ea:	10 92 a4 00 	sts	0x00A4, r1
void init_timer4(const uint8_t prescaler)
{
  TCCR4B = prescaler;
  TIMSK4 = _BV(TOIE4); // enable interrupts
  reset_timer4(); // reset counter
}
    16ee:	08 95       	ret

000016f0 <init_timer5>:
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
    16f0:	80 93 21 01 	sts	0x0121, r24
  TIMSK5 = _BV(TOIE5); // enable interrupts
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	80 93 73 00 	sts	0x0073, r24
{
    TCNT4 = timer4_ovrflow_cnt = 0;
}
void reset_timer5(void)
{
    TCNT5 = timer5_ovrflow_cnt = 0;
    16fa:	10 92 ec 05 	sts	0x05EC, r1
    16fe:	10 92 ed 05 	sts	0x05ED, r1
    1702:	10 92 ee 05 	sts	0x05EE, r1
    1706:	10 92 ef 05 	sts	0x05EF, r1
    170a:	10 92 25 01 	sts	0x0125, r1
    170e:	10 92 24 01 	sts	0x0124, r1
void init_timer5(const uint8_t prescaler)
{
  TCCR5B = prescaler;
  TIMSK5 = _BV(TOIE5); // enable interrupts
  reset_timer5(); // reset counter
}
    1712:	08 95       	ret

00001714 <timer_attach>:

void timer_attach(TimerInterrupt_t interrupt, void (*user_func)(void) )
{
  // set the interrupt function to run
  // the supplied user's function
  TimerIntFunc[interrupt] = user_func;
    1714:	e8 2f       	mov	r30, r24
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	e4 50       	subi	r30, 0x04	; 4
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	71 83       	std	Z+1, r23	; 0x01
    1722:	60 83       	st	Z, r22
}
    1724:	08 95       	ret

00001726 <timer_detach>:

void timer_detach(TimerInterrupt_t interrupt)
{
  // clear the user defined interrupt function
  TimerIntFunc[interrupt] = NULL;
    1726:	e8 2f       	mov	r30, r24
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	e4 50       	subi	r30, 0x04	; 4
    1730:	fd 4f       	sbci	r31, 0xFD	; 253
    1732:	11 82       	std	Z+1, r1	; 0x01
    1734:	10 82       	st	Z, r1
}
    1736:	08 95       	ret

00001738 <_delay_loop_2>:

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    173c:	08 95       	ret

0000173e <sleep>:

void sleep(uint16_t time_ms)
{
    173e:	af 92       	push	r10
    1740:	bf 92       	push	r11
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * time_ms;
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <__floatunsisf>
    175a:	5b 01       	movw	r10, r22
    175c:	6c 01       	movw	r12, r24
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	55 e4       	ldi	r21, 0x45	; 69
    1766:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    176a:	7b 01       	movw	r14, r22
    176c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    177a:	88 23       	and	r24, r24
    177c:	1c f4       	brge	.+6      	; 0x1784 <sleep+0x46>
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	24 c0       	rjmp	.+72     	; 0x17cc <sleep+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
    1784:	c8 01       	movw	r24, r16
    1786:	b7 01       	movw	r22, r14
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__gesf2>
    1794:	18 16       	cp	r1, r24
    1796:	b4 f4       	brge	.+44     	; 0x17c4 <sleep+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    17a8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ac:	80 e9       	ldi	r24, 0x90	; 144
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	05 c0       	rjmp	.+10     	; 0x17bc <sleep+0x7e>
    17b2:	fc 01       	movw	r30, r24
    17b4:	31 97       	sbiw	r30, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <sleep+0x76>
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	61 50       	subi	r22, 0x01	; 1
    17ba:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (time_ms * 10.0);
		while(__ticks)
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	c1 f7       	brne	.-16     	; 0x17b2 <sleep+0x74>
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <sleep+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	c8 01       	movw	r24, r16
    17c6:	b7 01       	movw	r22, r14
    17c8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__fixunssfsi>
}

void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17cc:	cb 01       	movw	r24, r22
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <sleep+0x90>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	08 95       	ret

000017e4 <__vector_23>:
    }
  }
}*/

ISR(TIMER0_OVF_vect) 
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
  timer0_ovrflow_cnt++;
    1806:	80 91 dc 05 	lds	r24, 0x05DC
    180a:	90 91 dd 05 	lds	r25, 0x05DD
    180e:	a0 91 de 05 	lds	r26, 0x05DE
    1812:	b0 91 df 05 	lds	r27, 0x05DF
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	a1 1d       	adc	r26, r1
    181a:	b1 1d       	adc	r27, r1
    181c:	80 93 dc 05 	sts	0x05DC, r24
    1820:	90 93 dd 05 	sts	0x05DD, r25
    1824:	a0 93 de 05 	sts	0x05DE, r26
    1828:	b0 93 df 05 	sts	0x05DF, r27
  timer_sleep_cnt++;
    182c:	80 91 e4 05 	lds	r24, 0x05E4
    1830:	90 91 e5 05 	lds	r25, 0x05E5
    1834:	a0 91 e6 05 	lds	r26, 0x05E6
    1838:	b0 91 e7 05 	lds	r27, 0x05E7
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	a1 1d       	adc	r26, r1
    1840:	b1 1d       	adc	r27, r1
    1842:	80 93 e4 05 	sts	0x05E4, r24
    1846:	90 93 e5 05 	sts	0x05E5, r25
    184a:	a0 93 e6 05 	sts	0x05E6, r26
    184e:	b0 93 e7 05 	sts	0x05E7, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER0_OVF_interrupt);
    1852:	80 91 00 03 	lds	r24, 0x0300
    1856:	90 91 01 03 	lds	r25, 0x0301
    185a:	89 2b       	or	r24, r25
    185c:	29 f0       	breq	.+10     	; 0x1868 <__vector_23+0x84>
    185e:	e0 91 00 03 	lds	r30, 0x0300
    1862:	f0 91 01 03 	lds	r31, 0x0301
    1866:	09 95       	icall
}
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <__vector_20>:
ISR(TIMER1_OVF_vect) 
{
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	0f 92       	push	r0
    1892:	11 24       	eor	r1, r1
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	4f 93       	push	r20
    189a:	5f 93       	push	r21
    189c:	6f 93       	push	r22
    189e:	7f 93       	push	r23
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	af 93       	push	r26
    18a6:	bf 93       	push	r27
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
  timer1_ovrflow_cnt++;
    18ac:	80 91 d8 05 	lds	r24, 0x05D8
    18b0:	90 91 d9 05 	lds	r25, 0x05D9
    18b4:	a0 91 da 05 	lds	r26, 0x05DA
    18b8:	b0 91 db 05 	lds	r27, 0x05DB
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	a1 1d       	adc	r26, r1
    18c0:	b1 1d       	adc	r27, r1
    18c2:	80 93 d8 05 	sts	0x05D8, r24
    18c6:	90 93 d9 05 	sts	0x05D9, r25
    18ca:	a0 93 da 05 	sts	0x05DA, r26
    18ce:	b0 93 db 05 	sts	0x05DB, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER1_OVF_interrupt);
    18d2:	80 91 0a 03 	lds	r24, 0x030A
    18d6:	90 91 0b 03 	lds	r25, 0x030B
    18da:	89 2b       	or	r24, r25
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <__vector_20+0x5e>
    18de:	e0 91 0a 03 	lds	r30, 0x030A
    18e2:	f0 91 0b 03 	lds	r31, 0x030B
    18e6:	09 95       	icall
}
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_15>:
ISR(TIMER2_OVF_vect) 
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
  timer2_ovrflow_cnt++;
    192c:	80 91 e0 05 	lds	r24, 0x05E0
    1930:	90 91 e1 05 	lds	r25, 0x05E1
    1934:	a0 91 e2 05 	lds	r26, 0x05E2
    1938:	b0 91 e3 05 	lds	r27, 0x05E3
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	a1 1d       	adc	r26, r1
    1940:	b1 1d       	adc	r27, r1
    1942:	80 93 e0 05 	sts	0x05E0, r24
    1946:	90 93 e1 05 	sts	0x05E1, r25
    194a:	a0 93 e2 05 	sts	0x05E2, r26
    194e:	b0 93 e3 05 	sts	0x05E3, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER2_OVF_interrupt);
    1952:	80 91 10 03 	lds	r24, 0x0310
    1956:	90 91 11 03 	lds	r25, 0x0311
    195a:	89 2b       	or	r24, r25
    195c:	29 f0       	breq	.+10     	; 0x1968 <__vector_15+0x5e>
    195e:	e0 91 10 03 	lds	r30, 0x0310
    1962:	f0 91 11 03 	lds	r31, 0x0311
    1966:	09 95       	icall
}
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_35>:
ISR(TIMER3_OVF_vect) 
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
  timer3_ovrflow_cnt++;
    19ac:	80 91 e8 05 	lds	r24, 0x05E8
    19b0:	90 91 e9 05 	lds	r25, 0x05E9
    19b4:	a0 91 ea 05 	lds	r26, 0x05EA
    19b8:	b0 91 eb 05 	lds	r27, 0x05EB
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	a1 1d       	adc	r26, r1
    19c0:	b1 1d       	adc	r27, r1
    19c2:	80 93 e8 05 	sts	0x05E8, r24
    19c6:	90 93 e9 05 	sts	0x05E9, r25
    19ca:	a0 93 ea 05 	sts	0x05EA, r26
    19ce:	b0 93 eb 05 	sts	0x05EB, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER3_OVF_interrupt);
    19d2:	80 91 1a 03 	lds	r24, 0x031A
    19d6:	90 91 1b 03 	lds	r25, 0x031B
    19da:	89 2b       	or	r24, r25
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <__vector_35+0x5e>
    19de:	e0 91 1a 03 	lds	r30, 0x031A
    19e2:	f0 91 1b 03 	lds	r31, 0x031B
    19e6:	09 95       	icall
}
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_45>:
ISR(TIMER4_OVF_vect) 
{
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
  timer4_ovrflow_cnt++;
    1a2c:	80 91 d4 05 	lds	r24, 0x05D4
    1a30:	90 91 d5 05 	lds	r25, 0x05D5
    1a34:	a0 91 d6 05 	lds	r26, 0x05D6
    1a38:	b0 91 d7 05 	lds	r27, 0x05D7
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	a1 1d       	adc	r26, r1
    1a40:	b1 1d       	adc	r27, r1
    1a42:	80 93 d4 05 	sts	0x05D4, r24
    1a46:	90 93 d5 05 	sts	0x05D5, r25
    1a4a:	a0 93 d6 05 	sts	0x05D6, r26
    1a4e:	b0 93 d7 05 	sts	0x05D7, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER4_OVF_interrupt);
    1a52:	80 91 24 03 	lds	r24, 0x0324
    1a56:	90 91 25 03 	lds	r25, 0x0325
    1a5a:	89 2b       	or	r24, r25
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <__vector_45+0x5e>
    1a5e:	e0 91 24 03 	lds	r30, 0x0324
    1a62:	f0 91 25 03 	lds	r31, 0x0325
    1a66:	09 95       	icall
}
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_50>:
ISR(TIMER5_OVF_vect) 
{
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
  timer5_ovrflow_cnt++;
    1aac:	80 91 ec 05 	lds	r24, 0x05EC
    1ab0:	90 91 ed 05 	lds	r25, 0x05ED
    1ab4:	a0 91 ee 05 	lds	r26, 0x05EE
    1ab8:	b0 91 ef 05 	lds	r27, 0x05EF
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	b1 1d       	adc	r27, r1
    1ac2:	80 93 ec 05 	sts	0x05EC, r24
    1ac6:	90 93 ed 05 	sts	0x05ED, r25
    1aca:	a0 93 ee 05 	sts	0x05EE, r26
    1ace:	b0 93 ef 05 	sts	0x05EF, r27
  RUN_USER_DEFINE_INTERRUPT(TIMER5_OVF_interrupt);
    1ad2:	80 91 2e 03 	lds	r24, 0x032E
    1ad6:	90 91 2f 03 	lds	r25, 0x032F
    1ada:	89 2b       	or	r24, r25
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <__vector_50+0x5e>
    1ade:	e0 91 2e 03 	lds	r30, 0x032E
    1ae2:	f0 91 2f 03 	lds	r31, 0x032F
    1ae6:	09 95       	icall
}
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <__vector_21>:
ISR(TIMER0_COMPA_vect)
{
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPA_interrupt);
    1b2c:	80 91 fc 02 	lds	r24, 0x02FC
    1b30:	90 91 fd 02 	lds	r25, 0x02FD
    1b34:	89 2b       	or	r24, r25
    1b36:	29 f0       	breq	.+10     	; 0x1b42 <__vector_21+0x38>
    1b38:	e0 91 fc 02 	lds	r30, 0x02FC
    1b3c:	f0 91 fd 02 	lds	r31, 0x02FD
    1b40:	09 95       	icall
}
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <__vector_22>:
ISR(TIMER0_COMPB_vect)
{
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	2f 93       	push	r18
    1b70:	3f 93       	push	r19
    1b72:	4f 93       	push	r20
    1b74:	5f 93       	push	r21
    1b76:	6f 93       	push	r22
    1b78:	7f 93       	push	r23
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	af 93       	push	r26
    1b80:	bf 93       	push	r27
    1b82:	ef 93       	push	r30
    1b84:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER0_COMPB_interrupt);
    1b86:	80 91 fe 02 	lds	r24, 0x02FE
    1b8a:	90 91 ff 02 	lds	r25, 0x02FF
    1b8e:	89 2b       	or	r24, r25
    1b90:	29 f0       	breq	.+10     	; 0x1b9c <__vector_22+0x38>
    1b92:	e0 91 fe 02 	lds	r30, 0x02FE
    1b96:	f0 91 ff 02 	lds	r31, 0x02FF
    1b9a:	09 95       	icall
}
    1b9c:	ff 91       	pop	r31
    1b9e:	ef 91       	pop	r30
    1ba0:	bf 91       	pop	r27
    1ba2:	af 91       	pop	r26
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	7f 91       	pop	r23
    1baa:	6f 91       	pop	r22
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_16>:
ISR(TIMER1_CAPT_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	2f 93       	push	r18
    1bca:	3f 93       	push	r19
    1bcc:	4f 93       	push	r20
    1bce:	5f 93       	push	r21
    1bd0:	6f 93       	push	r22
    1bd2:	7f 93       	push	r23
    1bd4:	8f 93       	push	r24
    1bd6:	9f 93       	push	r25
    1bd8:	af 93       	push	r26
    1bda:	bf 93       	push	r27
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_CAPT_interrupt);
    1be0:	80 91 02 03 	lds	r24, 0x0302
    1be4:	90 91 03 03 	lds	r25, 0x0303
    1be8:	89 2b       	or	r24, r25
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <__vector_16+0x38>
    1bec:	e0 91 02 03 	lds	r30, 0x0302
    1bf0:	f0 91 03 03 	lds	r31, 0x0303
    1bf4:	09 95       	icall
}
    1bf6:	ff 91       	pop	r31
    1bf8:	ef 91       	pop	r30
    1bfa:	bf 91       	pop	r27
    1bfc:	af 91       	pop	r26
    1bfe:	9f 91       	pop	r25
    1c00:	8f 91       	pop	r24
    1c02:	7f 91       	pop	r23
    1c04:	6f 91       	pop	r22
    1c06:	5f 91       	pop	r21
    1c08:	4f 91       	pop	r20
    1c0a:	3f 91       	pop	r19
    1c0c:	2f 91       	pop	r18
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	0f 90       	pop	r0
    1c14:	1f 90       	pop	r1
    1c16:	18 95       	reti

00001c18 <__vector_18>:
{
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPA_interrupt);
}
*/
ISR(TIMER1_COMPB_vect)
{
    1c18:	1f 92       	push	r1
    1c1a:	0f 92       	push	r0
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	0f 92       	push	r0
    1c20:	11 24       	eor	r1, r1
    1c22:	2f 93       	push	r18
    1c24:	3f 93       	push	r19
    1c26:	4f 93       	push	r20
    1c28:	5f 93       	push	r21
    1c2a:	6f 93       	push	r22
    1c2c:	7f 93       	push	r23
    1c2e:	8f 93       	push	r24
    1c30:	9f 93       	push	r25
    1c32:	af 93       	push	r26
    1c34:	bf 93       	push	r27
    1c36:	ef 93       	push	r30
    1c38:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPB_interrupt);
    1c3a:	80 91 06 03 	lds	r24, 0x0306
    1c3e:	90 91 07 03 	lds	r25, 0x0307
    1c42:	89 2b       	or	r24, r25
    1c44:	29 f0       	breq	.+10     	; 0x1c50 <__vector_18+0x38>
    1c46:	e0 91 06 03 	lds	r30, 0x0306
    1c4a:	f0 91 07 03 	lds	r31, 0x0307
    1c4e:	09 95       	icall
}
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER1_COMPC_interrupt);
    1c94:	80 91 08 03 	lds	r24, 0x0308
    1c98:	90 91 09 03 	lds	r25, 0x0309
    1c9c:	89 2b       	or	r24, r25
    1c9e:	29 f0       	breq	.+10     	; 0x1caa <__vector_19+0x38>
    1ca0:	e0 91 08 03 	lds	r30, 0x0308
    1ca4:	f0 91 09 03 	lds	r31, 0x0309
    1ca8:	09 95       	icall
}
    1caa:	ff 91       	pop	r31
    1cac:	ef 91       	pop	r30
    1cae:	bf 91       	pop	r27
    1cb0:	af 91       	pop	r26
    1cb2:	9f 91       	pop	r25
    1cb4:	8f 91       	pop	r24
    1cb6:	7f 91       	pop	r23
    1cb8:	6f 91       	pop	r22
    1cba:	5f 91       	pop	r21
    1cbc:	4f 91       	pop	r20
    1cbe:	3f 91       	pop	r19
    1cc0:	2f 91       	pop	r18
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <__vector_13>:
ISR(TIMER2_COMPA_vect)
{
    1ccc:	1f 92       	push	r1
    1cce:	0f 92       	push	r0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	2f 93       	push	r18
    1cd8:	3f 93       	push	r19
    1cda:	4f 93       	push	r20
    1cdc:	5f 93       	push	r21
    1cde:	6f 93       	push	r22
    1ce0:	7f 93       	push	r23
    1ce2:	8f 93       	push	r24
    1ce4:	9f 93       	push	r25
    1ce6:	af 93       	push	r26
    1ce8:	bf 93       	push	r27
    1cea:	ef 93       	push	r30
    1cec:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPA_interrupt);
    1cee:	80 91 0c 03 	lds	r24, 0x030C
    1cf2:	90 91 0d 03 	lds	r25, 0x030D
    1cf6:	89 2b       	or	r24, r25
    1cf8:	29 f0       	breq	.+10     	; 0x1d04 <__vector_13+0x38>
    1cfa:	e0 91 0c 03 	lds	r30, 0x030C
    1cfe:	f0 91 0d 03 	lds	r31, 0x030D
    1d02:	09 95       	icall
}
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <__vector_14>:
ISR(TIMER2_COMPB_vect)
{
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	2f 93       	push	r18
    1d32:	3f 93       	push	r19
    1d34:	4f 93       	push	r20
    1d36:	5f 93       	push	r21
    1d38:	6f 93       	push	r22
    1d3a:	7f 93       	push	r23
    1d3c:	8f 93       	push	r24
    1d3e:	9f 93       	push	r25
    1d40:	af 93       	push	r26
    1d42:	bf 93       	push	r27
    1d44:	ef 93       	push	r30
    1d46:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER2_COMPB_interrupt);
    1d48:	80 91 0e 03 	lds	r24, 0x030E
    1d4c:	90 91 0f 03 	lds	r25, 0x030F
    1d50:	89 2b       	or	r24, r25
    1d52:	29 f0       	breq	.+10     	; 0x1d5e <__vector_14+0x38>
    1d54:	e0 91 0e 03 	lds	r30, 0x030E
    1d58:	f0 91 0f 03 	lds	r31, 0x030F
    1d5c:	09 95       	icall
}
    1d5e:	ff 91       	pop	r31
    1d60:	ef 91       	pop	r30
    1d62:	bf 91       	pop	r27
    1d64:	af 91       	pop	r26
    1d66:	9f 91       	pop	r25
    1d68:	8f 91       	pop	r24
    1d6a:	7f 91       	pop	r23
    1d6c:	6f 91       	pop	r22
    1d6e:	5f 91       	pop	r21
    1d70:	4f 91       	pop	r20
    1d72:	3f 91       	pop	r19
    1d74:	2f 91       	pop	r18
    1d76:	0f 90       	pop	r0
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	0f 90       	pop	r0
    1d7c:	1f 90       	pop	r1
    1d7e:	18 95       	reti

00001d80 <__vector_31>:
ISR(TIMER3_CAPT_vect)
{
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_CAPT_interrupt);
    1da2:	80 91 12 03 	lds	r24, 0x0312
    1da6:	90 91 13 03 	lds	r25, 0x0313
    1daa:	89 2b       	or	r24, r25
    1dac:	29 f0       	breq	.+10     	; 0x1db8 <__vector_31+0x38>
    1dae:	e0 91 12 03 	lds	r30, 0x0312
    1db2:	f0 91 13 03 	lds	r31, 0x0313
    1db6:	09 95       	icall
}
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	bf 91       	pop	r27
    1dbe:	af 91       	pop	r26
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	7f 91       	pop	r23
    1dc6:	6f 91       	pop	r22
    1dc8:	5f 91       	pop	r21
    1dca:	4f 91       	pop	r20
    1dcc:	3f 91       	pop	r19
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <__vector_32>:
ISR(TIMER3_COMPA_vect)
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPA_interrupt);
    1dfc:	80 91 14 03 	lds	r24, 0x0314
    1e00:	90 91 15 03 	lds	r25, 0x0315
    1e04:	89 2b       	or	r24, r25
    1e06:	29 f0       	breq	.+10     	; 0x1e12 <__vector_32+0x38>
    1e08:	e0 91 14 03 	lds	r30, 0x0314
    1e0c:	f0 91 15 03 	lds	r31, 0x0315
    1e10:	09 95       	icall
}
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	0f 90       	pop	r0
    1e30:	1f 90       	pop	r1
    1e32:	18 95       	reti

00001e34 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPB_interrupt);
    1e56:	80 91 16 03 	lds	r24, 0x0316
    1e5a:	90 91 17 03 	lds	r25, 0x0317
    1e5e:	89 2b       	or	r24, r25
    1e60:	29 f0       	breq	.+10     	; 0x1e6c <__vector_33+0x38>
    1e62:	e0 91 16 03 	lds	r30, 0x0316
    1e66:	f0 91 17 03 	lds	r31, 0x0317
    1e6a:	09 95       	icall
}
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	0f 90       	pop	r0
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	0f 90       	pop	r0
    1e8a:	1f 90       	pop	r1
    1e8c:	18 95       	reti

00001e8e <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    1e8e:	1f 92       	push	r1
    1e90:	0f 92       	push	r0
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	0f 92       	push	r0
    1e96:	11 24       	eor	r1, r1
    1e98:	2f 93       	push	r18
    1e9a:	3f 93       	push	r19
    1e9c:	4f 93       	push	r20
    1e9e:	5f 93       	push	r21
    1ea0:	6f 93       	push	r22
    1ea2:	7f 93       	push	r23
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	af 93       	push	r26
    1eaa:	bf 93       	push	r27
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER3_COMPC_interrupt);
    1eb0:	80 91 18 03 	lds	r24, 0x0318
    1eb4:	90 91 19 03 	lds	r25, 0x0319
    1eb8:	89 2b       	or	r24, r25
    1eba:	29 f0       	breq	.+10     	; 0x1ec6 <__vector_34+0x38>
    1ebc:	e0 91 18 03 	lds	r30, 0x0318
    1ec0:	f0 91 19 03 	lds	r31, 0x0319
    1ec4:	09 95       	icall
}
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	bf 91       	pop	r27
    1ecc:	af 91       	pop	r26
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	7f 91       	pop	r23
    1ed4:	6f 91       	pop	r22
    1ed6:	5f 91       	pop	r21
    1ed8:	4f 91       	pop	r20
    1eda:	3f 91       	pop	r19
    1edc:	2f 91       	pop	r18
    1ede:	0f 90       	pop	r0
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	0f 90       	pop	r0
    1ee4:	1f 90       	pop	r1
    1ee6:	18 95       	reti

00001ee8 <__vector_41>:
ISR(TIMER4_CAPT_vect)
{
    1ee8:	1f 92       	push	r1
    1eea:	0f 92       	push	r0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	0f 92       	push	r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	2f 93       	push	r18
    1ef4:	3f 93       	push	r19
    1ef6:	4f 93       	push	r20
    1ef8:	5f 93       	push	r21
    1efa:	6f 93       	push	r22
    1efc:	7f 93       	push	r23
    1efe:	8f 93       	push	r24
    1f00:	9f 93       	push	r25
    1f02:	af 93       	push	r26
    1f04:	bf 93       	push	r27
    1f06:	ef 93       	push	r30
    1f08:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_CAPT_interrupt);
    1f0a:	80 91 1c 03 	lds	r24, 0x031C
    1f0e:	90 91 1d 03 	lds	r25, 0x031D
    1f12:	89 2b       	or	r24, r25
    1f14:	29 f0       	breq	.+10     	; 0x1f20 <__vector_41+0x38>
    1f16:	e0 91 1c 03 	lds	r30, 0x031C
    1f1a:	f0 91 1d 03 	lds	r31, 0x031D
    1f1e:	09 95       	icall
}
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	bf 91       	pop	r27
    1f26:	af 91       	pop	r26
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	7f 91       	pop	r23
    1f2e:	6f 91       	pop	r22
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	0f 90       	pop	r0
    1f3e:	1f 90       	pop	r1
    1f40:	18 95       	reti

00001f42 <__vector_42>:
ISR(TIMER4_COMPA_vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	2f 93       	push	r18
    1f4e:	3f 93       	push	r19
    1f50:	4f 93       	push	r20
    1f52:	5f 93       	push	r21
    1f54:	6f 93       	push	r22
    1f56:	7f 93       	push	r23
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	af 93       	push	r26
    1f5e:	bf 93       	push	r27
    1f60:	ef 93       	push	r30
    1f62:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPA_interrupt);
    1f64:	80 91 1e 03 	lds	r24, 0x031E
    1f68:	90 91 1f 03 	lds	r25, 0x031F
    1f6c:	89 2b       	or	r24, r25
    1f6e:	29 f0       	breq	.+10     	; 0x1f7a <__vector_42+0x38>
    1f70:	e0 91 1e 03 	lds	r30, 0x031E
    1f74:	f0 91 1f 03 	lds	r31, 0x031F
    1f78:	09 95       	icall
}
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <__vector_43>:
ISR(TIMER4_COMPB_vect)
{
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	2f 93       	push	r18
    1fa8:	3f 93       	push	r19
    1faa:	4f 93       	push	r20
    1fac:	5f 93       	push	r21
    1fae:	6f 93       	push	r22
    1fb0:	7f 93       	push	r23
    1fb2:	8f 93       	push	r24
    1fb4:	9f 93       	push	r25
    1fb6:	af 93       	push	r26
    1fb8:	bf 93       	push	r27
    1fba:	ef 93       	push	r30
    1fbc:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPB_interrupt);
    1fbe:	80 91 20 03 	lds	r24, 0x0320
    1fc2:	90 91 21 03 	lds	r25, 0x0321
    1fc6:	89 2b       	or	r24, r25
    1fc8:	29 f0       	breq	.+10     	; 0x1fd4 <__vector_43+0x38>
    1fca:	e0 91 20 03 	lds	r30, 0x0320
    1fce:	f0 91 21 03 	lds	r31, 0x0321
    1fd2:	09 95       	icall
}
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <__vector_44>:
ISR(TIMER4_COMPC_vect)
{
    1ff6:	1f 92       	push	r1
    1ff8:	0f 92       	push	r0
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	0f 92       	push	r0
    1ffe:	11 24       	eor	r1, r1
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER4_COMPC_interrupt);
    2018:	80 91 22 03 	lds	r24, 0x0322
    201c:	90 91 23 03 	lds	r25, 0x0323
    2020:	89 2b       	or	r24, r25
    2022:	29 f0       	breq	.+10     	; 0x202e <__vector_44+0x38>
    2024:	e0 91 22 03 	lds	r30, 0x0322
    2028:	f0 91 23 03 	lds	r31, 0x0323
    202c:	09 95       	icall
}
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	bf 91       	pop	r27
    2034:	af 91       	pop	r26
    2036:	9f 91       	pop	r25
    2038:	8f 91       	pop	r24
    203a:	7f 91       	pop	r23
    203c:	6f 91       	pop	r22
    203e:	5f 91       	pop	r21
    2040:	4f 91       	pop	r20
    2042:	3f 91       	pop	r19
    2044:	2f 91       	pop	r18
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
    2050:	1f 92       	push	r1
    2052:	0f 92       	push	r0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_CAPT_interrupt);
    2072:	80 91 26 03 	lds	r24, 0x0326
    2076:	90 91 27 03 	lds	r25, 0x0327
    207a:	89 2b       	or	r24, r25
    207c:	29 f0       	breq	.+10     	; 0x2088 <__vector_46+0x38>
    207e:	e0 91 26 03 	lds	r30, 0x0326
    2082:	f0 91 27 03 	lds	r31, 0x0327
    2086:	09 95       	icall
}
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	7f 91       	pop	r23
    2096:	6f 91       	pop	r22
    2098:	5f 91       	pop	r21
    209a:	4f 91       	pop	r20
    209c:	3f 91       	pop	r19
    209e:	2f 91       	pop	r18
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <__vector_47>:
ISR(TIMER5_COMPA_vect)
{
    20aa:	1f 92       	push	r1
    20ac:	0f 92       	push	r0
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	0f 92       	push	r0
    20b2:	11 24       	eor	r1, r1
    20b4:	2f 93       	push	r18
    20b6:	3f 93       	push	r19
    20b8:	4f 93       	push	r20
    20ba:	5f 93       	push	r21
    20bc:	6f 93       	push	r22
    20be:	7f 93       	push	r23
    20c0:	8f 93       	push	r24
    20c2:	9f 93       	push	r25
    20c4:	af 93       	push	r26
    20c6:	bf 93       	push	r27
    20c8:	ef 93       	push	r30
    20ca:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPA_interrupt);
    20cc:	80 91 28 03 	lds	r24, 0x0328
    20d0:	90 91 29 03 	lds	r25, 0x0329
    20d4:	89 2b       	or	r24, r25
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <__vector_47+0x38>
    20d8:	e0 91 28 03 	lds	r30, 0x0328
    20dc:	f0 91 29 03 	lds	r31, 0x0329
    20e0:	09 95       	icall
}
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <__vector_48>:
ISR(TIMER5_COMPB_vect)
{
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPB_interrupt);
    2126:	80 91 2a 03 	lds	r24, 0x032A
    212a:	90 91 2b 03 	lds	r25, 0x032B
    212e:	89 2b       	or	r24, r25
    2130:	29 f0       	breq	.+10     	; 0x213c <__vector_48+0x38>
    2132:	e0 91 2a 03 	lds	r30, 0x032A
    2136:	f0 91 2b 03 	lds	r31, 0x032B
    213a:	09 95       	icall
}
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__vector_49>:
ISR(TIMER5_COMPC_vect)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	2f 93       	push	r18
    216a:	3f 93       	push	r19
    216c:	4f 93       	push	r20
    216e:	5f 93       	push	r21
    2170:	6f 93       	push	r22
    2172:	7f 93       	push	r23
    2174:	8f 93       	push	r24
    2176:	9f 93       	push	r25
    2178:	af 93       	push	r26
    217a:	bf 93       	push	r27
    217c:	ef 93       	push	r30
    217e:	ff 93       	push	r31
  RUN_USER_DEFINE_INTERRUPT(TIMER5_COMPC_interrupt);
    2180:	80 91 2c 03 	lds	r24, 0x032C
    2184:	90 91 2d 03 	lds	r25, 0x032D
    2188:	89 2b       	or	r24, r25
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_49+0x38>
    218c:	e0 91 2c 03 	lds	r30, 0x032C
    2190:	f0 91 2d 03 	lds	r31, 0x032D
    2194:	09 95       	icall
}
    2196:	ff 91       	pop	r31
    2198:	ef 91       	pop	r30
    219a:	bf 91       	pop	r27
    219c:	af 91       	pop	r26
    219e:	9f 91       	pop	r25
    21a0:	8f 91       	pop	r24
    21a2:	7f 91       	pop	r23
    21a4:	6f 91       	pop	r22
    21a6:	5f 91       	pop	r21
    21a8:	4f 91       	pop	r20
    21aa:	3f 91       	pop	r19
    21ac:	2f 91       	pop	r18
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <__vector_default>:

ISR(BADISR_vect)
{
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	4f 93       	push	r20
    21c8:	5f 93       	push	r21
    21ca:	6f 93       	push	r22
    21cc:	7f 93       	push	r23
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	ef 93       	push	r30
    21d8:	ff 93       	push	r31
  rprintf("BAD_vect called!");
    21da:	00 d0       	rcall	.+0      	; 0x21dc <__vector_default+0x24>
    21dc:	0f 92       	push	r0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	ed b7       	in	r30, 0x3d	; 61
    21e2:	fe b7       	in	r31, 0x3e	; 62
    21e4:	81 83       	std	Z+1, r24	; 0x01
    21e6:	82 e2       	ldi	r24, 0x22	; 34
    21e8:	92 e0       	ldi	r25, 0x02	; 2
    21ea:	93 83       	std	Z+3, r25	; 0x03
    21ec:	82 83       	std	Z+2, r24	; 0x02
    21ee:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
}
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <uartSetRxHandler>:
}

void uartSetRxHandler(u08 nUart, void (*rx_func)(unsigned char c))
{
	// make sure the uart number is within bounds
	if(nUart < 4)
    221a:	84 30       	cpi	r24, 0x04	; 4
    221c:	40 f4       	brcc	.+16     	; 0x222e <uartSetRxHandler+0x14>
	{
		// set the receive interrupt to run the supplied user function
		UartRxFunc[nUart] = rx_func;
    221e:	e8 2f       	mov	r30, r24
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	e0 59       	subi	r30, 0x90	; 144
    2228:	fa 4f       	sbci	r31, 0xFA	; 250
    222a:	71 83       	std	Z+1, r23	; 0x01
    222c:	60 83       	st	Z, r22
    222e:	08 95       	ret

00002230 <uartSetBaudRate>:
	}
}

void uartSetBaudRate(u08 nUart, u32 baudrate)
{
    2230:	1f 93       	push	r17
    2232:	18 2f       	mov	r17, r24
    2234:	9a 01       	movw	r18, r20
    2236:	ab 01       	movw	r20, r22
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    2238:	ca 01       	movw	r24, r20
    223a:	b9 01       	movw	r22, r18
    223c:	60 58       	subi	r22, 0x80	; 128
    223e:	7b 47       	sbci	r23, 0x7B	; 123
    2240:	81 4e       	sbci	r24, 0xE1	; 225
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	f3 e0       	ldi	r31, 0x03	; 3
    2246:	66 0f       	add	r22, r22
    2248:	77 1f       	adc	r23, r23
    224a:	88 1f       	adc	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	fa 95       	dec	r31
    2250:	d1 f7       	brne	.-12     	; 0x2246 <uartSetBaudRate+0x16>
    2252:	e4 e0       	ldi	r30, 0x04	; 4
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	44 1f       	adc	r20, r20
    225a:	55 1f       	adc	r21, r21
    225c:	ea 95       	dec	r30
    225e:	d1 f7       	brne	.-12     	; 0x2254 <uartSetBaudRate+0x24>
    2260:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2264:	21 50       	subi	r18, 0x01	; 1
    2266:	30 40       	sbci	r19, 0x00	; 0
	if(nUart==3)
    2268:	13 30       	cpi	r17, 0x03	; 3
    226a:	29 f4       	brne	.+10     	; 0x2276 <uartSetBaudRate+0x46>
	{
		outb(UBRR3L, bauddiv);
    226c:	20 93 34 01 	sts	0x0134, r18
		#ifdef UBRR3H
		outb(UBRR3H, bauddiv>>8);
    2270:	30 93 35 01 	sts	0x0135, r19
    2274:	12 c0       	rjmp	.+36     	; 0x229a <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==2)
    2276:	12 30       	cpi	r17, 0x02	; 2
    2278:	29 f4       	brne	.+10     	; 0x2284 <uartSetBaudRate+0x54>
	{
		outb(UBRR2L, bauddiv);
    227a:	20 93 d4 00 	sts	0x00D4, r18
		#ifdef UBRR2H
		outb(UBRR2H, bauddiv>>8);
    227e:	30 93 d5 00 	sts	0x00D5, r19
    2282:	0b c0       	rjmp	.+22     	; 0x229a <uartSetBaudRate+0x6a>
		#endif
	}
	else if(nUart==1)
    2284:	11 30       	cpi	r17, 0x01	; 1
    2286:	29 f4       	brne	.+10     	; 0x2292 <uartSetBaudRate+0x62>
	{
		outb(UBRR1L, bauddiv);
    2288:	20 93 cc 00 	sts	0x00CC, r18
		#ifdef UBRR1H
		outb(UBRR1H, bauddiv>>8);
    228c:	30 93 cd 00 	sts	0x00CD, r19
    2290:	04 c0       	rjmp	.+8      	; 0x229a <uartSetBaudRate+0x6a>
		#endif
	}
	else
	{
		outb(UBRR0L, bauddiv);
    2292:	20 93 c4 00 	sts	0x00C4, r18
		#ifdef UBRR0H
		outb(UBRR0H, bauddiv>>8);
    2296:	30 93 c5 00 	sts	0x00C5, r19
		#endif
	}
}
    229a:	1f 91       	pop	r17
    229c:	08 95       	ret

0000229e <uartGetRxBuffer>:

cBuffer* uartGetRxBuffer(u08 nUart)
{
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	a3 e0       	ldi	r26, 0x03	; 3
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	aa 95       	dec	r26
    22aa:	e1 f7       	brne	.-8      	; 0x22a4 <uartGetRxBuffer+0x6>
    22ac:	2c 50       	subi	r18, 0x0C	; 12
    22ae:	3a 4f       	sbci	r19, 0xFA	; 250
	// return rx buffer pointer
	return &uartRxBuffer[nUart];
}
    22b0:	c9 01       	movw	r24, r18
    22b2:	08 95       	ret

000022b4 <uartGetTxBuffer>:

cBuffer* uartGetTxBuffer(u08 nUart)
{
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	b3 e0       	ldi	r27, 0x03	; 3
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	ba 95       	dec	r27
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <uartGetTxBuffer+0x6>
    22c2:	28 5e       	subi	r18, 0xE8	; 232
    22c4:	39 4f       	sbci	r19, 0xF9	; 249
	// return tx buffer pointer
	return &uartTxBuffer[nUart];
}
    22c6:	c9 01       	movw	r24, r18
    22c8:	08 95       	ret

000022ca <uartSendByte>:

void uartSendByte(u08 nUart, u08 txData)
{
    22ca:	e8 2f       	mov	r30, r24
	// wait for the transmitter to be ready
//	while(!uartReadyTx[nUart]);
	// send byte
	if(nUart==3)
    22cc:	83 30       	cpi	r24, 0x03	; 3
    22ce:	39 f4       	brne	.+14     	; 0x22de <uartSendByte+0x14>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    22d0:	80 91 30 01 	lds	r24, 0x0130
    22d4:	85 ff       	sbrs	r24, 5
    22d6:	fc cf       	rjmp	.-8      	; 0x22d0 <uartSendByte+0x6>
		outb(UDR3, txData);
    22d8:	60 93 36 01 	sts	0x0136, r22
    22dc:	18 c0       	rjmp	.+48     	; 0x230e <uartSendByte+0x44>
	}
	else if(nUart==2)
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	39 f4       	brne	.+14     	; 0x22f0 <uartSendByte+0x26>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    22e2:	80 91 d0 00 	lds	r24, 0x00D0
    22e6:	85 ff       	sbrs	r24, 5
    22e8:	fc cf       	rjmp	.-8      	; 0x22e2 <uartSendByte+0x18>
		outb(UDR2, txData);
    22ea:	60 93 d6 00 	sts	0x00D6, r22
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <uartSendByte+0x44>
	}
	else if(nUart==1)
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	39 f4       	brne	.+14     	; 0x2302 <uartSendByte+0x38>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    22f4:	80 91 c8 00 	lds	r24, 0x00C8
    22f8:	85 ff       	sbrs	r24, 5
    22fa:	fc cf       	rjmp	.-8      	; 0x22f4 <uartSendByte+0x2a>
		outb(UDR1, txData);
    22fc:	60 93 ce 00 	sts	0x00CE, r22
    2300:	06 c0       	rjmp	.+12     	; 0x230e <uartSendByte+0x44>
	}
	else
	{
		while(!(UCSR0A & (1<<UDRE0)));
    2302:	80 91 c0 00 	lds	r24, 0x00C0
    2306:	85 ff       	sbrs	r24, 5
    2308:	fc cf       	rjmp	.-8      	; 0x2302 <uartSendByte+0x38>
		outb(UDR0, txData);
    230a:	60 93 c6 00 	sts	0x00C6, r22
	}
	// set ready state to FALSE
	uartReadyTx[nUart] = FALSE;
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	e0 51       	subi	r30, 0x10	; 16
    2312:	fa 4f       	sbci	r31, 0xFA	; 250
    2314:	10 82       	st	Z, r1
}
    2316:	08 95       	ret

00002318 <uart0SendByte>:

void uart0SendByte(u08 data)
{
    2318:	68 2f       	mov	r22, r24
	// send byte on UART0
	uartSendByte(0, data);
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
}
    2320:	08 95       	ret

00002322 <uart1SendByte>:

void uart1SendByte(u08 data)
{
    2322:	68 2f       	mov	r22, r24
	// send byte on UART1
	uartSendByte(1, data);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
}
    232a:	08 95       	ret

0000232c <uart2SendByte>:

void uart2SendByte(u08 data)
{
    232c:	68 2f       	mov	r22, r24
	// send byte on UART2
	uartSendByte(2, data);
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
}
    2334:	08 95       	ret

00002336 <uart3SendByte>:

void uart3SendByte(u08 data)
{
    2336:	68 2f       	mov	r22, r24
	// send byte on UART3
	uartSendByte(3, data);
    2338:	83 e0       	ldi	r24, 0x03	; 3
    233a:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
}
    233e:	08 95       	ret

00002340 <uartReceiveBufferIsEmpty>:
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
}

u08 uartReceiveBufferIsEmpty(u08 nUart)
{
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	e8 2f       	mov	r30, r24
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	8a 95       	dec	r24
    234e:	e1 f7       	brne	.-8      	; 0x2348 <uartReceiveBufferIsEmpty+0x8>
    2350:	e8 50       	subi	r30, 0x08	; 8
    2352:	fa 4f       	sbci	r31, 0xFA	; 250
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	89 2b       	or	r24, r25
    235a:	09 f4       	brne	.+2      	; 0x235e <uartReceiveBufferIsEmpty+0x1e>
    235c:	21 e0       	ldi	r18, 0x01	; 1
	return (uartRxBuffer[nUart].datalength == 0);
}
    235e:	82 2f       	mov	r24, r18
    2360:	08 95       	ret

00002362 <uartReceiveService>:
	}
}

// UART Receive Complete Interrupt Function
void uartReceiveService(u08 nUart)
{
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
	u08 c;
	// get received char
	if(nUart==3)
    2366:	83 30       	cpi	r24, 0x03	; 3
    2368:	19 f4       	brne	.+6      	; 0x2370 <uartReceiveService+0xe>
		c = inb(UDR3);
    236a:	60 91 36 01 	lds	r22, 0x0136
    236e:	0c c0       	rjmp	.+24     	; 0x2388 <uartReceiveService+0x26>
	else if(nUart==2)
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	19 f4       	brne	.+6      	; 0x237a <uartReceiveService+0x18>
		c = inb(UDR2);
    2374:	60 91 d6 00 	lds	r22, 0x00D6
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <uartReceiveService+0x26>
	else if(nUart==1)
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	19 f4       	brne	.+6      	; 0x2384 <uartReceiveService+0x22>
		c = inb(UDR1);
    237e:	60 91 ce 00 	lds	r22, 0x00CE
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <uartReceiveService+0x26>
	else
		c = inb(UDR0);
    2384:	60 91 c6 00 	lds	r22, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc[nUart])
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	e9 01       	movw	r28, r18
    238e:	cc 0f       	add	r28, r28
    2390:	dd 1f       	adc	r29, r29
    2392:	fe 01       	movw	r30, r28
    2394:	e0 59       	subi	r30, 0x90	; 144
    2396:	fa 4f       	sbci	r31, 0xFA	; 250
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	89 2b       	or	r24, r25
    239e:	31 f0       	breq	.+12     	; 0x23ac <uartReceiveService+0x4a>
	{
		// call it and pass the received data
		UartRxFunc[nUart](c);
    23a0:	01 90       	ld	r0, Z+
    23a2:	f0 81       	ld	r31, Z
    23a4:	e0 2d       	mov	r30, r0
    23a6:	86 2f       	mov	r24, r22
    23a8:	09 95       	icall
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <uartReceiveService+0x72>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer[nUart], c) )
    23ac:	93 e0       	ldi	r25, 0x03	; 3
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	9a 95       	dec	r25
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <uartReceiveService+0x4c>
    23b6:	c9 01       	movw	r24, r18
    23b8:	8c 50       	subi	r24, 0x0C	; 12
    23ba:	9a 4f       	sbci	r25, 0xFA	; 250
    23bc:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
    23c0:	88 23       	and	r24, r24
    23c2:	41 f4       	brne	.+16     	; 0x23d4 <uartReceiveService+0x72>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow[nUart]++;
    23c4:	fe 01       	movw	r30, r28
    23c6:	e8 5c       	subi	r30, 0xC8	; 200
    23c8:	f9 4f       	sbci	r31, 0xF9	; 249
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
		}
	}
}
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <__vector_54>:
{
	uartReceiveService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_RECV)      
{
    23da:	1f 92       	push	r1
    23dc:	0f 92       	push	r0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	0f 92       	push	r0
    23e2:	11 24       	eor	r1, r1
    23e4:	2f 93       	push	r18
    23e6:	3f 93       	push	r19
    23e8:	4f 93       	push	r20
    23ea:	5f 93       	push	r21
    23ec:	6f 93       	push	r22
    23ee:	7f 93       	push	r23
    23f0:	8f 93       	push	r24
    23f2:	9f 93       	push	r25
    23f4:	af 93       	push	r26
    23f6:	bf 93       	push	r27
    23f8:	ef 93       	push	r30
    23fa:	ff 93       	push	r31
	uartReceiveService(3);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	0e 94 b1 11 	call	0x2362	; 0x2362 <uartReceiveService>
}
    2402:	ff 91       	pop	r31
    2404:	ef 91       	pop	r30
    2406:	bf 91       	pop	r27
    2408:	af 91       	pop	r26
    240a:	9f 91       	pop	r25
    240c:	8f 91       	pop	r24
    240e:	7f 91       	pop	r23
    2410:	6f 91       	pop	r22
    2412:	5f 91       	pop	r21
    2414:	4f 91       	pop	r20
    2416:	3f 91       	pop	r19
    2418:	2f 91       	pop	r18
    241a:	0f 90       	pop	r0
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	0f 90       	pop	r0
    2420:	1f 90       	pop	r1
    2422:	18 95       	reti

00002424 <__vector_51>:
{
	uartReceiveService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_RECV)      
{
    2424:	1f 92       	push	r1
    2426:	0f 92       	push	r0
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	0f 92       	push	r0
    242c:	11 24       	eor	r1, r1
    242e:	2f 93       	push	r18
    2430:	3f 93       	push	r19
    2432:	4f 93       	push	r20
    2434:	5f 93       	push	r21
    2436:	6f 93       	push	r22
    2438:	7f 93       	push	r23
    243a:	8f 93       	push	r24
    243c:	9f 93       	push	r25
    243e:	af 93       	push	r26
    2440:	bf 93       	push	r27
    2442:	ef 93       	push	r30
    2444:	ff 93       	push	r31
	uartReceiveService(2);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	0e 94 b1 11 	call	0x2362	; 0x2362 <uartReceiveService>
}
    244c:	ff 91       	pop	r31
    244e:	ef 91       	pop	r30
    2450:	bf 91       	pop	r27
    2452:	af 91       	pop	r26
    2454:	9f 91       	pop	r25
    2456:	8f 91       	pop	r24
    2458:	7f 91       	pop	r23
    245a:	6f 91       	pop	r22
    245c:	5f 91       	pop	r21
    245e:	4f 91       	pop	r20
    2460:	3f 91       	pop	r19
    2462:	2f 91       	pop	r18
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0
    246a:	1f 90       	pop	r1
    246c:	18 95       	reti

0000246e <__vector_36>:
{
	uartReceiveService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_RECV)      
{
    246e:	1f 92       	push	r1
    2470:	0f 92       	push	r0
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	0f 92       	push	r0
    2476:	11 24       	eor	r1, r1
    2478:	2f 93       	push	r18
    247a:	3f 93       	push	r19
    247c:	4f 93       	push	r20
    247e:	5f 93       	push	r21
    2480:	6f 93       	push	r22
    2482:	7f 93       	push	r23
    2484:	8f 93       	push	r24
    2486:	9f 93       	push	r25
    2488:	af 93       	push	r26
    248a:	bf 93       	push	r27
    248c:	ef 93       	push	r30
    248e:	ff 93       	push	r31
	uartReceiveService(1);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	0e 94 b1 11 	call	0x2362	; 0x2362 <uartReceiveService>
}
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	bf 91       	pop	r27
    249c:	af 91       	pop	r26
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	7f 91       	pop	r23
    24a4:	6f 91       	pop	r22
    24a6:	5f 91       	pop	r21
    24a8:	4f 91       	pop	r20
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	0f 90       	pop	r0
    24b4:	1f 90       	pop	r1
    24b6:	18 95       	reti

000024b8 <__vector_25>:
	uartTransmitService(3);
}

	// service UART receive interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_RECV)      
{
    24b8:	1f 92       	push	r1
    24ba:	0f 92       	push	r0
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	0f 92       	push	r0
    24c0:	11 24       	eor	r1, r1
    24c2:	2f 93       	push	r18
    24c4:	3f 93       	push	r19
    24c6:	4f 93       	push	r20
    24c8:	5f 93       	push	r21
    24ca:	6f 93       	push	r22
    24cc:	7f 93       	push	r23
    24ce:	8f 93       	push	r24
    24d0:	9f 93       	push	r25
    24d2:	af 93       	push	r26
    24d4:	bf 93       	push	r27
    24d6:	ef 93       	push	r30
    24d8:	ff 93       	push	r31
	uartReceiveService(0);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	0e 94 b1 11 	call	0x2362	; 0x2362 <uartReceiveService>
}
    24e0:	ff 91       	pop	r31
    24e2:	ef 91       	pop	r30
    24e4:	bf 91       	pop	r27
    24e6:	af 91       	pop	r26
    24e8:	9f 91       	pop	r25
    24ea:	8f 91       	pop	r24
    24ec:	7f 91       	pop	r23
    24ee:	6f 91       	pop	r22
    24f0:	5f 91       	pop	r21
    24f2:	4f 91       	pop	r20
    24f4:	3f 91       	pop	r19
    24f6:	2f 91       	pop	r18
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <uartSendBuffer>:
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
}

u08 uartSendBuffer(u08 nUart, char *buffer, u16 nBytes)
{
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	88 2e       	mov	r8, r24
    251c:	db 01       	movw	r26, r22
	register u08 first;
	register u16 i;

	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
    251e:	c8 2e       	mov	r12, r24
    2520:	dd 24       	eor	r13, r13
    2522:	f6 01       	movw	r30, r12
    2524:	13 e0       	ldi	r17, 0x03	; 3
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	1a 95       	dec	r17
    252c:	e1 f7       	brne	.-8      	; 0x2526 <uartSendBuffer+0x24>
    252e:	e4 5e       	subi	r30, 0xE4	; 228
    2530:	f9 4f       	sbci	r31, 0xF9	; 249
    2532:	20 81       	ld	r18, Z
    2534:	31 81       	ldd	r19, Z+1	; 0x01
    2536:	24 0f       	add	r18, r20
    2538:	35 1f       	adc	r19, r21
    253a:	f6 01       	movw	r30, r12
    253c:	73 e0       	ldi	r23, 0x03	; 3
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	7a 95       	dec	r23
    2544:	e1 f7       	brne	.-8      	; 0x253e <uartSendBuffer+0x3c>
    2546:	e6 5e       	subi	r30, 0xE6	; 230
    2548:	f9 4f       	sbci	r31, 0xF9	; 249
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	28 17       	cp	r18, r24
    2550:	39 07       	cpc	r19, r25
    2552:	70 f5       	brcc	.+92     	; 0x25b0 <uartSendBuffer+0xae>
    2554:	41 15       	cp	r20, r1
    2556:	51 05       	cpc	r21, r1
    2558:	59 f1       	breq	.+86     	; 0x25b0 <uartSendBuffer+0xae>
	{
		// grab first character
		first = *buffer++;
    255a:	9c 90       	ld	r9, X
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
    255c:	76 01       	movw	r14, r12
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	ee 0c       	add	r14, r14
    2562:	ff 1c       	adc	r15, r15
    2564:	6a 95       	dec	r22
    2566:	e1 f7       	brne	.-8      	; 0x2560 <uartSendBuffer+0x5e>
    2568:	88 e1       	ldi	r24, 0x18	; 24
    256a:	96 e0       	ldi	r25, 0x06	; 6
    256c:	e8 0e       	add	r14, r24
    256e:	f9 1e       	adc	r15, r25
    2570:	8d 01       	movw	r16, r26
    2572:	c0 e0       	ldi	r28, 0x00	; 0
    2574:	d0 e0       	ldi	r29, 0x00	; 0
	if((uartTxBuffer[nUart].datalength + nBytes < uartTxBuffer[nUart].size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
    2576:	5a 01       	movw	r10, r20
    2578:	08 94       	sec
    257a:	a1 08       	sbc	r10, r1
    257c:	b1 08       	sbc	r11, r1
    257e:	06 c0       	rjmp	.+12     	; 0x258c <uartSendBuffer+0x8a>
    2580:	c7 01       	movw	r24, r14
    2582:	f8 01       	movw	r30, r16
    2584:	60 81       	ld	r22, Z
    2586:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
    258a:	21 96       	adiw	r28, 0x01	; 1
    258c:	0f 5f       	subi	r16, 0xFF	; 255
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	ca 15       	cp	r28, r10
    2592:	db 05       	cpc	r29, r11
    2594:	a8 f3       	brcs	.-22     	; 0x2580 <uartSendBuffer+0x7e>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer[nUart], *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx[nUart] = TRUE;
    2596:	84 e1       	ldi	r24, 0x14	; 20
    2598:	96 e0       	ldi	r25, 0x06	; 6
    259a:	c8 0e       	add	r12, r24
    259c:	d9 1e       	adc	r13, r25
    259e:	8f ef       	ldi	r24, 0xFF	; 255
    25a0:	f6 01       	movw	r30, r12
    25a2:	80 83       	st	Z, r24
		uartSendByte(nUart, first);
    25a4:	88 2d       	mov	r24, r8
    25a6:	69 2d       	mov	r22, r9
    25a8:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <uartSendBuffer+0xb0>
		// return success
		return TRUE;
    25b0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// return failure
		return FALSE;
	}
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	08 95       	ret

000025cc <uartAddToTxBuffer>:
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	23 e0       	ldi	r18, 0x03	; 3
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	2a 95       	dec	r18
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <uartAddToTxBuffer+0x4>
    25d8:	88 5e       	subi	r24, 0xE8	; 232
    25da:	99 4f       	sbci	r25, 0xF9	; 249
    25dc:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
}
    25e0:	08 95       	ret

000025e2 <uart3AddToTxBuffer>:
{
	uartAddToTxBuffer(2,data);
}

void uart3AddToTxBuffer(u08 data)
{
    25e2:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    25e4:	80 e3       	ldi	r24, 0x30	; 48
    25e6:	96 e0       	ldi	r25, 0x06	; 6
    25e8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
}

void uart3AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(3,data);
}
    25ec:	08 95       	ret

000025ee <uart2AddToTxBuffer>:
{
	uartAddToTxBuffer(1,data);
}

void uart2AddToTxBuffer(u08 data)
{
    25ee:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    25f0:	88 e2       	ldi	r24, 0x28	; 40
    25f2:	96 e0       	ldi	r25, 0x06	; 6
    25f4:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
}

void uart2AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(2,data);
}
    25f8:	08 95       	ret

000025fa <uart1AddToTxBuffer>:
{
	uartAddToTxBuffer(0,data);
}

void uart1AddToTxBuffer(u08 data)
{
    25fa:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    25fc:	80 e2       	ldi	r24, 0x20	; 32
    25fe:	96 e0       	ldi	r25, 0x06	; 6
    2600:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
}

void uart1AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(1,data);
}
    2604:	08 95       	ret

00002606 <uart0AddToTxBuffer>:
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
}

void uart0AddToTxBuffer(u08 data)
{
    2606:	68 2f       	mov	r22, r24
}

void uartAddToTxBuffer(u08 nUart, u08 data)
{
	// add data byte to the end of the tx buffer
	bufferAddToEnd(&uartTxBuffer[nUart], data);
    2608:	88 e1       	ldi	r24, 0x18	; 24
    260a:	96 e0       	ldi	r25, 0x06	; 6
    260c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <bufferAddToEnd>
}

void uart0AddToTxBuffer(u08 data)
{
	uartAddToTxBuffer(0,data);
}
    2610:	08 95       	ret

00002612 <uartTransmitService>:
	}
}

// UART Transmit Complete Interrupt Function
void uartTransmitService(u08 nUart)
{
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	28 2f       	mov	r18, r24
	// check if buffered tx is enabled
	if(uartBufferedTx[nUart])
    2618:	a8 2f       	mov	r26, r24
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ed 01       	movw	r28, r26
    261e:	cc 5e       	subi	r28, 0xEC	; 236
    2620:	d9 4f       	sbci	r29, 0xF9	; 249
    2622:	88 81       	ld	r24, Y
    2624:	88 23       	and	r24, r24
    2626:	79 f1       	breq	.+94     	; 0x2686 <uartTransmitService+0x74>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer[nUart].datalength)
    2628:	fd 01       	movw	r30, r26
    262a:	33 e0       	ldi	r19, 0x03	; 3
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	3a 95       	dec	r19
    2632:	e1 f7       	brne	.-8      	; 0x262c <uartTransmitService+0x1a>
    2634:	e4 5e       	subi	r30, 0xE4	; 228
    2636:	f9 4f       	sbci	r31, 0xF9	; 249
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	89 2b       	or	r24, r25
    263e:	11 f1       	breq	.+68     	; 0x2684 <uartTransmitService+0x72>
		{
			// send byte from top of buffer
			if(nUart==3)
    2640:	23 30       	cpi	r18, 0x03	; 3
    2642:	39 f4       	brne	.+14     	; 0x2652 <uartTransmitService+0x40>
				outb(UDR3,  bufferGetFromFront(&uartTxBuffer[3]) );
    2644:	80 e3       	ldi	r24, 0x30	; 48
    2646:	96 e0       	ldi	r25, 0x06	; 6
    2648:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    264c:	80 93 36 01 	sts	0x0136, r24
    2650:	1e c0       	rjmp	.+60     	; 0x268e <uartTransmitService+0x7c>
			else if(nUart==2)
    2652:	22 30       	cpi	r18, 0x02	; 2
    2654:	39 f4       	brne	.+14     	; 0x2664 <uartTransmitService+0x52>
				outb(UDR2,  bufferGetFromFront(&uartTxBuffer[2]) );
    2656:	88 e2       	ldi	r24, 0x28	; 40
    2658:	96 e0       	ldi	r25, 0x06	; 6
    265a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    265e:	80 93 d6 00 	sts	0x00D6, r24
    2662:	15 c0       	rjmp	.+42     	; 0x268e <uartTransmitService+0x7c>
			else if(nUart==1)
    2664:	21 30       	cpi	r18, 0x01	; 1
    2666:	39 f4       	brne	.+14     	; 0x2676 <uartTransmitService+0x64>
				outb(UDR1,  bufferGetFromFront(&uartTxBuffer[1]) );
    2668:	80 e2       	ldi	r24, 0x20	; 32
    266a:	96 e0       	ldi	r25, 0x06	; 6
    266c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    2670:	80 93 ce 00 	sts	0x00CE, r24
    2674:	0c c0       	rjmp	.+24     	; 0x268e <uartTransmitService+0x7c>
			else
				outb(UDR0,  bufferGetFromFront(&uartTxBuffer[0]) );
    2676:	88 e1       	ldi	r24, 0x18	; 24
    2678:	96 e0       	ldi	r25, 0x06	; 6
    267a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    267e:	80 93 c6 00 	sts	0x00C6, r24
    2682:	05 c0       	rjmp	.+10     	; 0x268e <uartTransmitService+0x7c>
		}
		else
		{
			// no data left
			uartBufferedTx[nUart] = FALSE;
    2684:	18 82       	st	Y, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx[nUart] = TRUE;
    2686:	a0 51       	subi	r26, 0x10	; 16
    2688:	ba 4f       	sbci	r27, 0xFA	; 250
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	8c 93       	st	X, r24
	}
}
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <__vector_56>:
{
	uartTransmitService(2);
}

UART_INTERRUPT_HANDLER(SIG_USART3_TRANS)      
{
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
	uartTransmitService(3);
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	0e 94 09 13 	call	0x2612	; 0x2612 <uartTransmitService>
}
    26bc:	ff 91       	pop	r31
    26be:	ef 91       	pop	r30
    26c0:	bf 91       	pop	r27
    26c2:	af 91       	pop	r26
    26c4:	9f 91       	pop	r25
    26c6:	8f 91       	pop	r24
    26c8:	7f 91       	pop	r23
    26ca:	6f 91       	pop	r22
    26cc:	5f 91       	pop	r21
    26ce:	4f 91       	pop	r20
    26d0:	3f 91       	pop	r19
    26d2:	2f 91       	pop	r18
    26d4:	0f 90       	pop	r0
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	0f 90       	pop	r0
    26da:	1f 90       	pop	r1
    26dc:	18 95       	reti

000026de <__vector_53>:
{
	uartTransmitService(1);
}

UART_INTERRUPT_HANDLER(SIG_USART2_TRANS)      
{
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	2f 93       	push	r18
    26ea:	3f 93       	push	r19
    26ec:	4f 93       	push	r20
    26ee:	5f 93       	push	r21
    26f0:	6f 93       	push	r22
    26f2:	7f 93       	push	r23
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	af 93       	push	r26
    26fa:	bf 93       	push	r27
    26fc:	ef 93       	push	r30
    26fe:	ff 93       	push	r31
	uartTransmitService(2);
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	0e 94 09 13 	call	0x2612	; 0x2612 <uartTransmitService>
}
    2706:	ff 91       	pop	r31
    2708:	ef 91       	pop	r30
    270a:	bf 91       	pop	r27
    270c:	af 91       	pop	r26
    270e:	9f 91       	pop	r25
    2710:	8f 91       	pop	r24
    2712:	7f 91       	pop	r23
    2714:	6f 91       	pop	r22
    2716:	5f 91       	pop	r21
    2718:	4f 91       	pop	r20
    271a:	3f 91       	pop	r19
    271c:	2f 91       	pop	r18
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0f 90       	pop	r0
    2724:	1f 90       	pop	r1
    2726:	18 95       	reti

00002728 <__vector_38>:
{
	uartTransmitService(0);
}

UART_INTERRUPT_HANDLER(SIG_USART1_TRANS)      
{
    2728:	1f 92       	push	r1
    272a:	0f 92       	push	r0
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	0f 92       	push	r0
    2730:	11 24       	eor	r1, r1
    2732:	2f 93       	push	r18
    2734:	3f 93       	push	r19
    2736:	4f 93       	push	r20
    2738:	5f 93       	push	r21
    273a:	6f 93       	push	r22
    273c:	7f 93       	push	r23
    273e:	8f 93       	push	r24
    2740:	9f 93       	push	r25
    2742:	af 93       	push	r26
    2744:	bf 93       	push	r27
    2746:	ef 93       	push	r30
    2748:	ff 93       	push	r31
	uartTransmitService(1);
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	0e 94 09 13 	call	0x2612	; 0x2612 <uartTransmitService>
}
    2750:	ff 91       	pop	r31
    2752:	ef 91       	pop	r30
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	7f 91       	pop	r23
    275e:	6f 91       	pop	r22
    2760:	5f 91       	pop	r21
    2762:	4f 91       	pop	r20
    2764:	3f 91       	pop	r19
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	0f 90       	pop	r0
    276e:	1f 90       	pop	r1
    2770:	18 95       	reti

00002772 <__vector_27>:
	}
}

	// service UART transmit interrupt
UART_INTERRUPT_HANDLER(SIG_USART0_TRANS)      
{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	2f 93       	push	r18
    277e:	3f 93       	push	r19
    2780:	4f 93       	push	r20
    2782:	5f 93       	push	r21
    2784:	6f 93       	push	r22
    2786:	7f 93       	push	r23
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
    278c:	af 93       	push	r26
    278e:	bf 93       	push	r27
    2790:	ef 93       	push	r30
    2792:	ff 93       	push	r31
	uartTransmitService(0);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	0e 94 09 13 	call	0x2612	; 0x2612 <uartTransmitService>
}
    279a:	ff 91       	pop	r31
    279c:	ef 91       	pop	r30
    279e:	bf 91       	pop	r27
    27a0:	af 91       	pop	r26
    27a2:	9f 91       	pop	r25
    27a4:	8f 91       	pop	r24
    27a6:	7f 91       	pop	r23
    27a8:	6f 91       	pop	r22
    27aa:	5f 91       	pop	r21
    27ac:	4f 91       	pop	r20
    27ae:	3f 91       	pop	r19
    27b0:	2f 91       	pop	r18
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	0f 90       	pop	r0
    27b8:	1f 90       	pop	r1
    27ba:	18 95       	reti

000027bc <uartSendTxBuffer>:
{
	uartAddToTxBuffer(3,data);
}

void uartSendTxBuffer(u08 nUart)
{
    27bc:	1f 93       	push	r17
    27be:	18 2f       	mov	r17, r24
	// turn on buffered transmit
	uartBufferedTx[nUart] = TRUE;
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	fc 01       	movw	r30, r24
    27c4:	ec 5e       	subi	r30, 0xEC	; 236
    27c6:	f9 4f       	sbci	r31, 0xF9	; 249
    27c8:	2f ef       	ldi	r18, 0xFF	; 255
    27ca:	20 83       	st	Z, r18
	// send the first byte to get things going by interrupts
	uartSendByte(nUart, bufferGetFromFront(&uartTxBuffer[nUart]));
    27cc:	43 e0       	ldi	r20, 0x03	; 3
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	4a 95       	dec	r20
    27d4:	e1 f7       	brne	.-8      	; 0x27ce <uartSendTxBuffer+0x12>
    27d6:	88 5e       	subi	r24, 0xE8	; 232
    27d8:	99 4f       	sbci	r25, 0xF9	; 249
    27da:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    27de:	68 2f       	mov	r22, r24
    27e0:	81 2f       	mov	r24, r17
    27e2:	0e 94 65 11 	call	0x22ca	; 0x22ca <uartSendByte>
}
    27e6:	1f 91       	pop	r17
    27e8:	08 95       	ret

000027ea <uartReceiveByte>:
		return -1;
}


u08 uartReceiveByte(u08 nUart, u08* rxData)
{
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	eb 01       	movw	r28, r22
	// make sure we have a receive buffer
	if(uartRxBuffer[nUart].size)
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	f9 01       	movw	r30, r18
    27f6:	73 e0       	ldi	r23, 0x03	; 3
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	7a 95       	dec	r23
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <uartReceiveByte+0xe>
    2800:	ea 50       	subi	r30, 0x0A	; 10
    2802:	fa 4f       	sbci	r31, 0xFA	; 250
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	89 2b       	or	r24, r25
    280a:	c9 f0       	breq	.+50     	; 0x283e <uartReceiveByte+0x54>
	{
		// make sure we have data
		if(uartRxBuffer[nUart].datalength)
    280c:	f9 01       	movw	r30, r18
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	6a 95       	dec	r22
    2816:	e1 f7       	brne	.-8      	; 0x2810 <uartReceiveByte+0x26>
    2818:	e8 50       	subi	r30, 0x08	; 8
    281a:	fa 4f       	sbci	r31, 0xFA	; 250
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	89 2b       	or	r24, r25
    2822:	69 f0       	breq	.+26     	; 0x283e <uartReceiveByte+0x54>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer[nUart]);
    2824:	53 e0       	ldi	r21, 0x03	; 3
    2826:	22 0f       	add	r18, r18
    2828:	33 1f       	adc	r19, r19
    282a:	5a 95       	dec	r21
    282c:	e1 f7       	brne	.-8      	; 0x2826 <uartReceiveByte+0x3c>
    282e:	c9 01       	movw	r24, r18
    2830:	8c 50       	subi	r24, 0x0C	; 12
    2832:	9a 4f       	sbci	r25, 0xFA	; 250
    2834:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <bufferGetFromFront>
    2838:	88 83       	st	Y, r24
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	01 c0       	rjmp	.+2      	; 0x2840 <uartReceiveByte+0x56>
			return TRUE;
    283e:	80 e0       	ldi	r24, 0x00	; 0
		else
			return FALSE;			// no data
	}
	else
		return FALSE;				// no buffer
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <uart3GetByte>:
	else
		return -1;
}

int uart3GetByte(void)
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	0f 92       	push	r0
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(3,&c))
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	be 01       	movw	r22, r28
    2854:	6f 5f       	subi	r22, 0xFF	; 255
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	0e 94 f5 13 	call	0x27ea	; 0x27ea <uartReceiveByte>
    285c:	88 23       	and	r24, r24
    285e:	19 f4       	brne	.+6      	; 0x2866 <uart3GetByte+0x20>
    2860:	2f ef       	ldi	r18, 0xFF	; 255
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	03 c0       	rjmp	.+6      	; 0x286c <uart3GetByte+0x26>
		return c;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    286c:	c9 01       	movw	r24, r18
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <uart2GetByte>:
	else
		return -1;
}

int uart2GetByte(void)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	0f 92       	push	r0
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(2,&c))
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	be 01       	movw	r22, r28
    2884:	6f 5f       	subi	r22, 0xFF	; 255
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	0e 94 f5 13 	call	0x27ea	; 0x27ea <uartReceiveByte>
    288c:	88 23       	and	r24, r24
    288e:	19 f4       	brne	.+6      	; 0x2896 <uart2GetByte+0x20>
    2890:	2f ef       	ldi	r18, 0xFF	; 255
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	03 c0       	rjmp	.+6      	; 0x289c <uart2GetByte+0x26>
		return c;
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	28 2f       	mov	r18, r24
    289a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    289c:	c9 01       	movw	r24, r18
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <uart1GetByte>:
	else
		return -1;
}

int uart1GetByte(void)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(1,&c))
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	be 01       	movw	r22, r28
    28b4:	6f 5f       	subi	r22, 0xFF	; 255
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <uartReceiveByte>
    28bc:	88 23       	and	r24, r24
    28be:	19 f4       	brne	.+6      	; 0x28c6 <uart1GetByte+0x20>
    28c0:	2f ef       	ldi	r18, 0xFF	; 255
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <uart1GetByte+0x26>
		return c;
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    28cc:	c9 01       	movw	r24, r18
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <uart0GetByte>:
	// send byte on UART3
	uartSendByte(3, data);
}

int uart0GetByte(void)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	0f 92       	push	r0
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
	// get single byte from receive buffer (if available)
	u08 c;
	if(uartReceiveByte(0,&c))
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	be 01       	movw	r22, r28
    28e4:	6f 5f       	subi	r22, 0xFF	; 255
    28e6:	7f 4f       	sbci	r23, 0xFF	; 255
    28e8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <uartReceiveByte>
    28ec:	88 23       	and	r24, r24
    28ee:	19 f4       	brne	.+6      	; 0x28f6 <uart0GetByte+0x20>
    28f0:	2f ef       	ldi	r18, 0xFF	; 255
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <uart0GetByte+0x26>
		return c;
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    28fc:	c9 01       	movw	r24, r18
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <uartFlushReceiveBuffer>:
}

void uartFlushReceiveBuffer(u08 nUart)
{
	// flush all data from receive buffer
	bufferFlush(&uartRxBuffer[nUart]);
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	e3 e0       	ldi	r30, 0x03	; 3
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	ea 95       	dec	r30
    2910:	e1 f7       	brne	.-8      	; 0x290a <uartFlushReceiveBuffer+0x4>
    2912:	8c 50       	subi	r24, 0x0C	; 12
    2914:	9a 4f       	sbci	r25, 0xFA	; 250
    2916:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <bufferFlush>
}
    291a:	08 95       	ret

0000291c <uart3InitBuffers>:

void uart3InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) uart3RxData, UART3_RX_BUFFER_SIZE);
    291c:	8c e0       	ldi	r24, 0x0C	; 12
    291e:	96 e0       	ldi	r25, 0x06	; 6
    2920:	60 ee       	ldi	r22, 0xE0	; 224
    2922:	74 e0       	ldi	r23, 0x04	; 4
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
		bufferInit(&uartTxBuffer[3], (u08*) uart3TxData, UART3_TX_BUFFER_SIZE);
    292c:	80 e3       	ldi	r24, 0x30	; 48
    292e:	96 e0       	ldi	r25, 0x06	; 6
    2930:	60 e6       	ldi	r22, 0x60	; 96
    2932:	75 e0       	ldi	r23, 0x05	; 5
    2934:	40 e1       	ldi	r20, 0x10	; 16
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
	#else
		// initialize the UART3 buffers
		bufferInit(&uartRxBuffer[3], (u08*) UART3_RX_BUFFER_ADDR, UART3_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[3], (u08*) UART3_TX_BUFFER_ADDR, UART3_TX_BUFFER_SIZE);
	#endif
}
    293c:	08 95       	ret

0000293e <uart3Init>:
}

void uart3Init(void)
{
	// initialize the buffers
	uart3InitBuffers();
    293e:	0e 94 8e 14 	call	0x291c	; 0x291c <uart3InitBuffers>
	// initialize user receive handlers
	UartRxFunc[3] = 0;
    2942:	10 92 77 05 	sts	0x0577, r1
    2946:	10 92 76 05 	sts	0x0576, r1
	// enable RxD/TxD and interrupts
	outb(UCSR3B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    294a:	88 ed       	ldi	r24, 0xD8	; 216
    294c:	80 93 31 01 	sts	0x0131, r24
	// set default baud rate
	uartSetBaudRate(3, UART3_DEFAULT_BAUD_RATE);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	55 e2       	ldi	r21, 0x25	; 37
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
	// initialize states
	uartReadyTx[3] = TRUE;
    295e:	8f ef       	ldi	r24, 0xFF	; 255
    2960:	80 93 f3 05 	sts	0x05F3, r24
	uartBufferedTx[3] = FALSE;
    2964:	10 92 17 06 	sts	0x0617, r1
	// clear overflow count
	uartRxOverflow[3] = 0;
    2968:	10 92 3f 06 	sts	0x063F, r1
    296c:	10 92 3e 06 	sts	0x063E, r1
	// enable interrupts
	sei();
    2970:	78 94       	sei
}
    2972:	08 95       	ret

00002974 <uart2InitBuffers>:

void uart2InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) uart2RxData, UART2_RX_BUFFER_SIZE);
    2974:	84 e0       	ldi	r24, 0x04	; 4
    2976:	96 e0       	ldi	r25, 0x06	; 6
    2978:	60 e5       	ldi	r22, 0x50	; 80
    297a:	74 e0       	ldi	r23, 0x04	; 4
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
		bufferInit(&uartTxBuffer[2], (u08*) uart2TxData, UART2_TX_BUFFER_SIZE);
    2984:	88 e2       	ldi	r24, 0x28	; 40
    2986:	96 e0       	ldi	r25, 0x06	; 6
    2988:	60 ed       	ldi	r22, 0xD0	; 208
    298a:	74 e0       	ldi	r23, 0x04	; 4
    298c:	40 e1       	ldi	r20, 0x10	; 16
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
	#else
		// initialize the UART2 buffers
		bufferInit(&uartRxBuffer[2], (u08*) UART2_RX_BUFFER_ADDR, UART2_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[2], (u08*) UART2_TX_BUFFER_ADDR, UART2_TX_BUFFER_SIZE);
	#endif
}
    2994:	08 95       	ret

00002996 <uart2Init>:
}

void uart2Init(void)
{
	// initialize the buffers
	uart2InitBuffers();
    2996:	0e 94 ba 14 	call	0x2974	; 0x2974 <uart2InitBuffers>
	// initialize user receive handlers
	UartRxFunc[2] = 0;
    299a:	10 92 75 05 	sts	0x0575, r1
    299e:	10 92 74 05 	sts	0x0574, r1
	// enable RxD/TxD and interrupts
	outb(UCSR2B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    29a2:	88 ed       	ldi	r24, 0xD8	; 216
    29a4:	80 93 d1 00 	sts	0x00D1, r24
	// set default baud rate
	uartSetBaudRate(2, UART2_DEFAULT_BAUD_RATE);
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	55 e2       	ldi	r21, 0x25	; 37
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
	// initialize states
	uartReadyTx[2] = TRUE;
    29b6:	8f ef       	ldi	r24, 0xFF	; 255
    29b8:	80 93 f2 05 	sts	0x05F2, r24
	uartBufferedTx[2] = FALSE;
    29bc:	10 92 16 06 	sts	0x0616, r1
	// clear overflow count
	uartRxOverflow[2] = 0;
    29c0:	10 92 3d 06 	sts	0x063D, r1
    29c4:	10 92 3c 06 	sts	0x063C, r1
	// enable interrupts
	sei();
    29c8:	78 94       	sei
}
    29ca:	08 95       	ret

000029cc <uart1InitBuffers>:

void uart1InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) uart1RxData, UART1_RX_BUFFER_SIZE);
    29cc:	8c ef       	ldi	r24, 0xFC	; 252
    29ce:	95 e0       	ldi	r25, 0x05	; 5
    29d0:	60 ec       	ldi	r22, 0xC0	; 192
    29d2:	73 e0       	ldi	r23, 0x03	; 3
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
		bufferInit(&uartTxBuffer[1], (u08*) uart1TxData, UART1_TX_BUFFER_SIZE);
    29dc:	80 e2       	ldi	r24, 0x20	; 32
    29de:	96 e0       	ldi	r25, 0x06	; 6
    29e0:	60 e4       	ldi	r22, 0x40	; 64
    29e2:	74 e0       	ldi	r23, 0x04	; 4
    29e4:	40 e1       	ldi	r20, 0x10	; 16
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
	#else
		// initialize the UART1 buffers
		bufferInit(&uartRxBuffer[1], (u08*) UART1_RX_BUFFER_ADDR, UART1_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[1], (u08*) UART1_TX_BUFFER_ADDR, UART1_TX_BUFFER_SIZE);
	#endif
}
    29ec:	08 95       	ret

000029ee <uart1Init>:
}

void uart1Init(void)
{
	// initialize the buffers
	uart1InitBuffers();
    29ee:	0e 94 e6 14 	call	0x29cc	; 0x29cc <uart1InitBuffers>
	// initialize user receive handlers
	UartRxFunc[1] = 0;
    29f2:	10 92 73 05 	sts	0x0573, r1
    29f6:	10 92 72 05 	sts	0x0572, r1
	// enable RxD/TxD and interrupts
	outb(UCSR1B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    29fa:	88 ed       	ldi	r24, 0xD8	; 216
    29fc:	80 93 c9 00 	sts	0x00C9, r24
	// set default baud rate
	uartSetBaudRate(1, UART1_DEFAULT_BAUD_RATE);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	55 e2       	ldi	r21, 0x25	; 37
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
	// initialize states
	uartReadyTx[1] = TRUE;
    2a0e:	8f ef       	ldi	r24, 0xFF	; 255
    2a10:	80 93 f1 05 	sts	0x05F1, r24
	uartBufferedTx[1] = FALSE;
    2a14:	10 92 15 06 	sts	0x0615, r1
	// clear overflow count
	uartRxOverflow[1] = 0;
    2a18:	10 92 3b 06 	sts	0x063B, r1
    2a1c:	10 92 3a 06 	sts	0x063A, r1
	// enable interrupts
	sei();
    2a20:	78 94       	sei
}
    2a22:	08 95       	ret

00002a24 <uart0InitBuffers>:

void uart0InitBuffers(void)
{
	#ifndef UART_BUFFER_EXTERNAL_RAM
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) uart0RxData, UART0_RX_BUFFER_SIZE);
    2a24:	84 ef       	ldi	r24, 0xF4	; 244
    2a26:	95 e0       	ldi	r25, 0x05	; 5
    2a28:	60 e3       	ldi	r22, 0x30	; 48
    2a2a:	73 e0       	ldi	r23, 0x03	; 3
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
		bufferInit(&uartTxBuffer[0], (u08*) uart0TxData, UART0_TX_BUFFER_SIZE);
    2a34:	88 e1       	ldi	r24, 0x18	; 24
    2a36:	96 e0       	ldi	r25, 0x06	; 6
    2a38:	60 eb       	ldi	r22, 0xB0	; 176
    2a3a:	73 e0       	ldi	r23, 0x03	; 3
    2a3c:	40 e1       	ldi	r20, 0x10	; 16
    2a3e:	50 e0       	ldi	r21, 0x00	; 0
    2a40:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <bufferInit>
	#else
		// initialize the UART0 buffers
		bufferInit(&uartRxBuffer[0], (u08*) UART0_RX_BUFFER_ADDR, UART0_RX_BUFFER_SIZE);
		bufferInit(&uartTxBuffer[0], (u08*) UART0_TX_BUFFER_ADDR, UART0_TX_BUFFER_SIZE);
	#endif
}
    2a44:	08 95       	ret

00002a46 <uart0Init>:
}

void uart0Init(void)
{
	// initialize the buffers
	uart0InitBuffers();
    2a46:	0e 94 12 15 	call	0x2a24	; 0x2a24 <uart0InitBuffers>
	// initialize user receive handlers
	UartRxFunc[0] = 0;
    2a4a:	10 92 71 05 	sts	0x0571, r1
    2a4e:	10 92 70 05 	sts	0x0570, r1
	// enable RxD/TxD and interrupts
	outb(UCSR0B, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    2a52:	88 ed       	ldi	r24, 0xD8	; 216
    2a54:	80 93 c1 00 	sts	0x00C1, r24
	// set default baud rate
	uartSetBaudRate(0, UART0_DEFAULT_BAUD_RATE); 
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	55 e2       	ldi	r21, 0x25	; 37
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	0e 94 18 11 	call	0x2230	; 0x2230 <uartSetBaudRate>
	// initialize states
	uartReadyTx[0] = TRUE;
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	80 93 f0 05 	sts	0x05F0, r24
	uartBufferedTx[0] = FALSE;
    2a6c:	10 92 14 06 	sts	0x0614, r1
	// clear overflow count
	uartRxOverflow[0] = 0;
    2a70:	10 92 39 06 	sts	0x0639, r1
    2a74:	10 92 38 06 	sts	0x0638, r1
	// enable interrupts
	sei();
    2a78:	78 94       	sei
}
    2a7a:	08 95       	ret

00002a7c <uartInit>:
volatile static voidFuncPtru08 UartRxFunc[4];

void uartInit(void)
{
	// initialize all uarts
	uart0Init();
    2a7c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <uart0Init>
	uart1Init();
    2a80:	0e 94 f7 14 	call	0x29ee	; 0x29ee <uart1Init>
	uart2Init();
    2a84:	0e 94 cb 14 	call	0x2996	; 0x2996 <uart2Init>
	uart3Init();
    2a88:	0e 94 9f 14 	call	0x293e	; 0x293e <uart3Init>
}
    2a8c:	08 95       	ret

00002a8e <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    2a8e:	aa e7       	ldi	r26, 0x7A	; 122
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	8c 91       	ld	r24, X
    2a94:	80 68       	ori	r24, 0x80	; 128
    2a96:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    2a98:	8c 91       	ld	r24, X
    2a9a:	8f 7d       	andi	r24, 0xDF	; 223
    2a9c:	8c 93       	st	X, r24
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2a9e:	8c 91       	ld	r24, X
    2aa0:	88 7f       	andi	r24, 0xF8	; 248
    2aa2:	86 60       	ori	r24, 0x06	; 6
    2aa4:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    2aa6:	ec e7       	ldi	r30, 0x7C	; 124
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 73       	andi	r24, 0x3F	; 63
    2aae:	80 64       	ori	r24, 0x40	; 64
    2ab0:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8f 7d       	andi	r24, 0xDF	; 223
    2ab6:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    2ab8:	8c 91       	ld	r24, X
    2aba:	88 60       	ori	r24, 0x08	; 8
    2abc:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    2abe:	10 92 40 06 	sts	0x0640, r1
	sei();							// turn on interrupts (if not already on)
    2ac2:	78 94       	sei
}
    2ac4:	08 95       	ret

00002ac6 <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    2ac6:	ea e7       	ldi	r30, 0x7A	; 122
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	87 7f       	andi	r24, 0xF7	; 247
    2ace:	80 83       	st	Z, r24
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8f 77       	andi	r24, 0x7F	; 127
    2ad4:	80 83       	st	Z, r24
}
    2ad6:	08 95       	ret

00002ad8 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2ad8:	ea e7       	ldi	r30, 0x7A	; 122
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	90 81       	ld	r25, Z
    2ade:	98 7f       	andi	r25, 0xF8	; 248
    2ae0:	98 2b       	or	r25, r24
    2ae2:	90 83       	st	Z, r25
}
    2ae4:	08 95       	ret

00002ae6 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    2ae6:	ec e7       	ldi	r30, 0x7C	; 124
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	90 81       	ld	r25, Z
    2aec:	82 95       	swap	r24
    2aee:	88 0f       	add	r24, r24
    2af0:	88 0f       	add	r24, r24
    2af2:	80 7c       	andi	r24, 0xC0	; 192
    2af4:	9f 73       	andi	r25, 0x3F	; 63
    2af6:	98 2b       	or	r25, r24
    2af8:	90 83       	st	Z, r25
}
    2afa:	08 95       	ret

00002afc <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    2afc:	ec e7       	ldi	r30, 0x7C	; 124
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	90 81       	ld	r25, Z
    2b02:	8f 71       	andi	r24, 0x1F	; 31
    2b04:	90 7e       	andi	r25, 0xE0	; 224
    2b06:	89 2b       	or	r24, r25
    2b08:	80 83       	st	Z, r24
}
    2b0a:	08 95       	ret

00002b0c <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    2b0c:	ea e7       	ldi	r30, 0x7A	; 122
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	80 61       	ori	r24, 0x10	; 16
    2b14:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
    2b16:	80 81       	ld	r24, Z
    2b18:	80 64       	ori	r24, 0x40	; 64
    2b1a:	80 83       	st	Z, r24
}
    2b1c:	08 95       	ret

00002b1e <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    2b1e:	80 91 7a 00 	lds	r24, 0x007A
}
    2b22:	80 74       	andi	r24, 0x40	; 64
    2b24:	08 95       	ret

00002b26 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
    2b26:	98 2f       	mov	r25, r24
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    2b28:	10 92 40 06 	sts	0x0640, r1

if (ch >= 8)
    2b2c:	88 30       	cpi	r24, 0x08	; 8
    2b2e:	20 f0       	brcs	.+8      	; 0x2b38 <a2dConvert10bit+0x12>
    ADCSRB |= _BV(MUX5);
    2b30:	80 91 7b 00 	lds	r24, 0x007B
    2b34:	88 60       	ori	r24, 0x08	; 8
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <a2dConvert10bit+0x18>
else
    ADCSRB &= ~_BV(MUX5);
    2b38:	80 91 7b 00 	lds	r24, 0x007B
    2b3c:	87 7f       	andi	r24, 0xF7	; 247
    2b3e:	80 93 7b 00 	sts	0x007B, r24

   outb(ADMUX, (inb(ADMUX) & ~7) | (ch & 7));   // set channel
    2b42:	80 91 7c 00 	lds	r24, 0x007C
    2b46:	97 70       	andi	r25, 0x07	; 7
    2b48:	88 7f       	andi	r24, 0xF8	; 248
    2b4a:	89 2b       	or	r24, r25
    2b4c:	80 93 7c 00 	sts	0x007C, r24

	//outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    2b50:	80 91 7a 00 	lds	r24, 0x007A
    2b54:	80 61       	ori	r24, 0x10	; 16
    2b56:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
    2b5a:	80 91 7a 00 	lds	r24, 0x007A
    2b5e:	80 64       	ori	r24, 0x40	; 64
    2b60:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    2b64:	80 91 7a 00 	lds	r24, 0x007A
    2b68:	86 fd       	sbrc	r24, 6
    2b6a:	fc cf       	rjmp	.-8      	; 0x2b64 <a2dConvert10bit+0x3e>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	//return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits) //old version
	return ADC;//new version code
    2b6c:	20 91 78 00 	lds	r18, 0x0078
    2b70:	30 91 79 00 	lds	r19, 0x0079
}
    2b74:	c9 01       	movw	r24, r18
    2b76:	08 95       	ret

00002b78 <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    2b78:	0e 94 93 15 	call	0x2b26	; 0x2b26 <a2dConvert10bit>
    2b7c:	96 95       	lsr	r25
    2b7e:	87 95       	ror	r24
    2b80:	96 95       	lsr	r25
    2b82:	87 95       	ror	r24
}
    2b84:	08 95       	ret

00002b86 <__vector_29>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	80 93 40 06 	sts	0x0640, r24
}
    2b98:	8f 91       	pop	r24
    2b9a:	0f 90       	pop	r0
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    2ba4:	90 93 79 05 	sts	0x0579, r25
    2ba8:	80 93 78 05 	sts	0x0578, r24
}
    2bac:	08 95       	ret

00002bae <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    2bae:	1f 93       	push	r17
    2bb0:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    2bb2:	8a 30       	cpi	r24, 0x0A	; 10
    2bb4:	31 f4       	brne	.+12     	; 0x2bc2 <rprintfChar+0x14>
		rputchar('\r');
    2bb6:	e0 91 78 05 	lds	r30, 0x0578
    2bba:	f0 91 79 05 	lds	r31, 0x0579
    2bbe:	8d e0       	ldi	r24, 0x0D	; 13
    2bc0:	09 95       	icall
	// send character
	rputchar(c);
    2bc2:	e0 91 78 05 	lds	r30, 0x0578
    2bc6:	f0 91 79 05 	lds	r31, 0x0579
    2bca:	81 2f       	mov	r24, r17
    2bcc:	09 95       	icall
}
    2bce:	1f 91       	pop	r17
    2bd0:	08 95       	ret

00002bd2 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	21 f4       	brne	.+8      	; 0x2be4 <rprintfStr+0x12>
    2bdc:	06 c0       	rjmp	.+12     	; 0x2bea <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    2bde:	21 96       	adiw	r28, 0x01	; 1
    2be0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    2be4:	88 81       	ld	r24, Y
    2be6:	88 23       	and	r24, r24
    2be8:	d1 f7       	brne	.-12     	; 0x2bde <rprintfStr+0xc>
		rprintfChar(*str++);
}
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	8c 01       	movw	r16, r24
    2bfe:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	e9 f0       	breq	.+58     	; 0x2c3e <rprintfStrLen+0x4e>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    2c08:	26 17       	cp	r18, r22
    2c0a:	37 07       	cpc	r19, r23
    2c0c:	38 f4       	brcc	.+14     	; 0x2c1c <rprintfStrLen+0x2c>
    2c0e:	f8 01       	movw	r30, r16
    2c10:	81 91       	ld	r24, Z+
    2c12:	8f 01       	movw	r16, r30
    2c14:	2f 5f       	subi	r18, 0xFF	; 255
    2c16:	3f 4f       	sbci	r19, 0xFF	; 255
    2c18:	88 23       	and	r24, r24
    2c1a:	b1 f7       	brne	.-20     	; 0x2c08 <rprintfStrLen+0x18>
    2c1c:	c0 e0       	ldi	r28, 0x00	; 0
    2c1e:	d0 e0       	ldi	r29, 0x00	; 0
    2c20:	0b c0       	rjmp	.+22     	; 0x2c38 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    2c22:	f8 01       	movw	r30, r16
    2c24:	80 81       	ld	r24, Z
    2c26:	88 23       	and	r24, r24
    2c28:	19 f0       	breq	.+6      	; 0x2c30 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    2c2a:	0f 5f       	subi	r16, 0xFF	; 255
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    2c30:	80 e2       	ldi	r24, 0x20	; 32
    2c32:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    2c36:	21 96       	adiw	r28, 0x01	; 1
    2c38:	ce 15       	cp	r28, r14
    2c3a:	df 05       	cpc	r29, r15
    2c3c:	90 f3       	brcs	.-28     	; 0x2c22 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	1f 91       	pop	r17
    2c44:	0f 91       	pop	r16
    2c46:	ff 90       	pop	r15
    2c48:	ef 90       	pop	r14
    2c4a:	08 95       	ret

00002c4c <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	19 f4       	brne	.+6      	; 0x2c5c <rprintfProgStr+0x10>
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    2c58:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    2c5c:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2c5e:	21 96       	adiw	r28, 0x01	; 1
    2c60:	84 91       	lpm	r24, Z+
    2c62:	88 23       	and	r24, r24
    2c64:	c9 f7       	brne	.-14     	; 0x2c58 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

00002c6c <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    2c6c:	8a e0       	ldi	r24, 0x0A	; 10
    2c6e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
}
    2c72:	08 95       	ret

00002c74 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    2c74:	e8 2f       	mov	r30, r24
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	ef 70       	andi	r30, 0x0F	; 15
    2c7a:	f0 70       	andi	r31, 0x00	; 0
    2c7c:	ed 5c       	subi	r30, 0xCD	; 205
    2c7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c80:	e4 91       	lpm	r30, Z+
    2c82:	8e 2f       	mov	r24, r30
    2c84:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
}
    2c88:	08 95       	ret

00002c8a <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    2c8a:	1f 93       	push	r17
    2c8c:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    2c8e:	82 95       	swap	r24
    2c90:	8f 70       	andi	r24, 0x0F	; 15
    2c92:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <rprintfu04>
	rprintfu04(data);
    2c96:	81 2f       	mov	r24, r17
    2c98:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <rprintfu04>
}
    2c9c:	1f 91       	pop	r17
    2c9e:	08 95       	ret

00002ca0 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    2ca0:	1f 93       	push	r17
    2ca2:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    2ca4:	89 2f       	mov	r24, r25
    2ca6:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <rprintfu08>
	rprintfu08(data);
    2caa:	81 2f       	mov	r24, r17
    2cac:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <rprintfu08>
}
    2cb0:	1f 91       	pop	r17
    2cb2:	08 95       	ret

00002cb4 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	7b 01       	movw	r14, r22
    2cbe:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	aa 27       	eor	r26, r26
    2cc4:	bb 27       	eor	r27, r27
    2cc6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <rprintfu16>
	rprintfu16(data);
    2cca:	c7 01       	movw	r24, r14
    2ccc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <rprintfu16>
}
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	08 95       	ret

00002cda <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    2cda:	2f 92       	push	r2
    2cdc:	3f 92       	push	r3
    2cde:	4f 92       	push	r4
    2ce0:	5f 92       	push	r5
    2ce2:	6f 92       	push	r6
    2ce4:	7f 92       	push	r7
    2ce6:	8f 92       	push	r8
    2ce8:	9f 92       	push	r9
    2cea:	af 92       	push	r10
    2cec:	bf 92       	push	r11
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	a3 97       	sbiw	r28, 0x23	; 35
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	6a a3       	std	Y+34, r22	; 0x22
    2d10:	24 2e       	mov	r2, r20
    2d12:	2b a3       	std	Y+35, r18	; 0x23
    2d14:	37 01       	movw	r6, r14
    2d16:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    2d18:	44 23       	and	r20, r20
    2d1a:	51 f0       	breq	.+20     	; 0x2d30 <rprintfNum+0x56>
    2d1c:	17 ff       	sbrs	r17, 7
    2d1e:	08 c0       	rjmp	.+16     	; 0x2d30 <rprintfNum+0x56>
	{
		x = -n;
    2d20:	ee 24       	eor	r14, r14
    2d22:	ff 24       	eor	r15, r15
    2d24:	87 01       	movw	r16, r14
    2d26:	e6 18       	sub	r14, r6
    2d28:	f7 08       	sbc	r15, r7
    2d2a:	08 09       	sbc	r16, r8
    2d2c:	19 09       	sbc	r17, r9
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    2d30:	84 01       	movw	r16, r8
    2d32:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    2d34:	2a a1       	ldd	r18, Y+34	; 0x22
    2d36:	21 50       	subi	r18, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	21 10       	cpse	r2, r1
    2d3c:	91 e0       	ldi	r25, 0x01	; 1
    2d3e:	29 1b       	sub	r18, r25
    2d40:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    2d42:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    2d44:	a8 2e       	mov	r10, r24
    2d46:	bb 24       	eor	r11, r11
    2d48:	cc 24       	eor	r12, r12
    2d4a:	dd 24       	eor	r13, r13
    2d4c:	c8 01       	movw	r24, r16
    2d4e:	b7 01       	movw	r22, r14
    2d50:	a6 01       	movw	r20, r12
    2d52:	95 01       	movw	r18, r10
    2d54:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2d58:	fb 01       	movw	r30, r22
    2d5a:	ef 70       	andi	r30, 0x0F	; 15
    2d5c:	f0 70       	andi	r31, 0x00	; 0
    2d5e:	ed 5c       	subi	r30, 0xCD	; 205
    2d60:	fd 4f       	sbci	r31, 0xFD	; 253
    2d62:	64 91       	lpm	r22, Z+
    2d64:	6f 8f       	std	Y+31, r22	; 0x1f
    2d66:	c8 01       	movw	r24, r16
    2d68:	b7 01       	movw	r22, r14
    2d6a:	a6 01       	movw	r20, r12
    2d6c:	95 01       	movw	r18, r10
    2d6e:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2d72:	c9 01       	movw	r24, r18
    2d74:	da 01       	movw	r26, r20
    2d76:	7c 01       	movw	r14, r24
    2d78:	8d 01       	movw	r16, r26
    2d7a:	9e e1       	ldi	r25, 0x1E	; 30
    2d7c:	49 2e       	mov	r4, r25
    2d7e:	51 2c       	mov	r5, r1
    2d80:	4c 0e       	add	r4, r28
    2d82:	5d 1e       	adc	r5, r29
    2d84:	39 a0       	ldd	r3, Y+33	; 0x21
    2d86:	25 c0       	rjmp	.+74     	; 0x2dd2 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    2d88:	e1 14       	cp	r14, r1
    2d8a:	f1 04       	cpc	r15, r1
    2d8c:	01 05       	cpc	r16, r1
    2d8e:	11 05       	cpc	r17, r1
    2d90:	c9 f0       	breq	.+50     	; 0x2dc4 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2d92:	c8 01       	movw	r24, r16
    2d94:	b7 01       	movw	r22, r14
    2d96:	a6 01       	movw	r20, r12
    2d98:	95 01       	movw	r18, r10
    2d9a:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2d9e:	fb 01       	movw	r30, r22
    2da0:	ef 70       	andi	r30, 0x0F	; 15
    2da2:	f0 70       	andi	r31, 0x00	; 0
    2da4:	ed 5c       	subi	r30, 0xCD	; 205
    2da6:	fd 4f       	sbci	r31, 0xFD	; 253
    2da8:	64 91       	lpm	r22, Z+
    2daa:	f2 01       	movw	r30, r4
    2dac:	60 83       	st	Z, r22
    2dae:	c8 01       	movw	r24, r16
    2db0:	b7 01       	movw	r22, r14
    2db2:	a6 01       	movw	r20, r12
    2db4:	95 01       	movw	r18, r10
    2db6:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    2dba:	c9 01       	movw	r24, r18
    2dbc:	da 01       	movw	r26, r20
    2dbe:	7c 01       	movw	r14, r24
    2dc0:	8d 01       	movw	r16, r26
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    2dc4:	2b a1       	ldd	r18, Y+35	; 0x23
    2dc6:	f2 01       	movw	r30, r4
    2dc8:	20 83       	st	Z, r18
    2dca:	3a 94       	dec	r3
    2dcc:	08 94       	sec
    2dce:	41 08       	sbc	r4, r1
    2dd0:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    2dd2:	33 20       	and	r3, r3
    2dd4:	c9 f6       	brne	.-78     	; 0x2d88 <rprintfNum+0xae>
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	4f 96       	adiw	r24, 0x1f	; 31
    2dda:	8c 01       	movw	r16, r24
    2ddc:	e9 a1       	ldd	r30, Y+33	; 0x21
    2dde:	0e 1b       	sub	r16, r30
    2de0:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    2de2:	22 20       	and	r2, r2
    2de4:	f1 f0       	breq	.+60     	; 0x2e22 <rprintfNum+0x148>
	{
		if(n < 0)
    2de6:	97 fe       	sbrs	r9, 7
    2de8:	05 c0       	rjmp	.+10     	; 0x2df4 <rprintfNum+0x11a>
		{
   			*--p = '-';
    2dea:	8d e2       	ldi	r24, 0x2D	; 45
    2dec:	f8 01       	movw	r30, r16
    2dee:	82 93       	st	-Z, r24
    2df0:	8f 01       	movw	r16, r30
    2df2:	17 c0       	rjmp	.+46     	; 0x2e22 <rprintfNum+0x148>
    2df4:	c8 01       	movw	r24, r16
    2df6:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    2df8:	61 14       	cp	r6, r1
    2dfa:	71 04       	cpc	r7, r1
    2dfc:	81 04       	cpc	r8, r1
    2dfe:	91 04       	cpc	r9, r1
    2e00:	19 f0       	breq	.+6      	; 0x2e08 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    2e02:	8c 01       	movw	r16, r24
    2e04:	8b e2       	ldi	r24, 0x2B	; 43
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    2e08:	8c 01       	movw	r16, r24
    2e0a:	80 e2       	ldi	r24, 0x20	; 32
    2e0c:	f8 01       	movw	r30, r16
    2e0e:	80 83       	st	Z, r24
    2e10:	08 c0       	rjmp	.+16     	; 0x2e22 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    2e12:	f8 01       	movw	r30, r16
    2e14:	81 91       	ld	r24, Z+
    2e16:	8f 01       	movw	r16, r30
    2e18:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    2e1c:	fa a1       	ldd	r31, Y+34	; 0x22
    2e1e:	f1 50       	subi	r31, 0x01	; 1
    2e20:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2e22:	2a a1       	ldd	r18, Y+34	; 0x22
    2e24:	22 23       	and	r18, r18
    2e26:	a9 f7       	brne	.-22     	; 0x2e12 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    2e28:	a3 96       	adiw	r28, 0x23	; 35
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	bf 90       	pop	r11
    2e46:	af 90       	pop	r10
    2e48:	9f 90       	pop	r9
    2e4a:	8f 90       	pop	r8
    2e4c:	7f 90       	pop	r7
    2e4e:	6f 90       	pop	r6
    2e50:	5f 90       	pop	r5
    2e52:	4f 90       	pop	r4
    2e54:	3f 90       	pop	r3
    2e56:	2f 90       	pop	r2
    2e58:	08 95       	ret

00002e5a <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    2e5a:	4f 92       	push	r4
    2e5c:	5f 92       	push	r5
    2e5e:	6f 92       	push	r6
    2e60:	7f 92       	push	r7
    2e62:	8f 92       	push	r8
    2e64:	9f 92       	push	r9
    2e66:	af 92       	push	r10
    2e68:	bf 92       	push	r11
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	48 2e       	mov	r4, r24
    2e7c:	5a 01       	movw	r10, r20
    2e7e:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    2e80:	cb 01       	movw	r24, r22
    2e82:	ba 01       	movw	r22, r20
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__gesf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	1c f4       	brge	.+6      	; 0x2e9a <rprintfFloat+0x40>
    2e94:	35 01       	movw	r6, r10
    2e96:	46 01       	movw	r8, r12
    2e98:	06 c0       	rjmp	.+12     	; 0x2ea6 <rprintfFloat+0x4c>
    2e9a:	35 01       	movw	r6, r10
    2e9c:	46 01       	movw	r8, r12
    2e9e:	97 fa       	bst	r9, 7
    2ea0:	90 94       	com	r9
    2ea2:	97 f8       	bld	r9, 7
    2ea4:	90 94       	com	r9
    2ea6:	0f 2e       	mov	r0, r31
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	ef 2e       	mov	r14, r31
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	ff 2e       	mov	r15, r31
    2eb0:	f0 e8       	ldi	r31, 0x80	; 128
    2eb2:	0f 2f       	mov	r16, r31
    2eb4:	ff e3       	ldi	r31, 0x3F	; 63
    2eb6:	1f 2f       	mov	r17, r31
    2eb8:	f0 2d       	mov	r31, r0
    2eba:	55 24       	eor	r5, r5
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    2ebc:	c4 01       	movw	r24, r8
    2ebe:	b3 01       	movw	r22, r6
    2ec0:	a8 01       	movw	r20, r16
    2ec2:	97 01       	movw	r18, r14
    2ec4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e2       	ldi	r20, 0x20	; 32
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    2ed4:	87 fd       	sbrc	r24, 7
    2ed6:	0e c0       	rjmp	.+28     	; 0x2ef4 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    2ed8:	c8 01       	movw	r24, r16
    2eda:	b7 01       	movw	r22, r14
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    2ee8:	7b 01       	movw	r14, r22
    2eea:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    2eec:	53 94       	inc	r5
    2eee:	8f e0       	ldi	r24, 0x0F	; 15
    2ef0:	58 16       	cp	r5, r24
    2ef2:	21 f7       	brne	.-56     	; 0x2ebc <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    2ef4:	c6 01       	movw	r24, r12
    2ef6:	b5 01       	movw	r22, r10
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	14 f4       	brge	.+4      	; 0x2f0c <rprintfFloat+0xb2>
		rprintfChar('-');
    2f08:	8d e2       	ldi	r24, 0x2D	; 45
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <rprintfFloat+0xb4>
	else
		rprintfChar('+');
    2f0c:	8b e2       	ldi	r24, 0x2B	; 43
    2f0e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    2f12:	dd 24       	eor	r13, r13
    2f14:	aa 24       	eor	r10, r10
    2f16:	56 c0       	rjmp	.+172    	; 0x2fc4 <rprintfFloat+0x16a>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    2f18:	c4 01       	movw	r24, r8
    2f1a:	b3 01       	movw	r22, r6
    2f1c:	a8 01       	movw	r20, r16
    2f1e:	97 01       	movw	r18, r14
    2f20:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    2f24:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__fixunssfsi>
    2f28:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    2f2a:	d6 2a       	or	r13, r22
    2f2c:	cd 2d       	mov	r28, r13
    2f2e:	d0 e0       	ldi	r29, 0x00	; 0
    2f30:	cc 24       	eor	r12, r12
    2f32:	dd 24       	eor	r13, r13
    2f34:	c8 01       	movw	r24, r16
    2f36:	b7 01       	movw	r22, r14
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	19 f4       	brne	.+6      	; 0x2f4e <rprintfFloat+0xf4>
    2f48:	21 e0       	ldi	r18, 0x01	; 1
    2f4a:	c2 2e       	mov	r12, r18
    2f4c:	d1 2c       	mov	r13, r1
    2f4e:	cc 29       	or	r28, r12
    2f50:	dd 29       	or	r29, r13
    2f52:	cd 2b       	or	r28, r29
    2f54:	39 f0       	breq	.+14     	; 0x2f64 <rprintfFloat+0x10a>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    2f56:	8b 2d       	mov	r24, r11
    2f58:	80 5d       	subi	r24, 0xD0	; 208
    2f5a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    2f5e:	dd 24       	eor	r13, r13
    2f60:	da 94       	dec	r13
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <rprintfFloat+0x112>
		}
		else
			rprintfChar(' ');
    2f64:	80 e2       	ldi	r24, 0x20	; 32
    2f66:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    2f6a:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	b7 01       	movw	r22, r14
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__cmpsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	19 f4       	brne	.+6      	; 0x2f86 <rprintfFloat+0x12c>
		{
			rprintfChar('.');
    2f80:	8e e2       	ldi	r24, 0x2E	; 46
    2f82:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
		}
		
		x -= (digit*place);
    2f86:	6b 2d       	mov	r22, r11
    2f88:	70 e0       	ldi	r23, 0x00	; 0
    2f8a:	88 27       	eor	r24, r24
    2f8c:	77 fd       	sbrc	r23, 7
    2f8e:	80 95       	com	r24
    2f90:	98 2f       	mov	r25, r24
    2f92:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__floatsisf>
    2f96:	a8 01       	movw	r20, r16
    2f98:	97 01       	movw	r18, r14
    2f9a:	0e 94 39 21 	call	0x4272	; 0x4272 <__mulsf3>
    2f9e:	9b 01       	movw	r18, r22
    2fa0:	ac 01       	movw	r20, r24
    2fa2:	c4 01       	movw	r24, r8
    2fa4:	b3 01       	movw	r22, r6
    2fa6:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__subsf3>
    2faa:	3b 01       	movw	r6, r22
    2fac:	4c 01       	movw	r8, r24
		place /= 10.0;
    2fae:	c8 01       	movw	r24, r16
    2fb0:	b7 01       	movw	r22, r14
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__divsf3>
    2fbe:	7b 01       	movw	r14, r22
    2fc0:	8c 01       	movw	r16, r24
		rprintfChar('-');
	else
		rprintfChar('+');

	// print digits
	for(i=0; i<numDigits; i++)
    2fc2:	a3 94       	inc	r10
    2fc4:	a4 14       	cp	r10, r4
    2fc6:	08 f4       	brcc	.+2      	; 0x2fca <rprintfFloat+0x170>
    2fc8:	a7 cf       	rjmp	.-178    	; 0x2f18 <rprintfFloat+0xbe>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	af 90       	pop	r10
    2fde:	9f 90       	pop	r9
    2fe0:	8f 90       	pop	r8
    2fe2:	7f 90       	pop	r7
    2fe4:	6f 90       	pop	r6
    2fe6:	5f 90       	pop	r5
    2fe8:	4f 90       	pop	r4
    2fea:	08 95       	ret

00002fec <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    2fec:	7f 92       	push	r7
    2fee:	8f 92       	push	r8
    2ff0:	9f 92       	push	r9
    2ff2:	af 92       	push	r10
    2ff4:	bf 92       	push	r11
    2ff6:	cf 92       	push	r12
    2ff8:	df 92       	push	r13
    2ffa:	ef 92       	push	r14
    2ffc:	ff 92       	push	r15
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	78 88       	ldd	r7, Y+16	; 0x10
    300c:	c9 88       	ldd	r12, Y+17	; 0x11
    300e:	da 88       	ldd	r13, Y+18	; 0x12
    3010:	63 e1       	ldi	r22, 0x13	; 19
    3012:	e6 2e       	mov	r14, r22
    3014:	f1 2c       	mov	r15, r1
    3016:	ec 0e       	add	r14, r28
    3018:	fd 1e       	adc	r15, r29
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    301c:	88 23       	and	r24, r24
    301e:	81 f4       	brne	.+32     	; 0x3040 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	df 90       	pop	r13
    3032:	cf 90       	pop	r12
    3034:	bf 90       	pop	r11
    3036:	af 90       	pop	r10
    3038:	9f 90       	pop	r9
    303a:	8f 90       	pop	r8
    303c:	7f 90       	pop	r7
    303e:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    3040:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    3044:	96 01       	movw	r18, r12
    3046:	2f 5f       	subi	r18, 0xFF	; 255
    3048:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    304a:	77 20       	and	r7, r7
    304c:	21 f0       	breq	.+8      	; 0x3056 <rprintf1RamRom+0x6a>
    304e:	f6 01       	movw	r30, r12
    3050:	69 01       	movw	r12, r18
    3052:	84 91       	lpm	r24, Z+
    3054:	03 c0       	rjmp	.+6      	; 0x305c <rprintf1RamRom+0x70>
    3056:	f6 01       	movw	r30, r12
    3058:	80 81       	ld	r24, Z
    305a:	69 01       	movw	r12, r18
    305c:	85 32       	cpi	r24, 0x25	; 37
    305e:	f1 f6       	brne	.-68     	; 0x301c <rprintf1RamRom+0x30>
    3060:	2f 5f       	subi	r18, 0xFF	; 255
    3062:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    3064:	77 20       	and	r7, r7
    3066:	21 f0       	breq	.+8      	; 0x3070 <rprintf1RamRom+0x84>
    3068:	f6 01       	movw	r30, r12
    306a:	69 01       	movw	r12, r18
    306c:	84 91       	lpm	r24, Z+
    306e:	03 c0       	rjmp	.+6      	; 0x3076 <rprintf1RamRom+0x8a>
    3070:	f6 01       	movw	r30, r12
    3072:	80 81       	ld	r24, Z
    3074:	69 01       	movw	r12, r18
    3076:	84 36       	cpi	r24, 0x64	; 100
    3078:	29 f0       	breq	.+10     	; 0x3084 <rprintf1RamRom+0x98>
    307a:	88 37       	cpi	r24, 0x78	; 120
    307c:	81 f0       	breq	.+32     	; 0x309e <rprintf1RamRom+0xb2>
    307e:	83 36       	cpi	r24, 0x63	; 99
    3080:	f9 f6       	brne	.-66     	; 0x3040 <rprintf1RamRom+0x54>
    3082:	06 c0       	rjmp	.+12     	; 0x3090 <rprintf1RamRom+0xa4>
    3084:	00 e1       	ldi	r16, 0x10	; 16
    3086:	17 e2       	ldi	r17, 0x27	; 39
    3088:	5a e0       	ldi	r21, 0x0A	; 10
    308a:	a5 2e       	mov	r10, r21
    308c:	b1 2c       	mov	r11, r1
    308e:	0c c0       	rjmp	.+24     	; 0x30a8 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    3090:	f7 01       	movw	r30, r14
    3092:	80 81       	ld	r24, Z
    3094:	22 e0       	ldi	r18, 0x02	; 2
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	e2 0e       	add	r14, r18
    309a:	f3 1e       	adc	r15, r19
    309c:	d1 cf       	rjmp	.-94     	; 0x3040 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    309e:	00 e0       	ldi	r16, 0x00	; 0
    30a0:	10 e1       	ldi	r17, 0x10	; 16
    30a2:	40 e1       	ldi	r20, 0x10	; 16
    30a4:	a4 2e       	mov	r10, r20
    30a6:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    30a8:	32 e0       	ldi	r19, 0x02	; 2
    30aa:	83 2e       	mov	r8, r19
    30ac:	91 2c       	mov	r9, r1
    30ae:	8e 0c       	add	r8, r14
    30b0:	9f 1c       	adc	r9, r15
    30b2:	f7 01       	movw	r30, r14
    30b4:	e0 80       	ld	r14, Z
    30b6:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    30b8:	84 36       	cpi	r24, 0x64	; 100
    30ba:	b1 f4       	brne	.+44     	; 0x30e8 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    30bc:	f7 fe       	sbrs	r15, 7
    30be:	11 c0       	rjmp	.+34     	; 0x30e2 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    30c0:	f0 94       	com	r15
    30c2:	e1 94       	neg	r14
    30c4:	f1 08       	sbc	r15, r1
    30c6:	f3 94       	inc	r15
					rprintfChar('-');
    30c8:	8d e2       	ldi	r24, 0x2D	; 45
    30ca:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rprintfChar>
    30ce:	09 c0       	rjmp	.+18     	; 0x30e2 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    30d0:	c8 01       	movw	r24, r16
    30d2:	6a e0       	ldi	r22, 0x0A	; 10
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    30da:	8b 01       	movw	r16, r22
    30dc:	62 30       	cpi	r22, 0x02	; 2
    30de:	71 05       	cpc	r23, r1
    30e0:	18 f0       	brcs	.+6      	; 0x30e8 <rprintf1RamRom+0xfc>
    30e2:	e0 16       	cp	r14, r16
    30e4:	f1 06       	cpc	r15, r17
    30e6:	a0 f3       	brcs	.-24     	; 0x30d0 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    30e8:	c7 01       	movw	r24, r14
    30ea:	b8 01       	movw	r22, r16
    30ec:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    30f0:	86 2f       	mov	r24, r22
    30f2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <rprintfu04>
				u_val %= div_val;
    30f6:	c7 01       	movw	r24, r14
    30f8:	b8 01       	movw	r22, r16
    30fa:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    30fe:	7c 01       	movw	r14, r24
				div_val /= base;
    3100:	c8 01       	movw	r24, r16
    3102:	b5 01       	movw	r22, r10
    3104:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    3108:	8b 01       	movw	r16, r22
			} while (div_val);
    310a:	61 15       	cp	r22, r1
    310c:	71 05       	cpc	r23, r1
    310e:	61 f7       	brne	.-40     	; 0x30e8 <rprintf1RamRom+0xfc>
    3110:	74 01       	movw	r14, r8
    3112:	98 cf       	rjmp	.-208    	; 0x3044 <rprintf1RamRom+0x58>

00003114 <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
    3114:	20 91 b9 00 	lds	r18, 0x00B9
    3118:	2e 7f       	andi	r18, 0xFE	; 254
    311a:	20 93 b9 00 	sts	0x00B9, r18
		cbi(TWSR, TWPS1);
    311e:	20 91 b9 00 	lds	r18, 0x00B9
    3122:	2d 7f       	andi	r18, 0xFD	; 253
    3124:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
    3128:	9c 01       	movw	r18, r24
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	60 e8       	ldi	r22, 0x80	; 128
    3130:	7e e3       	ldi	r23, 0x3E	; 62
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
	if(bitrate_div >= 16)
    313a:	20 31       	cpi	r18, 0x10	; 16
    313c:	30 f0       	brcs	.+12     	; 0x314a <i2cSetBitrate+0x36>
		bitrate_div = (bitrate_div-16)/2;
    313e:	82 2f       	mov	r24, r18
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	40 97       	sbiw	r24, 0x10	; 16
    3144:	95 95       	asr	r25
    3146:	87 95       	ror	r24
    3148:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
    314a:	20 93 b8 00 	sts	0x00B8, r18
}
    314e:	08 95       	ret

00003150 <i2cInit>:

// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	sbi(PORTD, 0);	// i2c SCL on 640
    3150:	58 9a       	sbi	0x0b, 0	; 11
	sbi(PORTD, 1);	// i2c SDA on 640
    3152:	59 9a       	sbi	0x0b, 1	; 11

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    3154:	10 92 c1 05 	sts	0x05C1, r1
    3158:	10 92 c0 05 	sts	0x05C0, r1
	i2cSlaveTransmit = 0;
    315c:	10 92 c3 05 	sts	0x05C3, r1
    3160:	10 92 c2 05 	sts	0x05C2, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    3164:	84 e6       	ldi	r24, 0x64	; 100
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 8a 18 	call	0x3114	; 0x3114 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    316c:	ec eb       	ldi	r30, 0xBC	; 188
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	84 60       	ori	r24, 0x04	; 4
    3174:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    3176:	10 92 7a 05 	sts	0x057A, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    317a:	80 81       	ld	r24, Z
    317c:	81 60       	ori	r24, 0x01	; 1
    317e:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    3180:	80 81       	ld	r24, Z
    3182:	80 64       	ori	r24, 0x40	; 64
    3184:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    3186:	78 94       	sei
}
    3188:	08 95       	ret

0000318a <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	61 11       	cpse	r22, r1
    318e:	91 e0       	ldi	r25, 0x01	; 1
    3190:	8e 7f       	andi	r24, 0xFE	; 254
    3192:	98 2b       	or	r25, r24
    3194:	90 93 ba 00 	sts	0x00BA, r25
}
    3198:	08 95       	ret

0000319a <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    319a:	90 93 c1 05 	sts	0x05C1, r25
    319e:	80 93 c0 05 	sts	0x05C0, r24
}
    31a2:	08 95       	ret

000031a4 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    31a4:	90 93 c3 05 	sts	0x05C3, r25
    31a8:	80 93 c2 05 	sts	0x05C2, r24
}
    31ac:	08 95       	ret

000031ae <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    31ae:	ec eb       	ldi	r30, 0xBC	; 188
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	8f 70       	andi	r24, 0x0F	; 15
    31b6:	80 6a       	ori	r24, 0xA0	; 160
    31b8:	80 83       	st	Z, r24
}
    31ba:	08 95       	ret

000031bc <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    31bc:	ec eb       	ldi	r30, 0xBC	; 188
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 70       	andi	r24, 0x0F	; 15
    31c4:	80 6d       	ori	r24, 0xD0	; 208
    31c6:	80 83       	st	Z, r24
}
    31c8:	08 95       	ret

000031ca <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    31ca:	80 91 bc 00 	lds	r24, 0x00BC
    31ce:	87 ff       	sbrs	r24, 7
    31d0:	fc cf       	rjmp	.-8      	; 0x31ca <i2cWaitForComplete>
}
    31d2:	08 95       	ret

000031d4 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    31d4:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    31d8:	ec eb       	ldi	r30, 0xBC	; 188
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	8f 70       	andi	r24, 0x0F	; 15
    31e0:	80 68       	ori	r24, 0x80	; 128
    31e2:	80 83       	st	Z, r24
}
    31e4:	08 95       	ret

000031e6 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    31e6:	88 23       	and	r24, r24
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    31ea:	80 91 bc 00 	lds	r24, 0x00BC
    31ee:	8f 70       	andi	r24, 0x0F	; 15
    31f0:	80 6c       	ori	r24, 0xC0	; 192
    31f2:	04 c0       	rjmp	.+8      	; 0x31fc <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    31f4:	80 91 bc 00 	lds	r24, 0x00BC
    31f8:	8f 70       	andi	r24, 0x0F	; 15
    31fa:	80 68       	ori	r24, 0x80	; 128
    31fc:	80 93 bc 00 	sts	0x00BC, r24
    3200:	08 95       	ret

00003202 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3202:	80 91 bb 00 	lds	r24, 0x00BB
}
    3206:	08 95       	ret

00003208 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    3208:	80 91 b9 00 	lds	r24, 0x00B9
}
    320c:	08 95       	ret

0000320e <i2cMasterSend>:

void i2cMasterSend(u08 deviceAddr, u08 length, u08* data)
{
    320e:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    3210:	80 91 7a 05 	lds	r24, 0x057A
    3214:	88 23       	and	r24, r24
    3216:	e1 f7       	brne	.-8      	; 0x3210 <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    3218:	82 e0       	ldi	r24, 0x02	; 2
    321a:	80 93 7a 05 	sts	0x057A, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    321e:	9e 7f       	andi	r25, 0xFE	; 254
    3220:	90 93 7b 05 	sts	0x057B, r25
    3224:	ac e7       	ldi	r26, 0x7C	; 124
    3226:	b5 e0       	ldi	r27, 0x05	; 5
    3228:	fa 01       	movw	r30, r20
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    322c:	81 91       	ld	r24, Z+
    322e:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    3230:	8e 2f       	mov	r24, r30
    3232:	84 1b       	sub	r24, r20
    3234:	86 17       	cp	r24, r22
    3236:	d0 f3       	brcs	.-12     	; 0x322c <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    3238:	10 92 9c 05 	sts	0x059C, r1
	I2cSendDataLength = length;
    323c:	60 93 9d 05 	sts	0x059D, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    3240:	80 91 bc 00 	lds	r24, 0x00BC
    3244:	8f 70       	andi	r24, 0x0F	; 15
    3246:	80 6a       	ori	r24, 0xA0	; 160
    3248:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    324c:	08 95       	ret

0000324e <i2cMasterReceive>:

void i2cMasterReceive(u08 deviceAddr, u08 length, u08* data)
{
    324e:	98 2f       	mov	r25, r24
	u08 i;
	// wait for interface to be ready
	while(I2cState);
    3250:	80 91 7a 05 	lds	r24, 0x057A
    3254:	88 23       	and	r24, r24
    3256:	e1 f7       	brne	.-8      	; 0x3250 <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	80 93 7a 05 	sts	0x057A, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    325e:	91 60       	ori	r25, 0x01	; 1
    3260:	90 93 7b 05 	sts	0x057B, r25
	I2cReceiveDataIndex = 0;
    3264:	10 92 be 05 	sts	0x05BE, r1
	I2cReceiveDataLength = length;
    3268:	60 93 bf 05 	sts	0x05BF, r22
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    326c:	80 91 bc 00 	lds	r24, 0x00BC
    3270:	8f 70       	andi	r24, 0x0F	; 15
    3272:	80 6a       	ori	r24, 0xA0	; 160
    3274:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    3278:	80 91 7a 05 	lds	r24, 0x057A
    327c:	88 23       	and	r24, r24
    327e:	e1 f7       	brne	.-8      	; 0x3278 <i2cMasterReceive+0x2a>
    3280:	ae e9       	ldi	r26, 0x9E	; 158
    3282:	b5 e0       	ldi	r27, 0x05	; 5
    3284:	fa 01       	movw	r30, r20
    3286:	02 c0       	rjmp	.+4      	; 0x328c <i2cMasterReceive+0x3e>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    3288:	8d 91       	ld	r24, X+
    328a:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    328c:	8e 2f       	mov	r24, r30
    328e:	84 1b       	sub	r24, r20
    3290:	86 17       	cp	r24, r22
    3292:	d0 f3       	brcs	.-12     	; 0x3288 <i2cMasterReceive+0x3a>
		*data++ = I2cReceiveData[i];
}
    3294:	08 95       	ret

00003296 <i2cMasterSendNI>:

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    3296:	98 2f       	mov	r25, r24
    3298:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    329a:	80 91 bc 00 	lds	r24, 0x00BC
    329e:	8e 7f       	andi	r24, 0xFE	; 254
    32a0:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    32a4:	80 91 bc 00 	lds	r24, 0x00BC
    32a8:	8f 70       	andi	r24, 0x0F	; 15
    32aa:	80 6a       	ori	r24, 0xA0	; 160
    32ac:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    32b0:	80 91 bc 00 	lds	r24, 0x00BC
    32b4:	87 ff       	sbrs	r24, 7
    32b6:	fc cf       	rjmp	.-8      	; 0x32b0 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    32b8:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    32ba:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    32be:	80 91 bc 00 	lds	r24, 0x00BC
    32c2:	8f 70       	andi	r24, 0x0F	; 15
    32c4:	80 68       	ori	r24, 0x80	; 128
    32c6:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    32ca:	80 91 bc 00 	lds	r24, 0x00BC
    32ce:	87 ff       	sbrs	r24, 7
    32d0:	fc cf       	rjmp	.-8      	; 0x32ca <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    32d2:	80 91 b9 00 	lds	r24, 0x00B9
    32d6:	88 31       	cpi	r24, 0x18	; 24
    32d8:	89 f0       	breq	.+34     	; 0x32fc <i2cMasterSendNI+0x66>
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	12 c0       	rjmp	.+36     	; 0x3302 <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    32de:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    32e0:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    32e4:	80 91 bc 00 	lds	r24, 0x00BC
    32e8:	8f 70       	andi	r24, 0x0F	; 15
    32ea:	80 68       	ori	r24, 0x80	; 128
    32ec:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    32f0:	80 91 bc 00 	lds	r24, 0x00BC
    32f4:	87 ff       	sbrs	r24, 7
    32f6:	fc cf       	rjmp	.-8      	; 0x32f0 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    32f8:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    32fa:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    32fc:	66 23       	and	r22, r22
    32fe:	79 f7       	brne	.-34     	; 0x32de <i2cMasterSendNI+0x48>
    3300:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    3302:	80 91 bc 00 	lds	r24, 0x00BC
    3306:	8f 70       	andi	r24, 0x0F	; 15
    3308:	80 6d       	ori	r24, 0xD0	; 208
    330a:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    330e:	80 91 bc 00 	lds	r24, 0x00BC
    3312:	84 ff       	sbrs	r24, 4
    3314:	fc cf       	rjmp	.-8      	; 0x330e <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    3316:	80 91 bc 00 	lds	r24, 0x00BC
    331a:	81 60       	ori	r24, 0x01	; 1
    331c:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    3320:	89 2f       	mov	r24, r25
    3322:	08 95       	ret

00003324 <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    3324:	98 2f       	mov	r25, r24
    3326:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    3328:	80 91 bc 00 	lds	r24, 0x00BC
    332c:	8e 7f       	andi	r24, 0xFE	; 254
    332e:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    3332:	80 91 bc 00 	lds	r24, 0x00BC
    3336:	8f 70       	andi	r24, 0x0F	; 15
    3338:	80 6a       	ori	r24, 0xA0	; 160
    333a:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    333e:	80 91 bc 00 	lds	r24, 0x00BC
    3342:	87 ff       	sbrs	r24, 7
    3344:	fc cf       	rjmp	.-8      	; 0x333e <i2cMasterReceiveNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    3346:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    3348:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    334c:	80 91 bc 00 	lds	r24, 0x00BC
    3350:	8f 70       	andi	r24, 0x0F	; 15
    3352:	80 68       	ori	r24, 0x80	; 128
    3354:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3358:	80 91 bc 00 	lds	r24, 0x00BC
    335c:	87 ff       	sbrs	r24, 7
    335e:	fc cf       	rjmp	.-8      	; 0x3358 <i2cMasterReceiveNI+0x34>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    3360:	80 91 b9 00 	lds	r24, 0x00B9
    3364:	80 34       	cpi	r24, 0x40	; 64
    3366:	81 f0       	breq	.+32     	; 0x3388 <i2cMasterReceiveNI+0x64>
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	1e c0       	rjmp	.+60     	; 0x33a8 <i2cMasterReceiveNI+0x84>
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    336c:	80 91 bc 00 	lds	r24, 0x00BC
    3370:	8f 70       	andi	r24, 0x0F	; 15
    3372:	80 6c       	ori	r24, 0xC0	; 192
    3374:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3378:	80 91 bc 00 	lds	r24, 0x00BC
    337c:	87 ff       	sbrs	r24, 7
    337e:	fc cf       	rjmp	.-8      	; 0x3378 <i2cMasterReceiveNI+0x54>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    3380:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    3384:	81 93       	st	Z+, r24
			// decrement length
			length--;
    3386:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    3388:	62 30       	cpi	r22, 0x02	; 2
    338a:	80 f7       	brcc	.-32     	; 0x336c <i2cMasterReceiveNI+0x48>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    338c:	80 91 bc 00 	lds	r24, 0x00BC
    3390:	8f 70       	andi	r24, 0x0F	; 15
    3392:	80 68       	ori	r24, 0x80	; 128
    3394:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    3398:	80 91 bc 00 	lds	r24, 0x00BC
    339c:	87 ff       	sbrs	r24, 7
    339e:	fc cf       	rjmp	.-8      	; 0x3398 <i2cMasterReceiveNI+0x74>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    33a0:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    33a4:	80 83       	st	Z, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    33a8:	80 91 bc 00 	lds	r24, 0x00BC
    33ac:	8f 70       	andi	r24, 0x0F	; 15
    33ae:	80 6d       	ori	r24, 0xD0	; 208
    33b0:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    33b4:	80 91 bc 00 	lds	r24, 0x00BC
    33b8:	81 60       	ori	r24, 0x01	; 1
    33ba:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    33be:	89 2f       	mov	r24, r25
    33c0:	08 95       	ret

000033c2 <__vector_39>:
}
*/

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
    33c2:	1f 92       	push	r1
    33c4:	0f 92       	push	r0
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	0f 92       	push	r0
    33ca:	11 24       	eor	r1, r1
    33cc:	2f 93       	push	r18
    33ce:	3f 93       	push	r19
    33d0:	4f 93       	push	r20
    33d2:	5f 93       	push	r21
    33d4:	6f 93       	push	r22
    33d6:	7f 93       	push	r23
    33d8:	8f 93       	push	r24
    33da:	9f 93       	push	r25
    33dc:	af 93       	push	r26
    33de:	bf 93       	push	r27
    33e0:	ef 93       	push	r30
    33e2:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    33e4:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    33e8:	88 7f       	andi	r24, 0xF8	; 248
    33ea:	80 36       	cpi	r24, 0x60	; 96
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__vector_39+0x2e>
    33ee:	a0 c0       	rjmp	.+320    	; 0x3530 <__vector_39+0x16e>
    33f0:	81 36       	cpi	r24, 0x61	; 97
    33f2:	70 f5       	brcc	.+92     	; 0x3450 <__vector_39+0x8e>
    33f4:	88 32       	cpi	r24, 0x28	; 40
    33f6:	09 f4       	brne	.+2      	; 0x33fa <__vector_39+0x38>
    33f8:	5f c0       	rjmp	.+190    	; 0x34b8 <__vector_39+0xf6>
    33fa:	89 32       	cpi	r24, 0x29	; 41
    33fc:	98 f4       	brcc	.+38     	; 0x3424 <__vector_39+0x62>
    33fe:	80 31       	cpi	r24, 0x10	; 16
    3400:	09 f4       	brne	.+2      	; 0x3404 <__vector_39+0x42>
    3402:	57 c0       	rjmp	.+174    	; 0x34b2 <__vector_39+0xf0>
    3404:	81 31       	cpi	r24, 0x11	; 17
    3406:	38 f4       	brcc	.+14     	; 0x3416 <__vector_39+0x54>
    3408:	88 23       	and	r24, r24
    340a:	09 f4       	brne	.+2      	; 0x340e <__vector_39+0x4c>
    340c:	ea c0       	rjmp	.+468    	; 0x35e2 <__vector_39+0x220>
    340e:	88 30       	cpi	r24, 0x08	; 8
    3410:	09 f0       	breq	.+2      	; 0x3414 <__vector_39+0x52>
    3412:	ef c0       	rjmp	.+478    	; 0x35f2 <__vector_39+0x230>
    3414:	4e c0       	rjmp	.+156    	; 0x34b2 <__vector_39+0xf0>
    3416:	88 31       	cpi	r24, 0x18	; 24
    3418:	09 f4       	brne	.+2      	; 0x341c <__vector_39+0x5a>
    341a:	4e c0       	rjmp	.+156    	; 0x34b8 <__vector_39+0xf6>
    341c:	80 32       	cpi	r24, 0x20	; 32
    341e:	09 f0       	breq	.+2      	; 0x3422 <__vector_39+0x60>
    3420:	e8 c0       	rjmp	.+464    	; 0x35f2 <__vector_39+0x230>
    3422:	df c0       	rjmp	.+446    	; 0x35e2 <__vector_39+0x220>
    3424:	80 34       	cpi	r24, 0x40	; 64
    3426:	09 f4       	brne	.+2      	; 0x342a <__vector_39+0x68>
    3428:	77 c0       	rjmp	.+238    	; 0x3518 <__vector_39+0x156>
    342a:	81 34       	cpi	r24, 0x41	; 65
    342c:	38 f4       	brcc	.+14     	; 0x343c <__vector_39+0x7a>
    342e:	80 33       	cpi	r24, 0x30	; 48
    3430:	09 f4       	brne	.+2      	; 0x3434 <__vector_39+0x72>
    3432:	d7 c0       	rjmp	.+430    	; 0x35e2 <__vector_39+0x220>
    3434:	88 33       	cpi	r24, 0x38	; 56
    3436:	09 f0       	breq	.+2      	; 0x343a <__vector_39+0x78>
    3438:	dc c0       	rjmp	.+440    	; 0x35f2 <__vector_39+0x230>
    343a:	5d c0       	rjmp	.+186    	; 0x34f6 <__vector_39+0x134>
    343c:	80 35       	cpi	r24, 0x50	; 80
    343e:	09 f4       	brne	.+2      	; 0x3442 <__vector_39+0x80>
    3440:	5f c0       	rjmp	.+190    	; 0x3500 <__vector_39+0x13e>
    3442:	88 35       	cpi	r24, 0x58	; 88
    3444:	09 f4       	brne	.+2      	; 0x3448 <__vector_39+0x86>
    3446:	4a c0       	rjmp	.+148    	; 0x34dc <__vector_39+0x11a>
    3448:	88 34       	cpi	r24, 0x48	; 72
    344a:	09 f0       	breq	.+2      	; 0x344e <__vector_39+0x8c>
    344c:	d2 c0       	rjmp	.+420    	; 0x35f2 <__vector_39+0x230>
    344e:	c9 c0       	rjmp	.+402    	; 0x35e2 <__vector_39+0x220>
    3450:	88 39       	cpi	r24, 0x98	; 152
    3452:	09 f4       	brne	.+2      	; 0x3456 <__vector_39+0x94>
    3454:	ba c0       	rjmp	.+372    	; 0x35ca <__vector_39+0x208>
    3456:	89 39       	cpi	r24, 0x99	; 153
    3458:	b0 f4       	brcc	.+44     	; 0x3486 <__vector_39+0xc4>
    345a:	88 37       	cpi	r24, 0x78	; 120
    345c:	09 f4       	brne	.+2      	; 0x3460 <__vector_39+0x9e>
    345e:	68 c0       	rjmp	.+208    	; 0x3530 <__vector_39+0x16e>
    3460:	89 37       	cpi	r24, 0x79	; 121
    3462:	38 f4       	brcc	.+14     	; 0x3472 <__vector_39+0xb0>
    3464:	88 36       	cpi	r24, 0x68	; 104
    3466:	09 f4       	brne	.+2      	; 0x346a <__vector_39+0xa8>
    3468:	63 c0       	rjmp	.+198    	; 0x3530 <__vector_39+0x16e>
    346a:	80 37       	cpi	r24, 0x70	; 112
    346c:	09 f0       	breq	.+2      	; 0x3470 <__vector_39+0xae>
    346e:	c1 c0       	rjmp	.+386    	; 0x35f2 <__vector_39+0x230>
    3470:	5f c0       	rjmp	.+190    	; 0x3530 <__vector_39+0x16e>
    3472:	88 38       	cpi	r24, 0x88	; 136
    3474:	09 f4       	brne	.+2      	; 0x3478 <__vector_39+0xb6>
    3476:	a9 c0       	rjmp	.+338    	; 0x35ca <__vector_39+0x208>
    3478:	80 39       	cpi	r24, 0x90	; 144
    347a:	09 f4       	brne	.+2      	; 0x347e <__vector_39+0xbc>
    347c:	5f c0       	rjmp	.+190    	; 0x353c <__vector_39+0x17a>
    347e:	80 38       	cpi	r24, 0x80	; 128
    3480:	09 f0       	breq	.+2      	; 0x3484 <__vector_39+0xc2>
    3482:	b7 c0       	rjmp	.+366    	; 0x35f2 <__vector_39+0x230>
    3484:	5b c0       	rjmp	.+182    	; 0x353c <__vector_39+0x17a>
    3486:	80 3b       	cpi	r24, 0xB0	; 176
    3488:	09 f4       	brne	.+2      	; 0x348c <__vector_39+0xca>
    348a:	79 c0       	rjmp	.+242    	; 0x357e <__vector_39+0x1bc>
    348c:	81 3b       	cpi	r24, 0xB1	; 177
    348e:	38 f4       	brcc	.+14     	; 0x349e <__vector_39+0xdc>
    3490:	80 3a       	cpi	r24, 0xA0	; 160
    3492:	09 f4       	brne	.+2      	; 0x3496 <__vector_39+0xd4>
    3494:	62 c0       	rjmp	.+196    	; 0x355a <__vector_39+0x198>
    3496:	88 3a       	cpi	r24, 0xA8	; 168
    3498:	09 f0       	breq	.+2      	; 0x349c <__vector_39+0xda>
    349a:	ab c0       	rjmp	.+342    	; 0x35f2 <__vector_39+0x230>
    349c:	70 c0       	rjmp	.+224    	; 0x357e <__vector_39+0x1bc>
    349e:	80 3c       	cpi	r24, 0xC0	; 192
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <__vector_39+0xe2>
    34a2:	9a c0       	rjmp	.+308    	; 0x35d8 <__vector_39+0x216>
    34a4:	88 3c       	cpi	r24, 0xC8	; 200
    34a6:	09 f4       	brne	.+2      	; 0x34aa <__vector_39+0xe8>
    34a8:	97 c0       	rjmp	.+302    	; 0x35d8 <__vector_39+0x216>
    34aa:	88 3b       	cpi	r24, 0xB8	; 184
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <__vector_39+0xee>
    34ae:	a1 c0       	rjmp	.+322    	; 0x35f2 <__vector_39+0x230>
    34b0:	77 c0       	rjmp	.+238    	; 0x35a0 <__vector_39+0x1de>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    34b2:	80 91 7b 05 	lds	r24, 0x057B
    34b6:	0f c0       	rjmp	.+30     	; 0x34d6 <__vector_39+0x114>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    34b8:	90 91 9c 05 	lds	r25, 0x059C
    34bc:	80 91 9d 05 	lds	r24, 0x059D
    34c0:	98 17       	cp	r25, r24
    34c2:	08 f0       	brcs	.+2      	; 0x34c6 <__vector_39+0x104>
    34c4:	8e c0       	rjmp	.+284    	; 0x35e2 <__vector_39+0x220>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    34c6:	e9 2f       	mov	r30, r25
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	e4 58       	subi	r30, 0x84	; 132
    34cc:	fa 4f       	sbci	r31, 0xFA	; 250
    34ce:	80 81       	ld	r24, Z
    34d0:	9f 5f       	subi	r25, 0xFF	; 255
    34d2:	90 93 9c 05 	sts	0x059C, r25
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    34d6:	80 93 bb 00 	sts	0x00BB, r24
    34da:	77 c0       	rjmp	.+238    	; 0x35ca <__vector_39+0x208>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    34dc:	80 91 be 05 	lds	r24, 0x05BE
    34e0:	90 91 bb 00 	lds	r25, 0x00BB
    34e4:	e8 2f       	mov	r30, r24
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	e2 56       	subi	r30, 0x62	; 98
    34ea:	fa 4f       	sbci	r31, 0xFA	; 250
    34ec:	90 83       	st	Z, r25
    34ee:	8f 5f       	subi	r24, 0xFF	; 255
    34f0:	80 93 be 05 	sts	0x05BE, r24
    34f4:	76 c0       	rjmp	.+236    	; 0x35e2 <__vector_39+0x220>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    34f6:	80 91 bc 00 	lds	r24, 0x00BC
    34fa:	8f 70       	andi	r24, 0x0F	; 15
    34fc:	80 68       	ori	r24, 0x80	; 128
    34fe:	75 c0       	rjmp	.+234    	; 0x35ea <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    3500:	80 91 be 05 	lds	r24, 0x05BE
    3504:	90 91 bb 00 	lds	r25, 0x00BB
    3508:	e8 2f       	mov	r30, r24
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	e2 56       	subi	r30, 0x62	; 98
    350e:	fa 4f       	sbci	r31, 0xFA	; 250
    3510:	90 83       	st	Z, r25
    3512:	8f 5f       	subi	r24, 0xFF	; 255
    3514:	80 93 be 05 	sts	0x05BE, r24
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    3518:	20 91 be 05 	lds	r18, 0x05BE
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	80 91 bf 05 	lds	r24, 0x05BF
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	28 17       	cp	r18, r24
    3528:	39 07       	cpc	r19, r25
    352a:	0c f0       	brlt	.+2      	; 0x352e <__vector_39+0x16c>
    352c:	4e c0       	rjmp	.+156    	; 0x35ca <__vector_39+0x208>
    352e:	48 c0       	rjmp	.+144    	; 0x35c0 <__vector_39+0x1fe>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
    3530:	85 e0       	ldi	r24, 0x05	; 5
    3532:	80 93 7a 05 	sts	0x057A, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
    3536:	10 92 be 05 	sts	0x05BE, r1
    353a:	42 c0       	rjmp	.+132    	; 0x35c0 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
    353c:	80 91 be 05 	lds	r24, 0x05BE
    3540:	90 91 bb 00 	lds	r25, 0x00BB
    3544:	e8 2f       	mov	r30, r24
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	e2 56       	subi	r30, 0x62	; 98
    354a:	fa 4f       	sbci	r31, 0xFA	; 250
    354c:	90 83       	st	Z, r25
    354e:	8f 5f       	subi	r24, 0xFF	; 255
    3550:	80 93 be 05 	sts	0x05BE, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    3554:	80 32       	cpi	r24, 0x20	; 32
    3556:	c8 f5       	brcc	.+114    	; 0x35ca <__vector_39+0x208>
    3558:	33 c0       	rjmp	.+102    	; 0x35c0 <__vector_39+0x1fe>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    355a:	80 91 bc 00 	lds	r24, 0x00BC
    355e:	8f 70       	andi	r24, 0x0F	; 15
    3560:	80 6c       	ori	r24, 0xC0	; 192
    3562:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    3566:	e0 91 c0 05 	lds	r30, 0x05C0
    356a:	f0 91 c1 05 	lds	r31, 0x05C1
    356e:	30 97       	sbiw	r30, 0x00	; 0
    3570:	f1 f1       	breq	.+124    	; 0x35ee <__vector_39+0x22c>
    3572:	80 91 be 05 	lds	r24, 0x05BE
    3576:	6e e9       	ldi	r22, 0x9E	; 158
    3578:	75 e0       	ldi	r23, 0x05	; 5
    357a:	09 95       	icall
    357c:	38 c0       	rjmp	.+112    	; 0x35ee <__vector_39+0x22c>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
    357e:	84 e0       	ldi	r24, 0x04	; 4
    3580:	80 93 7a 05 	sts	0x057A, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    3584:	e0 91 c2 05 	lds	r30, 0x05C2
    3588:	f0 91 c3 05 	lds	r31, 0x05C3
    358c:	30 97       	sbiw	r30, 0x00	; 0
    358e:	31 f0       	breq	.+12     	; 0x359c <__vector_39+0x1da>
    3590:	80 e2       	ldi	r24, 0x20	; 32
    3592:	6c e7       	ldi	r22, 0x7C	; 124
    3594:	75 e0       	ldi	r23, 0x05	; 5
    3596:	09 95       	icall
    3598:	80 93 9d 05 	sts	0x059D, r24
		// reset data index
		I2cSendDataIndex = 0;
    359c:	10 92 9c 05 	sts	0x059C, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
    35a0:	90 91 9c 05 	lds	r25, 0x059C
    35a4:	e9 2f       	mov	r30, r25
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	e4 58       	subi	r30, 0x84	; 132
    35aa:	fa 4f       	sbci	r31, 0xFA	; 250
    35ac:	80 81       	ld	r24, Z
    35ae:	80 93 bb 00 	sts	0x00BB, r24
    35b2:	9f 5f       	subi	r25, 0xFF	; 255
    35b4:	90 93 9c 05 	sts	0x059C, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    35b8:	80 91 9d 05 	lds	r24, 0x059D
    35bc:	98 17       	cp	r25, r24
    35be:	28 f4       	brcc	.+10     	; 0x35ca <__vector_39+0x208>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    35c0:	80 91 bc 00 	lds	r24, 0x00BC
    35c4:	8f 70       	andi	r24, 0x0F	; 15
    35c6:	80 6c       	ori	r24, 0xC0	; 192
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <__vector_39+0x210>
		else
			// expect NACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    35ca:	80 91 bc 00 	lds	r24, 0x00BC
    35ce:	8f 70       	andi	r24, 0x0F	; 15
    35d0:	80 68       	ori	r24, 0x80	; 128
    35d2:	80 93 bc 00 	sts	0x00BC, r24
    35d6:	0d c0       	rjmp	.+26     	; 0x35f2 <__vector_39+0x230>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    35d8:	80 91 bc 00 	lds	r24, 0x00BC
    35dc:	8f 70       	andi	r24, 0x0F	; 15
    35de:	80 6c       	ori	r24, 0xC0	; 192
    35e0:	04 c0       	rjmp	.+8      	; 0x35ea <__vector_39+0x228>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    35e2:	80 91 bc 00 	lds	r24, 0x00BC
    35e6:	8f 70       	andi	r24, 0x0F	; 15
    35e8:	80 6d       	ori	r24, 0xD0	; 208
    35ea:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    35ee:	10 92 7a 05 	sts	0x057A, r1
		break;
	}
}
    35f2:	ff 91       	pop	r31
    35f4:	ef 91       	pop	r30
    35f6:	bf 91       	pop	r27
    35f8:	af 91       	pop	r26
    35fa:	9f 91       	pop	r25
    35fc:	8f 91       	pop	r24
    35fe:	7f 91       	pop	r23
    3600:	6f 91       	pop	r22
    3602:	5f 91       	pop	r21
    3604:	4f 91       	pop	r20
    3606:	3f 91       	pop	r19
    3608:	2f 91       	pop	r18
    360a:	0f 90       	pop	r0
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	0f 90       	pop	r0
    3610:	1f 90       	pop	r1
    3612:	18 95       	reti

00003614 <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    3614:	80 91 7a 05 	lds	r24, 0x057A
}
    3618:	08 95       	ret

0000361a <init_LDS_buffer>:
uint8_t lds_buffer[BUFFER_SIZE];
uint8_t *lds_buffer_write_ndx = NULL;
uint8_t *lds_buffer_read_ndx = NULL;

void init_LDS_buffer(){
	lds_buffer_write_ndx = lds_buffer_read_ndx = lds_buffer;
    361a:	81 e4       	ldi	r24, 0x41	; 65
    361c:	96 e0       	ldi	r25, 0x06	; 6
    361e:	90 93 c7 05 	sts	0x05C7, r25
    3622:	80 93 c6 05 	sts	0x05C6, r24
    3626:	90 93 c5 05 	sts	0x05C5, r25
    362a:	80 93 c4 05 	sts	0x05C4, r24
}
    362e:	08 95       	ret

00003630 <LDSRcv>:

void LDSRcv(unsigned char c){
	if(c != 0xff){
    3630:	8f 3f       	cpi	r24, 0xFF	; 255
    3632:	b9 f0       	breq	.+46     	; 0x3662 <LDSRcv+0x32>
		*lds_buffer_write_ndx = c;
    3634:	e0 91 c4 05 	lds	r30, 0x05C4
    3638:	f0 91 c5 05 	lds	r31, 0x05C5
    363c:	80 83       	st	Z, r24
		lds_buffer_write_ndx++;		
    363e:	80 91 c4 05 	lds	r24, 0x05C4
    3642:	90 91 c5 05 	lds	r25, 0x05C5
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	90 93 c5 05 	sts	0x05C5, r25
    364c:	80 93 c4 05 	sts	0x05C4, r24
		if(lds_buffer_write_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    3650:	81 54       	subi	r24, 0x41	; 65
    3652:	97 40       	sbci	r25, 0x07	; 7
    3654:	30 f0       	brcs	.+12     	; 0x3662 <LDSRcv+0x32>
			lds_buffer_write_ndx = lds_buffer;
    3656:	81 e4       	ldi	r24, 0x41	; 65
    3658:	96 e0       	ldi	r25, 0x06	; 6
    365a:	90 93 c5 05 	sts	0x05C5, r25
    365e:	80 93 c4 05 	sts	0x05C4, r24
    3662:	08 95       	ret

00003664 <error_checker>:
		lds_buffer_read_ndx = lds_buffer;
	}
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    3664:	0f 93       	push	r16
    3666:	1f 93       	push	r17
    3668:	cf 93       	push	r28
    366a:	df 93       	push	r29
    366c:	ec 01       	movw	r28, r24
    366e:	8b 01       	movw	r16, r22
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	50 e0       	ldi	r21, 0x00	; 0
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	70 e0       	ldi	r23, 0x00	; 0
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    367c:	22 0f       	add	r18, r18
    367e:	33 1f       	adc	r19, r19
    3680:	44 1f       	adc	r20, r20
    3682:	55 1f       	adc	r21, r21
    3684:	fe 01       	movw	r30, r28
    3686:	e6 0f       	add	r30, r22
    3688:	f7 1f       	adc	r31, r23
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	a0 e0       	ldi	r26, 0x00	; 0
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	28 0f       	add	r18, r24
    3694:	39 1f       	adc	r19, r25
    3696:	4a 1f       	adc	r20, r26
    3698:	5b 1f       	adc	r21, r27
    369a:	6e 5f       	subi	r22, 0xFE	; 254
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    369e:	64 31       	cpi	r22, 0x14	; 20
    36a0:	71 05       	cpc	r23, r1
    36a2:	61 f7       	brne	.-40     	; 0x367c <error_checker+0x18>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    36a4:	c9 01       	movw	r24, r18
    36a6:	9f 77       	andi	r25, 0x7F	; 127
    36a8:	6f e0       	ldi	r22, 0x0F	; 15
    36aa:	56 95       	lsr	r21
    36ac:	47 95       	ror	r20
    36ae:	37 95       	ror	r19
    36b0:	27 95       	ror	r18
    36b2:	6a 95       	dec	r22
    36b4:	d1 f7       	brne	.-12     	; 0x36aa <error_checker+0x46>
    36b6:	82 0f       	add	r24, r18
    36b8:	93 1f       	adc	r25, r19
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	9f 77       	andi	r25, 0x7F	; 127
    36be:	80 17       	cp	r24, r16
    36c0:	91 07       	cpc	r25, r17
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <error_checker+0x62>
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }
    36c6:	82 2f       	mov	r24, r18
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	08 95       	ret

000036d2 <conv_FrametoDist>:
			f_ndx++;
		}
	}
}

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	ec 01       	movw	r28, r24
    36d8:	20 e0       	ldi	r18, 0x00	; 0
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
		// Maps frame indicies to range indices
		r_ndx = 4*ldsf[f_ndx].index - 640;
    36da:	e8 81       	ld	r30, Y
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	e0 5a       	subi	r30, 0xA0	; 160
    36e0:	f0 40       	sbci	r31, 0x00	; 0
    36e2:	ee 0f       	add	r30, r30
    36e4:	ff 1f       	adc	r31, r31
    36e6:	ee 0f       	add	r30, r30
    36e8:	ff 1f       	adc	r31, r31
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
    36ea:	df 01       	movw	r26, r30
    36ec:	aa 0f       	add	r26, r26
    36ee:	bb 1f       	adc	r27, r27
    36f0:	a6 0f       	add	r26, r22
    36f2:	b7 1f       	adc	r27, r23
    36f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    36f8:	8d 93       	st	X+, r24
    36fa:	9c 93       	st	X, r25
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
    36fc:	df 01       	movw	r26, r30
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	aa 0f       	add	r26, r26
    3702:	bb 1f       	adc	r27, r27
    3704:	a6 0f       	add	r26, r22
    3706:	b7 1f       	adc	r27, r23
    3708:	8d 85       	ldd	r24, Y+13	; 0x0d
    370a:	9e 85       	ldd	r25, Y+14	; 0x0e
    370c:	8d 93       	st	X+, r24
    370e:	9c 93       	st	X, r25
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
    3710:	32 96       	adiw	r30, 0x02	; 2
    3712:	df 01       	movw	r26, r30
    3714:	aa 0f       	add	r26, r26
    3716:	bb 1f       	adc	r27, r27
    3718:	a6 0f       	add	r26, r22
    371a:	b7 1f       	adc	r27, r23
    371c:	8f 85       	ldd	r24, Y+15	; 0x0f
    371e:	98 89       	ldd	r25, Y+16	; 0x10
    3720:	8d 93       	st	X+, r24
    3722:	9c 93       	st	X, r25
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
    3724:	31 96       	adiw	r30, 0x01	; 1
    3726:	ee 0f       	add	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	e6 0f       	add	r30, r22
    372c:	f7 1f       	adc	r31, r23
    372e:	89 89       	ldd	r24, Y+17	; 0x11
    3730:	9a 89       	ldd	r25, Y+18	; 0x12
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24

void conv_FrametoDist(const LDS_FRAME ldsf[], uint16_t ranges[]){
	// ldsf must be of length 90
	// ranges must be of length 360
	uint16_t r_ndx;
	for(uint8_t f_ndx = 0; f_ndx < 90; f_ndx++){
    3736:	2f 5f       	subi	r18, 0xFF	; 255
    3738:	6d 96       	adiw	r28, 0x1d	; 29
    373a:	2a 35       	cpi	r18, 0x5A	; 90
    373c:	71 f6       	brne	.-100    	; 0x36da <conv_FrametoDist+0x8>
		ranges[r_ndx]     = (ldsf[f_ndx].distance[0]);
		ranges[r_ndx + 1] = (ldsf[f_ndx].distance[1]);
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	08 95       	ret

00003744 <print_frame>:
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
}  

void print_frame(LDS_FRAME frame){
    3744:	ef 92       	push	r14
    3746:	ff 92       	push	r15
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	e9 84       	ldd	r14, Y+9	; 0x09
    3756:	0a 85       	ldd	r16, Y+10	; 0x0a
    3758:	1b 85       	ldd	r17, Y+11	; 0x0b
	rprintf("Index: ");
    375a:	00 d0       	rcall	.+0      	; 0x375c <print_frame+0x18>
    375c:	0f 92       	push	r0
    375e:	ff 24       	eor	r15, r15
    3760:	f3 94       	inc	r15
    3762:	ad b7       	in	r26, 0x3d	; 61
    3764:	be b7       	in	r27, 0x3e	; 62
    3766:	11 96       	adiw	r26, 0x01	; 1
    3768:	fc 92       	st	X, r15
    376a:	11 97       	sbiw	r26, 0x01	; 1
    376c:	84 e6       	ldi	r24, 0x64	; 100
    376e:	92 e0       	ldi	r25, 0x02	; 2
    3770:	13 96       	adiw	r26, 0x03	; 3
    3772:	9c 93       	st	X, r25
    3774:	8e 93       	st	-X, r24
    3776:	12 97       	sbiw	r26, 0x02	; 2
    3778:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	rprintfu08(frame.index);
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	8e 2d       	mov	r24, r14
    3784:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <rprintfu08>
	rprintf(" Motor Speed: ");
    3788:	00 d0       	rcall	.+0      	; 0x378a <print_frame+0x46>
    378a:	0f 92       	push	r0
    378c:	ed b7       	in	r30, 0x3d	; 61
    378e:	fe b7       	in	r31, 0x3e	; 62
    3790:	f1 82       	std	Z+1, r15	; 0x01
    3792:	85 e5       	ldi	r24, 0x55	; 85
    3794:	92 e0       	ldi	r25, 0x02	; 2
    3796:	93 83       	std	Z+3, r25	; 0x03
    3798:	82 83       	std	Z+2, r24	; 0x02
    379a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	rprintfu16(frame.motor_speed);
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	c8 01       	movw	r24, r16
    37a6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <rprintfu16>
	rprintf(" Distances: ");
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <print_frame+0x68>
    37ac:	0f 92       	push	r0
    37ae:	ad b7       	in	r26, 0x3d	; 61
    37b0:	be b7       	in	r27, 0x3e	; 62
    37b2:	11 96       	adiw	r26, 0x01	; 1
    37b4:	fc 92       	st	X, r15
    37b6:	11 97       	sbiw	r26, 0x01	; 1
    37b8:	88 e4       	ldi	r24, 0x48	; 72
    37ba:	92 e0       	ldi	r25, 0x02	; 2
    37bc:	13 96       	adiw	r26, 0x03	; 3
    37be:	9c 93       	st	X, r25
    37c0:	8e 93       	st	-X, r24
    37c2:	12 97       	sbiw	r26, 0x02	; 2
    37c4:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	for(uint8_t ndx = 0; ndx < 4; ndx++){
		rprintf("%d ",frame.distance[ndx]);
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <print_frame+0x86>
    37ca:	ed b7       	in	r30, 0x3d	; 61
    37cc:	fe b7       	in	r31, 0x3e	; 62
    37ce:	31 96       	adiw	r30, 0x01	; 1
    37d0:	ad b7       	in	r26, 0x3d	; 61
    37d2:	be b7       	in	r27, 0x3e	; 62
    37d4:	11 96       	adiw	r26, 0x01	; 1
    37d6:	fc 92       	st	X, r15
    37d8:	04 e4       	ldi	r16, 0x44	; 68
    37da:	12 e0       	ldi	r17, 0x02	; 2
    37dc:	12 83       	std	Z+2, r17	; 0x02
    37de:	01 83       	std	Z+1, r16	; 0x01
    37e0:	8c 89       	ldd	r24, Y+20	; 0x14
    37e2:	9d 89       	ldd	r25, Y+21	; 0x15
    37e4:	94 83       	std	Z+4, r25	; 0x04
    37e6:	83 83       	std	Z+3, r24	; 0x03
    37e8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
    37ec:	ed b7       	in	r30, 0x3d	; 61
    37ee:	fe b7       	in	r31, 0x3e	; 62
    37f0:	31 96       	adiw	r30, 0x01	; 1
    37f2:	ad b7       	in	r26, 0x3d	; 61
    37f4:	be b7       	in	r27, 0x3e	; 62
    37f6:	11 96       	adiw	r26, 0x01	; 1
    37f8:	fc 92       	st	X, r15
    37fa:	12 83       	std	Z+2, r17	; 0x02
    37fc:	01 83       	std	Z+1, r16	; 0x01
    37fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3800:	9f 89       	ldd	r25, Y+23	; 0x17
    3802:	94 83       	std	Z+4, r25	; 0x04
    3804:	83 83       	std	Z+3, r24	; 0x03
    3806:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
    380a:	ed b7       	in	r30, 0x3d	; 61
    380c:	fe b7       	in	r31, 0x3e	; 62
    380e:	31 96       	adiw	r30, 0x01	; 1
    3810:	ad b7       	in	r26, 0x3d	; 61
    3812:	be b7       	in	r27, 0x3e	; 62
    3814:	11 96       	adiw	r26, 0x01	; 1
    3816:	fc 92       	st	X, r15
    3818:	12 83       	std	Z+2, r17	; 0x02
    381a:	01 83       	std	Z+1, r16	; 0x01
    381c:	88 8d       	ldd	r24, Y+24	; 0x18
    381e:	99 8d       	ldd	r25, Y+25	; 0x19
    3820:	94 83       	std	Z+4, r25	; 0x04
    3822:	83 83       	std	Z+3, r24	; 0x03
    3824:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
    3828:	ed b7       	in	r30, 0x3d	; 61
    382a:	fe b7       	in	r31, 0x3e	; 62
    382c:	31 96       	adiw	r30, 0x01	; 1
    382e:	ad b7       	in	r26, 0x3d	; 61
    3830:	be b7       	in	r27, 0x3e	; 62
    3832:	11 96       	adiw	r26, 0x01	; 1
    3834:	fc 92       	st	X, r15
    3836:	12 83       	std	Z+2, r17	; 0x02
    3838:	01 83       	std	Z+1, r16	; 0x01
    383a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    383c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    383e:	94 83       	std	Z+4, r25	; 0x04
    3840:	83 83       	std	Z+3, r24	; 0x03
    3842:	0e 94 f6 17 	call	0x2fec	; 0x2fec <rprintf1RamRom>
	}
	rprintfCRLF();
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <rprintfCRLF>
}
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	ef 90       	pop	r14
    3860:	08 95       	ret

00003862 <read_LDS>:
			lds_buffer_write_ndx = lds_buffer;
		}
	}
}

uint8_t read_LDS(){
    3862:	04 c0       	rjmp	.+8      	; 0x386c <read_LDS+0xa>
	while(lds_buffer_read_ndx == lds_buffer_write_ndx){ delay_us(10); };
    3864:	8a e0       	ldi	r24, 0x0A	; 10
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 23 0b 	call	0x1646	; 0x1646 <delay_us>
    386c:	e0 91 c6 05 	lds	r30, 0x05C6
    3870:	f0 91 c7 05 	lds	r31, 0x05C7
    3874:	80 91 c4 05 	lds	r24, 0x05C4
    3878:	90 91 c5 05 	lds	r25, 0x05C5
    387c:	e8 17       	cp	r30, r24
    387e:	f9 07       	cpc	r31, r25
    3880:	89 f3       	breq	.-30     	; 0x3864 <read_LDS+0x2>
	uint8_t data = *lds_buffer_read_ndx;
    3882:	21 91       	ld	r18, Z+
	lds_buffer_read_ndx++;
    3884:	f0 93 c7 05 	sts	0x05C7, r31
    3888:	e0 93 c6 05 	sts	0x05C6, r30
	if(lds_buffer_read_ndx >= (lds_buffer + BUFFER_SIZE)){ 
    388c:	e1 54       	subi	r30, 0x41	; 65
    388e:	f7 40       	sbci	r31, 0x07	; 7
    3890:	30 f0       	brcs	.+12     	; 0x389e <read_LDS+0x3c>
		lds_buffer_read_ndx = lds_buffer;
    3892:	81 e4       	ldi	r24, 0x41	; 65
    3894:	96 e0       	ldi	r25, 0x06	; 6
    3896:	90 93 c7 05 	sts	0x05C7, r25
    389a:	80 93 c6 05 	sts	0x05C6, r24
	}
	return data;
}
    389e:	82 2f       	mov	r24, r18
    38a0:	08 95       	ret

000038a2 <parse_frame>:
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
  }

uint8_t parse_frame(LDS_FRAME *frame){
    38a2:	2f 92       	push	r2
    38a4:	3f 92       	push	r3
    38a6:	4f 92       	push	r4
    38a8:	5f 92       	push	r5
    38aa:	6f 92       	push	r6
    38ac:	7f 92       	push	r7
    38ae:	8f 92       	push	r8
    38b0:	9f 92       	push	r9
    38b2:	af 92       	push	r10
    38b4:	bf 92       	push	r11
    38b6:	cf 92       	push	r12
    38b8:	df 92       	push	r13
    38ba:	ef 92       	push	r14
    38bc:	ff 92       	push	r15
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	6a 97       	sbiw	r28, 0x1a	; 26
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	2c 01       	movw	r4, r24
    // Array for use by the error checker
    uint16_t chk_data[10];

    // Read start byte
    uint8_t start_byte = read_LDS();
    38d8:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    // If the byte read in is not the start byte (0xFA), then this is not the beginning of a frame
    if(start_byte != 0xFA) return FALSE; 
    38dc:	8a 3f       	cpi	r24, 0xFA	; 250
    38de:	09 f0       	breq	.+2      	; 0x38e2 <parse_frame+0x40>
    38e0:	ac c0       	rjmp	.+344    	; 0x3a3a <parse_frame+0x198>

    // Read index
	frame->index = read_LDS();
    38e2:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    38e6:	28 2f       	mov	r18, r24
    38e8:	f2 01       	movw	r30, r4
    38ea:	80 83       	st	Z, r24
    // If the byte proceeding the start byte does not look like an index, then is is not the beginning of a frame
    if((frame->index < 0xA0)||(frame->index > 0xF9)) return FALSE;
    38ec:	80 5a       	subi	r24, 0xA0	; 160
    38ee:	8a 35       	cpi	r24, 0x5A	; 90
    38f0:	08 f0       	brcs	.+2      	; 0x38f4 <parse_frame+0x52>
    38f2:	a3 c0       	rjmp	.+326    	; 0x3a3a <parse_frame+0x198>

    // Add these bytes for the error checker
    chk_data[0] = (frame->index << 8) + start_byte;
    38f4:	92 2f       	mov	r25, r18
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	86 50       	subi	r24, 0x06	; 6
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	9e 83       	std	Y+6, r25	; 0x06
    38fe:	8d 83       	std	Y+5, r24	; 0x05
    //   MSB                                                               LSB
    //   15  14  13  12  11  10  9   8   7   6    5    4    3    2    1    0
    //   512 256 128 64  32  16  8   4   2   1 .  1/2  1/4  1/8  1/16 1/32 1/64
    //
	
	frame->motor_speed = ((uint16_t)read_LDS()) + ((uint16_t)read_LDS()<<8);
    3900:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    3904:	18 2f       	mov	r17, r24
    3906:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    390a:	38 2f       	mov	r19, r24
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	21 0f       	add	r18, r17
    3910:	31 1d       	adc	r19, r1
    3912:	f2 01       	movw	r30, r4
    3914:	32 83       	std	Z+2, r19	; 0x02
    3916:	21 83       	std	Z+1, r18	; 0x01
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
    3918:	38 87       	std	Y+8, r19	; 0x08
    391a:	2f 83       	std	Y+7, r18	; 0x07
    391c:	32 01       	movw	r6, r4
    391e:	09 e0       	ldi	r16, 0x09	; 9
    3920:	80 2e       	mov	r8, r16
    3922:	91 2c       	mov	r9, r1
    3924:	8c 0e       	add	r8, r28
    3926:	9d 1e       	adc	r9, r29
    3928:	62 01       	movw	r12, r4
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    392a:	15 e0       	ldi	r17, 0x05	; 5
    392c:	21 2e       	mov	r2, r17
    392e:	31 2c       	mov	r3, r1
    3930:	2c 0e       	add	r2, r28
    3932:	3d 1e       	adc	r3, r29
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    3934:	ae 01       	movw	r20, r28
    3936:	47 5e       	subi	r20, 0xE7	; 231
    3938:	5f 4f       	sbci	r21, 0xFF	; 255
    393a:	5a 8f       	std	Y+26, r21	; 0x1a
    393c:	49 8f       	std	Y+25, r20	; 0x19
    393e:	46 c0       	rjmp	.+140    	; 0x39cc <parse_frame+0x12a>
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
	  	di_bytes[d_ndx] = read_LDS();
    3940:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    3944:	f8 01       	movw	r30, r16
    3946:	81 93       	st	Z+, r24
    3948:	8f 01       	movw	r16, r30
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
      // Read in the four distance and intensity bytes
      uint8_t di_bytes[4];
	  for(uint8_t d_ndx = 0; d_ndx < 4; d_ndx++){
    394a:	e2 15       	cp	r30, r2
    394c:	f3 05       	cpc	r31, r3
    394e:	c1 f7       	brne	.-16     	; 0x3940 <parse_frame+0x9e>
	  	di_bytes[d_ndx] = read_LDS();
      }
      // The invalid and strength flags are the MSB and adjacent bit of the second (indexwise) distance byte
      frame->invalid[itr] = (uint8_t)(di_bytes[1] & 0x80);
    3950:	4a 81       	ldd	r20, Y+2	; 0x02
    3952:	94 2f       	mov	r25, r20
    3954:	90 78       	andi	r25, 0x80	; 128
    3956:	f3 01       	movw	r30, r6
    3958:	93 83       	std	Z+3, r25	; 0x03
      frame->strength_warning[itr] = (uint8_t)(di_bytes[1] & 0x40);
    395a:	84 2f       	mov	r24, r20
    395c:	80 74       	andi	r24, 0x40	; 64
    395e:	87 83       	std	Z+7, r24	; 0x07

      // Distance and intensity bytes are read in little endian, and therefore need to be switched and concatenated
      // The second distance byte (indexwise) is masked to eliminate the invalid and strength flags from the measurement
      if(frame->invalid[itr]){ // If this measurement is invalid, set it to zero
    3960:	99 23       	and	r25, r25
    3962:	21 f0       	breq	.+8      	; 0x396c <parse_frame+0xca>
		frame->distance[itr]  = 0;
    3964:	f6 01       	movw	r30, r12
    3966:	14 86       	std	Z+12, r1	; 0x0c
    3968:	13 86       	std	Z+11, r1	; 0x0b
    396a:	0c c0       	rjmp	.+24     	; 0x3984 <parse_frame+0xe2>
      }
      else{
		frame->distance[itr]  = ((di_bytes[1] & 0x3F) << 8) + di_bytes[0];
    396c:	84 2f       	mov	r24, r20
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	8f 73       	andi	r24, 0x3F	; 63
    3972:	90 70       	andi	r25, 0x00	; 0
    3974:	98 2f       	mov	r25, r24
    3976:	88 27       	eor	r24, r24
    3978:	29 81       	ldd	r18, Y+1	; 0x01
    397a:	82 0f       	add	r24, r18
    397c:	91 1d       	adc	r25, r1
    397e:	f6 01       	movw	r30, r12
    3980:	94 87       	std	Z+12, r25	; 0x0c
    3982:	83 87       	std	Z+11, r24	; 0x0b
      }

      frame->intensity[itr] = (di_bytes[3] << 8) + di_bytes[2];
    3984:	bc 80       	ldd	r11, Y+4	; 0x04
    3986:	aa 24       	eor	r10, r10
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	95 01       	movw	r18, r10
    398c:	28 0f       	add	r18, r24
    398e:	31 1d       	adc	r19, r1
    3990:	f6 01       	movw	r30, r12
    3992:	34 8b       	std	Z+20, r19	; 0x14
    3994:	23 8b       	std	Z+19, r18	; 0x13
      
      // Add these bytes for the error checker
      chk_data[2*itr + 2] = (di_bytes[1] << 8) + di_bytes[0];
    3996:	f4 2e       	mov	r15, r20
    3998:	ee 24       	eor	r14, r14
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	a7 01       	movw	r20, r14
    399e:	48 0f       	add	r20, r24
    39a0:	51 1d       	adc	r21, r1
    39a2:	f4 01       	movw	r30, r8
    39a4:	51 83       	std	Z+1, r21	; 0x01
    39a6:	40 83       	st	Z, r20
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    39a8:	33 83       	std	Z+3, r19	; 0x03
    39aa:	22 83       	std	Z+2, r18	; 0x02
    39ac:	42 e0       	ldi	r20, 0x02	; 2
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	c4 0e       	add	r12, r20
    39b2:	d5 1e       	adc	r13, r21
    39b4:	84 e0       	ldi	r24, 0x04	; 4
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	88 0e       	add	r8, r24
    39ba:	99 1e       	adc	r9, r25
    39bc:	08 94       	sec
    39be:	61 1c       	adc	r6, r1
    39c0:	71 1c       	adc	r7, r1
    // Add these bytes for the error checker
    chk_data[1] = frame->motor_speed;
	
				
    // Read distances, intensities, and flags
    for(uint8_t itr = 0; itr < 4; itr++) {
    39c2:	e9 8d       	ldd	r30, Y+25	; 0x19
    39c4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    39c6:	8e 16       	cp	r8, r30
    39c8:	9f 06       	cpc	r9, r31
    39ca:	21 f0       	breq	.+8      	; 0x39d4 <parse_frame+0x132>
    39cc:	8e 01       	movw	r16, r28
    39ce:	0f 5f       	subi	r16, 0xFF	; 255
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	b6 cf       	rjmp	.-148    	; 0x3940 <parse_frame+0x9e>
      chk_data[2*itr + 3] = (di_bytes[3] << 8) + di_bytes[2];
    }

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    39d4:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    39d8:	18 2f       	mov	r17, r24
    39da:	0e 94 31 1c 	call	0x3862	; 0x3862 <read_LDS>
    39de:	38 2f       	mov	r19, r24
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	b9 01       	movw	r22, r18
    39e4:	61 0f       	add	r22, r17
    39e6:	71 1d       	adc	r23, r1
    39e8:	f2 01       	movw	r30, r4
    39ea:	74 8f       	std	Z+28, r23	; 0x1c
    39ec:	63 8f       	std	Z+27, r22	; 0x1b
    39ee:	f1 01       	movw	r30, r2
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
      chk32 = (chk32 << 1) + chk_data[ndx];
    39f8:	22 0f       	add	r18, r18
    39fa:	33 1f       	adc	r19, r19
    39fc:	44 1f       	adc	r20, r20
    39fe:	55 1f       	adc	r21, r21
    3a00:	81 91       	ld	r24, Z+
    3a02:	91 91       	ld	r25, Z+
    3a04:	a0 e0       	ldi	r26, 0x00	; 0
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	28 0f       	add	r18, r24
    3a0a:	39 1f       	adc	r19, r25
    3a0c:	4a 1f       	adc	r20, r26
    3a0e:	5b 1f       	adc	r21, r27
	return data;
}

uint8_t error_checker(const uint16_t chk_data[], uint16_t checksum){
    uint32_t chk32 = 0;
    for(uint8_t ndx = 0; ndx < 10; ndx++){
    3a10:	e8 15       	cp	r30, r8
    3a12:	f9 05       	cpc	r31, r9
    3a14:	89 f7       	brne	.-30     	; 0x39f8 <parse_frame+0x156>
      chk32 = (chk32 << 1) + chk_data[ndx];
    }
    uint16_t chk16 = (chk32 & 0x7FFF) + (chk32 >> 15);
    3a16:	c9 01       	movw	r24, r18
    3a18:	9f 77       	andi	r25, 0x7F	; 127
    3a1a:	ef e0       	ldi	r30, 0x0F	; 15
    3a1c:	56 95       	lsr	r21
    3a1e:	47 95       	ror	r20
    3a20:	37 95       	ror	r19
    3a22:	27 95       	ror	r18
    3a24:	ea 95       	dec	r30
    3a26:	d1 f7       	brne	.-12     	; 0x3a1c <parse_frame+0x17a>
    3a28:	82 0f       	add	r24, r18
    3a2a:	93 1f       	adc	r25, r19
    chk16 = chk16 & 0x7FFF;
    return (chk16 == checksum);
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	9f 77       	andi	r25, 0x7F	; 127
    3a30:	86 17       	cp	r24, r22
    3a32:	97 07       	cpc	r25, r23
    3a34:	19 f4       	brne	.+6      	; 0x3a3c <parse_frame+0x19a>
    3a36:	21 e0       	ldi	r18, 0x01	; 1
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <parse_frame+0x19a>

    // Read checksum
    // Checksum is given in little endian, but because it is read into a uint16_t, it is ordered correctly
	frame->checksum = (((uint16_t)read_LDS())) + (((uint16_t)read_LDS())<<8);
    
    return error_checker(chk_data, frame->checksum);
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
}  
    3a3c:	82 2f       	mov	r24, r18
    3a3e:	6a 96       	adiw	r28, 0x1a	; 26
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	ff 90       	pop	r15
    3a54:	ef 90       	pop	r14
    3a56:	df 90       	pop	r13
    3a58:	cf 90       	pop	r12
    3a5a:	bf 90       	pop	r11
    3a5c:	af 90       	pop	r10
    3a5e:	9f 90       	pop	r9
    3a60:	8f 90       	pop	r8
    3a62:	7f 90       	pop	r7
    3a64:	6f 90       	pop	r6
    3a66:	5f 90       	pop	r5
    3a68:	4f 90       	pop	r4
    3a6a:	3f 90       	pop	r3
    3a6c:	2f 90       	pop	r2
    3a6e:	08 95       	ret

00003a70 <grab_frames>:
		rprintf("%d ",frame.distance[ndx]);
	}
	rprintfCRLF();
}

void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
    3a70:	af 92       	push	r10
    3a72:	bf 92       	push	r11
    3a74:	cf 92       	push	r12
    3a76:	df 92       	push	r13
    3a78:	ef 92       	push	r14
    3a7a:	ff 92       	push	r15
    3a7c:	1f 93       	push	r17
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	6d 97       	sbiw	r28, 0x1d	; 29
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	7b 01       	movw	r14, r22
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;
    3a94:	db 01       	movw	r26, r22
    3a96:	fc 01       	movw	r30, r24
    3a98:	8d e1       	ldi	r24, 0x1D	; 29
    3a9a:	01 90       	ld	r0, Z+
    3a9c:	0d 92       	st	X+, r0
    3a9e:	81 50       	subi	r24, 0x01	; 1
    3aa0:	e1 f7       	brne	.-8      	; 0x3a9a <grab_frames+0x2a>
    3aa2:	11 e0       	ldi	r17, 0x01	; 1

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    3aa4:	6e 01       	movw	r12, r28
    3aa6:	08 94       	sec
    3aa8:	c1 1c       	adc	r12, r1
    3aaa:	d1 1c       	adc	r13, r1
			ldsf[f_ndx] = t_frame;
    3aac:	8d e1       	ldi	r24, 0x1D	; 29
    3aae:	a8 2e       	mov	r10, r24
    3ab0:	b1 2c       	mov	r11, r1
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
		if(parse_frame(&t_frame)){
    3ab2:	c6 01       	movw	r24, r12
    3ab4:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <parse_frame>
    3ab8:	88 23       	and	r24, r24
    3aba:	d9 f3       	breq	.-10     	; 0x3ab2 <grab_frames+0x42>
			ldsf[f_ndx] = t_frame;
    3abc:	81 2f       	mov	r24, r17
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	8a 9d       	mul	r24, r10
    3ac2:	f0 01       	movw	r30, r0
    3ac4:	8b 9d       	mul	r24, r11
    3ac6:	f0 0d       	add	r31, r0
    3ac8:	9a 9d       	mul	r25, r10
    3aca:	f0 0d       	add	r31, r0
    3acc:	11 24       	eor	r1, r1
    3ace:	ee 0d       	add	r30, r14
    3ad0:	ff 1d       	adc	r31, r15
    3ad2:	d6 01       	movw	r26, r12
    3ad4:	8d e1       	ldi	r24, 0x1D	; 29
    3ad6:	0d 90       	ld	r0, X+
    3ad8:	01 92       	st	Z+, r0
    3ada:	81 50       	subi	r24, 0x01	; 1
    3adc:	e1 f7       	brne	.-8      	; 0x3ad6 <grab_frames+0x66>
			f_ndx++;
    3ade:	1f 5f       	subi	r17, 0xFF	; 255
void grab_frames(const LDS_FRAME *frame, LDS_FRAME ldsf[]){
	LDS_FRAME t_frame;
	uint8_t f_ndx = 1;
	ldsf[0] = *frame;

	while(f_ndx < 90){
    3ae0:	1a 35       	cpi	r17, 0x5A	; 90
    3ae2:	38 f3       	brcs	.-50     	; 0x3ab2 <grab_frames+0x42>
		if(parse_frame(&t_frame)){
			ldsf[f_ndx] = t_frame;
			f_ndx++;
		}
	}
}
    3ae4:	6d 96       	adiw	r28, 0x1d	; 29
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	1f 91       	pop	r17
    3af6:	ff 90       	pop	r15
    3af8:	ef 90       	pop	r14
    3afa:	df 90       	pop	r13
    3afc:	cf 90       	pop	r12
    3afe:	bf 90       	pop	r11
    3b00:	af 90       	pop	r10
    3b02:	08 95       	ret

00003b04 <get_range_scan>:
		ranges[r_ndx + 2] = (ldsf[f_ndx].distance[2]);
		ranges[r_ndx + 3] = (ldsf[f_ndx].distance[3]);
	}
}

void get_range_scan(uint16_t ranges[]){
    3b04:	cf 92       	push	r12
    3b06:	df 92       	push	r13
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	0f 93       	push	r16
    3b0e:	1f 93       	push	r17
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	cf 54       	subi	r28, 0x4F	; 79
    3b1a:	da 40       	sbci	r29, 0x0A	; 10
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	6c 01       	movw	r12, r24
	uint8_t first_frame = UNSET;
	LDS_FRAME frame;
	LDS_FRAME ldsf[90];
	// Grab frames
	while(!first_frame){
		if(parse_frame(&frame)){
    3b28:	7e 01       	movw	r14, r28
    3b2a:	08 94       	sec
    3b2c:	e1 1c       	adc	r14, r1
    3b2e:	f1 1c       	adc	r15, r1
    3b30:	c7 01       	movw	r24, r14
    3b32:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <parse_frame>
    3b36:	88 23       	and	r24, r24
    3b38:	d9 f3       	breq	.-10     	; 0x3b30 <get_range_scan+0x2c>
			//rprintf("Got frame.\n");
			// If you get the first frame, start reading into the frame buffer
			if(frame.index == 0xA0){
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	80 3a       	cpi	r24, 0xA0	; 160
    3b3e:	c1 f7       	brne	.-16     	; 0x3b30 <get_range_scan+0x2c>
				first_frame = SET;
				grab_frames(&frame,ldsf);
    3b40:	8e 01       	movw	r16, r28
    3b42:	02 5e       	subi	r16, 0xE2	; 226
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
    3b46:	c7 01       	movw	r24, r14
    3b48:	b8 01       	movw	r22, r16
    3b4a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <grab_frames>
				//rprintf("Frames grabbed.\n");
				// Convert frames into distances
				conv_FrametoDist(ldsf,ranges);
    3b4e:	c8 01       	movw	r24, r16
    3b50:	b6 01       	movw	r22, r12
    3b52:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <conv_FrametoDist>
				rprintf("\nScan end\n\n");
				*/
			}
		}
	}
}
    3b56:	c1 5b       	subi	r28, 0xB1	; 177
    3b58:	d5 4f       	sbci	r29, 0xF5	; 245
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	08 95       	ret

00003b76 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    3b76:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3b78:	8f b7       	in	r24, 0x3f	; 63
    3b7a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    3b7c:	71 83       	std	Z+1, r23	; 0x01
    3b7e:	60 83       	st	Z, r22
	buffer->size = size;
    3b80:	53 83       	std	Z+3, r21	; 0x03
    3b82:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    3b84:	17 82       	std	Z+7, r1	; 0x07
    3b86:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    3b88:	15 82       	std	Z+5, r1	; 0x05
    3b8a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    3b8c:	8f bf       	out	0x3f, r24	; 63
}
    3b8e:	08 95       	ret

00003b90 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    3b90:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    3b92:	4f b7       	in	r20, 0x3f	; 63
    3b94:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    3b96:	14 96       	adiw	r26, 0x04	; 4
    3b98:	8d 91       	ld	r24, X+
    3b9a:	9c 91       	ld	r25, X
    3b9c:	15 97       	sbiw	r26, 0x05	; 5
    3b9e:	89 2b       	or	r24, r25
    3ba0:	11 f4       	brne	.+4      	; 0x3ba6 <bufferGetFromFront+0x16>
    3ba2:	e0 e0       	ldi	r30, 0x00	; 0
    3ba4:	25 c0       	rjmp	.+74     	; 0x3bf0 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    3ba6:	16 96       	adiw	r26, 0x06	; 6
    3ba8:	8d 91       	ld	r24, X+
    3baa:	9c 91       	ld	r25, X
    3bac:	17 97       	sbiw	r26, 0x07	; 7
    3bae:	ed 91       	ld	r30, X+
    3bb0:	fc 91       	ld	r31, X
    3bb2:	11 97       	sbiw	r26, 0x01	; 1
    3bb4:	e8 0f       	add	r30, r24
    3bb6:	f9 1f       	adc	r31, r25
    3bb8:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    3bba:	01 96       	adiw	r24, 0x01	; 1
    3bbc:	17 96       	adiw	r26, 0x07	; 7
    3bbe:	9c 93       	st	X, r25
    3bc0:	8e 93       	st	-X, r24
    3bc2:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    3bc4:	12 96       	adiw	r26, 0x02	; 2
    3bc6:	2d 91       	ld	r18, X+
    3bc8:	3c 91       	ld	r19, X
    3bca:	13 97       	sbiw	r26, 0x03	; 3
    3bcc:	82 17       	cp	r24, r18
    3bce:	93 07       	cpc	r25, r19
    3bd0:	30 f0       	brcs	.+12     	; 0x3bde <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    3bd2:	82 1b       	sub	r24, r18
    3bd4:	93 0b       	sbc	r25, r19
    3bd6:	17 96       	adiw	r26, 0x07	; 7
    3bd8:	9c 93       	st	X, r25
    3bda:	8e 93       	st	-X, r24
    3bdc:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    3bde:	14 96       	adiw	r26, 0x04	; 4
    3be0:	8d 91       	ld	r24, X+
    3be2:	9c 91       	ld	r25, X
    3be4:	15 97       	sbiw	r26, 0x05	; 5
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	15 96       	adiw	r26, 0x05	; 5
    3bea:	9c 93       	st	X, r25
    3bec:	8e 93       	st	-X, r24
    3bee:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    3bf0:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    3bf2:	8e 2f       	mov	r24, r30
    3bf4:	08 95       	ret

00003bf6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    3bf6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3bf8:	4f b7       	in	r20, 0x3f	; 63
    3bfa:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    3bfc:	84 81       	ldd	r24, Z+4	; 0x04
    3bfe:	95 81       	ldd	r25, Z+5	; 0x05
    3c00:	68 17       	cp	r22, r24
    3c02:	79 07       	cpc	r23, r25
    3c04:	b0 f4       	brcc	.+44     	; 0x3c32 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    3c06:	86 81       	ldd	r24, Z+6	; 0x06
    3c08:	97 81       	ldd	r25, Z+7	; 0x07
    3c0a:	86 0f       	add	r24, r22
    3c0c:	97 1f       	adc	r25, r23
    3c0e:	97 83       	std	Z+7, r25	; 0x07
    3c10:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    3c12:	22 81       	ldd	r18, Z+2	; 0x02
    3c14:	33 81       	ldd	r19, Z+3	; 0x03
    3c16:	82 17       	cp	r24, r18
    3c18:	93 07       	cpc	r25, r19
    3c1a:	20 f0       	brcs	.+8      	; 0x3c24 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    3c1c:	82 1b       	sub	r24, r18
    3c1e:	93 0b       	sbc	r25, r19
    3c20:	97 83       	std	Z+7, r25	; 0x07
    3c22:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    3c24:	84 81       	ldd	r24, Z+4	; 0x04
    3c26:	95 81       	ldd	r25, Z+5	; 0x05
    3c28:	86 1b       	sub	r24, r22
    3c2a:	97 0b       	sbc	r25, r23
    3c2c:	95 83       	std	Z+5, r25	; 0x05
    3c2e:	84 83       	std	Z+4, r24	; 0x04
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    3c32:	15 82       	std	Z+5, r1	; 0x05
    3c34:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    3c36:	4f bf       	out	0x3f, r20	; 63
}
    3c38:	08 95       	ret

00003c3a <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    3c3e:	2f b7       	in	r18, 0x3f	; 63
    3c40:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    3c42:	2f bf       	out	0x3f, r18	; 63
    3c44:	26 81       	ldd	r18, Z+6	; 0x06
    3c46:	37 81       	ldd	r19, Z+7	; 0x07
    3c48:	62 81       	ldd	r22, Z+2	; 0x02
    3c4a:	73 81       	ldd	r23, Z+3	; 0x03
    3c4c:	82 0f       	add	r24, r18
    3c4e:	93 1f       	adc	r25, r19
    3c50:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    3c54:	01 90       	ld	r0, Z+
    3c56:	f0 81       	ld	r31, Z
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	e8 0f       	add	r30, r24
    3c5c:	f9 1f       	adc	r31, r25
	return data;
}
    3c5e:	80 81       	ld	r24, Z
    3c60:	08 95       	ret

00003c62 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	ec 01       	movw	r28, r24
    3c6a:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    3c6c:	4f b7       	in	r20, 0x3f	; 63
    3c6e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    3c70:	2c 81       	ldd	r18, Y+4	; 0x04
    3c72:	3d 81       	ldd	r19, Y+5	; 0x05
    3c74:	6a 81       	ldd	r22, Y+2	; 0x02
    3c76:	7b 81       	ldd	r23, Y+3	; 0x03
    3c78:	26 17       	cp	r18, r22
    3c7a:	37 07       	cpc	r19, r23
    3c7c:	98 f4       	brcc	.+38     	; 0x3ca4 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    3c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c80:	9f 81       	ldd	r25, Y+7	; 0x07
    3c82:	82 0f       	add	r24, r18
    3c84:	93 1f       	adc	r25, r19
    3c86:	0e 94 01 23 	call	0x4602	; 0x4602 <__udivmodhi4>
    3c8a:	e8 81       	ld	r30, Y
    3c8c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c8e:	e8 0f       	add	r30, r24
    3c90:	f9 1f       	adc	r31, r25
    3c92:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    3c94:	8c 81       	ldd	r24, Y+4	; 0x04
    3c96:	9d 81       	ldd	r25, Y+5	; 0x05
    3c98:	01 96       	adiw	r24, 0x01	; 1
    3c9a:	9d 83       	std	Y+5, r25	; 0x05
    3c9c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    3c9e:	4f bf       	out	0x3f, r20	; 63
    3ca0:	8f ef       	ldi	r24, 0xFF	; 255
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    3ca4:	4f bf       	out	0x3f, r20	; 63
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	1f 91       	pop	r17
    3cae:	08 95       	ret

00003cb0 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    3cb0:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3cb2:	8f b7       	in	r24, 0x3f	; 63
    3cb4:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    3cb6:	8f bf       	out	0x3f, r24	; 63
    3cb8:	22 81       	ldd	r18, Z+2	; 0x02
    3cba:	33 81       	ldd	r19, Z+3	; 0x03
    3cbc:	84 81       	ldd	r24, Z+4	; 0x04
    3cbe:	95 81       	ldd	r25, Z+5	; 0x05
    3cc0:	28 1b       	sub	r18, r24
    3cc2:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    3cc4:	c9 01       	movw	r24, r18
    3cc6:	08 95       	ret

00003cc8 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    3cc8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    3cca:	8f b7       	in	r24, 0x3f	; 63
    3ccc:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    3cce:	15 82       	std	Z+5, r1	; 0x05
    3cd0:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    3cd2:	8f bf       	out	0x3f, r24	; 63
}
    3cd4:	08 95       	ret

00003cd6 <exit>:
    3cd6:	f8 94       	cli
    3cd8:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <_exit>

00003cdc <__subsf3>:
    3cdc:	50 58       	subi	r21, 0x80	; 128

00003cde <__addsf3>:
    3cde:	bb 27       	eor	r27, r27
    3ce0:	aa 27       	eor	r26, r26
    3ce2:	0e d0       	rcall	.+28     	; 0x3d00 <__addsf3x>
    3ce4:	2b c2       	rjmp	.+1110   	; 0x413c <__fp_round>
    3ce6:	eb d1       	rcall	.+982    	; 0x40be <__fp_pscA>
    3ce8:	30 f0       	brcs	.+12     	; 0x3cf6 <__addsf3+0x18>
    3cea:	f0 d1       	rcall	.+992    	; 0x40cc <__fp_pscB>
    3cec:	20 f0       	brcs	.+8      	; 0x3cf6 <__addsf3+0x18>
    3cee:	31 f4       	brne	.+12     	; 0x3cfc <__addsf3+0x1e>
    3cf0:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf2:	11 f4       	brne	.+4      	; 0x3cf8 <__addsf3+0x1a>
    3cf4:	1e f4       	brtc	.+6      	; 0x3cfc <__addsf3+0x1e>
    3cf6:	bb c1       	rjmp	.+886    	; 0x406e <__fp_nan>
    3cf8:	0e f4       	brtc	.+2      	; 0x3cfc <__addsf3+0x1e>
    3cfa:	e0 95       	com	r30
    3cfc:	e7 fb       	bst	r30, 7
    3cfe:	b1 c1       	rjmp	.+866    	; 0x4062 <__fp_inf>

00003d00 <__addsf3x>:
    3d00:	e9 2f       	mov	r30, r25
    3d02:	3e d2       	rcall	.+1148   	; 0x4180 <__fp_split3>
    3d04:	80 f3       	brcs	.-32     	; 0x3ce6 <__addsf3+0x8>
    3d06:	ba 17       	cp	r27, r26
    3d08:	62 07       	cpc	r22, r18
    3d0a:	73 07       	cpc	r23, r19
    3d0c:	84 07       	cpc	r24, r20
    3d0e:	95 07       	cpc	r25, r21
    3d10:	18 f0       	brcs	.+6      	; 0x3d18 <__addsf3x+0x18>
    3d12:	71 f4       	brne	.+28     	; 0x3d30 <__addsf3x+0x30>
    3d14:	9e f5       	brtc	.+102    	; 0x3d7c <__addsf3x+0x7c>
    3d16:	56 c2       	rjmp	.+1196   	; 0x41c4 <__fp_zero>
    3d18:	0e f4       	brtc	.+2      	; 0x3d1c <__addsf3x+0x1c>
    3d1a:	e0 95       	com	r30
    3d1c:	0b 2e       	mov	r0, r27
    3d1e:	ba 2f       	mov	r27, r26
    3d20:	a0 2d       	mov	r26, r0
    3d22:	0b 01       	movw	r0, r22
    3d24:	b9 01       	movw	r22, r18
    3d26:	90 01       	movw	r18, r0
    3d28:	0c 01       	movw	r0, r24
    3d2a:	ca 01       	movw	r24, r20
    3d2c:	a0 01       	movw	r20, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	ff 27       	eor	r31, r31
    3d32:	59 1b       	sub	r21, r25
    3d34:	99 f0       	breq	.+38     	; 0x3d5c <__addsf3x+0x5c>
    3d36:	59 3f       	cpi	r21, 0xF9	; 249
    3d38:	50 f4       	brcc	.+20     	; 0x3d4e <__addsf3x+0x4e>
    3d3a:	50 3e       	cpi	r21, 0xE0	; 224
    3d3c:	68 f1       	brcs	.+90     	; 0x3d98 <__addsf3x+0x98>
    3d3e:	1a 16       	cp	r1, r26
    3d40:	f0 40       	sbci	r31, 0x00	; 0
    3d42:	a2 2f       	mov	r26, r18
    3d44:	23 2f       	mov	r18, r19
    3d46:	34 2f       	mov	r19, r20
    3d48:	44 27       	eor	r20, r20
    3d4a:	58 5f       	subi	r21, 0xF8	; 248
    3d4c:	f3 cf       	rjmp	.-26     	; 0x3d34 <__addsf3x+0x34>
    3d4e:	46 95       	lsr	r20
    3d50:	37 95       	ror	r19
    3d52:	27 95       	ror	r18
    3d54:	a7 95       	ror	r26
    3d56:	f0 40       	sbci	r31, 0x00	; 0
    3d58:	53 95       	inc	r21
    3d5a:	c9 f7       	brne	.-14     	; 0x3d4e <__addsf3x+0x4e>
    3d5c:	7e f4       	brtc	.+30     	; 0x3d7c <__addsf3x+0x7c>
    3d5e:	1f 16       	cp	r1, r31
    3d60:	ba 0b       	sbc	r27, r26
    3d62:	62 0b       	sbc	r22, r18
    3d64:	73 0b       	sbc	r23, r19
    3d66:	84 0b       	sbc	r24, r20
    3d68:	ba f0       	brmi	.+46     	; 0x3d98 <__addsf3x+0x98>
    3d6a:	91 50       	subi	r25, 0x01	; 1
    3d6c:	a1 f0       	breq	.+40     	; 0x3d96 <__addsf3x+0x96>
    3d6e:	ff 0f       	add	r31, r31
    3d70:	bb 1f       	adc	r27, r27
    3d72:	66 1f       	adc	r22, r22
    3d74:	77 1f       	adc	r23, r23
    3d76:	88 1f       	adc	r24, r24
    3d78:	c2 f7       	brpl	.-16     	; 0x3d6a <__addsf3x+0x6a>
    3d7a:	0e c0       	rjmp	.+28     	; 0x3d98 <__addsf3x+0x98>
    3d7c:	ba 0f       	add	r27, r26
    3d7e:	62 1f       	adc	r22, r18
    3d80:	73 1f       	adc	r23, r19
    3d82:	84 1f       	adc	r24, r20
    3d84:	48 f4       	brcc	.+18     	; 0x3d98 <__addsf3x+0x98>
    3d86:	87 95       	ror	r24
    3d88:	77 95       	ror	r23
    3d8a:	67 95       	ror	r22
    3d8c:	b7 95       	ror	r27
    3d8e:	f7 95       	ror	r31
    3d90:	9e 3f       	cpi	r25, 0xFE	; 254
    3d92:	08 f0       	brcs	.+2      	; 0x3d96 <__addsf3x+0x96>
    3d94:	b3 cf       	rjmp	.-154    	; 0x3cfc <__addsf3+0x1e>
    3d96:	93 95       	inc	r25
    3d98:	88 0f       	add	r24, r24
    3d9a:	08 f0       	brcs	.+2      	; 0x3d9e <__addsf3x+0x9e>
    3d9c:	99 27       	eor	r25, r25
    3d9e:	ee 0f       	add	r30, r30
    3da0:	97 95       	ror	r25
    3da2:	87 95       	ror	r24
    3da4:	08 95       	ret
    3da6:	8b d1       	rcall	.+790    	; 0x40be <__fp_pscA>
    3da8:	58 f0       	brcs	.+22     	; 0x3dc0 <__addsf3x+0xc0>
    3daa:	80 e8       	ldi	r24, 0x80	; 128
    3dac:	91 e0       	ldi	r25, 0x01	; 1
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <__addsf3x+0xb2>
    3db0:	9e ef       	ldi	r25, 0xFE	; 254
    3db2:	8c d1       	rcall	.+792    	; 0x40cc <__fp_pscB>
    3db4:	28 f0       	brcs	.+10     	; 0x3dc0 <__addsf3x+0xc0>
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	51 e0       	ldi	r21, 0x01	; 1
    3dba:	59 f4       	brne	.+22     	; 0x3dd2 <atan2+0xe>
    3dbc:	5e ef       	ldi	r21, 0xFE	; 254
    3dbe:	09 c0       	rjmp	.+18     	; 0x3dd2 <atan2+0xe>
    3dc0:	56 c1       	rjmp	.+684    	; 0x406e <__fp_nan>
    3dc2:	00 c2       	rjmp	.+1024   	; 0x41c4 <__fp_zero>

00003dc4 <atan2>:
    3dc4:	e9 2f       	mov	r30, r25
    3dc6:	e0 78       	andi	r30, 0x80	; 128
    3dc8:	db d1       	rcall	.+950    	; 0x4180 <__fp_split3>
    3dca:	68 f3       	brcs	.-38     	; 0x3da6 <__addsf3x+0xa6>
    3dcc:	09 2e       	mov	r0, r25
    3dce:	05 2a       	or	r0, r21
    3dd0:	c1 f3       	breq	.-16     	; 0x3dc2 <__addsf3x+0xc2>
    3dd2:	26 17       	cp	r18, r22
    3dd4:	37 07       	cpc	r19, r23
    3dd6:	48 07       	cpc	r20, r24
    3dd8:	59 07       	cpc	r21, r25
    3dda:	38 f0       	brcs	.+14     	; 0x3dea <atan2+0x26>
    3ddc:	0e 2e       	mov	r0, r30
    3dde:	07 f8       	bld	r0, 7
    3de0:	e0 25       	eor	r30, r0
    3de2:	69 f0       	breq	.+26     	; 0x3dfe <atan2+0x3a>
    3de4:	e0 25       	eor	r30, r0
    3de6:	e0 64       	ori	r30, 0x40	; 64
    3de8:	0a c0       	rjmp	.+20     	; 0x3dfe <atan2+0x3a>
    3dea:	ef 63       	ori	r30, 0x3F	; 63
    3dec:	07 f8       	bld	r0, 7
    3dee:	00 94       	com	r0
    3df0:	07 fa       	bst	r0, 7
    3df2:	db 01       	movw	r26, r22
    3df4:	b9 01       	movw	r22, r18
    3df6:	9d 01       	movw	r18, r26
    3df8:	dc 01       	movw	r26, r24
    3dfa:	ca 01       	movw	r24, r20
    3dfc:	ad 01       	movw	r20, r26
    3dfe:	ef 93       	push	r30
    3e00:	4a d0       	rcall	.+148    	; 0x3e96 <__divsf3_pse>
    3e02:	9c d1       	rcall	.+824    	; 0x413c <__fp_round>
    3e04:	0a d0       	rcall	.+20     	; 0x3e1a <atan>
    3e06:	5f 91       	pop	r21
    3e08:	55 23       	and	r21, r21
    3e0a:	31 f0       	breq	.+12     	; 0x3e18 <atan2+0x54>
    3e0c:	2b ed       	ldi	r18, 0xDB	; 219
    3e0e:	3f e0       	ldi	r19, 0x0F	; 15
    3e10:	49 e4       	ldi	r20, 0x49	; 73
    3e12:	50 fd       	sbrc	r21, 0
    3e14:	49 ec       	ldi	r20, 0xC9	; 201
    3e16:	63 cf       	rjmp	.-314    	; 0x3cde <__addsf3>
    3e18:	08 95       	ret

00003e1a <atan>:
    3e1a:	df 93       	push	r29
    3e1c:	dd 27       	eor	r29, r29
    3e1e:	b9 2f       	mov	r27, r25
    3e20:	bf 77       	andi	r27, 0x7F	; 127
    3e22:	40 e8       	ldi	r20, 0x80	; 128
    3e24:	5f e3       	ldi	r21, 0x3F	; 63
    3e26:	16 16       	cp	r1, r22
    3e28:	17 06       	cpc	r1, r23
    3e2a:	48 07       	cpc	r20, r24
    3e2c:	5b 07       	cpc	r21, r27
    3e2e:	10 f4       	brcc	.+4      	; 0x3e34 <atan+0x1a>
    3e30:	d9 2f       	mov	r29, r25
    3e32:	d3 d1       	rcall	.+934    	; 0x41da <inverse>
    3e34:	9f 93       	push	r25
    3e36:	8f 93       	push	r24
    3e38:	7f 93       	push	r23
    3e3a:	6f 93       	push	r22
    3e3c:	1d d3       	rcall	.+1594   	; 0x4478 <square>
    3e3e:	e4 ee       	ldi	r30, 0xE4	; 228
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	18 d1       	rcall	.+560    	; 0x4074 <__fp_powser>
    3e44:	7b d1       	rcall	.+758    	; 0x413c <__fp_round>
    3e46:	2f 91       	pop	r18
    3e48:	3f 91       	pop	r19
    3e4a:	4f 91       	pop	r20
    3e4c:	5f 91       	pop	r21
    3e4e:	1d d2       	rcall	.+1082   	; 0x428a <__mulsf3x>
    3e50:	dd 23       	and	r29, r29
    3e52:	49 f0       	breq	.+18     	; 0x3e66 <atan+0x4c>
    3e54:	90 58       	subi	r25, 0x80	; 128
    3e56:	a2 ea       	ldi	r26, 0xA2	; 162
    3e58:	2a ed       	ldi	r18, 0xDA	; 218
    3e5a:	3f e0       	ldi	r19, 0x0F	; 15
    3e5c:	49 ec       	ldi	r20, 0xC9	; 201
    3e5e:	5f e3       	ldi	r21, 0x3F	; 63
    3e60:	d0 78       	andi	r29, 0x80	; 128
    3e62:	5d 27       	eor	r21, r29
    3e64:	4d df       	rcall	.-358    	; 0x3d00 <__addsf3x>
    3e66:	df 91       	pop	r29
    3e68:	69 c1       	rjmp	.+722    	; 0x413c <__fp_round>

00003e6a <__cmpsf2>:
    3e6a:	d7 d0       	rcall	.+430    	; 0x401a <__fp_cmp>
    3e6c:	08 f4       	brcc	.+2      	; 0x3e70 <__cmpsf2+0x6>
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	08 95       	ret

00003e72 <cos>:
    3e72:	34 d1       	rcall	.+616    	; 0x40dc <__fp_rempio2>
    3e74:	e3 95       	inc	r30
    3e76:	73 c1       	rjmp	.+742    	; 0x415e <__fp_sinus>

00003e78 <__divsf3>:
    3e78:	0c d0       	rcall	.+24     	; 0x3e92 <__divsf3x>
    3e7a:	60 c1       	rjmp	.+704    	; 0x413c <__fp_round>
    3e7c:	27 d1       	rcall	.+590    	; 0x40cc <__fp_pscB>
    3e7e:	40 f0       	brcs	.+16     	; 0x3e90 <__divsf3+0x18>
    3e80:	1e d1       	rcall	.+572    	; 0x40be <__fp_pscA>
    3e82:	30 f0       	brcs	.+12     	; 0x3e90 <__divsf3+0x18>
    3e84:	21 f4       	brne	.+8      	; 0x3e8e <__divsf3+0x16>
    3e86:	5f 3f       	cpi	r21, 0xFF	; 255
    3e88:	19 f0       	breq	.+6      	; 0x3e90 <__divsf3+0x18>
    3e8a:	eb c0       	rjmp	.+470    	; 0x4062 <__fp_inf>
    3e8c:	51 11       	cpse	r21, r1
    3e8e:	9b c1       	rjmp	.+822    	; 0x41c6 <__fp_szero>
    3e90:	ee c0       	rjmp	.+476    	; 0x406e <__fp_nan>

00003e92 <__divsf3x>:
    3e92:	76 d1       	rcall	.+748    	; 0x4180 <__fp_split3>
    3e94:	98 f3       	brcs	.-26     	; 0x3e7c <__divsf3+0x4>

00003e96 <__divsf3_pse>:
    3e96:	99 23       	and	r25, r25
    3e98:	c9 f3       	breq	.-14     	; 0x3e8c <__divsf3+0x14>
    3e9a:	55 23       	and	r21, r21
    3e9c:	b1 f3       	breq	.-20     	; 0x3e8a <__divsf3+0x12>
    3e9e:	95 1b       	sub	r25, r21
    3ea0:	55 0b       	sbc	r21, r21
    3ea2:	bb 27       	eor	r27, r27
    3ea4:	aa 27       	eor	r26, r26
    3ea6:	62 17       	cp	r22, r18
    3ea8:	73 07       	cpc	r23, r19
    3eaa:	84 07       	cpc	r24, r20
    3eac:	38 f0       	brcs	.+14     	; 0x3ebc <__divsf3_pse+0x26>
    3eae:	9f 5f       	subi	r25, 0xFF	; 255
    3eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb2:	22 0f       	add	r18, r18
    3eb4:	33 1f       	adc	r19, r19
    3eb6:	44 1f       	adc	r20, r20
    3eb8:	aa 1f       	adc	r26, r26
    3eba:	a9 f3       	breq	.-22     	; 0x3ea6 <__divsf3_pse+0x10>
    3ebc:	33 d0       	rcall	.+102    	; 0x3f24 <__divsf3_pse+0x8e>
    3ebe:	0e 2e       	mov	r0, r30
    3ec0:	3a f0       	brmi	.+14     	; 0x3ed0 <__divsf3_pse+0x3a>
    3ec2:	e0 e8       	ldi	r30, 0x80	; 128
    3ec4:	30 d0       	rcall	.+96     	; 0x3f26 <__divsf3_pse+0x90>
    3ec6:	91 50       	subi	r25, 0x01	; 1
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	e6 95       	lsr	r30
    3ecc:	00 1c       	adc	r0, r0
    3ece:	ca f7       	brpl	.-14     	; 0x3ec2 <__divsf3_pse+0x2c>
    3ed0:	29 d0       	rcall	.+82     	; 0x3f24 <__divsf3_pse+0x8e>
    3ed2:	fe 2f       	mov	r31, r30
    3ed4:	27 d0       	rcall	.+78     	; 0x3f24 <__divsf3_pse+0x8e>
    3ed6:	66 0f       	add	r22, r22
    3ed8:	77 1f       	adc	r23, r23
    3eda:	88 1f       	adc	r24, r24
    3edc:	bb 1f       	adc	r27, r27
    3ede:	26 17       	cp	r18, r22
    3ee0:	37 07       	cpc	r19, r23
    3ee2:	48 07       	cpc	r20, r24
    3ee4:	ab 07       	cpc	r26, r27
    3ee6:	b0 e8       	ldi	r27, 0x80	; 128
    3ee8:	09 f0       	breq	.+2      	; 0x3eec <__divsf3_pse+0x56>
    3eea:	bb 0b       	sbc	r27, r27
    3eec:	80 2d       	mov	r24, r0
    3eee:	bf 01       	movw	r22, r30
    3ef0:	ff 27       	eor	r31, r31
    3ef2:	93 58       	subi	r25, 0x83	; 131
    3ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef6:	2a f0       	brmi	.+10     	; 0x3f02 <__divsf3_pse+0x6c>
    3ef8:	9e 3f       	cpi	r25, 0xFE	; 254
    3efa:	51 05       	cpc	r21, r1
    3efc:	68 f0       	brcs	.+26     	; 0x3f18 <__divsf3_pse+0x82>
    3efe:	b1 c0       	rjmp	.+354    	; 0x4062 <__fp_inf>
    3f00:	62 c1       	rjmp	.+708    	; 0x41c6 <__fp_szero>
    3f02:	5f 3f       	cpi	r21, 0xFF	; 255
    3f04:	ec f3       	brlt	.-6      	; 0x3f00 <__divsf3_pse+0x6a>
    3f06:	98 3e       	cpi	r25, 0xE8	; 232
    3f08:	dc f3       	brlt	.-10     	; 0x3f00 <__divsf3_pse+0x6a>
    3f0a:	86 95       	lsr	r24
    3f0c:	77 95       	ror	r23
    3f0e:	67 95       	ror	r22
    3f10:	b7 95       	ror	r27
    3f12:	f7 95       	ror	r31
    3f14:	9f 5f       	subi	r25, 0xFF	; 255
    3f16:	c9 f7       	brne	.-14     	; 0x3f0a <__divsf3_pse+0x74>
    3f18:	88 0f       	add	r24, r24
    3f1a:	91 1d       	adc	r25, r1
    3f1c:	96 95       	lsr	r25
    3f1e:	87 95       	ror	r24
    3f20:	97 f9       	bld	r25, 7
    3f22:	08 95       	ret
    3f24:	e1 e0       	ldi	r30, 0x01	; 1
    3f26:	66 0f       	add	r22, r22
    3f28:	77 1f       	adc	r23, r23
    3f2a:	88 1f       	adc	r24, r24
    3f2c:	bb 1f       	adc	r27, r27
    3f2e:	62 17       	cp	r22, r18
    3f30:	73 07       	cpc	r23, r19
    3f32:	84 07       	cpc	r24, r20
    3f34:	ba 07       	cpc	r27, r26
    3f36:	20 f0       	brcs	.+8      	; 0x3f40 <__divsf3_pse+0xaa>
    3f38:	62 1b       	sub	r22, r18
    3f3a:	73 0b       	sbc	r23, r19
    3f3c:	84 0b       	sbc	r24, r20
    3f3e:	ba 0b       	sbc	r27, r26
    3f40:	ee 1f       	adc	r30, r30
    3f42:	88 f7       	brcc	.-30     	; 0x3f26 <__divsf3_pse+0x90>
    3f44:	e0 95       	com	r30
    3f46:	08 95       	ret

00003f48 <__fixunssfsi>:
    3f48:	23 d1       	rcall	.+582    	; 0x4190 <__fp_splitA>
    3f4a:	88 f0       	brcs	.+34     	; 0x3f6e <__fixunssfsi+0x26>
    3f4c:	9f 57       	subi	r25, 0x7F	; 127
    3f4e:	90 f0       	brcs	.+36     	; 0x3f74 <__fixunssfsi+0x2c>
    3f50:	b9 2f       	mov	r27, r25
    3f52:	99 27       	eor	r25, r25
    3f54:	b7 51       	subi	r27, 0x17	; 23
    3f56:	a0 f0       	brcs	.+40     	; 0x3f80 <__fixunssfsi+0x38>
    3f58:	d1 f0       	breq	.+52     	; 0x3f8e <__fixunssfsi+0x46>
    3f5a:	66 0f       	add	r22, r22
    3f5c:	77 1f       	adc	r23, r23
    3f5e:	88 1f       	adc	r24, r24
    3f60:	99 1f       	adc	r25, r25
    3f62:	1a f0       	brmi	.+6      	; 0x3f6a <__fixunssfsi+0x22>
    3f64:	ba 95       	dec	r27
    3f66:	c9 f7       	brne	.-14     	; 0x3f5a <__fixunssfsi+0x12>
    3f68:	12 c0       	rjmp	.+36     	; 0x3f8e <__fixunssfsi+0x46>
    3f6a:	b1 30       	cpi	r27, 0x01	; 1
    3f6c:	81 f0       	breq	.+32     	; 0x3f8e <__fixunssfsi+0x46>
    3f6e:	2a d1       	rcall	.+596    	; 0x41c4 <__fp_zero>
    3f70:	b1 e0       	ldi	r27, 0x01	; 1
    3f72:	08 95       	ret
    3f74:	27 c1       	rjmp	.+590    	; 0x41c4 <__fp_zero>
    3f76:	67 2f       	mov	r22, r23
    3f78:	78 2f       	mov	r23, r24
    3f7a:	88 27       	eor	r24, r24
    3f7c:	b8 5f       	subi	r27, 0xF8	; 248
    3f7e:	39 f0       	breq	.+14     	; 0x3f8e <__fixunssfsi+0x46>
    3f80:	b9 3f       	cpi	r27, 0xF9	; 249
    3f82:	cc f3       	brlt	.-14     	; 0x3f76 <__fixunssfsi+0x2e>
    3f84:	86 95       	lsr	r24
    3f86:	77 95       	ror	r23
    3f88:	67 95       	ror	r22
    3f8a:	b3 95       	inc	r27
    3f8c:	d9 f7       	brne	.-10     	; 0x3f84 <__fixunssfsi+0x3c>
    3f8e:	3e f4       	brtc	.+14     	; 0x3f9e <__fixunssfsi+0x56>
    3f90:	90 95       	com	r25
    3f92:	80 95       	com	r24
    3f94:	70 95       	com	r23
    3f96:	61 95       	neg	r22
    3f98:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9e:	08 95       	ret

00003fa0 <__floatunsisf>:
    3fa0:	e8 94       	clt
    3fa2:	09 c0       	rjmp	.+18     	; 0x3fb6 <__floatsisf+0x12>

00003fa4 <__floatsisf>:
    3fa4:	97 fb       	bst	r25, 7
    3fa6:	3e f4       	brtc	.+14     	; 0x3fb6 <__floatsisf+0x12>
    3fa8:	90 95       	com	r25
    3faa:	80 95       	com	r24
    3fac:	70 95       	com	r23
    3fae:	61 95       	neg	r22
    3fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	99 23       	and	r25, r25
    3fb8:	a9 f0       	breq	.+42     	; 0x3fe4 <__floatsisf+0x40>
    3fba:	f9 2f       	mov	r31, r25
    3fbc:	96 e9       	ldi	r25, 0x96	; 150
    3fbe:	bb 27       	eor	r27, r27
    3fc0:	93 95       	inc	r25
    3fc2:	f6 95       	lsr	r31
    3fc4:	87 95       	ror	r24
    3fc6:	77 95       	ror	r23
    3fc8:	67 95       	ror	r22
    3fca:	b7 95       	ror	r27
    3fcc:	f1 11       	cpse	r31, r1
    3fce:	f8 cf       	rjmp	.-16     	; 0x3fc0 <__floatsisf+0x1c>
    3fd0:	fa f4       	brpl	.+62     	; 0x4010 <__floatsisf+0x6c>
    3fd2:	bb 0f       	add	r27, r27
    3fd4:	11 f4       	brne	.+4      	; 0x3fda <__floatsisf+0x36>
    3fd6:	60 ff       	sbrs	r22, 0
    3fd8:	1b c0       	rjmp	.+54     	; 0x4010 <__floatsisf+0x6c>
    3fda:	6f 5f       	subi	r22, 0xFF	; 255
    3fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fde:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe2:	16 c0       	rjmp	.+44     	; 0x4010 <__floatsisf+0x6c>
    3fe4:	88 23       	and	r24, r24
    3fe6:	11 f0       	breq	.+4      	; 0x3fec <__floatsisf+0x48>
    3fe8:	96 e9       	ldi	r25, 0x96	; 150
    3fea:	11 c0       	rjmp	.+34     	; 0x400e <__floatsisf+0x6a>
    3fec:	77 23       	and	r23, r23
    3fee:	21 f0       	breq	.+8      	; 0x3ff8 <__floatsisf+0x54>
    3ff0:	9e e8       	ldi	r25, 0x8E	; 142
    3ff2:	87 2f       	mov	r24, r23
    3ff4:	76 2f       	mov	r23, r22
    3ff6:	05 c0       	rjmp	.+10     	; 0x4002 <__floatsisf+0x5e>
    3ff8:	66 23       	and	r22, r22
    3ffa:	71 f0       	breq	.+28     	; 0x4018 <__floatsisf+0x74>
    3ffc:	96 e8       	ldi	r25, 0x86	; 134
    3ffe:	86 2f       	mov	r24, r22
    4000:	70 e0       	ldi	r23, 0x00	; 0
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	2a f0       	brmi	.+10     	; 0x4010 <__floatsisf+0x6c>
    4006:	9a 95       	dec	r25
    4008:	66 0f       	add	r22, r22
    400a:	77 1f       	adc	r23, r23
    400c:	88 1f       	adc	r24, r24
    400e:	da f7       	brpl	.-10     	; 0x4006 <__floatsisf+0x62>
    4010:	88 0f       	add	r24, r24
    4012:	96 95       	lsr	r25
    4014:	87 95       	ror	r24
    4016:	97 f9       	bld	r25, 7
    4018:	08 95       	ret

0000401a <__fp_cmp>:
    401a:	99 0f       	add	r25, r25
    401c:	00 08       	sbc	r0, r0
    401e:	55 0f       	add	r21, r21
    4020:	aa 0b       	sbc	r26, r26
    4022:	e0 e8       	ldi	r30, 0x80	; 128
    4024:	fe ef       	ldi	r31, 0xFE	; 254
    4026:	16 16       	cp	r1, r22
    4028:	17 06       	cpc	r1, r23
    402a:	e8 07       	cpc	r30, r24
    402c:	f9 07       	cpc	r31, r25
    402e:	c0 f0       	brcs	.+48     	; 0x4060 <__fp_cmp+0x46>
    4030:	12 16       	cp	r1, r18
    4032:	13 06       	cpc	r1, r19
    4034:	e4 07       	cpc	r30, r20
    4036:	f5 07       	cpc	r31, r21
    4038:	98 f0       	brcs	.+38     	; 0x4060 <__fp_cmp+0x46>
    403a:	62 1b       	sub	r22, r18
    403c:	73 0b       	sbc	r23, r19
    403e:	84 0b       	sbc	r24, r20
    4040:	95 0b       	sbc	r25, r21
    4042:	39 f4       	brne	.+14     	; 0x4052 <__fp_cmp+0x38>
    4044:	0a 26       	eor	r0, r26
    4046:	61 f0       	breq	.+24     	; 0x4060 <__fp_cmp+0x46>
    4048:	23 2b       	or	r18, r19
    404a:	24 2b       	or	r18, r20
    404c:	25 2b       	or	r18, r21
    404e:	21 f4       	brne	.+8      	; 0x4058 <__fp_cmp+0x3e>
    4050:	08 95       	ret
    4052:	0a 26       	eor	r0, r26
    4054:	09 f4       	brne	.+2      	; 0x4058 <__fp_cmp+0x3e>
    4056:	a1 40       	sbci	r26, 0x01	; 1
    4058:	a6 95       	lsr	r26
    405a:	8f ef       	ldi	r24, 0xFF	; 255
    405c:	81 1d       	adc	r24, r1
    405e:	81 1d       	adc	r24, r1
    4060:	08 95       	ret

00004062 <__fp_inf>:
    4062:	97 f9       	bld	r25, 7
    4064:	9f 67       	ori	r25, 0x7F	; 127
    4066:	80 e8       	ldi	r24, 0x80	; 128
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	08 95       	ret

0000406e <__fp_nan>:
    406e:	9f ef       	ldi	r25, 0xFF	; 255
    4070:	80 ec       	ldi	r24, 0xC0	; 192
    4072:	08 95       	ret

00004074 <__fp_powser>:
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	1f 93       	push	r17
    407a:	0f 93       	push	r16
    407c:	ff 92       	push	r15
    407e:	ef 92       	push	r14
    4080:	df 92       	push	r13
    4082:	7b 01       	movw	r14, r22
    4084:	8c 01       	movw	r16, r24
    4086:	68 94       	set
    4088:	05 c0       	rjmp	.+10     	; 0x4094 <__fp_powser+0x20>
    408a:	da 2e       	mov	r13, r26
    408c:	ef 01       	movw	r28, r30
    408e:	fd d0       	rcall	.+506    	; 0x428a <__mulsf3x>
    4090:	fe 01       	movw	r30, r28
    4092:	e8 94       	clt
    4094:	a5 91       	lpm	r26, Z+
    4096:	25 91       	lpm	r18, Z+
    4098:	35 91       	lpm	r19, Z+
    409a:	45 91       	lpm	r20, Z+
    409c:	55 91       	lpm	r21, Z+
    409e:	ae f3       	brts	.-22     	; 0x408a <__fp_powser+0x16>
    40a0:	ef 01       	movw	r28, r30
    40a2:	2e de       	rcall	.-932    	; 0x3d00 <__addsf3x>
    40a4:	fe 01       	movw	r30, r28
    40a6:	97 01       	movw	r18, r14
    40a8:	a8 01       	movw	r20, r16
    40aa:	da 94       	dec	r13
    40ac:	79 f7       	brne	.-34     	; 0x408c <__fp_powser+0x18>
    40ae:	df 90       	pop	r13
    40b0:	ef 90       	pop	r14
    40b2:	ff 90       	pop	r15
    40b4:	0f 91       	pop	r16
    40b6:	1f 91       	pop	r17
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <__fp_pscA>:
    40be:	00 24       	eor	r0, r0
    40c0:	0a 94       	dec	r0
    40c2:	16 16       	cp	r1, r22
    40c4:	17 06       	cpc	r1, r23
    40c6:	18 06       	cpc	r1, r24
    40c8:	09 06       	cpc	r0, r25
    40ca:	08 95       	ret

000040cc <__fp_pscB>:
    40cc:	00 24       	eor	r0, r0
    40ce:	0a 94       	dec	r0
    40d0:	12 16       	cp	r1, r18
    40d2:	13 06       	cpc	r1, r19
    40d4:	14 06       	cpc	r1, r20
    40d6:	05 06       	cpc	r0, r21
    40d8:	08 95       	ret
    40da:	c9 cf       	rjmp	.-110    	; 0x406e <__fp_nan>

000040dc <__fp_rempio2>:
    40dc:	59 d0       	rcall	.+178    	; 0x4190 <__fp_splitA>
    40de:	e8 f3       	brcs	.-6      	; 0x40da <__fp_pscB+0xe>
    40e0:	e8 94       	clt
    40e2:	ef ef       	ldi	r30, 0xFF	; 255
    40e4:	bb 27       	eor	r27, r27
    40e6:	3f e0       	ldi	r19, 0x0F	; 15
    40e8:	48 ec       	ldi	r20, 0xC8	; 200
    40ea:	5f e7       	ldi	r21, 0x7F	; 127
    40ec:	6b 3d       	cpi	r22, 0xDB	; 219
    40ee:	73 07       	cpc	r23, r19
    40f0:	84 07       	cpc	r24, r20
    40f2:	95 07       	cpc	r25, r21
    40f4:	08 f1       	brcs	.+66     	; 0x4138 <__fp_rempio2+0x5c>
    40f6:	ff 27       	eor	r31, r31
    40f8:	9f 57       	subi	r25, 0x7F	; 127
    40fa:	b2 5a       	subi	r27, 0xA2	; 162
    40fc:	6a 4d       	sbci	r22, 0xDA	; 218
    40fe:	7f 40       	sbci	r23, 0x0F	; 15
    4100:	89 4c       	sbci	r24, 0xC9	; 201
    4102:	f0 40       	sbci	r31, 0x00	; 0
    4104:	32 f4       	brpl	.+12     	; 0x4112 <__fp_rempio2+0x36>
    4106:	be 55       	subi	r27, 0x5E	; 94
    4108:	65 42       	sbci	r22, 0x25	; 37
    410a:	70 4f       	sbci	r23, 0xF0	; 240
    410c:	86 43       	sbci	r24, 0x36	; 54
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	08 94       	sec
    4112:	ee 1f       	adc	r30, r30
    4114:	91 50       	subi	r25, 0x01	; 1
    4116:	30 f0       	brcs	.+12     	; 0x4124 <__fp_rempio2+0x48>
    4118:	bb 0f       	add	r27, r27
    411a:	66 1f       	adc	r22, r22
    411c:	77 1f       	adc	r23, r23
    411e:	88 1f       	adc	r24, r24
    4120:	ff 1f       	adc	r31, r31
    4122:	eb cf       	rjmp	.-42     	; 0x40fa <__fp_rempio2+0x1e>
    4124:	9e e7       	ldi	r25, 0x7E	; 126
    4126:	88 23       	and	r24, r24
    4128:	32 f0       	brmi	.+12     	; 0x4136 <__fp_rempio2+0x5a>
    412a:	bb 0f       	add	r27, r27
    412c:	66 1f       	adc	r22, r22
    412e:	77 1f       	adc	r23, r23
    4130:	88 1f       	adc	r24, r24
    4132:	9a 95       	dec	r25
    4134:	c1 f7       	brne	.-16     	; 0x4126 <__fp_rempio2+0x4a>
    4136:	93 95       	inc	r25
    4138:	e0 95       	com	r30
    413a:	d2 c1       	rjmp	.+932    	; 0x44e0 <__fp_mpack>

0000413c <__fp_round>:
    413c:	09 2e       	mov	r0, r25
    413e:	03 94       	inc	r0
    4140:	00 0c       	add	r0, r0
    4142:	11 f4       	brne	.+4      	; 0x4148 <__fp_round+0xc>
    4144:	88 23       	and	r24, r24
    4146:	52 f0       	brmi	.+20     	; 0x415c <__fp_round+0x20>
    4148:	bb 0f       	add	r27, r27
    414a:	40 f4       	brcc	.+16     	; 0x415c <__fp_round+0x20>
    414c:	bf 2b       	or	r27, r31
    414e:	11 f4       	brne	.+4      	; 0x4154 <__fp_round+0x18>
    4150:	60 ff       	sbrs	r22, 0
    4152:	04 c0       	rjmp	.+8      	; 0x415c <__fp_round+0x20>
    4154:	6f 5f       	subi	r22, 0xFF	; 255
    4156:	7f 4f       	sbci	r23, 0xFF	; 255
    4158:	8f 4f       	sbci	r24, 0xFF	; 255
    415a:	9f 4f       	sbci	r25, 0xFF	; 255
    415c:	08 95       	ret

0000415e <__fp_sinus>:
    415e:	ef 93       	push	r30
    4160:	e0 ff       	sbrs	r30, 0
    4162:	06 c0       	rjmp	.+12     	; 0x4170 <__fp_sinus+0x12>
    4164:	a2 ea       	ldi	r26, 0xA2	; 162
    4166:	2a ed       	ldi	r18, 0xDA	; 218
    4168:	3f e0       	ldi	r19, 0x0F	; 15
    416a:	49 ec       	ldi	r20, 0xC9	; 201
    416c:	5f eb       	ldi	r21, 0xBF	; 191
    416e:	c8 dd       	rcall	.-1136   	; 0x3d00 <__addsf3x>
    4170:	e5 df       	rcall	.-54     	; 0x413c <__fp_round>
    4172:	0f 90       	pop	r0
    4174:	03 94       	inc	r0
    4176:	01 fc       	sbrc	r0, 1
    4178:	90 58       	subi	r25, 0x80	; 128
    417a:	e1 e1       	ldi	r30, 0x11	; 17
    417c:	f1 e0       	ldi	r31, 0x01	; 1
    417e:	c7 c1       	rjmp	.+910    	; 0x450e <__fp_powsodd>

00004180 <__fp_split3>:
    4180:	57 fd       	sbrc	r21, 7
    4182:	90 58       	subi	r25, 0x80	; 128
    4184:	44 0f       	add	r20, r20
    4186:	55 1f       	adc	r21, r21
    4188:	59 f0       	breq	.+22     	; 0x41a0 <__fp_splitA+0x10>
    418a:	5f 3f       	cpi	r21, 0xFF	; 255
    418c:	71 f0       	breq	.+28     	; 0x41aa <__fp_splitA+0x1a>
    418e:	47 95       	ror	r20

00004190 <__fp_splitA>:
    4190:	88 0f       	add	r24, r24
    4192:	97 fb       	bst	r25, 7
    4194:	99 1f       	adc	r25, r25
    4196:	61 f0       	breq	.+24     	; 0x41b0 <__fp_splitA+0x20>
    4198:	9f 3f       	cpi	r25, 0xFF	; 255
    419a:	79 f0       	breq	.+30     	; 0x41ba <__fp_splitA+0x2a>
    419c:	87 95       	ror	r24
    419e:	08 95       	ret
    41a0:	12 16       	cp	r1, r18
    41a2:	13 06       	cpc	r1, r19
    41a4:	14 06       	cpc	r1, r20
    41a6:	55 1f       	adc	r21, r21
    41a8:	f2 cf       	rjmp	.-28     	; 0x418e <__fp_split3+0xe>
    41aa:	46 95       	lsr	r20
    41ac:	f1 df       	rcall	.-30     	; 0x4190 <__fp_splitA>
    41ae:	08 c0       	rjmp	.+16     	; 0x41c0 <__fp_splitA+0x30>
    41b0:	16 16       	cp	r1, r22
    41b2:	17 06       	cpc	r1, r23
    41b4:	18 06       	cpc	r1, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	f1 cf       	rjmp	.-30     	; 0x419c <__fp_splitA+0xc>
    41ba:	86 95       	lsr	r24
    41bc:	71 05       	cpc	r23, r1
    41be:	61 05       	cpc	r22, r1
    41c0:	08 94       	sec
    41c2:	08 95       	ret

000041c4 <__fp_zero>:
    41c4:	e8 94       	clt

000041c6 <__fp_szero>:
    41c6:	bb 27       	eor	r27, r27
    41c8:	66 27       	eor	r22, r22
    41ca:	77 27       	eor	r23, r23
    41cc:	cb 01       	movw	r24, r22
    41ce:	97 f9       	bld	r25, 7
    41d0:	08 95       	ret

000041d2 <__gesf2>:
    41d2:	23 df       	rcall	.-442    	; 0x401a <__fp_cmp>
    41d4:	08 f4       	brcc	.+2      	; 0x41d8 <__gesf2+0x6>
    41d6:	8f ef       	ldi	r24, 0xFF	; 255
    41d8:	08 95       	ret

000041da <inverse>:
    41da:	9b 01       	movw	r18, r22
    41dc:	ac 01       	movw	r20, r24
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	70 e0       	ldi	r23, 0x00	; 0
    41e2:	80 e8       	ldi	r24, 0x80	; 128
    41e4:	9f e3       	ldi	r25, 0x3F	; 63
    41e6:	48 ce       	rjmp	.-880    	; 0x3e78 <__divsf3>
    41e8:	0e f0       	brts	.+2      	; 0x41ec <inverse+0x12>
    41ea:	7a c1       	rjmp	.+756    	; 0x44e0 <__fp_mpack>
    41ec:	40 cf       	rjmp	.-384    	; 0x406e <__fp_nan>
    41ee:	68 94       	set
    41f0:	38 cf       	rjmp	.-400    	; 0x4062 <__fp_inf>

000041f2 <log>:
    41f2:	ce df       	rcall	.-100    	; 0x4190 <__fp_splitA>
    41f4:	c8 f3       	brcs	.-14     	; 0x41e8 <inverse+0xe>
    41f6:	99 23       	and	r25, r25
    41f8:	d1 f3       	breq	.-12     	; 0x41ee <inverse+0x14>
    41fa:	c6 f3       	brts	.-16     	; 0x41ec <inverse+0x12>
    41fc:	df 93       	push	r29
    41fe:	cf 93       	push	r28
    4200:	1f 93       	push	r17
    4202:	0f 93       	push	r16
    4204:	ff 92       	push	r15
    4206:	c9 2f       	mov	r28, r25
    4208:	dd 27       	eor	r29, r29
    420a:	88 23       	and	r24, r24
    420c:	2a f0       	brmi	.+10     	; 0x4218 <log+0x26>
    420e:	21 97       	sbiw	r28, 0x01	; 1
    4210:	66 0f       	add	r22, r22
    4212:	77 1f       	adc	r23, r23
    4214:	88 1f       	adc	r24, r24
    4216:	da f7       	brpl	.-10     	; 0x420e <log+0x1c>
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e8       	ldi	r20, 0x80	; 128
    421e:	5f eb       	ldi	r21, 0xBF	; 191
    4220:	9f e3       	ldi	r25, 0x3F	; 63
    4222:	88 39       	cpi	r24, 0x98	; 152
    4224:	20 f0       	brcs	.+8      	; 0x422e <log+0x3c>
    4226:	80 3e       	cpi	r24, 0xE0	; 224
    4228:	30 f0       	brcs	.+12     	; 0x4236 <log+0x44>
    422a:	21 96       	adiw	r28, 0x01	; 1
    422c:	8f 77       	andi	r24, 0x7F	; 127
    422e:	57 dd       	rcall	.-1362   	; 0x3cde <__addsf3>
    4230:	ef e2       	ldi	r30, 0x2F	; 47
    4232:	f1 e0       	ldi	r31, 0x01	; 1
    4234:	03 c0       	rjmp	.+6      	; 0x423c <log+0x4a>
    4236:	53 dd       	rcall	.-1370   	; 0x3cde <__addsf3>
    4238:	ec e5       	ldi	r30, 0x5C	; 92
    423a:	f1 e0       	ldi	r31, 0x01	; 1
    423c:	1b df       	rcall	.-458    	; 0x4074 <__fp_powser>
    423e:	8b 01       	movw	r16, r22
    4240:	be 01       	movw	r22, r28
    4242:	ec 01       	movw	r28, r24
    4244:	fb 2e       	mov	r15, r27
    4246:	6f 57       	subi	r22, 0x7F	; 127
    4248:	71 09       	sbc	r23, r1
    424a:	75 95       	asr	r23
    424c:	77 1f       	adc	r23, r23
    424e:	88 0b       	sbc	r24, r24
    4250:	99 0b       	sbc	r25, r25
    4252:	a8 de       	rcall	.-688    	; 0x3fa4 <__floatsisf>
    4254:	28 e1       	ldi	r18, 0x18	; 24
    4256:	32 e7       	ldi	r19, 0x72	; 114
    4258:	41 e3       	ldi	r20, 0x31	; 49
    425a:	5f e3       	ldi	r21, 0x3F	; 63
    425c:	16 d0       	rcall	.+44     	; 0x428a <__mulsf3x>
    425e:	af 2d       	mov	r26, r15
    4260:	98 01       	movw	r18, r16
    4262:	ae 01       	movw	r20, r28
    4264:	ff 90       	pop	r15
    4266:	0f 91       	pop	r16
    4268:	1f 91       	pop	r17
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	48 dd       	rcall	.-1392   	; 0x3d00 <__addsf3x>
    4270:	65 cf       	rjmp	.-310    	; 0x413c <__fp_round>

00004272 <__mulsf3>:
    4272:	0b d0       	rcall	.+22     	; 0x428a <__mulsf3x>
    4274:	63 cf       	rjmp	.-314    	; 0x413c <__fp_round>
    4276:	23 df       	rcall	.-442    	; 0x40be <__fp_pscA>
    4278:	28 f0       	brcs	.+10     	; 0x4284 <__mulsf3+0x12>
    427a:	28 df       	rcall	.-432    	; 0x40cc <__fp_pscB>
    427c:	18 f0       	brcs	.+6      	; 0x4284 <__mulsf3+0x12>
    427e:	95 23       	and	r25, r21
    4280:	09 f0       	breq	.+2      	; 0x4284 <__mulsf3+0x12>
    4282:	ef ce       	rjmp	.-546    	; 0x4062 <__fp_inf>
    4284:	f4 ce       	rjmp	.-536    	; 0x406e <__fp_nan>
    4286:	11 24       	eor	r1, r1
    4288:	9e cf       	rjmp	.-196    	; 0x41c6 <__fp_szero>

0000428a <__mulsf3x>:
    428a:	7a df       	rcall	.-268    	; 0x4180 <__fp_split3>
    428c:	a0 f3       	brcs	.-24     	; 0x4276 <__mulsf3+0x4>

0000428e <__mulsf3_pse>:
    428e:	95 9f       	mul	r25, r21
    4290:	d1 f3       	breq	.-12     	; 0x4286 <__mulsf3+0x14>
    4292:	95 0f       	add	r25, r21
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	55 1f       	adc	r21, r21
    4298:	62 9f       	mul	r22, r18
    429a:	f0 01       	movw	r30, r0
    429c:	72 9f       	mul	r23, r18
    429e:	bb 27       	eor	r27, r27
    42a0:	f0 0d       	add	r31, r0
    42a2:	b1 1d       	adc	r27, r1
    42a4:	63 9f       	mul	r22, r19
    42a6:	aa 27       	eor	r26, r26
    42a8:	f0 0d       	add	r31, r0
    42aa:	b1 1d       	adc	r27, r1
    42ac:	aa 1f       	adc	r26, r26
    42ae:	64 9f       	mul	r22, r20
    42b0:	66 27       	eor	r22, r22
    42b2:	b0 0d       	add	r27, r0
    42b4:	a1 1d       	adc	r26, r1
    42b6:	66 1f       	adc	r22, r22
    42b8:	82 9f       	mul	r24, r18
    42ba:	22 27       	eor	r18, r18
    42bc:	b0 0d       	add	r27, r0
    42be:	a1 1d       	adc	r26, r1
    42c0:	62 1f       	adc	r22, r18
    42c2:	73 9f       	mul	r23, r19
    42c4:	b0 0d       	add	r27, r0
    42c6:	a1 1d       	adc	r26, r1
    42c8:	62 1f       	adc	r22, r18
    42ca:	83 9f       	mul	r24, r19
    42cc:	a0 0d       	add	r26, r0
    42ce:	61 1d       	adc	r22, r1
    42d0:	22 1f       	adc	r18, r18
    42d2:	74 9f       	mul	r23, r20
    42d4:	33 27       	eor	r19, r19
    42d6:	a0 0d       	add	r26, r0
    42d8:	61 1d       	adc	r22, r1
    42da:	23 1f       	adc	r18, r19
    42dc:	84 9f       	mul	r24, r20
    42de:	60 0d       	add	r22, r0
    42e0:	21 1d       	adc	r18, r1
    42e2:	82 2f       	mov	r24, r18
    42e4:	76 2f       	mov	r23, r22
    42e6:	6a 2f       	mov	r22, r26
    42e8:	11 24       	eor	r1, r1
    42ea:	9f 57       	subi	r25, 0x7F	; 127
    42ec:	50 40       	sbci	r21, 0x00	; 0
    42ee:	8a f0       	brmi	.+34     	; 0x4312 <__mulsf3_pse+0x84>
    42f0:	e1 f0       	breq	.+56     	; 0x432a <__mulsf3_pse+0x9c>
    42f2:	88 23       	and	r24, r24
    42f4:	4a f0       	brmi	.+18     	; 0x4308 <__mulsf3_pse+0x7a>
    42f6:	ee 0f       	add	r30, r30
    42f8:	ff 1f       	adc	r31, r31
    42fa:	bb 1f       	adc	r27, r27
    42fc:	66 1f       	adc	r22, r22
    42fe:	77 1f       	adc	r23, r23
    4300:	88 1f       	adc	r24, r24
    4302:	91 50       	subi	r25, 0x01	; 1
    4304:	50 40       	sbci	r21, 0x00	; 0
    4306:	a9 f7       	brne	.-22     	; 0x42f2 <__mulsf3_pse+0x64>
    4308:	9e 3f       	cpi	r25, 0xFE	; 254
    430a:	51 05       	cpc	r21, r1
    430c:	70 f0       	brcs	.+28     	; 0x432a <__mulsf3_pse+0x9c>
    430e:	a9 ce       	rjmp	.-686    	; 0x4062 <__fp_inf>
    4310:	5a cf       	rjmp	.-332    	; 0x41c6 <__fp_szero>
    4312:	5f 3f       	cpi	r21, 0xFF	; 255
    4314:	ec f3       	brlt	.-6      	; 0x4310 <__mulsf3_pse+0x82>
    4316:	98 3e       	cpi	r25, 0xE8	; 232
    4318:	dc f3       	brlt	.-10     	; 0x4310 <__mulsf3_pse+0x82>
    431a:	86 95       	lsr	r24
    431c:	77 95       	ror	r23
    431e:	67 95       	ror	r22
    4320:	b7 95       	ror	r27
    4322:	f7 95       	ror	r31
    4324:	e7 95       	ror	r30
    4326:	9f 5f       	subi	r25, 0xFF	; 255
    4328:	c1 f7       	brne	.-16     	; 0x431a <__mulsf3_pse+0x8c>
    432a:	fe 2b       	or	r31, r30
    432c:	88 0f       	add	r24, r24
    432e:	91 1d       	adc	r25, r1
    4330:	96 95       	lsr	r25
    4332:	87 95       	ror	r24
    4334:	97 f9       	bld	r25, 7
    4336:	08 95       	ret

00004338 <pow>:
    4338:	fa 01       	movw	r30, r20
    433a:	ee 0f       	add	r30, r30
    433c:	ff 1f       	adc	r31, r31
    433e:	30 96       	adiw	r30, 0x00	; 0
    4340:	21 05       	cpc	r18, r1
    4342:	31 05       	cpc	r19, r1
    4344:	99 f1       	breq	.+102    	; 0x43ac <pow+0x74>
    4346:	61 15       	cp	r22, r1
    4348:	71 05       	cpc	r23, r1
    434a:	61 f4       	brne	.+24     	; 0x4364 <pow+0x2c>
    434c:	80 38       	cpi	r24, 0x80	; 128
    434e:	bf e3       	ldi	r27, 0x3F	; 63
    4350:	9b 07       	cpc	r25, r27
    4352:	49 f1       	breq	.+82     	; 0x43a6 <pow+0x6e>
    4354:	68 94       	set
    4356:	90 38       	cpi	r25, 0x80	; 128
    4358:	81 05       	cpc	r24, r1
    435a:	61 f0       	breq	.+24     	; 0x4374 <pow+0x3c>
    435c:	80 38       	cpi	r24, 0x80	; 128
    435e:	bf ef       	ldi	r27, 0xFF	; 255
    4360:	9b 07       	cpc	r25, r27
    4362:	41 f0       	breq	.+16     	; 0x4374 <pow+0x3c>
    4364:	99 23       	and	r25, r25
    4366:	42 f5       	brpl	.+80     	; 0x43b8 <pow+0x80>
    4368:	ff 3f       	cpi	r31, 0xFF	; 255
    436a:	e1 05       	cpc	r30, r1
    436c:	31 05       	cpc	r19, r1
    436e:	21 05       	cpc	r18, r1
    4370:	11 f1       	breq	.+68     	; 0x43b6 <pow+0x7e>
    4372:	e8 94       	clt
    4374:	08 94       	sec
    4376:	e7 95       	ror	r30
    4378:	d9 01       	movw	r26, r18
    437a:	aa 23       	and	r26, r26
    437c:	29 f4       	brne	.+10     	; 0x4388 <pow+0x50>
    437e:	ab 2f       	mov	r26, r27
    4380:	be 2f       	mov	r27, r30
    4382:	f8 5f       	subi	r31, 0xF8	; 248
    4384:	d0 f3       	brcs	.-12     	; 0x437a <pow+0x42>
    4386:	10 c0       	rjmp	.+32     	; 0x43a8 <pow+0x70>
    4388:	ff 5f       	subi	r31, 0xFF	; 255
    438a:	70 f4       	brcc	.+28     	; 0x43a8 <pow+0x70>
    438c:	a6 95       	lsr	r26
    438e:	e0 f7       	brcc	.-8      	; 0x4388 <pow+0x50>
    4390:	f7 39       	cpi	r31, 0x97	; 151
    4392:	50 f0       	brcs	.+20     	; 0x43a8 <pow+0x70>
    4394:	19 f0       	breq	.+6      	; 0x439c <pow+0x64>
    4396:	ff 3a       	cpi	r31, 0xAF	; 175
    4398:	38 f4       	brcc	.+14     	; 0x43a8 <pow+0x70>
    439a:	9f 77       	andi	r25, 0x7F	; 127
    439c:	9f 93       	push	r25
    439e:	0c d0       	rcall	.+24     	; 0x43b8 <pow+0x80>
    43a0:	0f 90       	pop	r0
    43a2:	07 fc       	sbrc	r0, 7
    43a4:	90 58       	subi	r25, 0x80	; 128
    43a6:	08 95       	ret
    43a8:	3e f0       	brts	.+14     	; 0x43b8 <pow+0x80>
    43aa:	61 ce       	rjmp	.-830    	; 0x406e <__fp_nan>
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	70 e0       	ldi	r23, 0x00	; 0
    43b0:	80 e8       	ldi	r24, 0x80	; 128
    43b2:	9f e3       	ldi	r25, 0x3F	; 63
    43b4:	08 95       	ret
    43b6:	4f e7       	ldi	r20, 0x7F	; 127
    43b8:	9f 77       	andi	r25, 0x7F	; 127
    43ba:	5f 93       	push	r21
    43bc:	4f 93       	push	r20
    43be:	3f 93       	push	r19
    43c0:	2f 93       	push	r18
    43c2:	17 df       	rcall	.-466    	; 0x41f2 <log>
    43c4:	2f 91       	pop	r18
    43c6:	3f 91       	pop	r19
    43c8:	4f 91       	pop	r20
    43ca:	5f 91       	pop	r21
    43cc:	52 df       	rcall	.-348    	; 0x4272 <__mulsf3>
    43ce:	5c c0       	rjmp	.+184    	; 0x4488 <exp>

000043d0 <sin>:
    43d0:	9f 93       	push	r25
    43d2:	84 de       	rcall	.-760    	; 0x40dc <__fp_rempio2>
    43d4:	0f 90       	pop	r0
    43d6:	07 fc       	sbrc	r0, 7
    43d8:	ee 5f       	subi	r30, 0xFE	; 254
    43da:	c1 ce       	rjmp	.-638    	; 0x415e <__fp_sinus>
    43dc:	11 f4       	brne	.+4      	; 0x43e2 <sin+0x12>
    43de:	0e f4       	brtc	.+2      	; 0x43e2 <sin+0x12>
    43e0:	46 ce       	rjmp	.-884    	; 0x406e <__fp_nan>
    43e2:	7e c0       	rjmp	.+252    	; 0x44e0 <__fp_mpack>

000043e4 <sqrt>:
    43e4:	d5 de       	rcall	.-598    	; 0x4190 <__fp_splitA>
    43e6:	d0 f3       	brcs	.-12     	; 0x43dc <sin+0xc>
    43e8:	99 23       	and	r25, r25
    43ea:	d9 f3       	breq	.-10     	; 0x43e2 <sin+0x12>
    43ec:	ce f3       	brts	.-14     	; 0x43e0 <sin+0x10>
    43ee:	9f 57       	subi	r25, 0x7F	; 127
    43f0:	55 0b       	sbc	r21, r21
    43f2:	87 ff       	sbrs	r24, 7
    43f4:	85 d0       	rcall	.+266    	; 0x4500 <__fp_norm2>
    43f6:	56 95       	lsr	r21
    43f8:	97 95       	ror	r25
    43fa:	b0 e0       	ldi	r27, 0x00	; 0
    43fc:	20 f4       	brcc	.+8      	; 0x4406 <sqrt+0x22>
    43fe:	66 0f       	add	r22, r22
    4400:	77 1f       	adc	r23, r23
    4402:	88 1f       	adc	r24, r24
    4404:	bb 1f       	adc	r27, r27
    4406:	1f 93       	push	r17
    4408:	0f 93       	push	r16
    440a:	00 24       	eor	r0, r0
    440c:	90 01       	movw	r18, r0
    440e:	a0 01       	movw	r20, r0
    4410:	80 01       	movw	r16, r0
    4412:	f0 01       	movw	r30, r0
    4414:	a0 e8       	ldi	r26, 0x80	; 128
    4416:	0e 0f       	add	r16, r30
    4418:	1f 1f       	adc	r17, r31
    441a:	0a 1e       	adc	r0, r26
    441c:	51 1d       	adc	r21, r1
    441e:	60 1b       	sub	r22, r16
    4420:	71 0b       	sbc	r23, r17
    4422:	80 09       	sbc	r24, r0
    4424:	b5 0b       	sbc	r27, r21
    4426:	48 f4       	brcc	.+18     	; 0x443a <sqrt+0x56>
    4428:	60 0f       	add	r22, r16
    442a:	71 1f       	adc	r23, r17
    442c:	80 1d       	adc	r24, r0
    442e:	b5 1f       	adc	r27, r21
    4430:	0e 1b       	sub	r16, r30
    4432:	1f 0b       	sbc	r17, r31
    4434:	0a 0a       	sbc	r0, r26
    4436:	51 09       	sbc	r21, r1
    4438:	07 c0       	rjmp	.+14     	; 0x4448 <sqrt+0x64>
    443a:	2e 0f       	add	r18, r30
    443c:	3f 1f       	adc	r19, r31
    443e:	4a 1f       	adc	r20, r26
    4440:	0e 0f       	add	r16, r30
    4442:	1f 1f       	adc	r17, r31
    4444:	0a 1e       	adc	r0, r26
    4446:	51 1d       	adc	r21, r1
    4448:	66 0f       	add	r22, r22
    444a:	77 1f       	adc	r23, r23
    444c:	88 1f       	adc	r24, r24
    444e:	bb 1f       	adc	r27, r27
    4450:	a6 95       	lsr	r26
    4452:	f7 95       	ror	r31
    4454:	e7 95       	ror	r30
    4456:	f8 f6       	brcc	.-66     	; 0x4416 <sqrt+0x32>
    4458:	06 17       	cp	r16, r22
    445a:	17 07       	cpc	r17, r23
    445c:	08 06       	cpc	r0, r24
    445e:	5b 07       	cpc	r21, r27
    4460:	21 1d       	adc	r18, r1
    4462:	31 1d       	adc	r19, r1
    4464:	41 1d       	adc	r20, r1
    4466:	0f 91       	pop	r16
    4468:	1f 91       	pop	r17
    446a:	b9 01       	movw	r22, r18
    446c:	84 2f       	mov	r24, r20
    446e:	91 58       	subi	r25, 0x81	; 129
    4470:	88 0f       	add	r24, r24
    4472:	96 95       	lsr	r25
    4474:	87 95       	ror	r24
    4476:	08 95       	ret

00004478 <square>:
    4478:	9b 01       	movw	r18, r22
    447a:	ac 01       	movw	r20, r24
    447c:	fa ce       	rjmp	.-524    	; 0x4272 <__mulsf3>
    447e:	19 f4       	brne	.+6      	; 0x4486 <square+0xe>
    4480:	0e f0       	brts	.+2      	; 0x4484 <square+0xc>
    4482:	ef cd       	rjmp	.-1058   	; 0x4062 <__fp_inf>
    4484:	9f ce       	rjmp	.-706    	; 0x41c4 <__fp_zero>
    4486:	f3 cd       	rjmp	.-1050   	; 0x406e <__fp_nan>

00004488 <exp>:
    4488:	83 de       	rcall	.-762    	; 0x4190 <__fp_splitA>
    448a:	c8 f3       	brcs	.-14     	; 0x447e <square+0x6>
    448c:	96 38       	cpi	r25, 0x86	; 134
    448e:	c0 f7       	brcc	.-16     	; 0x4480 <square+0x8>
    4490:	07 f8       	bld	r0, 7
    4492:	0f 92       	push	r0
    4494:	e8 94       	clt
    4496:	2b e3       	ldi	r18, 0x3B	; 59
    4498:	3a ea       	ldi	r19, 0xAA	; 170
    449a:	48 eb       	ldi	r20, 0xB8	; 184
    449c:	5f e7       	ldi	r21, 0x7F	; 127
    449e:	f7 de       	rcall	.-530    	; 0x428e <__mulsf3_pse>
    44a0:	0f 92       	push	r0
    44a2:	0f 92       	push	r0
    44a4:	0f 92       	push	r0
    44a6:	4d b7       	in	r20, 0x3d	; 61
    44a8:	5e b7       	in	r21, 0x3e	; 62
    44aa:	0f 92       	push	r0
    44ac:	77 d0       	rcall	.+238    	; 0x459c <modf>
    44ae:	e9 e8       	ldi	r30, 0x89	; 137
    44b0:	f1 e0       	ldi	r31, 0x01	; 1
    44b2:	e0 dd       	rcall	.-1088   	; 0x4074 <__fp_powser>
    44b4:	4f 91       	pop	r20
    44b6:	5f 91       	pop	r21
    44b8:	ef 91       	pop	r30
    44ba:	ff 91       	pop	r31
    44bc:	e5 95       	asr	r30
    44be:	ee 1f       	adc	r30, r30
    44c0:	ff 1f       	adc	r31, r31
    44c2:	49 f0       	breq	.+18     	; 0x44d6 <exp+0x4e>
    44c4:	fe 57       	subi	r31, 0x7E	; 126
    44c6:	e0 68       	ori	r30, 0x80	; 128
    44c8:	44 27       	eor	r20, r20
    44ca:	ee 0f       	add	r30, r30
    44cc:	44 1f       	adc	r20, r20
    44ce:	fa 95       	dec	r31
    44d0:	e1 f7       	brne	.-8      	; 0x44ca <exp+0x42>
    44d2:	41 95       	neg	r20
    44d4:	55 0b       	sbc	r21, r21
    44d6:	2e d0       	rcall	.+92     	; 0x4534 <ldexp>
    44d8:	0f 90       	pop	r0
    44da:	07 fe       	sbrs	r0, 7
    44dc:	7e ce       	rjmp	.-772    	; 0x41da <inverse>
    44de:	08 95       	ret

000044e0 <__fp_mpack>:
    44e0:	9f 3f       	cpi	r25, 0xFF	; 255
    44e2:	49 f0       	breq	.+18     	; 0x44f6 <__fp_mpack+0x16>
    44e4:	91 50       	subi	r25, 0x01	; 1
    44e6:	28 f4       	brcc	.+10     	; 0x44f2 <__fp_mpack+0x12>
    44e8:	86 95       	lsr	r24
    44ea:	77 95       	ror	r23
    44ec:	67 95       	ror	r22
    44ee:	b7 95       	ror	r27
    44f0:	9f 5f       	subi	r25, 0xFF	; 255
    44f2:	80 38       	cpi	r24, 0x80	; 128
    44f4:	9f 4f       	sbci	r25, 0xFF	; 255
    44f6:	88 0f       	add	r24, r24
    44f8:	96 95       	lsr	r25
    44fa:	87 95       	ror	r24
    44fc:	97 f9       	bld	r25, 7
    44fe:	08 95       	ret

00004500 <__fp_norm2>:
    4500:	91 50       	subi	r25, 0x01	; 1
    4502:	50 40       	sbci	r21, 0x00	; 0
    4504:	66 0f       	add	r22, r22
    4506:	77 1f       	adc	r23, r23
    4508:	88 1f       	adc	r24, r24
    450a:	d2 f7       	brpl	.-12     	; 0x4500 <__fp_norm2>
    450c:	08 95       	ret

0000450e <__fp_powsodd>:
    450e:	9f 93       	push	r25
    4510:	8f 93       	push	r24
    4512:	7f 93       	push	r23
    4514:	6f 93       	push	r22
    4516:	ff 93       	push	r31
    4518:	ef 93       	push	r30
    451a:	9b 01       	movw	r18, r22
    451c:	ac 01       	movw	r20, r24
    451e:	a9 de       	rcall	.-686    	; 0x4272 <__mulsf3>
    4520:	ef 91       	pop	r30
    4522:	ff 91       	pop	r31
    4524:	a7 dd       	rcall	.-1202   	; 0x4074 <__fp_powser>
    4526:	2f 91       	pop	r18
    4528:	3f 91       	pop	r19
    452a:	4f 91       	pop	r20
    452c:	5f 91       	pop	r21
    452e:	a1 ce       	rjmp	.-702    	; 0x4272 <__mulsf3>
    4530:	98 cd       	rjmp	.-1232   	; 0x4062 <__fp_inf>
    4532:	d6 cf       	rjmp	.-84     	; 0x44e0 <__fp_mpack>

00004534 <ldexp>:
    4534:	2d de       	rcall	.-934    	; 0x4190 <__fp_splitA>
    4536:	e8 f3       	brcs	.-6      	; 0x4532 <__fp_powsodd+0x24>
    4538:	99 23       	and	r25, r25
    453a:	d9 f3       	breq	.-10     	; 0x4532 <__fp_powsodd+0x24>
    453c:	94 0f       	add	r25, r20
    453e:	51 1d       	adc	r21, r1
    4540:	bb f3       	brvs	.-18     	; 0x4530 <__fp_powsodd+0x22>
    4542:	91 50       	subi	r25, 0x01	; 1
    4544:	50 40       	sbci	r21, 0x00	; 0
    4546:	94 f0       	brlt	.+36     	; 0x456c <ldexp+0x38>
    4548:	59 f0       	breq	.+22     	; 0x4560 <ldexp+0x2c>
    454a:	88 23       	and	r24, r24
    454c:	32 f0       	brmi	.+12     	; 0x455a <ldexp+0x26>
    454e:	66 0f       	add	r22, r22
    4550:	77 1f       	adc	r23, r23
    4552:	88 1f       	adc	r24, r24
    4554:	91 50       	subi	r25, 0x01	; 1
    4556:	50 40       	sbci	r21, 0x00	; 0
    4558:	c1 f7       	brne	.-16     	; 0x454a <ldexp+0x16>
    455a:	9e 3f       	cpi	r25, 0xFE	; 254
    455c:	51 05       	cpc	r21, r1
    455e:	44 f7       	brge	.-48     	; 0x4530 <__fp_powsodd+0x22>
    4560:	88 0f       	add	r24, r24
    4562:	91 1d       	adc	r25, r1
    4564:	96 95       	lsr	r25
    4566:	87 95       	ror	r24
    4568:	97 f9       	bld	r25, 7
    456a:	08 95       	ret
    456c:	5f 3f       	cpi	r21, 0xFF	; 255
    456e:	ac f0       	brlt	.+42     	; 0x459a <ldexp+0x66>
    4570:	98 3e       	cpi	r25, 0xE8	; 232
    4572:	9c f0       	brlt	.+38     	; 0x459a <ldexp+0x66>
    4574:	bb 27       	eor	r27, r27
    4576:	86 95       	lsr	r24
    4578:	77 95       	ror	r23
    457a:	67 95       	ror	r22
    457c:	b7 95       	ror	r27
    457e:	08 f4       	brcc	.+2      	; 0x4582 <ldexp+0x4e>
    4580:	b1 60       	ori	r27, 0x01	; 1
    4582:	93 95       	inc	r25
    4584:	c1 f7       	brne	.-16     	; 0x4576 <ldexp+0x42>
    4586:	bb 0f       	add	r27, r27
    4588:	58 f7       	brcc	.-42     	; 0x4560 <ldexp+0x2c>
    458a:	11 f4       	brne	.+4      	; 0x4590 <ldexp+0x5c>
    458c:	60 ff       	sbrs	r22, 0
    458e:	e8 cf       	rjmp	.-48     	; 0x4560 <ldexp+0x2c>
    4590:	6f 5f       	subi	r22, 0xFF	; 255
    4592:	7f 4f       	sbci	r23, 0xFF	; 255
    4594:	8f 4f       	sbci	r24, 0xFF	; 255
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	e3 cf       	rjmp	.-58     	; 0x4560 <ldexp+0x2c>
    459a:	15 ce       	rjmp	.-982    	; 0x41c6 <__fp_szero>

0000459c <modf>:
    459c:	fa 01       	movw	r30, r20
    459e:	dc 01       	movw	r26, r24
    45a0:	aa 0f       	add	r26, r26
    45a2:	bb 1f       	adc	r27, r27
    45a4:	9b 01       	movw	r18, r22
    45a6:	ac 01       	movw	r20, r24
    45a8:	bf 57       	subi	r27, 0x7F	; 127
    45aa:	28 f4       	brcc	.+10     	; 0x45b6 <modf+0x1a>
    45ac:	22 27       	eor	r18, r18
    45ae:	33 27       	eor	r19, r19
    45b0:	44 27       	eor	r20, r20
    45b2:	50 78       	andi	r21, 0x80	; 128
    45b4:	1f c0       	rjmp	.+62     	; 0x45f4 <modf+0x58>
    45b6:	b7 51       	subi	r27, 0x17	; 23
    45b8:	88 f4       	brcc	.+34     	; 0x45dc <modf+0x40>
    45ba:	ab 2f       	mov	r26, r27
    45bc:	00 24       	eor	r0, r0
    45be:	46 95       	lsr	r20
    45c0:	37 95       	ror	r19
    45c2:	27 95       	ror	r18
    45c4:	01 1c       	adc	r0, r1
    45c6:	a3 95       	inc	r26
    45c8:	d2 f3       	brmi	.-12     	; 0x45be <modf+0x22>
    45ca:	00 20       	and	r0, r0
    45cc:	69 f0       	breq	.+26     	; 0x45e8 <modf+0x4c>
    45ce:	22 0f       	add	r18, r18
    45d0:	33 1f       	adc	r19, r19
    45d2:	44 1f       	adc	r20, r20
    45d4:	b3 95       	inc	r27
    45d6:	da f3       	brmi	.-10     	; 0x45ce <modf+0x32>
    45d8:	0d d0       	rcall	.+26     	; 0x45f4 <modf+0x58>
    45da:	80 cb       	rjmp	.-2304   	; 0x3cdc <__subsf3>
    45dc:	61 30       	cpi	r22, 0x01	; 1
    45de:	71 05       	cpc	r23, r1
    45e0:	a0 e8       	ldi	r26, 0x80	; 128
    45e2:	8a 07       	cpc	r24, r26
    45e4:	b9 46       	sbci	r27, 0x69	; 105
    45e6:	30 f4       	brcc	.+12     	; 0x45f4 <modf+0x58>
    45e8:	9b 01       	movw	r18, r22
    45ea:	ac 01       	movw	r20, r24
    45ec:	66 27       	eor	r22, r22
    45ee:	77 27       	eor	r23, r23
    45f0:	88 27       	eor	r24, r24
    45f2:	90 78       	andi	r25, 0x80	; 128
    45f4:	30 96       	adiw	r30, 0x00	; 0
    45f6:	21 f0       	breq	.+8      	; 0x4600 <modf+0x64>
    45f8:	20 83       	st	Z, r18
    45fa:	31 83       	std	Z+1, r19	; 0x01
    45fc:	42 83       	std	Z+2, r20	; 0x02
    45fe:	53 83       	std	Z+3, r21	; 0x03
    4600:	08 95       	ret

00004602 <__udivmodhi4>:
    4602:	aa 1b       	sub	r26, r26
    4604:	bb 1b       	sub	r27, r27
    4606:	51 e1       	ldi	r21, 0x11	; 17
    4608:	07 c0       	rjmp	.+14     	; 0x4618 <__udivmodhi4_ep>

0000460a <__udivmodhi4_loop>:
    460a:	aa 1f       	adc	r26, r26
    460c:	bb 1f       	adc	r27, r27
    460e:	a6 17       	cp	r26, r22
    4610:	b7 07       	cpc	r27, r23
    4612:	10 f0       	brcs	.+4      	; 0x4618 <__udivmodhi4_ep>
    4614:	a6 1b       	sub	r26, r22
    4616:	b7 0b       	sbc	r27, r23

00004618 <__udivmodhi4_ep>:
    4618:	88 1f       	adc	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	5a 95       	dec	r21
    461e:	a9 f7       	brne	.-22     	; 0x460a <__udivmodhi4_loop>
    4620:	80 95       	com	r24
    4622:	90 95       	com	r25
    4624:	bc 01       	movw	r22, r24
    4626:	cd 01       	movw	r24, r26
    4628:	08 95       	ret

0000462a <__divmodhi4>:
    462a:	97 fb       	bst	r25, 7
    462c:	09 2e       	mov	r0, r25
    462e:	07 26       	eor	r0, r23
    4630:	0a d0       	rcall	.+20     	; 0x4646 <__divmodhi4_neg1>
    4632:	77 fd       	sbrc	r23, 7
    4634:	04 d0       	rcall	.+8      	; 0x463e <__divmodhi4_neg2>
    4636:	e5 df       	rcall	.-54     	; 0x4602 <__udivmodhi4>
    4638:	06 d0       	rcall	.+12     	; 0x4646 <__divmodhi4_neg1>
    463a:	00 20       	and	r0, r0
    463c:	1a f4       	brpl	.+6      	; 0x4644 <__divmodhi4_exit>

0000463e <__divmodhi4_neg2>:
    463e:	70 95       	com	r23
    4640:	61 95       	neg	r22
    4642:	7f 4f       	sbci	r23, 0xFF	; 255

00004644 <__divmodhi4_exit>:
    4644:	08 95       	ret

00004646 <__divmodhi4_neg1>:
    4646:	f6 f7       	brtc	.-4      	; 0x4644 <__divmodhi4_exit>
    4648:	90 95       	com	r25
    464a:	81 95       	neg	r24
    464c:	9f 4f       	sbci	r25, 0xFF	; 255
    464e:	08 95       	ret

00004650 <__udivmodsi4>:
    4650:	a1 e2       	ldi	r26, 0x21	; 33
    4652:	1a 2e       	mov	r1, r26
    4654:	aa 1b       	sub	r26, r26
    4656:	bb 1b       	sub	r27, r27
    4658:	fd 01       	movw	r30, r26
    465a:	0d c0       	rjmp	.+26     	; 0x4676 <__udivmodsi4_ep>

0000465c <__udivmodsi4_loop>:
    465c:	aa 1f       	adc	r26, r26
    465e:	bb 1f       	adc	r27, r27
    4660:	ee 1f       	adc	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	a2 17       	cp	r26, r18
    4666:	b3 07       	cpc	r27, r19
    4668:	e4 07       	cpc	r30, r20
    466a:	f5 07       	cpc	r31, r21
    466c:	20 f0       	brcs	.+8      	; 0x4676 <__udivmodsi4_ep>
    466e:	a2 1b       	sub	r26, r18
    4670:	b3 0b       	sbc	r27, r19
    4672:	e4 0b       	sbc	r30, r20
    4674:	f5 0b       	sbc	r31, r21

00004676 <__udivmodsi4_ep>:
    4676:	66 1f       	adc	r22, r22
    4678:	77 1f       	adc	r23, r23
    467a:	88 1f       	adc	r24, r24
    467c:	99 1f       	adc	r25, r25
    467e:	1a 94       	dec	r1
    4680:	69 f7       	brne	.-38     	; 0x465c <__udivmodsi4_loop>
    4682:	60 95       	com	r22
    4684:	70 95       	com	r23
    4686:	80 95       	com	r24
    4688:	90 95       	com	r25
    468a:	9b 01       	movw	r18, r22
    468c:	ac 01       	movw	r20, r24
    468e:	bd 01       	movw	r22, r26
    4690:	cf 01       	movw	r24, r30
    4692:	08 95       	ret

00004694 <__divmodsi4>:
    4694:	97 fb       	bst	r25, 7
    4696:	09 2e       	mov	r0, r25
    4698:	05 26       	eor	r0, r21
    469a:	0e d0       	rcall	.+28     	; 0x46b8 <__divmodsi4_neg1>
    469c:	57 fd       	sbrc	r21, 7
    469e:	04 d0       	rcall	.+8      	; 0x46a8 <__divmodsi4_neg2>
    46a0:	d7 df       	rcall	.-82     	; 0x4650 <__udivmodsi4>
    46a2:	0a d0       	rcall	.+20     	; 0x46b8 <__divmodsi4_neg1>
    46a4:	00 1c       	adc	r0, r0
    46a6:	38 f4       	brcc	.+14     	; 0x46b6 <__divmodsi4_exit>

000046a8 <__divmodsi4_neg2>:
    46a8:	50 95       	com	r21
    46aa:	40 95       	com	r20
    46ac:	30 95       	com	r19
    46ae:	21 95       	neg	r18
    46b0:	3f 4f       	sbci	r19, 0xFF	; 255
    46b2:	4f 4f       	sbci	r20, 0xFF	; 255
    46b4:	5f 4f       	sbci	r21, 0xFF	; 255

000046b6 <__divmodsi4_exit>:
    46b6:	08 95       	ret

000046b8 <__divmodsi4_neg1>:
    46b8:	f6 f7       	brtc	.-4      	; 0x46b6 <__divmodsi4_exit>
    46ba:	90 95       	com	r25
    46bc:	80 95       	com	r24
    46be:	70 95       	com	r23
    46c0:	61 95       	neg	r22
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	8f 4f       	sbci	r24, 0xFF	; 255
    46c6:	9f 4f       	sbci	r25, 0xFF	; 255
    46c8:	08 95       	ret

000046ca <_exit>:
    46ca:	f8 94       	cli

000046cc <__stop_program>:
    46cc:	ff cf       	rjmp	.-2      	; 0x46cc <__stop_program>
